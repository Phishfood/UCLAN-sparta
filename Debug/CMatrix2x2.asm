; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

	TITLE	C:\Users\Simon\Documents\GitHub\UCLAN-sparta\Import\Math\CMatrix2x2.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?value@?$integral_constant@I$07@std@@2IB	; std::integral_constant<unsigned int,8>::value
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$03@std@@2IB	; std::integral_constant<unsigned int,4>::value
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?value@?$integral_constant@I$01@std@@2IB	; std::integral_constant<unsigned int,2>::value
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?value@?$integral_constant@I$00@std@@2IB	; std::integral_constant<unsigned int,1>::value
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?value@?$_Maximum@$S@std@@2IB			; std::_Maximum<>::value
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
CONST	SEGMENT
_kfPi	DD	040490fdbr			; 3.14159
_kfEpsilon DD	0350637bdr			; 5e-007
_kfPi64	DQ	0400921fb54442d18r		; 3.14159
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?value@?$_Maximum@$S@std@@2IB
CONST	SEGMENT
?value@?$_Maximum@$S@std@@2IB DD 00H			; std::_Maximum<>::value
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$00@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$00@std@@2IB DD 01H		; std::integral_constant<unsigned int,1>::value
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$01@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$01@std@@2IB DD 02H		; std::integral_constant<unsigned int,2>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$03@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$03@std@@2IB DD 04H		; std::integral_constant<unsigned int,4>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$07@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$07@std@@2IB DD 08H		; std::integral_constant<unsigned int,8>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
PUBLIC	_hypot
PUBLIC	_atan2f
PUBLIC	_cosf
PUBLIC	_fabsf
PUBLIC	_sinf
PUBLIC	_sqrtf
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	??1_Container_base12@std@@QAE@XZ		; std::_Container_base12::~_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?select_on_container_copy_construction@?$allocator@D@std@@QBE?AV12@XZ ; std::allocator<char>::select_on_container_copy_construction
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction
PUBLIC	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<char> >::select_on_container_copy_construction
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
PUBLIC	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z		; std::_Debug_pointer<char>
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?ObjectName@gen@@YAPBDXZ			; gen::ObjectName
PUBLIC	??0CFatalException@gen@@QAE@PBD0H@Z		; gen::CFatalException::CFatalException
PUBLIC	??0CFatalException@gen@@QAE@PBD00@Z		; gen::CFatalException::CFatalException
PUBLIC	??1CFatalException@gen@@QAE@XZ			; gen::CFatalException::~CFatalException
PUBLIC	??0CFatalException@gen@@QAE@ABV01@@Z		; gen::CFatalException::CFatalException
PUBLIC	?Abs@gen@@YAIH@Z				; gen::Abs
PUBLIC	?Abs@gen@@YAMM@Z				; gen::Abs
PUBLIC	?Sqrt@gen@@YAMM@Z				; gen::Sqrt
PUBLIC	?Sin@gen@@YAMM@Z				; gen::Sin
PUBLIC	?Cos@gen@@YAMM@Z				; gen::Cos
PUBLIC	?ATan@gen@@YAMMM@Z				; gen::ATan
PUBLIC	?InvSqrt@gen@@YAMM@Z				; gen::InvSqrt
PUBLIC	?SinCos@gen@@YAXMPAM0@Z				; gen::SinCos
PUBLIC	?IsZero@gen@@YA_NMM@Z				; gen::IsZero
PUBLIC	?AreEqual@gen@@YA_NMMI@Z			; gen::AreEqual
PUBLIC	??0CVector2@gen@@QAE@XZ				; gen::CVector2::CVector2
PUBLIC	??0CVector2@gen@@QAE@MM@Z			; gen::CVector2::CVector2
PUBLIC	??0CVector2@gen@@QAE@PBM@Z			; gen::CVector2::CVector2
PUBLIC	??0CVector2@gen@@QAE@ABV01@@Z			; gen::CVector2::CVector2
PUBLIC	?IsZero@CVector2@gen@@QBE_NXZ			; gen::CVector2::IsZero
PUBLIC	??0CMatrix2x2@gen@@QAE@XZ			; gen::CMatrix2x2::CMatrix2x2
PUBLIC	??0CMatrix2x2@gen@@QAE@MMMM@Z			; gen::CMatrix2x2::CMatrix2x2
PUBLIC	??0CMatrix2x2@gen@@QAE@PBM_N@Z			; gen::CMatrix2x2::CMatrix2x2
PUBLIC	??0CMatrix2x2@gen@@QAE@ABVCVector2@1@0_N@Z	; gen::CMatrix2x2::CMatrix2x2
PUBLIC	??0CMatrix2x2@gen@@QAE@MABVCVector2@1@@Z	; gen::CMatrix2x2::CMatrix2x2
PUBLIC	??0CMatrix2x2@gen@@QAE@ABV01@@Z			; gen::CMatrix2x2::CMatrix2x2
PUBLIC	??4CMatrix2x2@gen@@QAEAAV01@ABV01@@Z		; gen::CMatrix2x2::operator=
PUBLIC	?Set@CMatrix2x2@gen@@QAEXMMMM@Z			; gen::CMatrix2x2::Set
PUBLIC	?Set@CMatrix2x2@gen@@QAEXPBM_N@Z		; gen::CMatrix2x2::Set
PUBLIC	?GetRow@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z	; gen::CMatrix2x2::GetRow
PUBLIC	?GetColumn@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z	; gen::CMatrix2x2::GetColumn
PUBLIC	?SetRow@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z	; gen::CMatrix2x2::SetRow
PUBLIC	?SetColumn@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z ; gen::CMatrix2x2::SetColumn
PUBLIC	?SetRows@CMatrix2x2@gen@@QAEXABVCVector2@2@0@Z	; gen::CMatrix2x2::SetRows
PUBLIC	?SetColumns@CMatrix2x2@gen@@QAEXABVCVector2@2@0@Z ; gen::CMatrix2x2::SetColumns
PUBLIC	?MakeTransform@CMatrix2x2@gen@@QAEXMABVCVector2@2@@Z ; gen::CMatrix2x2::MakeTransform
PUBLIC	?DecomposeTransform@CMatrix2x2@gen@@QBEXPAMPAVCVector2@2@@Z ; gen::CMatrix2x2::DecomposeTransform
PUBLIC	?GetScale@CMatrix2x2@gen@@QBE?AVCVector2@2@XZ	; gen::CMatrix2x2::GetScale
PUBLIC	?SetScaleX@CMatrix2x2@gen@@QAEXM@Z		; gen::CMatrix2x2::SetScaleX
PUBLIC	?SetScaleY@CMatrix2x2@gen@@QAEXM@Z		; gen::CMatrix2x2::SetScaleY
PUBLIC	?SetScale@CMatrix2x2@gen@@QAEXABVCVector2@2@@Z	; gen::CMatrix2x2::SetScale
PUBLIC	?SetScale@CMatrix2x2@gen@@QAEXM@Z		; gen::CMatrix2x2::SetScale
PUBLIC	?IsIdentity@CMatrix2x2@gen@@QBE_NXZ		; gen::CMatrix2x2::IsIdentity
PUBLIC	?IsOrthogonal@CMatrix2x2@gen@@QBE_NXZ		; gen::CMatrix2x2::IsOrthogonal
PUBLIC	?IsOrthonormal@CMatrix2x2@gen@@QBE_NXZ		; gen::CMatrix2x2::IsOrthonormal
PUBLIC	?Orthogonalise@CMatrix2x2@gen@@QAEXABVCVector2@2@@Z ; gen::CMatrix2x2::Orthogonalise
PUBLIC	?Transpose@CMatrix2x2@gen@@QAEXXZ		; gen::CMatrix2x2::Transpose
PUBLIC	?Invert@CMatrix2x2@gen@@QAEXXZ			; gen::CMatrix2x2::Invert
PUBLIC	?MakeIdentity@CMatrix2x2@gen@@QAEXXZ		; gen::CMatrix2x2::MakeIdentity
PUBLIC	?MakeRotation@CMatrix2x2@gen@@QAEXM@Z		; gen::CMatrix2x2::MakeRotation
PUBLIC	?MakeScaling@CMatrix2x2@gen@@QAEXABVCVector2@2@@Z ; gen::CMatrix2x2::MakeScaling
PUBLIC	?MakeScaling@CMatrix2x2@gen@@QAEXM@Z		; gen::CMatrix2x2::MakeScaling
PUBLIC	?FaceDirection@CMatrix2x2@gen@@QAEXABVCVector2@2@_N1@Z ; gen::CMatrix2x2::FaceDirection
PUBLIC	??XCMatrix2x2@gen@@QAEAAV01@M@Z			; gen::CMatrix2x2::operator*=
PUBLIC	??_0CMatrix2x2@gen@@QAEAAV01@M@Z		; gen::CMatrix2x2::operator/=
PUBLIC	?Transform@CMatrix2x2@gen@@QBE?AVCVector2@2@ABV32@@Z ; gen::CMatrix2x2::Transform
PUBLIC	??XCMatrix2x2@gen@@QAEAAV01@ABV01@@Z		; gen::CMatrix2x2::operator*=
PUBLIC	??8gen@@YA_NABVCMatrix2x2@0@0@Z			; gen::operator==
PUBLIC	??9gen@@YA_NABVCMatrix2x2@0@0@Z			; gen::operator!=
PUBLIC	??Dgen@@YA?AVCMatrix2x2@0@MABV10@@Z		; gen::operator*
PUBLIC	??Dgen@@YA?AVCMatrix2x2@0@ABV10@M@Z		; gen::operator*
PUBLIC	??Kgen@@YA?AVCMatrix2x2@0@ABV10@M@Z		; gen::operator/
PUBLIC	??Dgen@@YA?AVCVector2@0@ABV10@ABVCMatrix2x2@0@@Z ; gen::operator*
PUBLIC	??Dgen@@YA?AVCVector2@0@ABVCMatrix2x2@0@ABV10@@Z ; gen::operator*
PUBLIC	??Dgen@@YA?AVCMatrix2x2@0@ABV10@0@Z		; gen::operator*
PUBLIC	?Orthogonalise@gen@@YA?AVCMatrix2x2@1@ABV21@ABVCVector2@1@@Z ; gen::Orthogonalise
PUBLIC	?Transpose@gen@@YA?AVCMatrix2x2@1@ABV21@@Z	; gen::Transpose
PUBLIC	?Inverse@gen@@YA?AVCMatrix2x2@1@ABV21@@Z	; gen::Inverse
PUBLIC	?Matrix2x2Identity@gen@@YA?AVCMatrix2x2@1@XZ	; gen::Matrix2x2Identity
PUBLIC	?Matrix2x2Rotation@gen@@YA?AVCMatrix2x2@1@M@Z	; gen::Matrix2x2Rotation
PUBLIC	?Matrix2x2Scaling@gen@@YA?AVCMatrix2x2@1@ABVCVector2@1@@Z ; gen::Matrix2x2Scaling
PUBLIC	?Matrix2x2Scaling@gen@@YA?AVCMatrix2x2@1@M@Z	; gen::Matrix2x2Scaling
PUBLIC	?MatrixFaceDirection@gen@@YA?AVCMatrix2x2@1@ABVCVector2@1@_N1@Z ; gen::MatrixFaceDirection
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
PUBLIC	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
PUBLIC	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_C@_0CB@NBMGHEOM@Visual?5C?$CL?$CL?58?40?5?$CI2005?$CJ?5or?5greater@ ; `string'
PUBLIC	??_C@_01KICIPPFI@?2?$AA@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_0BE@HBKCGNOA@Unhandled?5Exception?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??InvSqrt@gen@@YAMM@Z@4JA	; `gen::InvSqrt'::`2'::__LINE__Var
PUBLIC	__TI1?AVCFatalException@gen@@
PUBLIC	__CTA1?AVCFatalException@gen@@
PUBLIC	??_R0?AVCFatalException@gen@@@8			; gen::CFatalException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVCFatalException@gen@@@8??0CFatalException@gen@@QAE@ABV01@@Z88
PUBLIC	??_C@_0EE@DHOCJGL@c?3?2users?2simon?2documents?2github?2@ ; `string'
PUBLIC	??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@	; `string'
PUBLIC	??_C@_0N@HFKAOJGM@gen?3?3InvSqrt?$AA@		; `string'
PUBLIC	??_C@_0EE@PNILPMEN@c?3?2users?2simon?2documents?2github?2@ ; `string'
PUBLIC	??_C@_0BI@MENJPPKF@gen?3?3CVector2?3?3CVector2?$AA@ ; `string'
PUBLIC	??_C@_0BA@KCKIPOBF@gen?3?3operator?5?1?$AA@	; `string'
PUBLIC	?kIdentity@CMatrix2x2@gen@@2V12@B		; gen::CMatrix2x2::kIdentity
PUBLIC	?__LINE__Var@?1???0CMatrix2x2@gen@@QAE@PBM_N@Z@4JA ; `gen::CMatrix2x2::CMatrix2x2'::`2'::__LINE__Var
PUBLIC	??_C@_0EI@OOFBLDLJ@c?3?2users?2simon?2documents?2github?2@ ; `string'
PUBLIC	??_C@_0BM@GIJINEOE@gen?3?3CMatrix2x2?3?3CMatrix2x2?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??Set@CMatrix2x2@gen@@QAEXPBM_N@Z@4JA ; `gen::CMatrix2x2::Set'::`2'::__LINE__Var
PUBLIC	??_C@_0BF@KLFHCLMJ@gen?3?3CMatrix2x2?3?3Set?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??GetRow@CMatrix2x2@gen@@QBE?AVCVector2@3@I@Z@4JA ; `gen::CMatrix2x2::GetRow'::`2'::__LINE__Var
PUBLIC	??_C@_0BI@MMGBIIIC@gen?3?3CMatrix2x2?3?3GetRow?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??GetColumn@CMatrix2x2@gen@@QBE?AVCVector2@3@I@Z@4JA ; `gen::CMatrix2x2::GetColumn'::`2'::__LINE__Var
PUBLIC	??_C@_0BL@BKFHPDLC@gen?3?3CMatrix2x2?3?3GetColumn?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??SetRow@CMatrix2x2@gen@@QAEXIABVCVector2@3@@Z@4JA ; `gen::CMatrix2x2::SetRow'::`2'::__LINE__Var
PUBLIC	??_C@_0BI@FPPADAFP@gen?3?3CMatrix2x2?3?3SetRow?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??SetColumn@CMatrix2x2@gen@@QAEXIABVCVector2@3@@Z@4JA ; `gen::CMatrix2x2::SetColumn'::`2'::__LINE__Var
PUBLIC	??_C@_0BL@DEBCNCCA@gen?3?3CMatrix2x2?3?3SetColumn?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??DecomposeTransform@CMatrix2x2@gen@@QBEXPAMPAVCVector2@3@@Z@4JA ; `gen::CMatrix2x2::DecomposeTransform'::`2'::__LINE__Var
PUBLIC	??_C@_0BA@EJDDFENM@Singular?5matrix?$AA@	; `string'
PUBLIC	??_C@_0CE@NJFEKCJ@gen?3?3CMatrix2x2?3?3DecomposeTransf@ ; `string'
PUBLIC	?__LINE__Var@?1??Orthogonalise@CMatrix2x2@gen@@QAEXABVCVector2@3@@Z@4JA ; `gen::CMatrix2x2::Orthogonalise'::`2'::__LINE__Var
PUBLIC	??_C@_0BP@KMLALPAO@gen?3?3CMatrix2x2?3?3Orthogonalise?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??Orthogonalise@gen@@YA?AVCMatrix2x2@2@ABV32@ABVCVector2@2@@Z@4JA ; `gen::Orthogonalise'::`2'::__LINE__Var
PUBLIC	??_C@_0BD@MGLNMEBA@gen?3?3Orthogonalise?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??Invert@CMatrix2x2@gen@@QAEXXZ@4JA ; `gen::CMatrix2x2::Invert'::`2'::__LINE__Var
PUBLIC	??_C@_0BI@NOHGPDIE@gen?3?3CMatrix2x2?3?3Invert?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??Inverse@gen@@YA?AVCMatrix2x2@2@ABV32@@Z@4JA ; `gen::Inverse'::`2'::__LINE__Var
PUBLIC	??_C@_0N@BLGPECID@gen?3?3Inverse?$AA@		; `string'
PUBLIC	?__LINE__Var@?1???_0CMatrix2x2@gen@@QAEAAV12@M@Z@4JA ; `gen::CMatrix2x2::operator/='::`2'::__LINE__Var
PUBLIC	??_C@_0BN@OBIJAJFL@gen?3?3CMatrix2x2?3?3operator?5?1?$DN?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1???Kgen@@YA?AVCMatrix2x2@1@ABV21@M@Z@4JA ; `gen::operator/'::`2'::__LINE__Var
PUBLIC	??_C@_1IO@JLPDPDPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	_abs:PROC
EXTRN	_atan2:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_sin:PROC
EXTRN	_sqrt:PROC
EXTRN	__hypot:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memmove:PROC
EXTRN	?_Debug_message@std@@YAXPB_W0I@Z:PROC		; std::_Debug_message
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	?_Winerror_map@std@@YAPBDH@Z:PROC		; std::_Winerror_map
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z:PROC ; gen::CFatalException::AppendToCallStack
EXTRN	?Normalise@gen@@YA?AVCVector2@1@ABV21@@Z:PROC	; gen::Normalise
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

_ksCompiler DB	01cH DUP (?)
_ksPathSeparator DB 01cH DUP (?)
_ksNewline DB	01cH DUP (?)
?kIdentity@CMatrix2x2@gen@@2V12@B DB 010H DUP (?)	; gen::CMatrix2x2::kIdentity
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
data$r	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
data$r	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
data$r	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
data$r	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p'
	DB	00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1IO@JLPDPDPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1IO@JLPDPDPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '2', 00H, '.', 00H, '0', 00H, '\', 00H, 'v'
	DB	00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1???Kgen@@YA?AVCMatrix2x2@1@ABV21@M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1???Kgen@@YA?AVCMatrix2x2@1@ABV21@M@Z@4JA DD 03a9H ; `gen::operator/'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BN@OBIJAJFL@gen?3?3CMatrix2x2?3?3operator?5?1?$DN?$AA@
CONST	SEGMENT
??_C@_0BN@OBIJAJFL@gen?3?3CMatrix2x2?3?3operator?5?1?$DN?$AA@ DB 'gen::CM'
	DB	'atrix2x2::operator /=', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1???_0CMatrix2x2@gen@@QAEAAV12@M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1???_0CMatrix2x2@gen@@QAEAAV12@M@Z@4JA DD 0395H ; `gen::CMatrix2x2::operator/='::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0N@BLGPECID@gen?3?3Inverse?$AA@
CONST	SEGMENT
??_C@_0N@BLGPECID@gen?3?3Inverse?$AA@ DB 'gen::Inverse', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Inverse@gen@@YA?AVCMatrix2x2@2@ABV32@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Inverse@gen@@YA?AVCMatrix2x2@2@ABV32@@Z@4JA DD 0258H ; `gen::Inverse'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BI@NOHGPDIE@gen?3?3CMatrix2x2?3?3Invert?$AA@
CONST	SEGMENT
??_C@_0BI@NOHGPDIE@gen?3?3CMatrix2x2?3?3Invert?$AA@ DB 'gen::CMatrix2x2::'
	DB	'Invert', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Invert@CMatrix2x2@gen@@QAEXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Invert@CMatrix2x2@gen@@QAEXXZ@4JA DD 0242H ; `gen::CMatrix2x2::Invert'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BD@MGLNMEBA@gen?3?3Orthogonalise?$AA@
CONST	SEGMENT
??_C@_0BD@MGLNMEBA@gen?3?3Orthogonalise?$AA@ DB 'gen::Orthogonalise', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Orthogonalise@gen@@YA?AVCMatrix2x2@2@ABV32@ABVCVector2@2@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Orthogonalise@gen@@YA?AVCMatrix2x2@2@ABV32@ABVCVector2@2@@Z@4JA DD 01fcH ; `gen::Orthogonalise'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BP@KMLALPAO@gen?3?3CMatrix2x2?3?3Orthogonalise?$AA@
CONST	SEGMENT
??_C@_0BP@KMLALPAO@gen?3?3CMatrix2x2?3?3Orthogonalise?$AA@ DB 'gen::CMatr'
	DB	'ix2x2::Orthogonalise', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Orthogonalise@CMatrix2x2@gen@@QAEXABVCVector2@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Orthogonalise@CMatrix2x2@gen@@QAEXABVCVector2@3@@Z@4JA DD 01d3H ; `gen::CMatrix2x2::Orthogonalise'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CE@NJFEKCJ@gen?3?3CMatrix2x2?3?3DecomposeTransf@
CONST	SEGMENT
??_C@_0CE@NJFEKCJ@gen?3?3CMatrix2x2?3?3DecomposeTransf@ DB 'gen::CMatrix2'
	DB	'x2::DecomposeTransform', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EJDDFENM@Singular?5matrix?$AA@
CONST	SEGMENT
??_C@_0BA@EJDDFENM@Singular?5matrix?$AA@ DB 'Singular matrix', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??DecomposeTransform@CMatrix2x2@gen@@QBEXPAMPAVCVector2@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??DecomposeTransform@CMatrix2x2@gen@@QBEXPAMPAVCVector2@3@@Z@4JA DD 013bH ; `gen::CMatrix2x2::DecomposeTransform'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BL@DEBCNCCA@gen?3?3CMatrix2x2?3?3SetColumn?$AA@
CONST	SEGMENT
??_C@_0BL@DEBCNCCA@gen?3?3CMatrix2x2?3?3SetColumn?$AA@ DB 'gen::CMatrix2x'
	DB	'2::SetColumn', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??SetColumn@CMatrix2x2@gen@@QAEXIABVCVector2@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??SetColumn@CMatrix2x2@gen@@QAEXIABVCVector2@3@@Z@4JA DD 0f3H ; `gen::CMatrix2x2::SetColumn'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BI@FPPADAFP@gen?3?3CMatrix2x2?3?3SetRow?$AA@
CONST	SEGMENT
??_C@_0BI@FPPADAFP@gen?3?3CMatrix2x2?3?3SetRow?$AA@ DB 'gen::CMatrix2x2::'
	DB	'SetRow', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??SetRow@CMatrix2x2@gen@@QAEXIABVCVector2@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??SetRow@CMatrix2x2@gen@@QAEXIABVCVector2@3@@Z@4JA DD 0e2H ; `gen::CMatrix2x2::SetRow'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BL@BKFHPDLC@gen?3?3CMatrix2x2?3?3GetColumn?$AA@
CONST	SEGMENT
??_C@_0BL@BKFHPDLC@gen?3?3CMatrix2x2?3?3GetColumn?$AA@ DB 'gen::CMatrix2x'
	DB	'2::GetColumn', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??GetColumn@CMatrix2x2@gen@@QBE?AVCVector2@3@I@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetColumn@CMatrix2x2@gen@@QBE?AVCVector2@3@I@Z@4JA DD 0d1H ; `gen::CMatrix2x2::GetColumn'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BI@MMGBIIIC@gen?3?3CMatrix2x2?3?3GetRow?$AA@
CONST	SEGMENT
??_C@_0BI@MMGBIIIC@gen?3?3CMatrix2x2?3?3GetRow?$AA@ DB 'gen::CMatrix2x2::'
	DB	'GetRow', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??GetRow@CMatrix2x2@gen@@QBE?AVCVector2@3@I@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetRow@CMatrix2x2@gen@@QBE?AVCVector2@3@I@Z@4JA DD 0c6H ; `gen::CMatrix2x2::GetRow'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BF@KLFHCLMJ@gen?3?3CMatrix2x2?3?3Set?$AA@
CONST	SEGMENT
??_C@_0BF@KLFHCLMJ@gen?3?3CMatrix2x2?3?3Set?$AA@ DB 'gen::CMatrix2x2::Set'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Set@CMatrix2x2@gen@@QAEXPBM_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Set@CMatrix2x2@gen@@QAEXPBM_N@Z@4JA DD 0a7H ; `gen::CMatrix2x2::Set'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BM@GIJINEOE@gen?3?3CMatrix2x2?3?3CMatrix2x2?$AA@
CONST	SEGMENT
??_C@_0BM@GIJINEOE@gen?3?3CMatrix2x2?3?3CMatrix2x2?$AA@ DB 'gen::CMatrix2'
	DB	'x2::CMatrix2x2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@OOFBLDLJ@c?3?2users?2simon?2documents?2github?2@
CONST	SEGMENT
??_C@_0EI@OOFBLDLJ@c?3?2users?2simon?2documents?2github?2@ DB 'c:\users\s'
	DB	'imon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1???0CMatrix2x2@gen@@QAE@PBM_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1???0CMatrix2x2@gen@@QAE@PBM_N@Z@4JA DD 030H ; `gen::CMatrix2x2::CMatrix2x2'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BA@KCKIPOBF@gen?3?3operator?5?1?$AA@
CONST	SEGMENT
??_C@_0BA@KCKIPOBF@gen?3?3operator?5?1?$AA@ DB 'gen::operator /', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MENJPPKF@gen?3?3CVector2?3?3CVector2?$AA@
CONST	SEGMENT
??_C@_0BI@MENJPPKF@gen?3?3CVector2?3?3CVector2?$AA@ DB 'gen::CVector2::CV'
	DB	'ector2', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@PNILPMEN@c?3?2users?2simon?2documents?2github?2@
CONST	SEGMENT
??_C@_0EE@PNILPMEN@c?3?2users?2simon?2documents?2github?2@ DB 'c:\users\s'
	DB	'imon\documents\github\uclan-sparta\import\math\cvector2.h', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HFKAOJGM@gen?3?3InvSqrt?$AA@
CONST	SEGMENT
??_C@_0N@HFKAOJGM@gen?3?3InvSqrt?$AA@ DB 'gen::InvSqrt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@
CONST	SEGMENT
??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@ DB 'Invalid parameter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@DHOCJGL@c?3?2users?2simon?2documents?2github?2@
CONST	SEGMENT
??_C@_0EE@DHOCJGL@c?3?2users?2simon?2documents?2github?2@ DB 'c:\users\si'
	DB	'mon\documents\github\uclan-sparta\import\math\basemath.h', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVCFatalException@gen@@@8??0CFatalException@gen@@QAE@ABV01@@Z88
xdata$x	SEGMENT
__CT??_R0?AVCFatalException@gen@@@8??0CFatalException@gen@@QAE@ABV01@@Z88 DD 00H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	058H
	DD	FLAT:??0CFatalException@gen@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVCFatalException@gen@@@8
data$r	SEGMENT
??_R0?AVCFatalException@gen@@@8 DD FLAT:??_7type_info@@6B@ ; gen::CFatalException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFatalException@gen@@', 00H
data$r	ENDS
;	COMDAT __CTA1?AVCFatalException@gen@@
xdata$x	SEGMENT
__CTA1?AVCFatalException@gen@@ DD 01H
	DD	FLAT:__CT??_R0?AVCFatalException@gen@@@8??0CFatalException@gen@@QAE@ABV01@@Z88
xdata$x	ENDS
;	COMDAT __TI1?AVCFatalException@gen@@
xdata$x	SEGMENT
__TI1?AVCFatalException@gen@@ DD 00H
	DD	FLAT:??1CFatalException@gen@@QAE@XZ
	DD	00H
	DD	FLAT:__CTA1?AVCFatalException@gen@@
xdata$x	ENDS
;	COMDAT ?__LINE__Var@?1??InvSqrt@gen@@YAMM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??InvSqrt@gen@@YAMM@Z@4JA DD 09eH	; `gen::InvSqrt'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BE@HBKCGNOA@Unhandled?5Exception?$AA@
CONST	SEGMENT
??_C@_0BE@HBKCGNOA@Unhandled?5Exception?$AA@ DB 'Unhandled Exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KICIPPFI@?2?$AA@
CONST	SEGMENT
??_C@_01KICIPPFI@?2?$AA@ DB '\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NBMGHEOM@Visual?5C?$CL?$CL?58?40?5?$CI2005?$CJ?5or?5greater@
CONST	SEGMENT
??_C@_0CB@NBMGHEOM@Visual?5C?$CL?$CL?58?40?5?$CI2005?$CJ?5or?5greater@ DB 'V'
	DB	'isual C++ 8.0 (2005) or greater', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
CONST	SEGMENT
?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB DD 0ffffffffH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0
__ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Inverse@gen@@YA?AVCMatrix2x2@1@ABV21@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?Inverse@gen@@YA?AVCMatrix2x2@1@ABV21@@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?Inverse@gen@@YA?AVCMatrix2x2@1@ABV21@@Z$3
__catchsym$?Inverse@gen@@YA?AVCMatrix2x2@1@ABV21@@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffb4H
	DD	FLAT:__catch$?Inverse@gen@@YA?AVCMatrix2x2@1@ABV21@@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Inverse@gen@@YA?AVCMatrix2x2@1@ABV21@@Z$1
__ehfuncinfo$?Inverse@gen@@YA?AVCMatrix2x2@1@ABV21@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Inverse@gen@@YA?AVCMatrix2x2@1@ABV21@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Inverse@gen@@YA?AVCMatrix2x2@1@ABV21@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Orthogonalise@gen@@YA?AVCMatrix2x2@1@ABV21@ABVCVector2@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?Orthogonalise@gen@@YA?AVCMatrix2x2@1@ABV21@ABVCVector2@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?Orthogonalise@gen@@YA?AVCMatrix2x2@1@ABV21@ABVCVector2@1@@Z$3
__catchsym$?Orthogonalise@gen@@YA?AVCMatrix2x2@1@ABV21@ABVCVector2@1@@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffa8H
	DD	FLAT:__catch$?Orthogonalise@gen@@YA?AVCMatrix2x2@1@ABV21@ABVCVector2@1@@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Orthogonalise@gen@@YA?AVCMatrix2x2@1@ABV21@ABVCVector2@1@@Z$1
__ehfuncinfo$?Orthogonalise@gen@@YA?AVCMatrix2x2@1@ABV21@ABVCVector2@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Orthogonalise@gen@@YA?AVCMatrix2x2@1@ABV21@ABVCVector2@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Orthogonalise@gen@@YA?AVCMatrix2x2@1@ABV21@ABVCVector2@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??Kgen@@YA?AVCMatrix2x2@0@ABV10@M@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??Kgen@@YA?AVCMatrix2x2@0@ABV10@M@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$??Kgen@@YA?AVCMatrix2x2@0@ABV10@M@Z$3
__catchsym$??Kgen@@YA?AVCMatrix2x2@0@ABV10@M@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffccH
	DD	FLAT:__catch$??Kgen@@YA?AVCMatrix2x2@0@ABV10@M@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??Kgen@@YA?AVCMatrix2x2@0@ABV10@M@Z$1
__ehfuncinfo$??Kgen@@YA?AVCMatrix2x2@0@ABV10@M@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??Kgen@@YA?AVCMatrix2x2@0@ABV10@M@Z
	DD	01H
	DD	FLAT:__tryblocktable$??Kgen@@YA?AVCMatrix2x2@0@ABV10@M@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_0CMatrix2x2@gen@@QAEAAV01@M@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??_0CMatrix2x2@gen@@QAEAAV01@M@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$??_0CMatrix2x2@gen@@QAEAAV01@M@Z$3
__catchsym$??_0CMatrix2x2@gen@@QAEAAV01@M@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffd8H
	DD	FLAT:__catch$??_0CMatrix2x2@gen@@QAEAAV01@M@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??_0CMatrix2x2@gen@@QAEAAV01@M@Z$1
__ehfuncinfo$??_0CMatrix2x2@gen@@QAEAAV01@M@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_0CMatrix2x2@gen@@QAEAAV01@M@Z
	DD	01H
	DD	FLAT:__tryblocktable$??_0CMatrix2x2@gen@@QAEAAV01@M@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Invert@CMatrix2x2@gen@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?Invert@CMatrix2x2@gen@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?Invert@CMatrix2x2@gen@@QAEXXZ$3
__catchsym$?Invert@CMatrix2x2@gen@@QAEXXZ$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffb4H
	DD	FLAT:__catch$?Invert@CMatrix2x2@gen@@QAEXXZ$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Invert@CMatrix2x2@gen@@QAEXXZ$1
__ehfuncinfo$?Invert@CMatrix2x2@gen@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Invert@CMatrix2x2@gen@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?Invert@CMatrix2x2@gen@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Orthogonalise@CMatrix2x2@gen@@QAEXABVCVector2@2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?Orthogonalise@CMatrix2x2@gen@@QAEXABVCVector2@2@@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?Orthogonalise@CMatrix2x2@gen@@QAEXABVCVector2@2@@Z$3
__catchsym$?Orthogonalise@CMatrix2x2@gen@@QAEXABVCVector2@2@@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffb4H
	DD	FLAT:__catch$?Orthogonalise@CMatrix2x2@gen@@QAEXABVCVector2@2@@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Orthogonalise@CMatrix2x2@gen@@QAEXABVCVector2@2@@Z$1
__ehfuncinfo$?Orthogonalise@CMatrix2x2@gen@@QAEXABVCVector2@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Orthogonalise@CMatrix2x2@gen@@QAEXABVCVector2@2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Orthogonalise@CMatrix2x2@gen@@QAEXABVCVector2@2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?DecomposeTransform@CMatrix2x2@gen@@QBEXPAMPAVCVector2@2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?DecomposeTransform@CMatrix2x2@gen@@QBEXPAMPAVCVector2@2@@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?DecomposeTransform@CMatrix2x2@gen@@QBEXPAMPAVCVector2@2@@Z$3
__catchsym$?DecomposeTransform@CMatrix2x2@gen@@QBEXPAMPAVCVector2@2@@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffb4H
	DD	FLAT:__catch$?DecomposeTransform@CMatrix2x2@gen@@QBEXPAMPAVCVector2@2@@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?DecomposeTransform@CMatrix2x2@gen@@QBEXPAMPAVCVector2@2@@Z$1
__ehfuncinfo$?DecomposeTransform@CMatrix2x2@gen@@QBEXPAMPAVCVector2@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?DecomposeTransform@CMatrix2x2@gen@@QBEXPAMPAVCVector2@2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?DecomposeTransform@CMatrix2x2@gen@@QBEXPAMPAVCVector2@2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetColumn@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?SetColumn@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?SetColumn@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z$3
__catchsym$?SetColumn@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffccH
	DD	FLAT:__catch$?SetColumn@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?SetColumn@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z$1
__ehfuncinfo$?SetColumn@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SetColumn@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?SetColumn@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetRow@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?SetRow@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?SetRow@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z$3
__catchsym$?SetRow@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffccH
	DD	FLAT:__catch$?SetRow@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?SetRow@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z$1
__ehfuncinfo$?SetRow@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SetRow@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?SetRow@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetColumn@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?GetColumn@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?GetColumn@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z$3
__catchsym$?GetColumn@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffccH
	DD	FLAT:__catch$?GetColumn@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?GetColumn@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z$1
__ehfuncinfo$?GetColumn@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetColumn@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z
	DD	01H
	DD	FLAT:__tryblocktable$?GetColumn@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetRow@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?GetRow@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?GetRow@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z$3
__catchsym$?GetRow@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffd8H
	DD	FLAT:__catch$?GetRow@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?GetRow@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z$1
__ehfuncinfo$?GetRow@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetRow@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z
	DD	01H
	DD	FLAT:__tryblocktable$?GetRow@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Set@CMatrix2x2@gen@@QAEXPBM_N@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?Set@CMatrix2x2@gen@@QAEXPBM_N@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?Set@CMatrix2x2@gen@@QAEXPBM_N@Z$3
__catchsym$?Set@CMatrix2x2@gen@@QAEXPBM_N@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffd8H
	DD	FLAT:__catch$?Set@CMatrix2x2@gen@@QAEXPBM_N@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Set@CMatrix2x2@gen@@QAEXPBM_N@Z$1
__ehfuncinfo$?Set@CMatrix2x2@gen@@QAEXPBM_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Set@CMatrix2x2@gen@@QAEXPBM_N@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Set@CMatrix2x2@gen@@QAEXPBM_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CMatrix2x2@gen@@QAE@PBM_N@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0CMatrix2x2@gen@@QAE@PBM_N@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$??0CMatrix2x2@gen@@QAE@PBM_N@Z$3
__catchsym$??0CMatrix2x2@gen@@QAE@PBM_N@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffd8H
	DD	FLAT:__catch$??0CMatrix2x2@gen@@QAE@PBM_N@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0CMatrix2x2@gen@@QAE@PBM_N@Z$1
__ehfuncinfo$??0CMatrix2x2@gen@@QAE@PBM_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CMatrix2x2@gen@@QAE@PBM_N@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0CMatrix2x2@gen@@QAE@PBM_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CVector2@gen@@QAE@PBM@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0CVector2@gen@@QAE@PBM@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$??0CVector2@gen@@QAE@PBM@Z$3
__catchsym$??0CVector2@gen@@QAE@PBM@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffd8H
	DD	FLAT:__catch$??0CVector2@gen@@QAE@PBM@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0CVector2@gen@@QAE@PBM@Z$1
__ehfuncinfo$??0CVector2@gen@@QAE@PBM@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CVector2@gen@@QAE@PBM@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0CVector2@gen@@QAE@PBM@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?InvSqrt@gen@@YAMM@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?InvSqrt@gen@@YAMM@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?InvSqrt@gen@@YAMM@Z$3
__catchsym$?InvSqrt@gen@@YAMM@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffe4H
	DD	FLAT:__catch$?InvSqrt@gen@@YAMM@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?InvSqrt@gen@@YAMM@Z$1
__ehfuncinfo$?InvSqrt@gen@@YAMM@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?InvSqrt@gen@@YAMM@Z
	DD	01H
	DD	FLAT:__tryblocktable$?InvSqrt@gen@@YAMM@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CFatalException@gen@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CFatalException@gen@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CFatalException@gen@@QAE@ABV01@@Z$1
__ehfuncinfo$??0CFatalException@gen@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CFatalException@gen@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CFatalException@gen@@QAE@PBD00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CFatalException@gen@@QAE@PBD00@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CFatalException@gen@@QAE@PBD00@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CFatalException@gen@@QAE@PBD00@Z$2
__ehfuncinfo$??0CFatalException@gen@@QAE@PBD00@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CFatalException@gen@@QAE@PBD00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CFatalException@gen@@QAE@PBD0H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CFatalException@gen@@QAE@PBD0H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CFatalException@gen@@QAE@PBD0H@Z$1
__ehfuncinfo$??0CFatalException@gen@@QAE@PBD0H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CFatalException@gen@@QAE@PBD0H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0
__ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_ksCompiler$initializer$ DD FLAT:??__EksCompiler@gen@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_ksPathSeparator$initializer$ DD FLAT:??__EksPathSeparator@gen@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_ksNewline$initializer$ DD FLAT:??__EksNewline@gen@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?kIdentity$initializer$@CMatrix2x2@gen@@2P6AXXZA DD FLAT:??__E?kIdentity@CMatrix2x2@gen@@2V12@B@@YAXXZ ; gen::CMatrix2x2::kIdentity$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@_W@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<wchar_t>::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 605  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 606  : 		{	// destroy object at _Ptr
; 607  : 		_Ptr->~_Uty();
; 608  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
tv73 = -244						; size = 4
$T2 = -236						; size = 4
$T3 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 601  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 1504 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 728  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 729  : 		{	// destroy object at _Ptr
; 730  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 731  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 720  : 		static void construct(_Alloc& _Al, _Objty *_Ptr,

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 721  : 			_Types&&... _Args)
; 722  : 		{	// construct _Objty(_Types...) at _Ptr
; 723  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>

; 724  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1504 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$di	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 611  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$di	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 611  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$di	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 611  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
_TEXT	SEGMENT
__Ptr$ = -8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z PROC ; std::_Allocate<std::_Container_proxy>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	call	?_Xbad_alloc@std@@YAXXZ			; std::_Xbad_alloc
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ENDP ; std::_Allocate<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>, COMDAT
; _this$ = ecx

; 605  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 606  : 		{	// destroy object at _Ptr
; 607  : 		_Ptr->~_Uty();
; 608  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ENDP ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
_TEXT	SEGMENT
tv74 = -244						; size = 4
$T2 = -236						; size = 4
$T3 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; _this$ = ecx

; 598  : 		void construct(_Objty *_Ptr, _Types&&... _Args)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 599  : 		{	// construct _Objty(_Types...) at _Ptr
; 600  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv74[ebp], edx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@construct:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1

; 601  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ENDP ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 577  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 578  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
	add	esp, 8

; 579  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::deallocate, COMDAT
; _this$ = ecx

; 572  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 573  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 574  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ PROC	; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>, COMDAT
; _this$ = ecx

; 552  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ENDP	; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 92   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 93   : 	return (reinterpret_cast<_Ty *>(
; 94   : 		(&const_cast<char&>(
; 95   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 96   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 877  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 878  : 		{	// destroy object at _Ptr
; 879  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 880  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 868  : 		void construct(_Ty *_Ptr,

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 869  : 			_Types&&... _Args)
; 870  : 		{	// construct _Ty(_Types...) at _Ptr
; 871  : 		_Mytraits::construct(*this, _Ptr,
; 872  : 			_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH

; 873  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ??__E?kIdentity@CMatrix2x2@gen@@2V12@B@@YAXXZ
text$di	SEGMENT
??__E?kIdentity@CMatrix2x2@gen@@2V12@B@@YAXXZ PROC	; `dynamic initializer for 'gen::CMatrix2x2::kIdentity'', COMDAT

; 1049 :                                        0.0f, 1.0f);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?kIdentity@CMatrix2x2@gen@@2V12@B ; gen::CMatrix2x2::kIdentity
	call	??0CMatrix2x2@gen@@QAE@MMMM@Z		; gen::CMatrix2x2::CMatrix2x2
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?kIdentity@CMatrix2x2@gen@@2V12@B@@YAXXZ ENDP	; `dynamic initializer for 'gen::CMatrix2x2::kIdentity''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?MatrixFaceDirection@gen@@YA?AVCMatrix2x2@1@ABVCVector2@1@_N1@Z
_TEXT	SEGMENT
_axis$ = -36						; size = 8
_m$ = -20						; size = 16
___$ReturnUdt$ = 8					; size = 4
_direction$ = 12					; size = 4
_bUseYAxis$ = 16					; size = 1
_bLH$ = 20						; size = 1
?MatrixFaceDirection@gen@@YA?AVCMatrix2x2@1@ABVCVector2@1@_N1@Z PROC ; gen::MatrixFaceDirection, COMDAT

; 796  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 797  : 	CMatrix2x2 m;

	lea	ecx, DWORD PTR _m$[ebp]
	call	??0CMatrix2x2@gen@@QAE@XZ		; gen::CMatrix2x2::CMatrix2x2

; 798  : 
; 799  : 	CVector2 axis = Normalise( direction );

	mov	eax, DWORD PTR _direction$[ebp]
	push	eax
	lea	ecx, DWORD PTR _axis$[ebp]
	push	ecx
	call	?Normalise@gen@@YA?AVCVector2@1@ABV21@@Z ; gen::Normalise
	add	esp, 8

; 800  : 	if (axis.IsZero()) return CMatrix2x2::kIdentity;

	lea	ecx, DWORD PTR _axis$[ebp]
	call	?IsZero@CVector2@gen@@QBE_NXZ		; gen::CVector2::IsZero
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@MatrixFace
	push	OFFSET ?kIdentity@CMatrix2x2@gen@@2V12@B ; gen::CMatrix2x2::kIdentity
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix2x2@gen@@QAE@ABV01@@Z		; gen::CMatrix2x2::CMatrix2x2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN8@MatrixFace
$LN7@MatrixFace:

; 801  : 	if (bUseYAxis)

	movzx	eax, BYTE PTR _bUseYAxis$[ebp]
	test	eax, eax
	je	SHORT $LN6@MatrixFace

; 802  : 	{
; 803  : 		m.e10 = axis.x;

	movss	xmm0, DWORD PTR _axis$[ebp]
	movss	DWORD PTR _m$[ebp+8], xmm0

; 804  : 		m.e11 = axis.y;

	movss	xmm0, DWORD PTR _axis$[ebp+4]
	movss	DWORD PTR _m$[ebp+12], xmm0

; 805  : 		if (bLH)

	movzx	eax, BYTE PTR _bLH$[ebp]
	test	eax, eax
	je	SHORT $LN5@MatrixFace

; 806  : 		{
; 807  : 			m.e00 = m.e11;

	movss	xmm0, DWORD PTR _m$[ebp+12]
	movss	DWORD PTR _m$[ebp], xmm0

; 808  : 			m.e01 = -m.e10;

	movss	xmm0, DWORD PTR _m$[ebp+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _m$[ebp+4], xmm0

; 809  : 		}
; 810  : 		else

	jmp	SHORT $LN4@MatrixFace
$LN5@MatrixFace:

; 811  : 		{
; 812  : 			m.e00 = -m.e11;

	movss	xmm0, DWORD PTR _m$[ebp+12]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _m$[ebp], xmm0

; 813  : 			m.e01 = m.e10;

	movss	xmm0, DWORD PTR _m$[ebp+8]
	movss	DWORD PTR _m$[ebp+4], xmm0
$LN4@MatrixFace:

; 814  : 		}
; 815  : 	}
; 816  : 	else

	jmp	SHORT $LN1@MatrixFace
$LN6@MatrixFace:

; 817  : 	{
; 818  : 		m.e00 = axis.x;

	movss	xmm0, DWORD PTR _axis$[ebp]
	movss	DWORD PTR _m$[ebp], xmm0

; 819  : 		m.e01 = axis.y;

	movss	xmm0, DWORD PTR _axis$[ebp+4]
	movss	DWORD PTR _m$[ebp+4], xmm0

; 820  : 		if (bLH)

	movzx	eax, BYTE PTR _bLH$[ebp]
	test	eax, eax
	je	SHORT $LN2@MatrixFace

; 821  : 		{
; 822  : 			m.e11 = -m.e00;

	movss	xmm0, DWORD PTR _m$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _m$[ebp+12], xmm0

; 823  : 			m.e10 = m.e01;

	movss	xmm0, DWORD PTR _m$[ebp+4]
	movss	DWORD PTR _m$[ebp+8], xmm0

; 824  : 		}
; 825  : 		else

	jmp	SHORT $LN1@MatrixFace
$LN2@MatrixFace:

; 826  : 		{
; 827  : 			m.e11 = m.e00;

	movss	xmm0, DWORD PTR _m$[ebp]
	movss	DWORD PTR _m$[ebp+12], xmm0

; 828  : 			m.e10 = -m.e01;

	movss	xmm0, DWORD PTR _m$[ebp+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _m$[ebp+8], xmm0
$LN1@MatrixFace:

; 829  : 		}
; 830  : 	}
; 831  : 
; 832  : 	return m;

	lea	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix2x2@gen@@QAE@ABV01@@Z		; gen::CMatrix2x2::CMatrix2x2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN8@MatrixFace:

; 833  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@MatrixFace
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@MatrixFace:
	DD	2
	DD	$LN12@MatrixFace
$LN12@MatrixFace:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$LN10@MatrixFace
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN11@MatrixFace
$LN11@MatrixFace:
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	0
$LN10@MatrixFace:
	DB	109					; 0000006dH
	DB	0
?MatrixFaceDirection@gen@@YA?AVCMatrix2x2@1@ABVCVector2@1@_N1@Z ENDP ; gen::MatrixFaceDirection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?Matrix2x2Scaling@gen@@YA?AVCMatrix2x2@1@M@Z
_TEXT	SEGMENT
_m$ = -20						; size = 16
___$ReturnUdt$ = 8					; size = 4
_fScale$ = 12						; size = 4
?Matrix2x2Scaling@gen@@YA?AVCMatrix2x2@1@M@Z PROC	; gen::Matrix2x2Scaling, COMDAT

; 728  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 729  : 	CMatrix2x2 m;

	lea	ecx, DWORD PTR _m$[ebp]
	call	??0CMatrix2x2@gen@@QAE@XZ		; gen::CMatrix2x2::CMatrix2x2

; 730  : 
; 731  : 	m.e00 = fScale;

	movss	xmm0, DWORD PTR _fScale$[ebp]
	movss	DWORD PTR _m$[ebp], xmm0

; 732  : 	m.e01 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+4], xmm0

; 733  : 
; 734  : 	m.e10 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+8], xmm0

; 735  : 	m.e11 = fScale;

	movss	xmm0, DWORD PTR _fScale$[ebp]
	movss	DWORD PTR _m$[ebp+12], xmm0

; 736  : 
; 737  : 	return m;

	lea	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix2x2@gen@@QAE@ABV01@@Z		; gen::CMatrix2x2::CMatrix2x2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 738  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Matrix2x2S
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@Matrix2x2S:
	DD	1
	DD	$LN4@Matrix2x2S
$LN4@Matrix2x2S:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$LN3@Matrix2x2S
$LN3@Matrix2x2S:
	DB	109					; 0000006dH
	DB	0
?Matrix2x2Scaling@gen@@YA?AVCMatrix2x2@1@M@Z ENDP	; gen::Matrix2x2Scaling
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?Matrix2x2Scaling@gen@@YA?AVCMatrix2x2@1@ABVCVector2@1@@Z
_TEXT	SEGMENT
_m$ = -20						; size = 16
___$ReturnUdt$ = 8					; size = 4
_scale$ = 12						; size = 4
?Matrix2x2Scaling@gen@@YA?AVCMatrix2x2@1@ABVCVector2@1@@Z PROC ; gen::Matrix2x2Scaling, COMDAT

; 714  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 715  : 	CMatrix2x2 m;

	lea	ecx, DWORD PTR _m$[ebp]
	call	??0CMatrix2x2@gen@@QAE@XZ		; gen::CMatrix2x2::CMatrix2x2

; 716  : 
; 717  : 	m.e00 = scale.x;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _m$[ebp], xmm0

; 718  : 	m.e01 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+4], xmm0

; 719  : 
; 720  : 	m.e10 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+8], xmm0

; 721  : 	m.e11 = scale.y;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _m$[ebp+12], xmm0

; 722  : 
; 723  : 	return m;

	lea	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix2x2@gen@@QAE@ABV01@@Z		; gen::CMatrix2x2::CMatrix2x2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 724  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Matrix2x2S
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Matrix2x2S:
	DD	1
	DD	$LN4@Matrix2x2S
$LN4@Matrix2x2S:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$LN3@Matrix2x2S
$LN3@Matrix2x2S:
	DB	109					; 0000006dH
	DB	0
?Matrix2x2Scaling@gen@@YA?AVCMatrix2x2@1@ABVCVector2@1@@Z ENDP ; gen::Matrix2x2Scaling
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?Matrix2x2Rotation@gen@@YA?AVCMatrix2x2@1@M@Z
_TEXT	SEGMENT
_c$ = -44						; size = 4
_s$ = -32						; size = 4
_m$ = -20						; size = 16
___$ReturnUdt$ = 8					; size = 4
_fAngle$ = 12						; size = 4
?Matrix2x2Rotation@gen@@YA?AVCMatrix2x2@1@M@Z PROC	; gen::Matrix2x2Rotation, COMDAT

; 696  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 697  : 	CMatrix2x2 m;

	lea	ecx, DWORD PTR _m$[ebp]
	call	??0CMatrix2x2@gen@@QAE@XZ		; gen::CMatrix2x2::CMatrix2x2

; 698  : 
; 699  : 	TFloat32 s, c;
; 700  : 	SinCos( fAngle, &s, &c );

	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _fAngle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SinCos@gen@@YAXMPAM0@Z			; gen::SinCos
	add	esp, 12					; 0000000cH

; 701  : 
; 702  : 	m.e00 = c;

	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR _m$[ebp], xmm0

; 703  : 	m.e01 = s;

	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _m$[ebp+4], xmm0

; 704  : 
; 705  : 	m.e10 = -s;

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _m$[ebp+8], xmm0

; 706  : 	m.e11 = c;

	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR _m$[ebp+12], xmm0

; 707  : 
; 708  : 	return m;

	lea	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix2x2@gen@@QAE@ABV01@@Z		; gen::CMatrix2x2::CMatrix2x2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 709  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Matrix2x2R
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@Matrix2x2R:
	DD	3
	DD	$LN6@Matrix2x2R
$LN6@Matrix2x2R:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$LN3@Matrix2x2R
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN4@Matrix2x2R
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN5@Matrix2x2R
$LN5@Matrix2x2R:
	DB	99					; 00000063H
	DB	0
$LN4@Matrix2x2R:
	DB	115					; 00000073H
	DB	0
$LN3@Matrix2x2R:
	DB	109					; 0000006dH
	DB	0
?Matrix2x2Rotation@gen@@YA?AVCMatrix2x2@1@M@Z ENDP	; gen::Matrix2x2Rotation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?Matrix2x2Identity@gen@@YA?AVCMatrix2x2@1@XZ
_TEXT	SEGMENT
_m$ = -20						; size = 16
___$ReturnUdt$ = 8					; size = 4
?Matrix2x2Identity@gen@@YA?AVCMatrix2x2@1@XZ PROC	; gen::Matrix2x2Identity, COMDAT

; 682  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 683  : 	CMatrix2x2 m;

	lea	ecx, DWORD PTR _m$[ebp]
	call	??0CMatrix2x2@gen@@QAE@XZ		; gen::CMatrix2x2::CMatrix2x2

; 684  : 
; 685  : 	m.e00 = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _m$[ebp], xmm0

; 686  : 	m.e01 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+4], xmm0

; 687  : 
; 688  : 	m.e10 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+8], xmm0

; 689  : 	m.e11 = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _m$[ebp+12], xmm0

; 690  : 
; 691  : 	return m;

	lea	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix2x2@gen@@QAE@ABV01@@Z		; gen::CMatrix2x2::CMatrix2x2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 692  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Matrix2x2I
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@Matrix2x2I:
	DD	1
	DD	$LN4@Matrix2x2I
$LN4@Matrix2x2I:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$LN3@Matrix2x2I
$LN3@Matrix2x2I:
	DB	109					; 0000006dH
	DB	0
?Matrix2x2Identity@gen@@YA?AVCMatrix2x2@1@XZ ENDP	; gen::Matrix2x2Identity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?Inverse@gen@@YA?AVCMatrix2x2@1@ABV21@@Z
_TEXT	SEGMENT
tv145 = -561						; size = 1
$T2 = -556						; size = 88
$T3 = -460						; size = 88
$T4 = -364						; size = 88
_e$5 = -76						; size = 4
_invDet$6 = -64						; size = 4
_det$7 = -52						; size = 4
_mOut$8 = -40						; size = 16
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
?Inverse@gen@@YA?AVCMatrix2x2@1@ABV21@@Z PROC		; gen::Inverse, COMDAT

; 600  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Inverse@gen@@YA?AVCMatrix2x2@1@ABV21@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 548				; 00000224H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-564]
	mov	ecx, 137				; 00000089H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 601  : 	GEN_GUARD;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 602  : 
; 603  : 	CMatrix2x2 mOut;

	lea	ecx, DWORD PTR _mOut$8[ebp]
	call	??0CMatrix2x2@gen@@QAE@XZ		; gen::CMatrix2x2::CMatrix2x2

; 604  : 
; 605  : 	// Calculate determinant of upper left 2x2
; 606  : 	TFloat32 det = m.e00*m.e11 - m.e01*m.e10;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx]
	mulss	xmm1, DWORD PTR [eax+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _det$7[ebp], xmm1

; 607  : 	GEN_ASSERT( !IsZero(det), "Singular matrix" );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _det$7[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv145[ebp], al
	movzx	eax, BYTE PTR tv145[ebp]
	test	eax, eax
	je	SHORT $LN1@Inverse
	mov	eax, DWORD PTR ?__LINE__Var@?1??Inverse@gen@@YA?AVCMatrix2x2@2@ABV32@@Z@4JA
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_0EI@OOFBLDLJ@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BA@EJDDFENM@Singular?5matrix?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN1@Inverse:

; 608  : 
; 609  : 	// Calculate inverse of upper left 2x2
; 610  : 	TFloat32 invDet = 1.0f / det;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _det$7[ebp]
	movss	DWORD PTR _invDet$6[ebp], xmm0

; 611  : 	mOut.e00 = invDet * m.e11;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR _invDet$6[ebp]
	mulss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _mOut$8[ebp], xmm0

; 612  : 	mOut.e01 = invDet * m.e01;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR _invDet$6[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _mOut$8[ebp+4], xmm0

; 613  : 
; 614  : 	mOut.e10 = invDet * m.e10;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR _invDet$6[ebp]
	mulss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _mOut$8[ebp+8], xmm0

; 615  : 	mOut.e11 = invDet * m.e00;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR _invDet$6[ebp]
	mulss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _mOut$8[ebp+12], xmm0

; 616  : 
; 617  : 	return mOut;

	lea	eax, DWORD PTR _mOut$8[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix2x2@gen@@QAE@ABV01@@Z		; gen::CMatrix2x2::CMatrix2x2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN8@Inverse
__catch$?Inverse@gen@@YA?AVCMatrix2x2@1@ABV21@@Z$0:

; 618  : 
; 619  : 	GEN_ENDGUARD;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0N@BLGPECID@gen?3?3Inverse?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN9@Inverse
	ret	0
__catch$?Inverse@gen@@YA?AVCMatrix2x2@1@ABV21@@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0N@BLGPECID@gen?3?3Inverse?$AA@
	push	OFFSET ??_C@_0EI@OOFBLDLJ@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN11@Inverse
	ret	0
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@Inverse
$LN11@Inverse:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN8@Inverse
$LN10@Inverse:
	jmp	SHORT $LN8@Inverse
$LN9@Inverse:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN8@Inverse:

; 620  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@Inverse
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 564				; 00000234H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN16@Inverse:
	DD	2
	DD	$LN15@Inverse
$LN15@Inverse:
	DD	-40					; ffffffd8H
	DD	16					; 00000010H
	DD	$LN12@Inverse
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN13@Inverse
$LN13@Inverse:
	DB	101					; 00000065H
	DB	0
$LN12@Inverse:
	DB	109					; 0000006dH
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?Inverse@gen@@YA?AVCMatrix2x2@1@ABV21@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-568]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Inverse@gen@@YA?AVCMatrix2x2@1@ABV21@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Inverse@gen@@YA?AVCMatrix2x2@1@ABV21@@Z ENDP		; gen::Inverse
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?Transpose@gen@@YA?AVCMatrix2x2@1@ABV21@@Z
_TEXT	SEGMENT
_transMat$ = -20					; size = 16
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
?Transpose@gen@@YA?AVCMatrix2x2@1@ABV21@@Z PROC		; gen::Transpose, COMDAT

; 563  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 564  : 	CMatrix2x2 transMat;

	lea	ecx, DWORD PTR _transMat$[ebp]
	call	??0CMatrix2x2@gen@@QAE@XZ		; gen::CMatrix2x2::CMatrix2x2

; 565  : 
; 566  : 	transMat.e00 = m.e00;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _transMat$[ebp], xmm0

; 567  : 	transMat.e01 = m.e10;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _transMat$[ebp+4], xmm0

; 568  : 
; 569  : 	transMat.e10 = m.e01;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _transMat$[ebp+8], xmm0

; 570  : 	transMat.e11 = m.e11;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _transMat$[ebp+12], xmm0

; 571  : 
; 572  : 	return transMat;

	lea	eax, DWORD PTR _transMat$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix2x2@gen@@QAE@ABV01@@Z		; gen::CMatrix2x2::CMatrix2x2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 573  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Transpose
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Transpose:
	DD	1
	DD	$LN4@Transpose
$LN4@Transpose:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$LN3@Transpose
$LN3@Transpose:
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
?Transpose@gen@@YA?AVCMatrix2x2@1@ABV21@@Z ENDP		; gen::Transpose
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?Orthogonalise@gen@@YA?AVCMatrix2x2@1@ABV21@ABVCVector2@1@@Z
_TEXT	SEGMENT
tv159 = -576						; size = 4
tv158 = -573						; size = 1
$T2 = -568						; size = 88
$T3 = -472						; size = 88
$T4 = -376						; size = 88
_e$5 = -88						; size = 4
_ccwPerpDot$6 = -76					; size = 4
_invOrigScaleX$7 = -64					; size = 4
_origScaleX$8 = -52					; size = 4
_mOut$9 = -40						; size = 16
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
_scale$ = 16						; size = 4
?Orthogonalise@gen@@YA?AVCMatrix2x2@1@ABV21@ABVCVector2@1@@Z PROC ; gen::Orthogonalise, COMDAT

; 508  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Orthogonalise@gen@@YA?AVCMatrix2x2@1@ABV21@ABVCVector2@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 560				; 00000230H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-576]
	mov	ecx, 140				; 0000008cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 509  : 	GEN_GUARD;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 510  : 
; 511  : 	CMatrix2x2 mOut;

	lea	ecx, DWORD PTR _mOut$9[ebp]
	call	??0CMatrix2x2@gen@@QAE@XZ		; gen::CMatrix2x2::CMatrix2x2

; 512  : 
; 513  : 	// Normalise first vector
; 514  : 	TFloat32 origScaleX = m.e00*m.e00 + m.e01*m.e01;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx]
	mulss	xmm1, DWORD PTR [eax]
	addss	xmm1, xmm0
	movss	DWORD PTR _origScaleX$8[ebp], xmm1

; 515  : 	GEN_ASSERT( !IsZero(origScaleX), "Singular matrix" );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _origScaleX$8[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv158[ebp], al
	movzx	eax, BYTE PTR tv158[ebp]
	test	eax, eax
	je	SHORT $LN3@Orthogonal
	mov	eax, DWORD PTR ?__LINE__Var@?1??Orthogonalise@gen@@YA?AVCMatrix2x2@2@ABV32@ABVCVector2@2@@Z@4JA
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_0EI@OOFBLDLJ@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BA@EJDDFENM@Singular?5matrix?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN3@Orthogonal:

; 516  : 	TFloat32 invOrigScaleX = InvSqrt( origScaleX );

	push	ecx
	movss	xmm0, DWORD PTR _origScaleX$8[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?InvSqrt@gen@@YAMM@Z			; gen::InvSqrt
	add	esp, 4
	fstp	DWORD PTR tv159[ebp]
	movss	xmm0, DWORD PTR tv159[ebp]
	movss	DWORD PTR _invOrigScaleX$7[ebp], xmm0

; 517  : 	mOut.e00 = m.e00 * invOrigScaleX;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _invOrigScaleX$7[ebp]
	movss	DWORD PTR _mOut$9[ebp], xmm0

; 518  : 	mOut.e01 = m.e01 * invOrigScaleX;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _invOrigScaleX$7[ebp]
	movss	DWORD PTR _mOut$9[ebp+4], xmm0

; 519  : 
; 520  : 	// Second vector is simply perpendicular to first, only need to select cw or ccw direction
; 521  : 	TFloat32 ccwPerpDot = mOut.e00*m.e11 - mOut.e01*m.e10;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR _mOut$9[ebp+4]
	mulss	xmm0, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR _mOut$9[ebp]
	mulss	xmm1, DWORD PTR [ecx+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _ccwPerpDot$6[ebp], xmm1

; 522  : 	if (ccwPerpDot >= 0.0f)

	movss	xmm0, DWORD PTR _ccwPerpDot$6[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN2@Orthogonal

; 523  : 	{
; 524  : 		mOut.e11 = mOut.e00;

	movss	xmm0, DWORD PTR _mOut$9[ebp]
	movss	DWORD PTR _mOut$9[ebp+12], xmm0

; 525  : 		mOut.e10 = -mOut.e01;

	movss	xmm0, DWORD PTR _mOut$9[ebp+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _mOut$9[ebp+8], xmm0

; 526  : 	}
; 527  : 	else

	jmp	SHORT $LN1@Orthogonal
$LN2@Orthogonal:

; 528  : 	{
; 529  : 		mOut.e11 = -mOut.e00;

	movss	xmm0, DWORD PTR _mOut$9[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _mOut$9[ebp+12], xmm0

; 530  : 		mOut.e10 = mOut.e01;

	movss	xmm0, DWORD PTR _mOut$9[ebp+4]
	movss	DWORD PTR _mOut$9[ebp+8], xmm0
$LN1@Orthogonal:

; 531  : 	}
; 532  : 
; 533  : 	// Rescale each vector
; 534  : 	mOut.e00 *= scale.x;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR _mOut$9[ebp]
	mulss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _mOut$9[ebp], xmm0

; 535  : 	mOut.e01 *= scale.x;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR _mOut$9[ebp+4]
	mulss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _mOut$9[ebp+4], xmm0

; 536  : 
; 537  : 	mOut.e10 *= scale.y;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR _mOut$9[ebp+8]
	mulss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _mOut$9[ebp+8], xmm0

; 538  : 	mOut.e11 *= scale.y;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR _mOut$9[ebp+12]
	mulss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _mOut$9[ebp+12], xmm0

; 539  : 
; 540  : 	return mOut;

	lea	eax, DWORD PTR _mOut$9[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix2x2@gen@@QAE@ABV01@@Z		; gen::CMatrix2x2::CMatrix2x2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN10@Orthogonal
__catch$?Orthogonalise@gen@@YA?AVCMatrix2x2@1@ABV21@ABVCVector2@1@@Z$0:

; 541  : 
; 542  : 	GEN_ENDGUARD;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BD@MGLNMEBA@gen?3?3Orthogonalise?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN11@Orthogonal
	ret	0
__catch$?Orthogonalise@gen@@YA?AVCMatrix2x2@1@ABV21@ABVCVector2@1@@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BD@MGLNMEBA@gen?3?3Orthogonalise?$AA@
	push	OFFSET ??_C@_0EI@OOFBLDLJ@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN13@Orthogonal
	ret	0
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN12@Orthogonal
$LN13@Orthogonal:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@Orthogonal
$LN12@Orthogonal:
	jmp	SHORT $LN10@Orthogonal
$LN11@Orthogonal:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN10@Orthogonal:

; 543  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@Orthogonal
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 576				; 00000240H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@Orthogonal:
	DD	2
	DD	$LN17@Orthogonal
$LN17@Orthogonal:
	DD	-40					; ffffffd8H
	DD	16					; 00000010H
	DD	$LN14@Orthogonal
	DD	-88					; ffffffa8H
	DD	4
	DD	$LN15@Orthogonal
$LN15@Orthogonal:
	DB	101					; 00000065H
	DB	0
$LN14@Orthogonal:
	DB	109					; 0000006dH
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?Orthogonalise@gen@@YA?AVCMatrix2x2@1@ABV21@ABVCVector2@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-580]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Orthogonalise@gen@@YA?AVCMatrix2x2@1@ABV21@ABVCVector2@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Orthogonalise@gen@@YA?AVCMatrix2x2@1@ABV21@ABVCVector2@1@@Z ENDP ; gen::Orthogonalise
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ??Dgen@@YA?AVCMatrix2x2@0@ABV10@0@Z
_TEXT	SEGMENT
_mOut$ = -20						; size = 16
___$ReturnUdt$ = 8					; size = 4
_m1$ = 12						; size = 4
_m2$ = 16						; size = 4
??Dgen@@YA?AVCMatrix2x2@0@ABV10@0@Z PROC		; gen::operator*, COMDAT

; 1030 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1031 : 	CMatrix2x2 mOut;

	lea	ecx, DWORD PTR _mOut$[ebp]
	call	??0CMatrix2x2@gen@@QAE@XZ		; gen::CMatrix2x2::CMatrix2x2

; 1032 : 
; 1033 : 	mOut.e00 = m1.e00*m2.e00 + m1.e01*m2.e10;

	mov	eax, DWORD PTR _m1$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _m1$[ebp]
	mov	eax, DWORD PTR _m2$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _mOut$[ebp], xmm0

; 1034 : 	mOut.e01 = m1.e00*m2.e01 + m1.e01*m2.e11;

	mov	eax, DWORD PTR _m1$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _m1$[ebp]
	mov	eax, DWORD PTR _m2$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm1
	movss	DWORD PTR _mOut$[ebp+4], xmm0

; 1035 : 
; 1036 : 	mOut.e10 = m1.e10*m2.e00 + m1.e11*m2.e10;

	mov	eax, DWORD PTR _m1$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _m1$[ebp]
	mov	eax, DWORD PTR _m2$[ebp]
	movss	xmm1, DWORD PTR [edx+12]
	mulss	xmm1, DWORD PTR [eax+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _mOut$[ebp+8], xmm0

; 1037 : 	mOut.e11 = m1.e10*m2.e01 + m1.e11*m2.e11;

	mov	eax, DWORD PTR _m1$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _m1$[ebp]
	mov	eax, DWORD PTR _m2$[ebp]
	movss	xmm1, DWORD PTR [edx+12]
	mulss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm1
	movss	DWORD PTR _mOut$[ebp+12], xmm0

; 1038 : 
; 1039 : 	return mOut;

	lea	eax, DWORD PTR _mOut$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix2x2@gen@@QAE@ABV01@@Z		; gen::CMatrix2x2::CMatrix2x2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1040 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@operator:
	DD	1
	DD	$LN4@operator
$LN4@operator:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$LN3@operator
$LN3@operator:
	DB	109					; 0000006dH
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
??Dgen@@YA?AVCMatrix2x2@0@ABV10@0@Z ENDP		; gen::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ??Dgen@@YA?AVCVector2@0@ABVCMatrix2x2@0@ABV10@@Z
_TEXT	SEGMENT
_vOut$ = -12						; size = 8
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
_v$ = 16						; size = 4
??Dgen@@YA?AVCVector2@0@ABVCMatrix2x2@0@ABV10@@Z PROC	; gen::operator*, COMDAT

; 978  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 979  :     CVector2 vOut;

	lea	ecx, DWORD PTR _vOut$[ebp]
	call	??0CVector2@gen@@QAE@XZ			; gen::CVector2::CVector2

; 980  :     vOut.x = m.e00*v.x + m.e01*v.y;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	movss	DWORD PTR _vOut$[ebp], xmm0

; 981  :     vOut.y = m.e10*v.x + m.e11*v.y;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [edx+12]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	movss	DWORD PTR _vOut$[ebp+4], xmm0

; 982  : 
; 983  :     return vOut;

	lea	eax, DWORD PTR _vOut$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CVector2@gen@@QAE@ABV01@@Z		; gen::CVector2::CVector2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 984  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@operator:
	DD	1
	DD	$LN4@operator
$LN4@operator:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN3@operator
$LN3@operator:
	DB	118					; 00000076H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
??Dgen@@YA?AVCVector2@0@ABVCMatrix2x2@0@ABV10@@Z ENDP	; gen::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ??Dgen@@YA?AVCVector2@0@ABV10@ABVCMatrix2x2@0@@Z
_TEXT	SEGMENT
_vOut$ = -12						; size = 8
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_m$ = 16						; size = 4
??Dgen@@YA?AVCVector2@0@ABV10@ABVCMatrix2x2@0@@Z PROC	; gen::operator*, COMDAT

; 963  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 964  :     CVector2 vOut;

	lea	ecx, DWORD PTR _vOut$[ebp]
	call	??0CVector2@gen@@QAE@XZ			; gen::CVector2::CVector2

; 965  :     vOut.x = v.x*m.e00 + v.y*m.e10;

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _vOut$[ebp], xmm0

; 966  :     vOut.y = v.x*m.e01 + v.y*m.e11;

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm1
	movss	DWORD PTR _vOut$[ebp+4], xmm0

; 967  : 
; 968  :     return vOut;

	lea	eax, DWORD PTR _vOut$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CVector2@gen@@QAE@ABV01@@Z		; gen::CVector2::CVector2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 969  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@operator:
	DD	1
	DD	$LN4@operator
$LN4@operator:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN3@operator
$LN3@operator:
	DB	118					; 00000076H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
??Dgen@@YA?AVCVector2@0@ABV10@ABVCMatrix2x2@0@@Z ENDP	; gen::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ??Kgen@@YA?AVCMatrix2x2@0@ABV10@M@Z
_TEXT	SEGMENT
tv137 = -537						; size = 1
$T2 = -532						; size = 88
$T3 = -436						; size = 88
$T4 = -340						; size = 88
_e$5 = -52						; size = 4
_mOut$6 = -40						; size = 16
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
_s$ = 16						; size = 4
??Kgen@@YA?AVCMatrix2x2@0@ABV10@M@Z PROC		; gen::operator/, COMDAT

; 937  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??Kgen@@YA?AVCMatrix2x2@0@ABV10@M@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 524				; 0000020cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-540]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 938  : 	GEN_GUARD_OPT;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 939  : 	GEN_ASSERT_OPT( !IsZero(s), "Invalid parameter" );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv137[ebp], al
	movzx	eax, BYTE PTR tv137[ebp]
	test	eax, eax
	je	SHORT $LN1@operator
	mov	eax, DWORD PTR ?__LINE__Var@?1???Kgen@@YA?AVCMatrix2x2@1@ABV21@M@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0EI@OOFBLDLJ@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN1@operator:

; 940  : 
; 941  : 	CMatrix2x2 mOut;

	lea	ecx, DWORD PTR _mOut$6[ebp]
	call	??0CMatrix2x2@gen@@QAE@XZ		; gen::CMatrix2x2::CMatrix2x2

; 942  :     mOut.e00 = m.e00 / s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax]
	divss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$6[ebp], xmm0

; 943  :     mOut.e01 = m.e01 / s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	divss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$6[ebp+4], xmm0

; 944  :     mOut.e10 = m.e10 / s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	divss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$6[ebp+8], xmm0

; 945  :     mOut.e11 = m.e11 / s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	divss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$6[ebp+12], xmm0

; 946  : 
; 947  : 	return mOut;

	lea	eax, DWORD PTR _mOut$6[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix2x2@gen@@QAE@ABV01@@Z		; gen::CMatrix2x2::CMatrix2x2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN8@operator
__catch$??Kgen@@YA?AVCMatrix2x2@0@ABV10@M@Z$0:

; 948  : 
; 949  : 	GEN_ENDGUARD_OPT;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BA@KCKIPOBF@gen?3?3operator?5?1?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN9@operator
	ret	0
__catch$??Kgen@@YA?AVCMatrix2x2@0@ABV10@M@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BA@KCKIPOBF@gen?3?3operator?5?1?$AA@
	push	OFFSET ??_C@_0EI@OOFBLDLJ@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN11@operator
	ret	0
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@operator
$LN11@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN8@operator
$LN10@operator:
	jmp	SHORT $LN8@operator
$LN9@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN8@operator:

; 950  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 540				; 0000021cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN16@operator:
	DD	2
	DD	$LN15@operator
$LN15@operator:
	DD	-40					; ffffffd8H
	DD	16					; 00000010H
	DD	$LN12@operator
	DD	-52					; ffffffccH
	DD	4
	DD	$LN13@operator
$LN13@operator:
	DB	101					; 00000065H
	DB	0
$LN12@operator:
	DB	109					; 0000006dH
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??Kgen@@YA?AVCMatrix2x2@0@ABV10@M@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-544]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??Kgen@@YA?AVCMatrix2x2@0@ABV10@M@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??Kgen@@YA?AVCMatrix2x2@0@ABV10@M@Z ENDP		; gen::operator/
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ??Dgen@@YA?AVCMatrix2x2@0@ABV10@M@Z
_TEXT	SEGMENT
_mOut$ = -20						; size = 16
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
_s$ = 16						; size = 4
??Dgen@@YA?AVCMatrix2x2@0@ABV10@M@Z PROC		; gen::operator*, COMDAT

; 888  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 889  : 	CMatrix2x2 mOut;

	lea	ecx, DWORD PTR _mOut$[ebp]
	call	??0CMatrix2x2@gen@@QAE@XZ		; gen::CMatrix2x2::CMatrix2x2

; 890  :     mOut.e00 = m.e00 * s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$[ebp], xmm0

; 891  :     mOut.e01 = m.e01 * s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$[ebp+4], xmm0

; 892  :     mOut.e10 = m.e10 * s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$[ebp+8], xmm0

; 893  :     mOut.e11 = m.e11 * s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$[ebp+12], xmm0

; 894  : 
; 895  : 	return mOut;

	lea	eax, DWORD PTR _mOut$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix2x2@gen@@QAE@ABV01@@Z		; gen::CMatrix2x2::CMatrix2x2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 896  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@operator:
	DD	1
	DD	$LN4@operator
$LN4@operator:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$LN3@operator
$LN3@operator:
	DB	109					; 0000006dH
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
??Dgen@@YA?AVCMatrix2x2@0@ABV10@M@Z ENDP		; gen::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ??Dgen@@YA?AVCMatrix2x2@0@MABV10@@Z
_TEXT	SEGMENT
_mOut$ = -20						; size = 16
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
_m$ = 16						; size = 4
??Dgen@@YA?AVCMatrix2x2@0@MABV10@@Z PROC		; gen::operator*, COMDAT

; 904  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 905  : 	CMatrix2x2 mOut;

	lea	ecx, DWORD PTR _mOut$[ebp]
	call	??0CMatrix2x2@gen@@QAE@XZ		; gen::CMatrix2x2::CMatrix2x2

; 906  :     mOut.e00 = m.e00 * s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$[ebp], xmm0

; 907  :     mOut.e01 = m.e01 * s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$[ebp+4], xmm0

; 908  :     mOut.e10 = m.e10 * s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$[ebp+8], xmm0

; 909  :     mOut.e11 = m.e11 * s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$[ebp+12], xmm0

; 910  : 
; 911  : 	return mOut;

	lea	eax, DWORD PTR _mOut$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix2x2@gen@@QAE@ABV01@@Z		; gen::CMatrix2x2::CMatrix2x2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 912  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@operator:
	DD	1
	DD	$LN4@operator
$LN4@operator:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$LN3@operator
$LN3@operator:
	DB	109					; 0000006dH
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
??Dgen@@YA?AVCMatrix2x2@0@MABV10@@Z ENDP		; gen::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ??9gen@@YA_NABVCMatrix2x2@0@0@Z
_TEXT	SEGMENT
tv128 = -196						; size = 4
_m1$ = 8						; size = 4
_m2$ = 12						; size = 4
??9gen@@YA_NABVCMatrix2x2@0@0@Z PROC			; gen::operator!=, COMDAT

; 862  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 863  : 	return !AreEqual( m1.e00, m2.e00 ) || !AreEqual( m1.e01, m2.e01 ) &&
; 864  : 		   !AreEqual( m1.e10, m2.e10 ) || !AreEqual( m1.e11, m2.e11 );

	push	4
	mov	eax, DWORD PTR _m2$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _m1$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [esp], xmm0
	call	?AreEqual@gen@@YA_NMMI@Z		; gen::AreEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	$LN4@operator
	push	4
	mov	eax, DWORD PTR _m2$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _m1$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [esp], xmm0
	call	?AreEqual@gen@@YA_NMMI@Z		; gen::AreEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@operator
	push	4
	mov	eax, DWORD PTR _m2$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _m1$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR [esp], xmm0
	call	?AreEqual@gen@@YA_NMMI@Z		; gen::AreEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@operator
$LN3@operator:
	push	4
	mov	eax, DWORD PTR _m2$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _m1$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR [esp], xmm0
	call	?AreEqual@gen@@YA_NMMI@Z		; gen::AreEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@operator
	mov	DWORD PTR tv128[ebp], 0
	jmp	SHORT $LN5@operator
$LN4@operator:
	mov	DWORD PTR tv128[ebp], 1
$LN5@operator:
	mov	al, BYTE PTR tv128[ebp]

; 865  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??9gen@@YA_NABVCMatrix2x2@0@0@Z ENDP			; gen::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ??8gen@@YA_NABVCMatrix2x2@0@0@Z
_TEXT	SEGMENT
tv128 = -196						; size = 4
_m1$ = 8						; size = 4
_m2$ = 12						; size = 4
??8gen@@YA_NABVCMatrix2x2@0@0@Z PROC			; gen::operator==, COMDAT

; 850  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 851  : 	return AreEqual( m1.e00, m2.e00 ) && AreEqual( m1.e01, m2.e01 ) &&
; 852  : 		   AreEqual( m1.e10, m2.e10 ) && AreEqual( m1.e11, m2.e11 );

	push	4
	mov	eax, DWORD PTR _m2$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _m1$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [esp], xmm0
	call	?AreEqual@gen@@YA_NMMI@Z		; gen::AreEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	$LN3@operator
	push	4
	mov	eax, DWORD PTR _m2$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _m1$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [esp], xmm0
	call	?AreEqual@gen@@YA_NMMI@Z		; gen::AreEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@operator
	push	4
	mov	eax, DWORD PTR _m2$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _m1$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR [esp], xmm0
	call	?AreEqual@gen@@YA_NMMI@Z		; gen::AreEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@operator
	push	4
	mov	eax, DWORD PTR _m2$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _m1$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR [esp], xmm0
	call	?AreEqual@gen@@YA_NMMI@Z		; gen::AreEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@operator
	mov	DWORD PTR tv128[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv128[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv128[ebp]

; 853  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??8gen@@YA_NABVCMatrix2x2@0@0@Z ENDP			; gen::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ??XCMatrix2x2@gen@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
$T1 = -236						; size = 16
_t$2 = -20						; size = 4
_this$ = -8						; size = 4
_m$ = 8							; size = 4
??XCMatrix2x2@gen@@QAEAAV01@ABV01@@Z PROC		; gen::CMatrix2x2::operator*=, COMDAT
; _this$ = ecx

; 1003 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1004 : 	if ( this == &m )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _m$[ebp]
	jne	SHORT $LN2@operator

; 1005 : 	{
; 1006 : 		// Special case of multiplying by self - no copy optimisations so use binary version
; 1007 : 		*this = m * m;

	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??Dgen@@YA?AVCMatrix2x2@0@ABV10@0@Z	; gen::operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4CMatrix2x2@gen@@QAEAAV01@ABV01@@Z	; gen::CMatrix2x2::operator=

; 1008 : 	}
; 1009 : 	else

	jmp	$LN1@operator
$LN2@operator:

; 1010 : 	{
; 1011 : 		TFloat32 t;
; 1012 : 		t   = e00*m.e00 + e01*m.e10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _t$2[ebp], xmm0

; 1013 : 		e01 = e00*m.e01 + e01*m.e11;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 1014 : 		e00 = t;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _t$2[ebp]
	movss	DWORD PTR [eax], xmm0

; 1015 : 
; 1016 : 		t   = e10*m.e00 + e11*m.e10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+12]
	mulss	xmm1, DWORD PTR [eax+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _t$2[ebp], xmm0

; 1017 : 		e11 = e10*m.e01 + e11*m.e11;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+12]
	mulss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 1018 : 		e10 = t;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _t$2[ebp]
	movss	DWORD PTR [eax+8], xmm0
$LN1@operator:

; 1019 : 	}
; 1020 : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1021 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??XCMatrix2x2@gen@@QAEAAV01@ABV01@@Z ENDP		; gen::CMatrix2x2::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?Transform@CMatrix2x2@gen@@QBE?AVCVector2@2@ABV32@@Z
_TEXT	SEGMENT
_vOut$ = -24						; size = 8
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
?Transform@CMatrix2x2@gen@@QBE?AVCVector2@2@ABV32@@Z PROC ; gen::CMatrix2x2::Transform, COMDAT
; _this$ = ecx

; 989  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 990  : 	CVector2 vOut;

	lea	ecx, DWORD PTR _vOut$[ebp]
	call	??0CVector2@gen@@QAE@XZ			; gen::CVector2::CVector2

; 991  : 	vOut.x = v.x*e00 + v.y*e10;

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _vOut$[ebp], xmm0

; 992  : 	vOut.y = v.x*e01 + v.y*e11;

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm1
	movss	DWORD PTR _vOut$[ebp+4], xmm0

; 993  : 
; 994  : 	return vOut;

	lea	eax, DWORD PTR _vOut$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CVector2@gen@@QAE@ABV01@@Z		; gen::CVector2::CVector2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 995  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Transform
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN5@Transform:
	DD	1
	DD	$LN4@Transform
$LN4@Transform:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN3@Transform
$LN3@Transform:
	DB	118					; 00000076H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
?Transform@CMatrix2x2@gen@@QBE?AVCVector2@2@ABV32@@Z ENDP ; gen::CMatrix2x2::Transform
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ??_0CMatrix2x2@gen@@QAEAAV01@M@Z
_TEXT	SEGMENT
tv138 = -525						; size = 1
$T2 = -520						; size = 88
$T3 = -424						; size = 88
$T4 = -328						; size = 88
_e$5 = -40						; size = 4
_this$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_s$ = 8							; size = 4
??_0CMatrix2x2@gen@@QAEAAV01@M@Z PROC			; gen::CMatrix2x2::operator/=, COMDAT
; _this$ = ecx

; 917  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??_0CMatrix2x2@gen@@QAEAAV01@M@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 512				; 00000200H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-528]
	mov	ecx, 128				; 00000080H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 918  : 	GEN_GUARD_OPT;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 919  : 	GEN_ASSERT_OPT( !IsZero(s), "Invalid parameter" );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv138[ebp], al
	movzx	eax, BYTE PTR tv138[ebp]
	test	eax, eax
	je	SHORT $LN1@operator
	mov	eax, DWORD PTR ?__LINE__Var@?1???_0CMatrix2x2@gen@@QAEAAV12@M@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0EI@OOFBLDLJ@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN1@operator:

; 920  : 
; 921  : 	e00 /= s;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	divss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 922  : 	e01 /= s;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	divss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 923  : 	e10 /= s;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	divss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 924  : 	e11 /= s;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	divss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 925  : 
; 926  : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN8@operator
__catch$??_0CMatrix2x2@gen@@QAEAAV01@M@Z$0:

; 927  : 
; 928  : 	GEN_ENDGUARD_OPT;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BN@OBIJAJFL@gen?3?3CMatrix2x2?3?3operator?5?1?$DN?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN9@operator
	ret	0
__catch$??_0CMatrix2x2@gen@@QAEAAV01@M@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BN@OBIJAJFL@gen?3?3CMatrix2x2?3?3operator?5?1?$DN?$AA@
	push	OFFSET ??_C@_0EI@OOFBLDLJ@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN11@operator
	ret	0
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@operator
$LN11@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN8@operator
$LN10@operator:
	jmp	SHORT $LN8@operator
$LN9@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN8@operator:

; 929  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 528				; 00000210H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN15@operator:
	DD	1
	DD	$LN14@operator
$LN14@operator:
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN12@operator
$LN12@operator:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_0CMatrix2x2@gen@@QAEAAV01@M@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-532]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??_0CMatrix2x2@gen@@QAEAAV01@M@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??_0CMatrix2x2@gen@@QAEAAV01@M@Z ENDP			; gen::CMatrix2x2::operator/=
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ??XCMatrix2x2@gen@@QAEAAV01@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_s$ = 8							; size = 4
??XCMatrix2x2@gen@@QAEAAV01@M@Z PROC			; gen::CMatrix2x2::operator*=, COMDAT
; _this$ = ecx

; 873  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 874  : 	e00 *= s;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 875  : 	e01 *= s;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 876  : 	e10 *= s;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 877  : 	e11 *= s;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 878  : 
; 879  : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 880  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??XCMatrix2x2@gen@@QAEAAV01@M@Z ENDP			; gen::CMatrix2x2::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?FaceDirection@CMatrix2x2@gen@@QAEXABVCVector2@2@_N1@Z
_TEXT	SEGMENT
_axis$ = -24						; size = 8
_this$ = -8						; size = 4
_direction$ = 8						; size = 4
_bUseYAxis$ = 12					; size = 1
_bLH$ = 16						; size = 1
?FaceDirection@CMatrix2x2@gen@@QAEXABVCVector2@2@_N1@Z PROC ; gen::CMatrix2x2::FaceDirection, COMDAT
; _this$ = ecx

; 753  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 754  : 	CVector2 axis = Normalise( direction );

	mov	eax, DWORD PTR _direction$[ebp]
	push	eax
	lea	ecx, DWORD PTR _axis$[ebp]
	push	ecx
	call	?Normalise@gen@@YA?AVCVector2@1@ABV21@@Z ; gen::Normalise
	add	esp, 8

; 755  : 	if (axis.IsZero()) return;

	lea	ecx, DWORD PTR _axis$[ebp]
	call	?IsZero@CVector2@gen@@QBE_NXZ		; gen::CVector2::IsZero
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@FaceDirect
	jmp	$LN8@FaceDirect
$LN7@FaceDirect:

; 756  : 	if (bUseYAxis)

	movzx	eax, BYTE PTR _bUseYAxis$[ebp]
	test	eax, eax
	je	SHORT $LN6@FaceDirect

; 757  : 	{
; 758  : 		e10 = axis.x;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _axis$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 759  : 		e11 = axis.y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _axis$[ebp+4]
	movss	DWORD PTR [eax+12], xmm0

; 760  : 		if (bLH)

	movzx	eax, BYTE PTR _bLH$[ebp]
	test	eax, eax
	je	SHORT $LN5@FaceDirect

; 761  : 		{
; 762  : 			e00 = e11;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax], edx

; 763  : 			e01 = -e10;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 764  : 		}
; 765  : 		else

	jmp	SHORT $LN4@FaceDirect
$LN5@FaceDirect:

; 766  : 		{
; 767  : 			e00 = -e11;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 768  : 			e01 = e10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+4], edx
$LN4@FaceDirect:

; 769  : 		}
; 770  : 	}
; 771  : 	else

	jmp	SHORT $LN1@FaceDirect
$LN6@FaceDirect:

; 772  : 	{
; 773  : 		e00 = axis.x;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _axis$[ebp]
	movss	DWORD PTR [eax], xmm0

; 774  : 		e01 = axis.y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _axis$[ebp+4]
	movss	DWORD PTR [eax+4], xmm0

; 775  : 		if (bLH)

	movzx	eax, BYTE PTR _bLH$[ebp]
	test	eax, eax
	je	SHORT $LN2@FaceDirect

; 776  : 		{
; 777  : 			e11 = -e00;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 778  : 			e10 = e01;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx

; 779  : 		}
; 780  : 		else

	jmp	SHORT $LN1@FaceDirect
$LN2@FaceDirect:

; 781  : 		{
; 782  : 			e11 = e00;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+12], edx

; 783  : 			e10 = -e01;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
$LN1@FaceDirect:
$LN8@FaceDirect:

; 784  : 		}
; 785  : 	}
; 786  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@FaceDirect
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN12@FaceDirect:
	DD	1
	DD	$LN11@FaceDirect
$LN11@FaceDirect:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN10@FaceDirect
$LN10@FaceDirect:
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	0
?FaceDirection@CMatrix2x2@gen@@QAEXABVCVector2@2@_N1@Z ENDP ; gen::CMatrix2x2::FaceDirection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?MakeScaling@CMatrix2x2@gen@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fScale$ = 8						; size = 4
?MakeScaling@CMatrix2x2@gen@@QAEXM@Z PROC		; gen::CMatrix2x2::MakeScaling, COMDAT
; _this$ = ecx

; 664  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 665  : 	e00 = fScale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fScale$[ebp]
	movss	DWORD PTR [eax], xmm0

; 666  : 	e01 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+4], xmm0

; 667  : 
; 668  : 	e10 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0

; 669  : 	e11 = fScale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fScale$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 670  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?MakeScaling@CMatrix2x2@gen@@QAEXM@Z ENDP		; gen::CMatrix2x2::MakeScaling
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?MakeScaling@CMatrix2x2@gen@@QAEXABVCVector2@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_scale$ = 8						; size = 4
?MakeScaling@CMatrix2x2@gen@@QAEXABVCVector2@2@@Z PROC	; gen::CMatrix2x2::MakeScaling, COMDAT
; _this$ = ecx

; 654  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 655  : 	e00 = scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 656  : 	e01 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+4], xmm0

; 657  : 
; 658  : 	e10 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0

; 659  : 	e11 = scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+12], edx

; 660  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?MakeScaling@CMatrix2x2@gen@@QAEXABVCVector2@2@@Z ENDP	; gen::CMatrix2x2::MakeScaling
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?MakeRotation@CMatrix2x2@gen@@QAEXM@Z
_TEXT	SEGMENT
_c$ = -32						; size = 4
_s$ = -20						; size = 4
_this$ = -8						; size = 4
_fAngle$ = 8						; size = 4
?MakeRotation@CMatrix2x2@gen@@QAEXM@Z PROC		; gen::CMatrix2x2::MakeRotation, COMDAT
; _this$ = ecx

; 640  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  : 	TFloat32 s, c;
; 642  : 	SinCos( fAngle, &s, &c );

	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _fAngle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SinCos@gen@@YAXMPAM0@Z			; gen::SinCos
	add	esp, 12					; 0000000cH

; 643  : 
; 644  : 	e00 = c;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [eax], xmm0

; 645  : 	e01 = s;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 646  : 
; 647  : 	e10 = -s;

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 648  : 	e11 = c;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 649  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@MakeRotati
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN6@MakeRotati:
	DD	2
	DD	$LN5@MakeRotati
$LN5@MakeRotati:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN3@MakeRotati
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN4@MakeRotati
$LN4@MakeRotati:
	DB	99					; 00000063H
	DB	0
$LN3@MakeRotati:
	DB	115					; 00000073H
	DB	0
?MakeRotation@CMatrix2x2@gen@@QAEXM@Z ENDP		; gen::CMatrix2x2::MakeRotation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?MakeIdentity@CMatrix2x2@gen@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?MakeIdentity@CMatrix2x2@gen@@QAEXXZ PROC		; gen::CMatrix2x2::MakeIdentity, COMDAT
; _this$ = ecx

; 629  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 	e00 = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax], xmm0

; 631  : 	e01 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+4], xmm0

; 632  : 
; 633  : 	e10 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0

; 634  : 	e11 = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+12], xmm0

; 635  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MakeIdentity@CMatrix2x2@gen@@QAEXXZ ENDP		; gen::CMatrix2x2::MakeIdentity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?Invert@CMatrix2x2@gen@@QAEXXZ
_TEXT	SEGMENT
tv146 = -561						; size = 1
$T2 = -556						; size = 88
$T3 = -460						; size = 88
$T4 = -364						; size = 88
_e$5 = -76						; size = 4
_t$6 = -64						; size = 4
_invDet$7 = -52						; size = 4
_det$8 = -40						; size = 4
_this$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
?Invert@CMatrix2x2@gen@@QAEXXZ PROC			; gen::CMatrix2x2::Invert, COMDAT
; _this$ = ecx

; 578  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Invert@CMatrix2x2@gen@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 548				; 00000224H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-564]
	mov	ecx, 137				; 00000089H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 579  : 	GEN_GUARD;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 580  : 
; 581  : 	// Calculate determinant
; 582  : 	TFloat32 det = e00*e11 - e01*e10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx]
	mulss	xmm1, DWORD PTR [eax+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _det$8[ebp], xmm1

; 583  : 	GEN_ASSERT( !IsZero(det), "Singular matrix" );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _det$8[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv146[ebp], al
	movzx	eax, BYTE PTR tv146[ebp]
	test	eax, eax
	je	SHORT $LN1@Invert
	mov	eax, DWORD PTR ?__LINE__Var@?1??Invert@CMatrix2x2@gen@@QAEXXZ@4JA
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_0EI@OOFBLDLJ@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BA@EJDDFENM@Singular?5matrix?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN1@Invert:

; 584  : 
; 585  : 	// Calculate inverse
; 586  : 	TFloat32 invDet = 1.0f / det;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _det$8[ebp]
	movss	DWORD PTR _invDet$7[ebp], xmm0

; 587  : 	TFloat32 t;
; 588  : 	t   = invDet * e00;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _invDet$7[ebp]
	mulss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _t$6[ebp], xmm0

; 589  : 	e00 = invDet * e11;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _invDet$7[ebp]
	mulss	xmm0, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 590  : 	e11 = t;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _t$6[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 591  : 
; 592  : 	e01 *= invDet;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _invDet$7[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 593  : 	e10 *= invDet;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _invDet$7[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
	jmp	SHORT $LN5@Invert
__catch$?Invert@CMatrix2x2@gen@@QAEXXZ$0:

; 594  : 
; 595  : 	GEN_ENDGUARD;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BI@NOHGPDIE@gen?3?3CMatrix2x2?3?3Invert?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN9@Invert
	ret	0
__catch$?Invert@CMatrix2x2@gen@@QAEXXZ$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BI@NOHGPDIE@gen?3?3CMatrix2x2?3?3Invert?$AA@
	push	OFFSET ??_C@_0EI@OOFBLDLJ@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN11@Invert
	ret	0
$LN5@Invert:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@Invert
$LN11@Invert:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN8@Invert
$LN10@Invert:
	jmp	SHORT $LN8@Invert
$LN9@Invert:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN8@Invert:
$LN3@Invert:

; 596  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@Invert
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 564				; 00000234H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN15@Invert:
	DD	1
	DD	$LN14@Invert
$LN14@Invert:
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN12@Invert
$LN12@Invert:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?Invert@CMatrix2x2@gen@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-568]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Invert@CMatrix2x2@gen@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Invert@CMatrix2x2@gen@@QAEXXZ ENDP			; gen::CMatrix2x2::Invert
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?Transpose@CMatrix2x2@gen@@QAEXXZ
_TEXT	SEGMENT
_t$ = -20						; size = 4
_this$ = -8						; size = 4
?Transpose@CMatrix2x2@gen@@QAEXXZ PROC			; gen::CMatrix2x2::Transpose, COMDAT
; _this$ = ecx

; 553  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 554  : 	TFloat32 t;
; 555  : 	t   = e01;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _t$[ebp], xmm0

; 556  : 	e01 = e10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+4], edx

; 557  : 	e10 = t;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 558  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Transpose@CMatrix2x2@gen@@QAEXXZ ENDP			; gen::CMatrix2x2::Transpose
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?Orthogonalise@CMatrix2x2@gen@@QAEXABVCVector2@2@@Z
_TEXT	SEGMENT
tv176 = -564						; size = 4
tv175 = -561						; size = 1
$T2 = -556						; size = 88
$T3 = -460						; size = 88
$T4 = -364						; size = 88
_e$5 = -76						; size = 4
_ccwPerpDot$6 = -64					; size = 4
_invOrigScaleX$7 = -52					; size = 4
_origScaleX$8 = -40					; size = 4
_this$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_scale$ = 8						; size = 4
?Orthogonalise@CMatrix2x2@gen@@QAEXABVCVector2@2@@Z PROC ; gen::CMatrix2x2::Orthogonalise, COMDAT
; _this$ = ecx

; 467  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Orthogonalise@CMatrix2x2@gen@@QAEXABVCVector2@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 548				; 00000224H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-564]
	mov	ecx, 137				; 00000089H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 468  : 	GEN_GUARD;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 469  : 
; 470  : 	// Normalise first vector
; 471  : 	TFloat32 origScaleX = e00*e00 + e01*e01;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx]
	mulss	xmm1, DWORD PTR [eax]
	addss	xmm1, xmm0
	movss	DWORD PTR _origScaleX$8[ebp], xmm1

; 472  : 	GEN_ASSERT( !IsZero(origScaleX), "Singular matrix" );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _origScaleX$8[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv175[ebp], al
	movzx	eax, BYTE PTR tv175[ebp]
	test	eax, eax
	je	SHORT $LN3@Orthogonal
	mov	eax, DWORD PTR ?__LINE__Var@?1??Orthogonalise@CMatrix2x2@gen@@QAEXABVCVector2@3@@Z@4JA
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_0EI@OOFBLDLJ@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BA@EJDDFENM@Singular?5matrix?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN3@Orthogonal:

; 473  : 	TFloat32 invOrigScaleX = InvSqrt( origScaleX );

	push	ecx
	movss	xmm0, DWORD PTR _origScaleX$8[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?InvSqrt@gen@@YAMM@Z			; gen::InvSqrt
	add	esp, 4
	fstp	DWORD PTR tv176[ebp]
	movss	xmm0, DWORD PTR tv176[ebp]
	movss	DWORD PTR _invOrigScaleX$7[ebp], xmm0

; 474  : 	e00 *= invOrigScaleX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _invOrigScaleX$7[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 475  : 	e01 *= invOrigScaleX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _invOrigScaleX$7[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 476  : 
; 477  : 	// Second vector is simply perpendicular to first, only need to select cw or ccw direction
; 478  : 	TFloat32 ccwPerpDot = e00*e11 - e01*e10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx]
	mulss	xmm1, DWORD PTR [eax+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _ccwPerpDot$6[ebp], xmm1

; 479  : 	if (ccwPerpDot >= 0.0f)

	movss	xmm0, DWORD PTR _ccwPerpDot$6[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN2@Orthogonal

; 480  : 	{
; 481  : 		e11 = e00;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+12], edx

; 482  : 		e10 = -e01;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 483  : 	}
; 484  : 	else

	jmp	SHORT $LN1@Orthogonal
$LN2@Orthogonal:

; 485  : 	{
; 486  : 		e11 = -e00;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 487  : 		e10 = e01;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
$LN1@Orthogonal:

; 488  : 	}
; 489  : 
; 490  : 	// Rescale each vector
; 491  : 	e00 *= scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0

; 492  : 	e01 *= scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 493  : 
; 494  : 	e10 *= scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 495  : 	e11 *= scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+12], xmm0
	jmp	SHORT $LN7@Orthogonal
__catch$?Orthogonalise@CMatrix2x2@gen@@QAEXABVCVector2@2@@Z$0:

; 496  : 
; 497  : 	GEN_ENDGUARD;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BP@KMLALPAO@gen?3?3CMatrix2x2?3?3Orthogonalise?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN11@Orthogonal
	ret	0
__catch$?Orthogonalise@CMatrix2x2@gen@@QAEXABVCVector2@2@@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BP@KMLALPAO@gen?3?3CMatrix2x2?3?3Orthogonalise?$AA@
	push	OFFSET ??_C@_0EI@OOFBLDLJ@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN13@Orthogonal
	ret	0
$LN7@Orthogonal:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN12@Orthogonal
$LN13@Orthogonal:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@Orthogonal
$LN12@Orthogonal:
	jmp	SHORT $LN10@Orthogonal
$LN11@Orthogonal:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN10@Orthogonal:
$LN5@Orthogonal:

; 498  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@Orthogonal
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 564				; 00000234H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN17@Orthogonal:
	DD	1
	DD	$LN16@Orthogonal
$LN16@Orthogonal:
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN14@Orthogonal
$LN14@Orthogonal:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?Orthogonalise@CMatrix2x2@gen@@QAEXABVCVector2@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-568]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Orthogonalise@CMatrix2x2@gen@@QAEXABVCVector2@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Orthogonalise@CMatrix2x2@gen@@QAEXABVCVector2@2@@Z ENDP ; gen::CMatrix2x2::Orthogonalise
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?IsOrthonormal@CMatrix2x2@gen@@QBE_NXZ
_TEXT	SEGMENT
tv134 = -208						; size = 4
_this$ = -8						; size = 4
?IsOrthonormal@CMatrix2x2@gen@@QBE_NXZ PROC		; gen::CMatrix2x2::IsOrthonormal, COMDAT
; _this$ = ecx

; 457  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 458  : 	// Check each row is length 1 and dot product the rows is zero
; 459  : 	return IsZero( e00*e00 + e01*e01 - 1.0f ) && IsZero( e10*e10 + e11*e11 - 1.0f ) &&
; 460  : 	       IsZero( e00*e10 + e01*e11 );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	subss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	$LN3@IsOrthonor
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+8]
	mulss	xmm0, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+12]
	mulss	xmm1, DWORD PTR [edx+12]
	addss	xmm0, xmm1
	subss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@IsOrthonor
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR [ecx+12]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@IsOrthonor
	mov	DWORD PTR tv134[ebp], 1
	jmp	SHORT $LN4@IsOrthonor
$LN3@IsOrthonor:
	mov	DWORD PTR tv134[ebp], 0
$LN4@IsOrthonor:
	mov	al, BYTE PTR tv134[ebp]

; 461  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsOrthonormal@CMatrix2x2@gen@@QBE_NXZ ENDP		; gen::CMatrix2x2::IsOrthonormal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?IsOrthogonal@CMatrix2x2@gen@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsOrthogonal@CMatrix2x2@gen@@QBE_NXZ PROC		; gen::CMatrix2x2::IsOrthogonal, COMDAT
; _this$ = ecx

; 449  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 450  : 	// Check dot product of the rows is zero
; 451  : 	return IsZero( e00*e10 + e01*e11 );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8

; 452  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsOrthogonal@CMatrix2x2@gen@@QBE_NXZ ENDP		; gen::CMatrix2x2::IsOrthogonal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?IsIdentity@CMatrix2x2@gen@@QBE_NXZ
_TEXT	SEGMENT
tv90 = -208						; size = 4
_this$ = -8						; size = 4
?IsIdentity@CMatrix2x2@gen@@QBE_NXZ PROC		; gen::CMatrix2x2::IsIdentity, COMDAT
; _this$ = ecx

; 435  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 436  : 	return IsZero( e00 - 1.0f ) && IsZero( e11 - 1.0f ) && IsZero( e01 ) && IsZero( e10 );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	$LN3@IsIdentity
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+12]
	subss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@IsIdentity
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@IsIdentity
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@IsIdentity
	mov	DWORD PTR tv90[ebp], 1
	jmp	SHORT $LN4@IsIdentity
$LN3@IsIdentity:
	mov	DWORD PTR tv90[ebp], 0
$LN4@IsIdentity:
	mov	al, BYTE PTR tv90[ebp]

; 437  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsIdentity@CMatrix2x2@gen@@QBE_NXZ ENDP		; gen::CMatrix2x2::IsIdentity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?SetScale@CMatrix2x2@gen@@QAEXM@Z
_TEXT	SEGMENT
tv189 = -232						; size = 4
tv162 = -232						; size = 4
_scaleSq$ = -32						; size = 4
_rescale$ = -20						; size = 4
_this$ = -8						; size = 4
_fScale$ = 8						; size = 4
?SetScale@CMatrix2x2@gen@@QAEXM@Z PROC			; gen::CMatrix2x2::SetScale, COMDAT
; _this$ = ecx

; 408  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	TFloat32 rescale;
; 410  : 	TFloat32 scaleSq = Sqrt( e00*e00 + e01*e01 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scaleSq$[ebp]

; 411  : 	if (!IsZero(scaleSq)) // No effect on zero axes

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@SetScale

; 412  : 	{
; 413  : 		rescale = fScale * InvSqrt( scaleSq );

	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?InvSqrt@gen@@YAMM@Z			; gen::InvSqrt
	add	esp, 4
	fstp	DWORD PTR tv162[ebp]
	movss	xmm0, DWORD PTR tv162[ebp]
	mulss	xmm0, DWORD PTR _fScale$[ebp]
	movss	DWORD PTR _rescale$[ebp], xmm0

; 414  : 		e00 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 415  : 		e01 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
$LN2@SetScale:

; 416  : 	}
; 417  : 	
; 418  : 	scaleSq = Sqrt( e10*e10 + e11*e11 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+12]
	mulss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scaleSq$[ebp]

; 419  : 	if (!IsZero(scaleSq)) // No effect on zero axes

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@SetScale

; 420  : 	{
; 421  : 		rescale = fScale * InvSqrt( scaleSq );

	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?InvSqrt@gen@@YAMM@Z			; gen::InvSqrt
	add	esp, 4
	fstp	DWORD PTR tv189[ebp]
	movss	xmm0, DWORD PTR tv189[ebp]
	mulss	xmm0, DWORD PTR _fScale$[ebp]
	movss	DWORD PTR _rescale$[ebp], xmm0

; 422  : 		e10 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 423  : 		e11 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0
$LN1@SetScale:

; 424  : 	}
; 425  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetScale@CMatrix2x2@gen@@QAEXM@Z ENDP			; gen::CMatrix2x2::SetScale
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?SetScale@CMatrix2x2@gen@@QAEXABVCVector2@2@@Z
_TEXT	SEGMENT
tv192 = -232						; size = 4
tv164 = -232						; size = 4
_scaleSq$ = -32						; size = 4
_rescale$ = -20						; size = 4
_this$ = -8						; size = 4
_scale$ = 8						; size = 4
?SetScale@CMatrix2x2@gen@@QAEXABVCVector2@2@@Z PROC	; gen::CMatrix2x2::SetScale, COMDAT
; _this$ = ecx

; 386  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 387  : 	TFloat32 rescale;
; 388  : 	TFloat32 scaleSq = Sqrt( e00*e00 + e01*e01 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scaleSq$[ebp]

; 389  : 	if (!IsZero(scaleSq)) // No effect on zero axes

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@SetScale

; 390  : 	{
; 391  : 		rescale = scale.x * InvSqrt( scaleSq );

	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?InvSqrt@gen@@YAMM@Z			; gen::InvSqrt
	add	esp, 4
	fstp	DWORD PTR tv164[ebp]
	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR tv164[ebp]
	mulss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _rescale$[ebp], xmm0

; 392  : 		e00 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 393  : 		e01 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
$LN2@SetScale:

; 394  : 	}
; 395  : 	
; 396  : 	scaleSq = Sqrt( e10*e10 + e11*e11 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+12]
	mulss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scaleSq$[ebp]

; 397  : 	if (!IsZero(scaleSq)) // No effect on zero axes

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@SetScale

; 398  : 	{
; 399  : 		rescale = scale.y * InvSqrt( scaleSq );

	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?InvSqrt@gen@@YAMM@Z			; gen::InvSqrt
	add	esp, 4
	fstp	DWORD PTR tv192[ebp]
	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR tv192[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _rescale$[ebp], xmm0

; 400  : 		e10 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 401  : 		e11 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0
$LN1@SetScale:

; 402  : 	}
; 403  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetScale@CMatrix2x2@gen@@QAEXABVCVector2@2@@Z ENDP	; gen::CMatrix2x2::SetScale
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?SetScaleY@CMatrix2x2@gen@@QAEXM@Z
_TEXT	SEGMENT
tv138 = -232						; size = 4
_rescale$1 = -32					; size = 4
_scaleSq$ = -20						; size = 4
_this$ = -8						; size = 4
_y$ = 8							; size = 4
?SetScaleY@CMatrix2x2@gen@@QAEXM@Z PROC			; gen::CMatrix2x2::SetScaleY, COMDAT
; _this$ = ecx

; 373  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 374  : 	TFloat32 scaleSq = Sqrt( e10*e10 + e11*e11 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+12]
	mulss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scaleSq$[ebp]

; 375  : 	if (!IsZero(scaleSq)) // No effect on zero axes

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@SetScaleY

; 376  : 	{
; 377  : 		TFloat32 rescale = y * InvSqrt( scaleSq );

	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?InvSqrt@gen@@YAMM@Z			; gen::InvSqrt
	add	esp, 4
	fstp	DWORD PTR tv138[ebp]
	movss	xmm0, DWORD PTR tv138[ebp]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR _rescale$1[ebp], xmm0

; 378  : 		e10 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _rescale$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 379  : 		e11 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _rescale$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0
$LN1@SetScaleY:

; 380  : 	}
; 381  : }	

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetScaleY@CMatrix2x2@gen@@QAEXM@Z ENDP			; gen::CMatrix2x2::SetScaleY
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?SetScaleX@CMatrix2x2@gen@@QAEXM@Z
_TEXT	SEGMENT
tv138 = -232						; size = 4
_rescale$1 = -32					; size = 4
_scaleSq$ = -20						; size = 4
_this$ = -8						; size = 4
_x$ = 8							; size = 4
?SetScaleX@CMatrix2x2@gen@@QAEXM@Z PROC			; gen::CMatrix2x2::SetScaleX, COMDAT
; _this$ = ecx

; 360  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 361  : 	TFloat32 scaleSq = Sqrt( e00*e00 + e01*e01 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scaleSq$[ebp]

; 362  : 	if (!IsZero(scaleSq)) // No effect on zero axes

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@SetScaleX

; 363  : 	{
; 364  : 		TFloat32 rescale = x * InvSqrt( scaleSq );

	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?InvSqrt@gen@@YAMM@Z			; gen::InvSqrt
	add	esp, 4
	fstp	DWORD PTR tv138[ebp]
	movss	xmm0, DWORD PTR tv138[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR _rescale$1[ebp], xmm0

; 365  : 		e00 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _rescale$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 366  : 		e01 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _rescale$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
$LN1@SetScaleX:

; 367  : 	}
; 368  : }	

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetScaleX@CMatrix2x2@gen@@QAEXM@Z ENDP			; gen::CMatrix2x2::SetScaleX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?GetScale@CMatrix2x2@gen@@QBE?AVCVector2@2@XZ
_TEXT	SEGMENT
_scale$ = -24						; size = 8
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetScale@CMatrix2x2@gen@@QBE?AVCVector2@2@XZ PROC	; gen::CMatrix2x2::GetScale, COMDAT
; _this$ = ecx

; 349  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 	CVector2 scale;

	lea	ecx, DWORD PTR _scale$[ebp]
	call	??0CVector2@gen@@QAE@XZ			; gen::CVector2::CVector2

; 351  : 	scale.x = Sqrt( e00*e00 + e01*e01 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scale$[ebp]

; 352  : 	scale.y = Sqrt( e10*e10 + e11*e11 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+12]
	mulss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scale$[ebp+4]

; 353  : 	return scale;

	lea	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CVector2@gen@@QAE@ABV01@@Z		; gen::CVector2::CVector2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 354  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@GetScale
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN5@GetScale:
	DD	1
	DD	$LN4@GetScale
$LN4@GetScale:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN3@GetScale
$LN3@GetScale:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
?GetScale@CMatrix2x2@gen@@QBE?AVCVector2@2@XZ ENDP	; gen::CMatrix2x2::GetScale
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?DecomposeTransform@CMatrix2x2@gen@@QBEXPAMPAVCVector2@2@@Z
_TEXT	SEGMENT
tv165 = -564						; size = 4
tv162 = -564						; size = 4
tv161 = -564						; size = 4
tv164 = -561						; size = 1
tv163 = -561						; size = 1
$T2 = -556						; size = 88
$T3 = -460						; size = 88
$T4 = -364						; size = 88
_e$5 = -76						; size = 4
_invScaleX$6 = -64					; size = 4
_scaleY$7 = -52						; size = 4
_scaleX$8 = -40						; size = 4
_this$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_pfAngle$ = 8						; size = 4
_pScale$ = 12						; size = 4
?DecomposeTransform@CMatrix2x2@gen@@QBEXPAMPAVCVector2@2@@Z PROC ; gen::CMatrix2x2::DecomposeTransform, COMDAT
; _this$ = ecx

; 315  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DecomposeTransform@CMatrix2x2@gen@@QBEXPAMPAVCVector2@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 548				; 00000224H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-564]
	mov	ecx, 137				; 00000089H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 316  : 	GEN_GUARD;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 317  : 
; 318  : 	// Calculate matrix scaling
; 319  : 	TFloat32 scaleX = Sqrt( e00*e00 + e01*e01 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx]
	mulss	xmm1, DWORD PTR [eax]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR tv161[ebp]
	movss	xmm0, DWORD PTR tv161[ebp]
	movss	DWORD PTR _scaleX$8[ebp], xmm0

; 320  : 	TFloat32 scaleY = Sqrt( e10*e10 + e11*e11 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+8]
	mulss	xmm1, DWORD PTR [eax+8]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR tv162[ebp]
	movss	xmm0, DWORD PTR tv162[ebp]
	movss	DWORD PTR _scaleY$7[ebp], xmm0

; 321  : 
; 322  : 	// Get rotation angle if required
; 323  : 	if (pfAngle)

	cmp	DWORD PTR _pfAngle$[ebp], 0
	je	$LN4@DecomposeT

; 324  : 	{
; 325  : 		// Calculate inverse scaling to extract rotational values only
; 326  : 		GEN_ASSERT( !IsZero(scaleX) && !IsZero(scaleY), "Singular matrix" );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleX$8[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv163[ebp], al
	movzx	eax, BYTE PTR tv163[ebp]
	test	eax, eax
	jne	SHORT $LN2@DecomposeT
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleY$7[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv164[ebp], al
	movzx	eax, BYTE PTR tv164[ebp]
	test	eax, eax
	je	SHORT $LN3@DecomposeT
$LN2@DecomposeT:
	mov	eax, DWORD PTR ?__LINE__Var@?1??DecomposeTransform@CMatrix2x2@gen@@QBEXPAMPAVCVector2@3@@Z@4JA
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_0EI@OOFBLDLJ@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BA@EJDDFENM@Singular?5matrix?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN3@DecomposeT:

; 327  : 		TFloat32 invScaleX = 1.0f / scaleX;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _scaleX$8[ebp]
	movss	DWORD PTR _invScaleX$6[ebp], xmm0

; 328  : 
; 329  : 		*pfAngle = ATan( e01 * invScaleX, e00 * invScaleX );

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _invScaleX$6[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR _invScaleX$6[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?ATan@gen@@YAMMM@Z			; gen::ATan
	add	esp, 8
	fstp	DWORD PTR tv165[ebp]
	mov	edx, DWORD PTR _pfAngle$[ebp]
	movss	xmm0, DWORD PTR tv165[ebp]
	movss	DWORD PTR [edx], xmm0
$LN4@DecomposeT:

; 330  : 	}
; 331  : 
; 332  : 	// Return scale if required
; 333  : 	if (pScale)

	cmp	DWORD PTR _pScale$[ebp], 0
	je	SHORT $LN1@DecomposeT

; 334  : 	{
; 335  : 		pScale->x = scaleX;

	mov	eax, DWORD PTR _pScale$[ebp]
	movss	xmm0, DWORD PTR _scaleX$8[ebp]
	movss	DWORD PTR [eax], xmm0

; 336  : 		pScale->y = scaleY;

	mov	eax, DWORD PTR _pScale$[ebp]
	movss	xmm0, DWORD PTR _scaleY$7[ebp]
	movss	DWORD PTR [eax+4], xmm0
$LN1@DecomposeT:
	jmp	SHORT $LN8@DecomposeT
__catch$?DecomposeTransform@CMatrix2x2@gen@@QBEXPAMPAVCVector2@2@@Z$0:

; 337  : 	}
; 338  : 
; 339  : 	GEN_ENDGUARD;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0CE@NJFEKCJ@gen?3?3CMatrix2x2?3?3DecomposeTransf@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN12@DecomposeT
	ret	0
__catch$?DecomposeTransform@CMatrix2x2@gen@@QBEXPAMPAVCVector2@2@@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0CE@NJFEKCJ@gen?3?3CMatrix2x2?3?3DecomposeTransf@
	push	OFFSET ??_C@_0EI@OOFBLDLJ@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN14@DecomposeT
	ret	0
$LN8@DecomposeT:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN13@DecomposeT
$LN14@DecomposeT:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN11@DecomposeT
$LN13@DecomposeT:
	jmp	SHORT $LN11@DecomposeT
$LN12@DecomposeT:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN11@DecomposeT:
$LN6@DecomposeT:

; 340  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@DecomposeT
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 564				; 00000234H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN18@DecomposeT:
	DD	1
	DD	$LN17@DecomposeT
$LN17@DecomposeT:
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN15@DecomposeT
$LN15@DecomposeT:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?DecomposeTransform@CMatrix2x2@gen@@QBEXPAMPAVCVector2@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-568]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DecomposeTransform@CMatrix2x2@gen@@QBEXPAMPAVCVector2@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?DecomposeTransform@CMatrix2x2@gen@@QBEXPAMPAVCVector2@2@@Z ENDP ; gen::CMatrix2x2::DecomposeTransform
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?MakeTransform@CMatrix2x2@gen@@QAEXMABVCVector2@2@@Z
_TEXT	SEGMENT
_c$ = -32						; size = 4
_s$ = -20						; size = 4
_this$ = -8						; size = 4
_fAngle$ = 8						; size = 4
_scale$ = 12						; size = 4
?MakeTransform@CMatrix2x2@gen@@QAEXMABVCVector2@2@@Z PROC ; gen::CMatrix2x2::MakeTransform, COMDAT
; _this$ = ecx

; 296  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 297  : 	TFloat32 s, c;
; 298  : 	SinCos( fAngle, &s, &c );

	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _fAngle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SinCos@gen@@YAXMPAM0@Z			; gen::SinCos
	add	esp, 12					; 0000000cH

; 299  : 
; 300  : 	e00 = c * scale.x;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 301  : 	e01 = s * scale.x;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 302  : 
; 303  : 	e10 = -s * scale.y;

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 304  : 	e11 = c * scale.y;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 305  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@MakeTransf
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN6@MakeTransf:
	DD	2
	DD	$LN5@MakeTransf
$LN5@MakeTransf:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN3@MakeTransf
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN4@MakeTransf
$LN4@MakeTransf:
	DB	99					; 00000063H
	DB	0
$LN3@MakeTransf:
	DB	115					; 00000073H
	DB	0
?MakeTransform@CMatrix2x2@gen@@QAEXMABVCVector2@2@@Z ENDP ; gen::CMatrix2x2::MakeTransform
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?SetColumns@CMatrix2x2@gen@@QAEXABVCVector2@2@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
?SetColumns@CMatrix2x2@gen@@QAEXABVCVector2@2@0@Z PROC	; gen::CMatrix2x2::SetColumns, COMDAT
; _this$ = ecx

; 275  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 276  : 	e00 = v0.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 277  : 	e10 = v0.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx

; 278  : 
; 279  : 	e01 = v1.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 280  : 	e11 = v1.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+12], edx

; 281  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetColumns@CMatrix2x2@gen@@QAEXABVCVector2@2@0@Z ENDP	; gen::CMatrix2x2::SetColumns
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?SetRows@CMatrix2x2@gen@@QAEXABVCVector2@2@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
?SetRows@CMatrix2x2@gen@@QAEXABVCVector2@2@0@Z PROC	; gen::CMatrix2x2::SetRows, COMDAT
; _this$ = ecx

; 261  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 262  : 	e00 = v0.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 263  : 	e01 = v0.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 264  : 
; 265  : 	e10 = v1.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx

; 266  : 	e11 = v1.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+12], edx

; 267  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetRows@CMatrix2x2@gen@@QAEXABVCVector2@2@0@Z ENDP	; gen::CMatrix2x2::SetRows
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?SetColumn@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z
_TEXT	SEGMENT
$T2 = -532						; size = 88
$T3 = -436						; size = 88
$T4 = -340						; size = 88
_e$5 = -52						; size = 4
_pfElts$6 = -40						; size = 4
_this$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_iCol$ = 8						; size = 4
_v$ = 12						; size = 4
?SetColumn@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z PROC	; gen::CMatrix2x2::SetColumn, COMDAT
; _this$ = ecx

; 243  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetColumn@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 520				; 00000208H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-536]
	mov	ecx, 130				; 00000082H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 244  : 	GEN_GUARD_OPT;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 245  : 	GEN_ASSERT_OPT( iCol < 2, "Invalid parameter" );

	cmp	DWORD PTR _iCol$[ebp], 2
	jb	SHORT $LN1@SetColumn
	mov	eax, DWORD PTR ?__LINE__Var@?1??SetColumn@CMatrix2x2@gen@@QAEXIABVCVector2@3@@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0EI@OOFBLDLJ@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN1@SetColumn:

; 246  : 
; 247  : 	TFloat32* pfElts = &e00 + iCol;

	mov	eax, DWORD PTR _iCol$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pfElts$6[ebp], edx

; 248  : 	pfElts[0] = v.x;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pfElts$6[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx], eax

; 249  : 	pfElts[2] = v.y;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _pfElts$6[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax], edx
	jmp	SHORT $LN5@SetColumn
__catch$?SetColumn@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z$0:

; 250  : 
; 251  : 	GEN_ENDGUARD_OPT;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BL@DEBCNCCA@gen?3?3CMatrix2x2?3?3SetColumn?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN9@SetColumn
	ret	0
__catch$?SetColumn@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BL@DEBCNCCA@gen?3?3CMatrix2x2?3?3SetColumn?$AA@
	push	OFFSET ??_C@_0EI@OOFBLDLJ@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN11@SetColumn
	ret	0
$LN5@SetColumn:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@SetColumn
$LN11@SetColumn:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN8@SetColumn
$LN10@SetColumn:
	jmp	SHORT $LN8@SetColumn
$LN9@SetColumn:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN8@SetColumn:
$LN3@SetColumn:

; 252  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@SetColumn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 536				; 00000218H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN15@SetColumn:
	DD	1
	DD	$LN14@SetColumn
$LN14@SetColumn:
	DD	-52					; ffffffccH
	DD	4
	DD	$LN12@SetColumn
$LN12@SetColumn:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?SetColumn@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-540]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetColumn@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetColumn@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z ENDP	; gen::CMatrix2x2::SetColumn
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?SetRow@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z
_TEXT	SEGMENT
$T2 = -532						; size = 88
$T3 = -436						; size = 88
$T4 = -340						; size = 88
_e$5 = -52						; size = 4
_pfElts$6 = -40						; size = 4
_this$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_iRow$ = 8						; size = 4
_v$ = 12						; size = 4
?SetRow@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z PROC	; gen::CMatrix2x2::SetRow, COMDAT
; _this$ = ecx

; 226  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetRow@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 520				; 00000208H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-536]
	mov	ecx, 130				; 00000082H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 227  : 	GEN_GUARD_OPT;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 228  : 	GEN_ASSERT_OPT( iRow < 2, "Invalid parameter" );

	cmp	DWORD PTR _iRow$[ebp], 2
	jb	SHORT $LN1@SetRow
	mov	eax, DWORD PTR ?__LINE__Var@?1??SetRow@CMatrix2x2@gen@@QAEXIABVCVector2@3@@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0EI@OOFBLDLJ@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN1@SetRow:

; 229  : 
; 230  : 	TFloat32* pfElts = &e00 + iRow * 2;

	mov	eax, DWORD PTR _iRow$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pfElts$6[ebp], edx

; 231  : 	pfElts[0] = v.x;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pfElts$6[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx], eax

; 232  : 	pfElts[1] = v.y;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pfElts$6[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax], edx
	jmp	SHORT $LN5@SetRow
__catch$?SetRow@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z$0:

; 233  : 
; 234  : 	GEN_ENDGUARD_OPT;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BI@FPPADAFP@gen?3?3CMatrix2x2?3?3SetRow?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN9@SetRow
	ret	0
__catch$?SetRow@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BI@FPPADAFP@gen?3?3CMatrix2x2?3?3SetRow?$AA@
	push	OFFSET ??_C@_0EI@OOFBLDLJ@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN11@SetRow
	ret	0
$LN5@SetRow:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@SetRow
$LN11@SetRow:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN8@SetRow
$LN10@SetRow:
	jmp	SHORT $LN8@SetRow
$LN9@SetRow:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN8@SetRow:
$LN3@SetRow:

; 235  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@SetRow
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 536				; 00000218H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN15@SetRow:
	DD	1
	DD	$LN14@SetRow
$LN14@SetRow:
	DD	-52					; ffffffccH
	DD	4
	DD	$LN12@SetRow
$LN12@SetRow:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?SetRow@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-540]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetRow@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetRow@CMatrix2x2@gen@@QAEXIABVCVector2@2@@Z ENDP	; gen::CMatrix2x2::SetRow
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?GetColumn@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z
_TEXT	SEGMENT
$T2 = -532						; size = 88
$T3 = -436						; size = 88
$T4 = -340						; size = 88
_e$5 = -52						; size = 4
_pfElts$6 = -40						; size = 4
_this$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_iCol$ = 12						; size = 4
?GetColumn@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z PROC	; gen::CMatrix2x2::GetColumn, COMDAT
; _this$ = ecx

; 209  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetColumn@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 520				; 00000208H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-536]
	mov	ecx, 130				; 00000082H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 210  : 	GEN_GUARD_OPT;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 211  : 	GEN_ASSERT_OPT( iCol < 2, "Invalid parameter" );

	cmp	DWORD PTR _iCol$[ebp], 2
	jb	SHORT $LN1@GetColumn
	mov	eax, DWORD PTR ?__LINE__Var@?1??GetColumn@CMatrix2x2@gen@@QBE?AVCVector2@3@I@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0EI@OOFBLDLJ@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN1@GetColumn:

; 212  : 
; 213  : 	const TFloat32* pfElts = &e00 + iCol;

	mov	eax, DWORD PTR _iCol$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pfElts$6[ebp], edx

; 214  : 	return CVector2( pfElts[0], pfElts[2] );

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _pfElts$6[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _pfElts$6[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CVector2@gen@@QAE@MM@Z		; gen::CVector2::CVector2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN8@GetColumn
__catch$?GetColumn@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z$0:

; 215  : 
; 216  : 	GEN_ENDGUARD_OPT;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BL@BKFHPDLC@gen?3?3CMatrix2x2?3?3GetColumn?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN9@GetColumn
	ret	0
__catch$?GetColumn@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BL@BKFHPDLC@gen?3?3CMatrix2x2?3?3GetColumn?$AA@
	push	OFFSET ??_C@_0EI@OOFBLDLJ@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN11@GetColumn
	ret	0
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@GetColumn
$LN11@GetColumn:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN8@GetColumn
$LN10@GetColumn:
	jmp	SHORT $LN8@GetColumn
$LN9@GetColumn:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN8@GetColumn:

; 217  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@GetColumn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 536				; 00000218H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN15@GetColumn:
	DD	1
	DD	$LN14@GetColumn
$LN14@GetColumn:
	DD	-52					; ffffffccH
	DD	4
	DD	$LN12@GetColumn
$LN12@GetColumn:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?GetColumn@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-540]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetColumn@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetColumn@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z ENDP	; gen::CMatrix2x2::GetColumn
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?GetRow@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z
_TEXT	SEGMENT
$T2 = -520						; size = 88
$T3 = -424						; size = 88
$T4 = -328						; size = 88
_e$5 = -40						; size = 4
_this$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_iRow$ = 12						; size = 4
?GetRow@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z PROC	; gen::CMatrix2x2::GetRow, COMDAT
; _this$ = ecx

; 198  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetRow@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 508				; 000001fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 127				; 0000007fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 199  : 	GEN_GUARD_OPT;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 200  : 	GEN_ASSERT_OPT( iRow < 2, "Invalid parameter" );

	cmp	DWORD PTR _iRow$[ebp], 2
	jb	SHORT $LN1@GetRow
	mov	eax, DWORD PTR ?__LINE__Var@?1??GetRow@CMatrix2x2@gen@@QBE?AVCVector2@3@I@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0EI@OOFBLDLJ@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN1@GetRow:

; 201  : 
; 202  : 	return CVector2( &e00 + iRow * 2 );

	mov	eax, DWORD PTR _iRow$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CVector2@gen@@QAE@PBM@Z		; gen::CVector2::CVector2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN4@GetRow
__catch$?GetRow@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z$0:

; 203  : 
; 204  : 	GEN_ENDGUARD_OPT;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BI@MMGBIIIC@gen?3?3CMatrix2x2?3?3GetRow?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN9@GetRow
	ret	0
__catch$?GetRow@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BI@MMGBIIIC@gen?3?3CMatrix2x2?3?3GetRow?$AA@
	push	OFFSET ??_C@_0EI@OOFBLDLJ@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN11@GetRow
	ret	0
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@GetRow
$LN11@GetRow:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN4@GetRow
$LN10@GetRow:
	jmp	SHORT $LN4@GetRow
$LN9@GetRow:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN4@GetRow:

; 205  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@GetRow
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN15@GetRow:
	DD	1
	DD	$LN14@GetRow
$LN14@GetRow:
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN12@GetRow
$LN12@GetRow:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?GetRow@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-528]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetRow@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetRow@CMatrix2x2@gen@@QBE?AVCVector2@2@I@Z ENDP	; gen::CMatrix2x2::GetRow
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?Set@CMatrix2x2@gen@@QAEXPBM_N@Z
_TEXT	SEGMENT
$T2 = -520						; size = 88
$T3 = -424						; size = 88
$T4 = -328						; size = 88
_e$5 = -40						; size = 4
_this$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_pfElts$ = 8						; size = 4
_bRows$ = 12						; size = 1
?Set@CMatrix2x2@gen@@QAEXPBM_N@Z PROC			; gen::CMatrix2x2::Set, COMDAT
; _this$ = ecx

; 167  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Set@CMatrix2x2@gen@@QAEXPBM_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 508				; 000001fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 127				; 0000007fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 168  : 	GEN_GUARD_OPT;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 169  : 	GEN_ASSERT_OPT( pfElts, "Invalid parameter" );

	cmp	DWORD PTR _pfElts$[ebp], 0
	jne	SHORT $LN3@Set
	mov	eax, DWORD PTR ?__LINE__Var@?1??Set@CMatrix2x2@gen@@QAEXPBM_N@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0EI@OOFBLDLJ@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN3@Set:

; 170  : 
; 171  : 	if (bRows)

	movzx	eax, BYTE PTR _bRows$[ebp]
	test	eax, eax
	je	SHORT $LN2@Set

; 172  : 	{
; 173  : 		e00 = pfElts[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pfElts$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx], ecx

; 174  : 		e01 = pfElts[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+4], eax

; 175  : 
; 176  : 		e10 = pfElts[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+8], eax

; 177  : 		e11 = pfElts[3];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pfElts$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx+12], ecx

; 178  : 	}
; 179  : 	else

	jmp	SHORT $LN1@Set
$LN2@Set:

; 180  : 	{
; 181  : 		e00 = pfElts[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pfElts$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx], ecx

; 182  : 		e10 = pfElts[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+8], eax

; 183  : 
; 184  : 		e01 = pfElts[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+4], eax

; 185  : 		e11 = pfElts[3];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pfElts$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx+12], ecx
$LN1@Set:
	jmp	SHORT $LN7@Set
__catch$?Set@CMatrix2x2@gen@@QAEXPBM_N@Z$0:

; 186  : 	}
; 187  : 
; 188  : 	GEN_ENDGUARD_OPT;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BF@KLFHCLMJ@gen?3?3CMatrix2x2?3?3Set?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN11@Set
	ret	0
__catch$?Set@CMatrix2x2@gen@@QAEXPBM_N@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BF@KLFHCLMJ@gen?3?3CMatrix2x2?3?3Set?$AA@
	push	OFFSET ??_C@_0EI@OOFBLDLJ@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN13@Set
	ret	0
$LN7@Set:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN12@Set
$LN13@Set:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@Set
$LN12@Set:
	jmp	SHORT $LN10@Set
$LN11@Set:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN10@Set:
$LN5@Set:

; 189  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@Set
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN17@Set:
	DD	1
	DD	$LN16@Set
$LN16@Set:
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN14@Set
$LN14@Set:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?Set@CMatrix2x2@gen@@QAEXPBM_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-528]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Set@CMatrix2x2@gen@@QAEXPBM_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Set@CMatrix2x2@gen@@QAEXPBM_N@Z ENDP			; gen::CMatrix2x2::Set
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ?Set@CMatrix2x2@gen@@QAEXMMMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_elt00$ = 8						; size = 4
_elt01$ = 12						; size = 4
_elt10$ = 16						; size = 4
_elt11$ = 20						; size = 4
?Set@CMatrix2x2@gen@@QAEXMMMM@Z PROC			; gen::CMatrix2x2::Set, COMDAT
; _this$ = ecx

; 153  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 154  : 	e00 = elt00;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elt00$[ebp]
	movss	DWORD PTR [eax], xmm0

; 155  : 	e01 = elt01;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elt01$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 156  : 
; 157  : 	e10 = elt10;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elt10$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 158  : 	e11 = elt11;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elt11$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 159  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Set@CMatrix2x2@gen@@QAEXMMMM@Z ENDP			; gen::CMatrix2x2::Set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ??4CMatrix2x2@gen@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_m$ = 8							; size = 4
??4CMatrix2x2@gen@@QAEAAV01@ABV01@@Z PROC		; gen::CMatrix2x2::operator=, COMDAT
; _this$ = ecx

; 130  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 131  : 	if ( this != &m )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _m$[ebp]
	je	SHORT $LN1@operator

; 132  : 	{
; 133  : 		e00 = m.e00;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 134  : 		e01 = m.e01;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 135  : 
; 136  : 		e10 = m.e10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 137  : 		e11 = m.e11;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
$LN1@operator:

; 138  : 	}
; 139  : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 140  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4CMatrix2x2@gen@@QAEAAV01@ABV01@@Z ENDP		; gen::CMatrix2x2::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ??0CMatrix2x2@gen@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_m$ = 8							; size = 4
??0CMatrix2x2@gen@@QAE@ABV01@@Z PROC			; gen::CMatrix2x2::CMatrix2x2, COMDAT
; _this$ = ecx

; 120  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 121  : 	e00 = m.e00;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 122  : 	e01 = m.e01;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 123  : 
; 124  : 	e10 = m.e10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 125  : 	e11 = m.e11;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx

; 126  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0CMatrix2x2@gen@@QAE@ABV01@@Z ENDP			; gen::CMatrix2x2::CMatrix2x2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ??0CMatrix2x2@gen@@QAE@MABVCVector2@1@@Z
_TEXT	SEGMENT
_c$ = -32						; size = 4
_s$ = -20						; size = 4
_this$ = -8						; size = 4
_fAngle$ = 8						; size = 4
_scale$ = 12						; size = 4
??0CMatrix2x2@gen@@QAE@MABVCVector2@1@@Z PROC		; gen::CMatrix2x2::CMatrix2x2, COMDAT
; _this$ = ecx

; 106  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 107  : 	TFloat32 s, c;
; 108  : 	SinCos( fAngle, &s, &c );

	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _fAngle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SinCos@gen@@YAXMPAM0@Z			; gen::SinCos
	add	esp, 12					; 0000000cH

; 109  : 
; 110  : 	e00 = c * scale.x;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 111  : 	e01 = s * scale.x;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 112  : 
; 113  : 	e10 = -s * scale.y;

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 114  : 	e11 = c * scale.y;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 115  : }

	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@CMatrix2x2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN6@CMatrix2x2:
	DD	2
	DD	$LN5@CMatrix2x2
$LN5@CMatrix2x2:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN3@CMatrix2x2
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN4@CMatrix2x2
$LN4@CMatrix2x2:
	DB	99					; 00000063H
	DB	0
$LN3@CMatrix2x2:
	DB	115					; 00000073H
	DB	0
??0CMatrix2x2@gen@@QAE@MABVCVector2@1@@Z ENDP		; gen::CMatrix2x2::CMatrix2x2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ??0CMatrix2x2@gen@@QAE@ABVCVector2@1@0_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_bRows$ = 16						; size = 1
??0CMatrix2x2@gen@@QAE@ABVCVector2@1@0_N@Z PROC		; gen::CMatrix2x2::CMatrix2x2, COMDAT
; _this$ = ecx

; 79   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 80   : 	if (bRows)

	movzx	eax, BYTE PTR _bRows$[ebp]
	test	eax, eax
	je	SHORT $LN2@CMatrix2x2

; 81   : 	{
; 82   : 		e00 = v0.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 83   : 		e01 = v0.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 84   : 
; 85   : 		e10 = v1.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx

; 86   : 		e11 = v1.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+12], edx

; 87   : 	}
; 88   : 	else

	jmp	SHORT $LN1@CMatrix2x2
$LN2@CMatrix2x2:

; 89   : 	{
; 90   : 		e00 = v0.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 91   : 		e10 = v0.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx

; 92   : 
; 93   : 		e01 = v1.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 94   : 		e11 = v1.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+12], edx
$LN1@CMatrix2x2:

; 95   : 	}
; 96   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0CMatrix2x2@gen@@QAE@ABVCVector2@1@0_N@Z ENDP		; gen::CMatrix2x2::CMatrix2x2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ??0CMatrix2x2@gen@@QAE@PBM_N@Z
_TEXT	SEGMENT
$T2 = -520						; size = 88
$T3 = -424						; size = 88
$T4 = -328						; size = 88
_e$5 = -40						; size = 4
_this$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_pfElts$ = 8						; size = 4
_bRows$ = 12						; size = 1
??0CMatrix2x2@gen@@QAE@PBM_N@Z PROC			; gen::CMatrix2x2::CMatrix2x2, COMDAT
; _this$ = ecx

; 48   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CMatrix2x2@gen@@QAE@PBM_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 508				; 000001fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 127				; 0000007fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 49   : 	GEN_GUARD_OPT;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 50   : 	GEN_ASSERT_OPT( pfElts, "Invalid parameter" );

	cmp	DWORD PTR _pfElts$[ebp], 0
	jne	SHORT $LN3@CMatrix2x2
	mov	eax, DWORD PTR ?__LINE__Var@?1???0CMatrix2x2@gen@@QAE@PBM_N@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0EI@OOFBLDLJ@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN3@CMatrix2x2:

; 51   : 
; 52   : 	if (bRows)

	movzx	eax, BYTE PTR _bRows$[ebp]
	test	eax, eax
	je	SHORT $LN2@CMatrix2x2

; 53   : 	{
; 54   : 		e00 = pfElts[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pfElts$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx], ecx

; 55   : 		e01 = pfElts[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+4], eax

; 56   : 
; 57   : 		e10 = pfElts[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+8], eax

; 58   : 		e11 = pfElts[3];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pfElts$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx+12], ecx

; 59   : 	}
; 60   : 	else

	jmp	SHORT $LN1@CMatrix2x2
$LN2@CMatrix2x2:

; 61   : 	{
; 62   : 		e00 = pfElts[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pfElts$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx], ecx

; 63   : 		e10 = pfElts[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+8], eax

; 64   : 
; 65   : 		e01 = pfElts[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+4], eax

; 66   : 		e11 = pfElts[3];

	mov	eax, 4
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pfElts$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx+12], ecx
$LN1@CMatrix2x2:
	jmp	SHORT $LN7@CMatrix2x2
__catch$??0CMatrix2x2@gen@@QAE@PBM_N@Z$0:

; 67   : 	}
; 68   : 
; 69   : 	GEN_ENDGUARD_OPT;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BM@GIJINEOE@gen?3?3CMatrix2x2?3?3CMatrix2x2?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN11@CMatrix2x2
	ret	0
__catch$??0CMatrix2x2@gen@@QAE@PBM_N@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BM@GIJINEOE@gen?3?3CMatrix2x2?3?3CMatrix2x2?$AA@
	push	OFFSET ??_C@_0EI@OOFBLDLJ@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN13@CMatrix2x2
	ret	0
$LN7@CMatrix2x2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN12@CMatrix2x2
$LN13@CMatrix2x2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@CMatrix2x2
$LN12@CMatrix2x2:
	jmp	SHORT $LN10@CMatrix2x2
$LN11@CMatrix2x2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN10@CMatrix2x2:

; 70   : }

	mov	eax, DWORD PTR _this$[ebp]
$LN6@CMatrix2x2:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@CMatrix2x2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN17@CMatrix2x2:
	DD	1
	DD	$LN16@CMatrix2x2
$LN16@CMatrix2x2:
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN14@CMatrix2x2
$LN14@CMatrix2x2:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0CMatrix2x2@gen@@QAE@PBM_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-528]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CMatrix2x2@gen@@QAE@PBM_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CMatrix2x2@gen@@QAE@PBM_N@Z ENDP			; gen::CMatrix2x2::CMatrix2x2
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.cpp
;	COMDAT ??0CMatrix2x2@gen@@QAE@MMMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_elt00$ = 8						; size = 4
_elt01$ = 12						; size = 4
_elt10$ = 16						; size = 4
_elt11$ = 20						; size = 4
??0CMatrix2x2@gen@@QAE@MMMM@Z PROC			; gen::CMatrix2x2::CMatrix2x2, COMDAT
; _this$ = ecx

; 34   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 	e00 = elt00;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elt00$[ebp]
	movss	DWORD PTR [eax], xmm0

; 36   : 	e01 = elt01;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elt01$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 37   : 
; 38   : 	e10 = elt10;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elt10$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 39   : 	e11 = elt11;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elt11$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 40   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0CMatrix2x2@gen@@QAE@MMMM@Z ENDP			; gen::CMatrix2x2::CMatrix2x2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cmatrix2x2.h
;	COMDAT ??0CMatrix2x2@gen@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CMatrix2x2@gen@@QAE@XZ PROC				; gen::CMatrix2x2::CMatrix2x2, COMDAT
; _this$ = ecx

; 49   : 	CMatrix2x2() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMatrix2x2@gen@@QAE@XZ ENDP				; gen::CMatrix2x2::CMatrix2x2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cvector2.h
;	COMDAT ?IsZero@CVector2@gen@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsZero@CVector2@gen@@QBE_NXZ PROC			; gen::CVector2::IsZero, COMDAT
; _this$ = ecx

; 167  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 168  : 		return gen::IsZero( x*x + y*y );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8

; 169  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsZero@CVector2@gen@@QBE_NXZ ENDP			; gen::CVector2::IsZero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cvector2.h
;	COMDAT ??0CVector2@gen@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
??0CVector2@gen@@QAE@ABV01@@Z PROC			; gen::CVector2::CVector2, COMDAT
; _this$ = ecx

; 88   : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0CVector2@gen@@QAE@ABV01@@Z ENDP			; gen::CVector2::CVector2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cvector2.h
;	COMDAT ??0CVector2@gen@@QAE@PBM@Z
_TEXT	SEGMENT
$T2 = -520						; size = 88
$T3 = -424						; size = 88
$T4 = -328						; size = 88
_e$5 = -40						; size = 4
_this$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_pfElts$ = 8						; size = 4
??0CVector2@gen@@QAE@PBM@Z PROC				; gen::CVector2::CVector2, COMDAT
; _this$ = ecx

; 53   : 	explicit CVector2( const TFloat32* pfElts )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CVector2@gen@@QAE@PBM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 508				; 000001fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 127				; 0000007fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 54   : 	{
; 55   : 		GEN_GUARD_OPT;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 56   : 		GEN_ASSERT_OPT( pfElts, "Invalid parameter" );

	cmp	DWORD PTR _pfElts$[ebp], 0
	jne	SHORT $LN1@CVector2
	push	56					; 00000038H
	push	OFFSET ??_C@_0EE@PNILPMEN@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	__CxxThrowException@8
$LN1@CVector2:

; 57   : 
; 58   : 		x = pfElts[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pfElts$[ebp]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR [edx], ecx

; 59   : 		y = pfElts[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN5@CVector2
__catch$??0CVector2@gen@@QAE@PBM@Z$0:

; 60   : 
; 61   : 		GEN_ENDGUARD_OPT;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BI@MENJPPKF@gen?3?3CVector2?3?3CVector2?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN9@CVector2
	ret	0
__catch$??0CVector2@gen@@QAE@PBM@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BI@MENJPPKF@gen?3?3CVector2?3?3CVector2?$AA@
	push	OFFSET ??_C@_0EE@PNILPMEN@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN11@CVector2
	ret	0
$LN5@CVector2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@CVector2
$LN11@CVector2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN8@CVector2
$LN10@CVector2:
	jmp	SHORT $LN8@CVector2
$LN9@CVector2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN8@CVector2:

; 62   : 	}

	mov	eax, DWORD PTR _this$[ebp]
$LN4@CVector2:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@CVector2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN15@CVector2:
	DD	1
	DD	$LN14@CVector2
$LN14@CVector2:
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN12@CVector2
$LN12@CVector2:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0CVector2@gen@@QAE@PBM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-528]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CVector2@gen@@QAE@PBM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CVector2@gen@@QAE@PBM@Z ENDP				; gen::CVector2::CVector2
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cvector2.h
;	COMDAT ??0CVector2@gen@@QAE@MM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_xIn$ = 8						; size = 4
_yIn$ = 12						; size = 4
??0CVector2@gen@@QAE@MM@Z PROC				; gen::CVector2::CVector2, COMDAT
; _this$ = ecx

; 50   : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _xIn$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _yIn$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0CVector2@gen@@QAE@MM@Z ENDP				; gen::CVector2::CVector2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\cvector2.h
;	COMDAT ??0CVector2@gen@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CVector2@gen@@QAE@XZ PROC				; gen::CVector2::CVector2, COMDAT
; _this$ = ecx

; 42   : 	CVector2() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0CVector2@gen@@QAE@XZ ENDP				; gen::CVector2::CVector2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\basemath.h
;	COMDAT ?AreEqual@gen@@YA_NMMI@Z
_TEXT	SEGMENT
tv72 = -220						; size = 4
_yInt$ = -20						; size = 4
_xInt$ = -8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_iEpsilonFrac$ = 16					; size = 4
?AreEqual@gen@@YA_NMMI@Z PROC				; gen::AreEqual, COMDAT

; 403  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 404  : 	// Reinterpret 32-bit float as 32-bit unsigned int
; 405  :     TInt32 xInt = *(TInt32*)&x;

	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _xInt$[ebp], eax

; 406  :     if (xInt < 0)

	cmp	DWORD PTR _xInt$[ebp], 0
	jge	SHORT $LN2@AreEqual

; 407  : 	{
; 408  : 		// Reorder negative values so we can use integer comparison
; 409  :         xInt = 0x80000000 - xInt;

	mov	eax, -2147483648			; 80000000H
	sub	eax, DWORD PTR _xInt$[ebp]
	mov	DWORD PTR _xInt$[ebp], eax
$LN2@AreEqual:

; 410  : 	}
; 411  : 
; 412  : 	// Same with second value
; 413  :     TInt32 yInt = *(TInt32*)&y;

	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _yInt$[ebp], eax

; 414  :     if (yInt < 0)

	cmp	DWORD PTR _yInt$[ebp], 0
	jge	SHORT $LN1@AreEqual

; 415  : 	{
; 416  :         yInt = 0x80000000 - yInt;

	mov	eax, -2147483648			; 80000000H
	sub	eax, DWORD PTR _yInt$[ebp]
	mov	DWORD PTR _yInt$[ebp], eax
$LN1@AreEqual:

; 417  : 	}
; 418  : 
; 419  : 	// Values are equal if integer representations are near enough
; 420  :     return Abs( xInt - yInt ) < iEpsilonFrac;

	mov	eax, DWORD PTR _xInt$[ebp]
	sub	eax, DWORD PTR _yInt$[ebp]
	push	eax
	call	?Abs@gen@@YAIH@Z			; gen::Abs
	add	esp, 4
	cmp	eax, DWORD PTR _iEpsilonFrac$[ebp]
	jae	SHORT $LN5@AreEqual
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN6@AreEqual
$LN5@AreEqual:
	mov	DWORD PTR tv72[ebp], 0
$LN6@AreEqual:
	mov	al, BYTE PTR tv72[ebp]

; 421  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AreEqual@gen@@YA_NMMI@Z ENDP				; gen::AreEqual
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\basemath.h
;	COMDAT ?IsZero@gen@@YA_NMM@Z
_TEXT	SEGMENT
tv67 = -200						; size = 4
tv74 = -196						; size = 4
_x$ = 8							; size = 4
_fEpsilon$ = 12						; size = 4
?IsZero@gen@@YA_NMM@Z PROC				; gen::IsZero, COMDAT

; 291  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 292  : 	return Abs( x ) < fEpsilon;

	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Abs@gen@@YAMM@Z			; gen::Abs
	add	esp, 4
	fstp	DWORD PTR tv74[ebp]
	movss	xmm0, DWORD PTR _fEpsilon$[ebp]
	comiss	xmm0, DWORD PTR tv74[ebp]
	jbe	SHORT $LN3@IsZero
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsZero
$LN3@IsZero:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsZero:
	mov	al, BYTE PTR tv67[ebp]

; 293  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 200				; 000000c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsZero@gen@@YA_NMM@Z ENDP				; gen::IsZero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\basemath.h
;	COMDAT ?SinCos@gen@@YAXMPAM0@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_pSin$ = 12						; size = 4
_pCos$ = 16						; size = 4
?SinCos@gen@@YAXMPAM0@Z PROC				; gen::SinCos, COMDAT

; 192  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 193  :     *pSin = Sin( x );

	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Sin@gen@@YAMM@Z			; gen::Sin
	add	esp, 4
	mov	eax, DWORD PTR _pSin$[ebp]
	fstp	DWORD PTR [eax]

; 194  :     *pCos = Cos( x );

	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Cos@gen@@YAMM@Z			; gen::Cos
	add	esp, 4
	mov	eax, DWORD PTR _pCos$[ebp]
	fstp	DWORD PTR [eax]

; 195  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SinCos@gen@@YAXMPAM0@Z ENDP				; gen::SinCos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\basemath.h
;	COMDAT ?InvSqrt@gen@@YAMM@Z
_TEXT	SEGMENT
tv139 = -520						; size = 4
tv93 = -516						; size = 4
$T2 = -508						; size = 88
$T3 = -412						; size = 88
$T4 = -316						; size = 88
_e$5 = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_x$ = 8							; size = 4
?InvSqrt@gen@@YAMM@Z PROC				; gen::InvSqrt, COMDAT

; 158  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?InvSqrt@gen@@YAMM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 504				; 000001f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-520]
	mov	ecx, 126				; 0000007eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 159  : 	GEN_GUARD_OPT;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 160  : 	GEN_ASSERT_OPT( x != 0.0f, "Invalid parameter" );

	movss	xmm0, DWORD PTR _x$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@InvSqrt
	mov	eax, DWORD PTR ?__LINE__Var@?1??InvSqrt@gen@@YAMM@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0EE@DHOCJGL@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN1@InvSqrt:

; 161  : 
; 162  : 	return 1.0f / Sqrt( x );

	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR tv93[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR tv93[ebp]
	movss	DWORD PTR tv139[ebp], xmm0
	fld	DWORD PTR tv139[ebp]
	jmp	$LN8@InvSqrt
__catch$?InvSqrt@gen@@YAMM@Z$0:

; 163  : 
; 164  : 	GEN_ENDGUARD_OPT;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0N@HFKAOJGM@gen?3?3InvSqrt?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN9@InvSqrt
	ret	0
__catch$?InvSqrt@gen@@YAMM@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0N@HFKAOJGM@gen?3?3InvSqrt?$AA@
	push	OFFSET ??_C@_0EE@DHOCJGL@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN11@InvSqrt
	ret	0
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@InvSqrt
$LN11@InvSqrt:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN8@InvSqrt
$LN10@InvSqrt:
	jmp	SHORT $LN8@InvSqrt
$LN9@InvSqrt:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN8@InvSqrt:

; 165  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@InvSqrt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 520				; 00000208H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN15@InvSqrt:
	DD	1
	DD	$LN14@InvSqrt
$LN14@InvSqrt:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN12@InvSqrt
$LN12@InvSqrt:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?InvSqrt@gen@@YAMM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-524]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?InvSqrt@gen@@YAMM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?InvSqrt@gen@@YAMM@Z ENDP				; gen::InvSqrt
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\basemath.h
;	COMDAT ?ATan@gen@@YAMMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?ATan@gen@@YAMMM@Z PROC					; gen::ATan, COMDAT

; 146  : inline TFloat32 ATan( const TFloat32 x, const TFloat32 y ) { return atan2f( x, y ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_atan2f
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ATan@gen@@YAMMM@Z ENDP					; gen::ATan
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\basemath.h
;	COMDAT ?Cos@gen@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?Cos@gen@@YAMM@Z PROC					; gen::Cos, COMDAT

; 135  : inline TFloat32 Cos( const TFloat32 x ) { return cosf( x ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Cos@gen@@YAMM@Z ENDP					; gen::Cos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\basemath.h
;	COMDAT ?Sin@gen@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?Sin@gen@@YAMM@Z PROC					; gen::Sin, COMDAT

; 133  : inline TFloat32 Sin( const TFloat32 x ) { return sinf( x ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Sin@gen@@YAMM@Z ENDP					; gen::Sin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\basemath.h
;	COMDAT ?Sqrt@gen@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?Sqrt@gen@@YAMM@Z PROC					; gen::Sqrt, COMDAT

; 107  : inline TFloat32 Sqrt( const TFloat32 x ) { return sqrtf( x ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Sqrt@gen@@YAMM@Z ENDP					; gen::Sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\basemath.h
;	COMDAT ?Abs@gen@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?Abs@gen@@YAMM@Z PROC					; gen::Abs, COMDAT

; 80   : inline TFloat32 Abs( const TFloat32 x ) { return fabsf( x ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Abs@gen@@YAMM@Z ENDP					; gen::Abs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\math\basemath.h
;	COMDAT ?Abs@gen@@YAIH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?Abs@gen@@YAIH@Z PROC					; gen::Abs, COMDAT

; 78   : inline TUInt32 Abs( const TInt32 x ) { return abs( static_cast<int>(x) ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	_abs
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Abs@gen@@YAIH@Z ENDP					; gen::Abs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0CFatalException@gen@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CFatalException@gen@@QAE@ABV01@@Z PROC		; gen::CFatalException::CFatalException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CFatalException@gen@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+56], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 60					; 0000003cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CFatalException@gen@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CFatalException@gen@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0CFatalException@gen@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CFatalException@gen@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CFatalException@gen@@QAE@ABV01@@Z ENDP		; gen::CFatalException::CFatalException
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1CFatalException@gen@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CFatalException@gen@@QAE@XZ PROC			; gen::CFatalException::~CFatalException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CFatalException@gen@@QAE@XZ ENDP			; gen::CFatalException::~CFatalException
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\common\cfatalexception.h
;	COMDAT ??0CFatalException@gen@@QAE@PBD00@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_sFileName$ = 8						; size = 4
_sFunction$ = 12					; size = 4
_sObject$ = 16						; size = 4
??0CFatalException@gen@@QAE@PBD00@Z PROC		; gen::CFatalException::CFatalException, COMDAT
; _this$ = ecx

; 51   : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CFatalException@gen@@QAE@PBD00@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??_C@_0BE@HBKCGNOA@Unhandled?5Exception?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _sFileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], -1
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 52   : 		AppendToCallStack( sFunction, sObject );

	push	0
	mov	eax, DWORD PTR _sObject$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sFunction$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack

; 53   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CFatalException@gen@@QAE@PBD00@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CFatalException@gen@@QAE@PBD00@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CFatalException@gen@@QAE@PBD00@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0CFatalException@gen@@QAE@PBD00@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CFatalException@gen@@QAE@PBD00@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CFatalException@gen@@QAE@PBD00@Z ENDP		; gen::CFatalException::CFatalException
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\common\cfatalexception.h
;	COMDAT ??0CFatalException@gen@@QAE@PBD0H@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_sDescription$ = 8					; size = 4
_sFileName$ = 12					; size = 4
_iLineNum$ = 16						; size = 4
??0CFatalException@gen@@QAE@PBD0H@Z PROC		; gen::CFatalException::CFatalException, COMDAT
; _this$ = ecx

; 40   : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CFatalException@gen@@QAE@PBD0H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _sDescription$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _sFileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iLineNum$[ebp]
	mov	DWORD PTR [eax+56], ecx
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 41   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CFatalException@gen@@QAE@PBD0H@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CFatalException@gen@@QAE@PBD0H@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0CFatalException@gen@@QAE@PBD0H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CFatalException@gen@@QAE@PBD0H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CFatalException@gen@@QAE@PBD0H@Z ENDP		; gen::CFatalException::CFatalException
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\common\gendefines.h
;	COMDAT ?ObjectName@gen@@YAPBDXZ
_TEXT	SEGMENT
?ObjectName@gen@@YAPBDXZ PROC				; gen::ObjectName, COMDAT

; 98   : inline const char* ObjectName() { return ""; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ObjectName@gen@@YAPBDXZ ENDP				; gen::ObjectName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__FksNewline@gen@@YAXXZ
text$yd	SEGMENT
??__FksNewline@gen@@YAXXZ PROC				; gen::`dynamic atexit destructor for 'ksNewline'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET _ksNewline
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__FksNewline@gen@@YAXXZ ENDP				; gen::`dynamic atexit destructor for 'ksNewline''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\common\msdefines.h
;	COMDAT ??__EksNewline@gen@@YAXXZ
text$di	SEGMENT
??__EksNewline@gen@@YAXXZ PROC				; gen::`dynamic initializer for 'ksNewline'', COMDAT

; 86   : const string ksNewline = "\n";

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	mov	ecx, OFFSET _ksNewline
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	push	OFFSET ??__FksNewline@gen@@YAXXZ	; gen::`dynamic atexit destructor for 'ksNewline''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__EksNewline@gen@@YAXXZ ENDP				; gen::`dynamic initializer for 'ksNewline''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__FksPathSeparator@gen@@YAXXZ
text$yd	SEGMENT
??__FksPathSeparator@gen@@YAXXZ PROC			; gen::`dynamic atexit destructor for 'ksPathSeparator'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET _ksPathSeparator
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__FksPathSeparator@gen@@YAXXZ ENDP			; gen::`dynamic atexit destructor for 'ksPathSeparator''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\common\msdefines.h
;	COMDAT ??__EksPathSeparator@gen@@YAXXZ
text$di	SEGMENT
??__EksPathSeparator@gen@@YAXXZ PROC			; gen::`dynamic initializer for 'ksPathSeparator'', COMDAT

; 85   : const string ksPathSeparator = "\\";

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	OFFSET ??_C@_01KICIPPFI@?2?$AA@
	mov	ecx, OFFSET _ksPathSeparator
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	push	OFFSET ??__FksPathSeparator@gen@@YAXXZ	; gen::`dynamic atexit destructor for 'ksPathSeparator''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__EksPathSeparator@gen@@YAXXZ ENDP			; gen::`dynamic initializer for 'ksPathSeparator''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__FksCompiler@gen@@YAXXZ
text$yd	SEGMENT
??__FksCompiler@gen@@YAXXZ PROC				; gen::`dynamic atexit destructor for 'ksCompiler'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET _ksCompiler
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__FksCompiler@gen@@YAXXZ ENDP				; gen::`dynamic atexit destructor for 'ksCompiler''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\common\msdefines.h
;	COMDAT ??__EksCompiler@gen@@YAXXZ
text$di	SEGMENT
??__EksCompiler@gen@@YAXXZ PROC				; gen::`dynamic initializer for 'ksCompiler'', COMDAT

; 80   : 	static const string ksCompiler = "Visual C++ 8.0 (2005) or greater";

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	OFFSET ??_C@_0CB@NBMGHEOM@Visual?5C?$CL?$CL?58?40?5?$CI2005?$CJ?5or?5greater@
	mov	ecx, OFFSET _ksCompiler
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	push	OFFSET ??__FksCompiler@gen@@YAXXZ	; gen::`dynamic atexit destructor for 'ksCompiler''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__EksCompiler@gen@@YAXXZ ENDP				; gen::`dynamic initializer for 'ksCompiler''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 614  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 615  : 		if (_Syserror_map(_Errval))

	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	test	eax, eax
	je	SHORT $LN2@default_er

; 616  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 617  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 618  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 619  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
tv69 = -232						; size = 4
$T1 = -224						; size = 4
__Name$ = -20						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 607  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 608  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Winerror_map@std@@YAPBDH@Z		; std::_Winerror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 609  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	eax, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	ecx, DWORD PTR tv69[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	edx, DWORD PTR $T1[ebp]
	or	edx, 1
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 610  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 602  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 603  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 604  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 597  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 598  : 		{	// default constructor
; 599  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 584  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 585  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 586  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 587  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 588  : 			return (_Generic_error_category::message(_Errcode));

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	edx, DWORD PTR $T1[ebp]
	or	edx, 1
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 589  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 579  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 580  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 581  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 574  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 575  : 		{	// default constructor
; 576  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
tv69 = -232						; size = 4
$T1 = -224						; size = 4
__Name$ = -20						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 563  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 564  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	?_Syserror_map@std@@YAPBDH@Z		; std::_Syserror_map
	add	esp, 4
	mov	DWORD PTR __Name$[ebp], eax

; 565  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	eax, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	ecx, DWORD PTR tv69[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	edx, DWORD PTR $T1[ebp]
	or	edx, 1
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 566  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 558  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 559  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 560  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 553  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 554  : 		{	// default constructor
; 555  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -208						; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 352  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 353  : 		return (category() == _Right.category()
; 354  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 355  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 337  : 		{	// get category

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 338  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 339  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 332  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 333  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 334  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 299  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 300  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 246  : 		{	// get category

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 247  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 248  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 241  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 242  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 243  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 176  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 177  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 178  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
tv74 = -208						; size = 4
_this$ = -8						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 391  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 392  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 393  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -216						; size = 8
_this$ = -8						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 384  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 385  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	esi, esp
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 386  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 377  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 378  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 379  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 159  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 160  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 154  : 	error_category()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 155  : 		{	// default constructor
; 156  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 652  : 	{	// get system_category

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 653  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 654  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 642  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 643  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 644  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z PROC		; std::_Debug_pointer<char>, COMDAT

; 545  : 	{	// test iterator for non-singularity, const pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 546  : 	if (_First == 0)

	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin

; 547  : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);

	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	?_Debug_message@std@@YAXPB_W0I@Z	; std::_Debug_message
	add	esp, 12					; 0000000cH
$LN2@Debug_poin:

; 548  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ENDP		; std::_Debug_pointer<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx

; 74   : 			{	// construct with specified stamp value

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx

; 75   : 			}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2294 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2295 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	?_Xout_of_range@std@@YAXPBD@Z		; std::_Xout_of_range
$LN2@Xran:

; 2296 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2289 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2290 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 2291 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
$T1 = -233						; size = 1
$T2 = -221						; size = 1
__Ptr$3 = -20						; size = 4
_this$ = -8						; size = 4
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2272 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2273 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2274 : 			;
; 2275 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2276 : 			{	// copy any leftovers to small buffer and deallocate
; 2277 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Ptr$3[ebp], ecx

; 2278 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2279 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2280 : 				_Traits::copy(this->_Bx._Buf,
; 2281 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$3[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2282 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$3[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2283 : 			}
; 2284 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 15			; 0000000fH

; 2285 : 		_Eos(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2286 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2256 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2257 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2258 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2259 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2260 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2261 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2262 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -208						; size = 4
tv129 = -208						; size = 4
_this$ = -8						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2242 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2243 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2244 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2245 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2246 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2247 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	eax, BYTE PTR __Trim$[ebp]
	test	eax, eax
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2248 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2249 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2250 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2251 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2252 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2253 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2236 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2237 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+20], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2238 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -288						; size = 4
tv203 = -288						; size = 4
tv204 = -284						; size = 4
tv202 = -284						; size = 4
$T2 = -273						; size = 1
$T3 = -261						; size = 1
$T4 = -249						; size = 1
__Ptr$ = -48						; size = 4
__Newres$ = -36						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2201 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2202 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2203 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2204 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	eax, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], eax
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2205 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2206 : 			;
; 2207 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+24]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], eax
	ja	SHORT $LN5@Copy

; 2208 : 			_Newres = this->_Myres
; 2209 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR __Newres$[ebp], ecx

; 2210 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2211 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2212 : 
; 2213 : 		_Elem *_Ptr;
; 2214 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2215 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	edx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2216 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2217 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	eax, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], eax

; 2218 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2219 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2220 : 			_CATCH_ALL
; 2221 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2222 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2223 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2224 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2225 : 
; 2226 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2227 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2228 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2229 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2230 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2231 : 		this->_Myres = _Newres;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 2232 : 		_Eos(_Oldlen);

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2233 : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@Copy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN23@Copy:
	DD	1
	DD	$LN22@Copy
$LN22@Copy:
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN20@Copy
$LN20@Copy:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-292]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
tv75 = -232						; size = 4
$T1 = -221						; size = 1
__Num$ = -20						; size = 4
_this$ = -8						; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1758 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1759 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1760 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	eax, DWORD PTR __Num$[ebp]
	sub	eax, 1
	mov	DWORD PTR tv75[ebp], eax
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1761 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1753 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1754 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]

; 1755 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -32					; size = 4
__Ptr$2 = -20						; size = 4
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1342 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1343 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1344 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1345 : 		if (this->_Mysize - _Off <= _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR __Off$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1346 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1347 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1348 : 			{	// move elements down
; 1349 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1350 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], ecx

; 1351 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	eax, DWORD PTR __Newsize$1[ebp]
	sub	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$2[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	push	edx
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1352 : 			_Eos(_Newsize);

	mov	eax, DWORD PTR __Newsize$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1353 : 			}
; 1354 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1355 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1334 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1335 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1336 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1337 : 		_Eos(_Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1338 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1339 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1167 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1168 : 		_DEBUG_POINTER(_Ptr);

	push	1168					; 00000490H
	push	OFFSET ??_C@_1IO@JLPDPDPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z	; std::_Debug_pointer<char>
	add	esp, 12					; 0000000cH

; 1169 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1170 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1148 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1149 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1150 : 		if (_Count != 0)

	cmp	DWORD PTR __Count$[ebp], 0
	je	SHORT $LN3@assign

; 1151 : 			_DEBUG_POINTER(_Ptr);

	push	1151					; 0000047fH
	push	OFFSET ??_C@_1IO@JLPDPDPD@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z	; std::_Debug_pointer<char>
	add	esp, 12					; 0000000cH
$LN3@assign:

; 1152 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1153 : 
; 1154 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1155 : 			return (assign(*this,
; 1156 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN4@assign
$LN2@assign:

; 1157 : 
; 1158 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1159 : 			{	// make room and assign new stuff
; 1160 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1161 : 			_Eos(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1162 : 			}
; 1163 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN4@assign:

; 1164 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -20						; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1129 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1130 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1131 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1132 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1133 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1134 : 			_Num = _Count;	// trim _Num to size

	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], eax
$LN4@assign:

; 1135 : 
; 1136 : 		if (this == &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1137 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1138 : 		else if (_Grow(_Num))

	push	0
	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1139 : 			{	// make room and assign new stuff
; 1140 : 			_Traits::copy(this->_Myptr(),
; 1141 : 				_Right._Myptr() + _Roff, _Num);

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1142 : 			_Eos(_Num);

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1143 : 			}
; 1144 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1145 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 990  : 		{	// destroy the string

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 991  : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 992  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
$T2 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 780  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 781  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 782  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 783  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T2 = -233						; size = 1
$T3 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 724  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<char> >::select_on_container_copy_construction
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 725  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 726  : 		assign(_Right, 0, npos);

	mov	eax, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
	push	eax
	push	0
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 727  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-244]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 683  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 684  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 685  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Alproxy$ = -17					; size = 1
_this$ = -8						; size = 4
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Free_proxy, COMDAT
; _this$ = ecx

; 672  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 673  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 674  : 			_Alproxy;

	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>

; 675  : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 676  : 		_Alproxy.destroy(this->_Myproxy);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>

; 677  : 		_Alproxy.deallocate(this->_Myproxy, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate

; 678  : 		this->_Myproxy = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 679  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Free_proxy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Free_proxy:
	DD	1
	DD	$LN4@Free_proxy
$LN4@Free_proxy:
	DD	-17					; ffffffefH
	DD	1
	DD	$LN3@Free_proxy
$LN3@Free_proxy:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -228						; size = 8
__Alproxy$ = -17					; size = 1
_this$ = -8						; size = 4
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 663  : 		{	// construct proxy from _Alval

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 664  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 665  : 			_Alproxy;

	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>

; 666  : 		this->_Myproxy = _Alproxy.allocate(1);

	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 667  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());

	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>

; 668  : 		this->_Myproxy->_Mycont = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 669  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Alloc_prox
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Alloc_prox:
	DD	1
	DD	$LN4@Alloc_prox
$LN4@Alloc_prox:
	DD	-17					; ffffffefH
	DD	1
	DD	$LN3@Alloc_prox
$LN3@Alloc_prox:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 649  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 650  : 		_Free_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Free_proxy

; 651  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 643  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 644  : 		{	// construct allocator from _Al
; 645  : 		_Alloc_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy

; 646  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base12@std@@QAE@XZ	; std::_Container_base12::~_Container_base12
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -208						; size = 4
_this$ = -8						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 517  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 518  : 		return (this->_BUF_SIZE <= this->_Myres
; 519  : 			? _STD addressof(*this->_Bx._Ptr)
; 520  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 521  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -208						; size = 4
_this$ = -8						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 510  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 511  : 		return (this->_BUF_SIZE <= this->_Myres
; 512  : 			? _STD addressof(*this->_Bx._Ptr)
; 513  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 514  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 492  : 	_String_val()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12

; 493  : 		{	// initialize values
; 494  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 495  : 		_Myres = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0

; 496  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 883  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 884  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 885  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 857  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 858  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 859  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 846  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 847  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 848  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 806  : 		{	// construct by copying base

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@ABV01@@Z	; std::allocator<char>::allocator<char>

; 807  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 801  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 802  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@XZ
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@XZ PROC ; std::_Wrap_alloc<std::allocator<char> >::select_on_container_copy_construction, COMDAT
; _this$ = ecx

; 778  : 		{	// get allocator to use

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 779  : 		return (_Mytraits::select_on_container_copy_construction(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 780  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@XZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z PROC ; std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction, COMDAT

; 740  : 		{	// get allocator to use

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 741  : 		return (_Al.select_on_container_copy_construction());

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?select_on_container_copy_construction@?$allocator@D@std@@QBE?AV12@XZ ; std::allocator<char>::select_on_container_copy_construction
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 742  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ENDP ; std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 734  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 735  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 736  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 611  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 612  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 613  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 577  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 578  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 579  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 572  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 573  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 574  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 556  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 557  : 		{	// construct by copying (do nothing)
; 558  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 552  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 553  : 		{	// construct default allocator (do nothing)
; 554  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$allocator@D@std@@QBE?AV12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?select_on_container_copy_construction@?$allocator@D@std@@QBE?AV12@XZ PROC ; std::allocator<char>::select_on_container_copy_construction, COMDAT
; _this$ = ecx

; 532  : 		{	// return this allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 533  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$allocator@D@std@@QAE@ABV01@@Z	; std::allocator<char>::allocator<char>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 534  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?select_on_container_copy_construction@?$allocator@D@std@@QBE?AV12@XZ ENDP ; std::allocator<char>::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$di	SEGMENT
$T1 = -197						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3451 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
__Pnext$1 = -32						; size = 4
__Lock$2 = -20						; size = 4
_this$ = -8						; size = 4
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 214  : 	{	// orphan all iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 215  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 216  : 	if (_Myproxy != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@Orphan_all

; 217  : 		{	// proxy allocated, drain it
; 218  : 		_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 219  : 
; 220  : 		for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$1[ebp], ecx

; 221  : 			*_Pnext != 0; *_Pnext = (*_Pnext)->_Mynextiter)

	jmp	SHORT $LN3@Orphan_all
$LN2@Orphan_all:
	mov	eax, DWORD PTR __Pnext$1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnext$1[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
$LN3@Orphan_all:
	mov	eax, DWORD PTR __Pnext$1[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Orphan_all

; 222  : 			(*_Pnext)->_Myproxy = 0;

	mov	eax, DWORD PTR __Pnext$1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], 0
	jmp	SHORT $LN2@Orphan_all
$LN1@Orphan_all:

; 223  : 		_Myproxy->_Myfirstiter = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+4], 0

; 224  : 		}

	lea	ecx, DWORD PTR __Lock$2[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
$LN5@Orphan_all:

; 225  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 226  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Orphan_all
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@Orphan_all:
	DD	1
	DD	$LN9@Orphan_all
$LN9@Orphan_all:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN8@Orphan_all
$LN8@Orphan_all:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??1_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::~_Container_base12, COMDAT
; _this$ = ecx

; 94   : 		{	// destroy the container

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 		_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all

; 96   : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::~_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 80   : 		{	// construct childless container

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 81   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\xutility
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 68   : 		{	// construct from pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 69   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$di	SEGMENT
$T1 = -197						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 70   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -196						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -196						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -196						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 65   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv71 = -196						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 774  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 775  :     return (float)sqrt(_X);

	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv71[ebp]
	fld	DWORD PTR tv71[ebp]

; 776  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -196						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 764  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 765  :     return (float)sin(_X);

	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	DWORD PTR tv71[ebp]
	fld	DWORD PTR tv71[ebp]

; 766  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -196						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 686  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 687  :     return (float)fabs(_X);

	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	DWORD PTR tv71[ebp]
	fld	DWORD PTR tv71[ebp]

; 688  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv71 = -196						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 663  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 664  :     return (float)cos(_X);

	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	DWORD PTR tv71[ebp]
	fld	DWORD PTR tv71[ebp]

; 665  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv74 = -196						; size = 4
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 648  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 649  :     return (float)atan2(_Y, _X);

	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR __Y$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan2
	add	esp, 16					; 00000010H
	fstp	DWORD PTR tv74[ebp]
	fld	DWORD PTR tv74[ebp]

; 650  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\math.h
;	COMDAT _hypot
_TEXT	SEGMENT
__X$ = 8						; size = 8
__Y$ = 16						; size = 8
_hypot	PROC						; COMDAT

; 556  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 557  :     return _hypot(_X, _Y);

	sub	esp, 8
	movsd	xmm0, QWORD PTR __Y$[ebp]
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR __X$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	__hypot
	add	esp, 16					; 00000010H

; 558  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_hypot	ENDP
_TEXT	ENDS
END
