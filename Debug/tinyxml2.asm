; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

	TITLE	C:\Users\Simon\Documents\GitHub\UCLAN-sparta\Import\TinyXML\tinyxml2.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	??_C@_0M@OFJBHGBM@XML_SUCCESS?$AA@		; `string'
PUBLIC	??_C@_0BB@IGIENDAL@XML_NO_ATTRIBUTE?$AA@	; `string'
PUBLIC	??_C@_0BJ@NLEFELMO@XML_WRONG_ATTRIBUTE_TYPE?$AA@ ; `string'
PUBLIC	??_C@_0BJ@FAMPBCLJ@XML_ERROR_FILE_NOT_FOUND?$AA@ ; `string'
PUBLIC	??_C@_0CD@IINDOEGO@XML_ERROR_FILE_COULD_NOT_BE_OPEN@ ; `string'
PUBLIC	??_C@_0BK@LJEPDGMH@XML_ERROR_FILE_READ_ERROR?$AA@ ; `string'
PUBLIC	??_C@_0BL@NNOBPLPE@XML_ERROR_ELEMENT_MISMATCH?$AA@ ; `string'
PUBLIC	??_C@_0BK@LPPPMOBG@XML_ERROR_PARSING_ELEMENT?$AA@ ; `string'
PUBLIC	??_C@_0BM@LDAFAPCN@XML_ERROR_PARSING_ATTRIBUTE?$AA@ ; `string'
PUBLIC	??_C@_0BK@HFOKKMCK@XML_ERROR_IDENTIFYING_TAG?$AA@ ; `string'
PUBLIC	??_C@_0BH@GPBIBIKN@XML_ERROR_PARSING_TEXT?$AA@	; `string'
PUBLIC	??_C@_0BI@EPMILKIP@XML_ERROR_PARSING_CDATA?$AA@	; `string'
PUBLIC	??_C@_0BK@KECLFPGB@XML_ERROR_PARSING_COMMENT?$AA@ ; `string'
PUBLIC	??_C@_0BO@JFKIELCK@XML_ERROR_PARSING_DECLARATION?$AA@ ; `string'
PUBLIC	??_C@_0BK@OFBGHHPE@XML_ERROR_PARSING_UNKNOWN?$AA@ ; `string'
PUBLIC	??_C@_0BJ@CHGEEKHN@XML_ERROR_EMPTY_DOCUMENT?$AA@ ; `string'
PUBLIC	??_C@_0BN@LCLEMLDC@XML_ERROR_MISMATCHED_ELEMENT?$AA@ ; `string'
PUBLIC	??_C@_0BC@IEJHGDCA@XML_ERROR_PARSING?$AA@	; `string'
PUBLIC	??_C@_0BJ@NENGEPDP@XML_CAN_NOT_CONVERT_TEXT?$AA@ ; `string'
PUBLIC	??_C@_0BB@PLDKPHOM@XML_NO_TEXT_NODE?$AA@	; `string'
PUBLIC	??_C@_04KJFGKBNM@quot?$AA@			; `string'
PUBLIC	??_C@_03DCBBJBAA@amp?$AA@			; `string'
PUBLIC	??_C@_04LBCJFAKL@apos?$AA@			; `string'
PUBLIC	??_C@_02KCAKIFL@lt?$AA@				; `string'
PUBLIC	??_C@_02GHFEHLK@gt?$AA@				; `string'
PUBLIC	?_errorNames@XMLDocument@tinyxml2@@0PAPBDA	; tinyxml2::XMLDocument::_errorNames
PUBLIC	??_C@_02HFBBBACF@?$DM?$DP?$AA@			; `string'
PUBLIC	??_C@_04FFDNBKGC@?$DM?$CB?9?9?$AA@		; `string'
PUBLIC	??_C@_02KBFACPPK@?$DM?$CB?$AA@			; `string'
PUBLIC	??_C@_09BLLNCBLF@?$DM?$CB?$FLCDATA?$FL?$AA@	; `string'
PUBLIC	??_C@_01MNNFJEPP@?$DM?$AA@			; `string'
;	COMDAT ??_C@_01MNNFJEPP@?$DM?$AA@
CONST	SEGMENT
??_C@_01MNNFJEPP@?$DM?$AA@ DB '<', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09BLLNCBLF@?$DM?$CB?$FLCDATA?$FL?$AA@
CONST	SEGMENT
??_C@_09BLLNCBLF@?$DM?$CB?$FLCDATA?$FL?$AA@ DB '<![CDATA[', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KBFACPPK@?$DM?$CB?$AA@
CONST	SEGMENT
??_C@_02KBFACPPK@?$DM?$CB?$AA@ DB '<!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FFDNBKGC@?$DM?$CB?9?9?$AA@
CONST	SEGMENT
??_C@_04FFDNBKGC@?$DM?$CB?9?9?$AA@ DB '<!--', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02HFBBBACF@?$DM?$DP?$AA@
CONST	SEGMENT
??_C@_02HFBBBACF@?$DM?$DP?$AA@ DB '<?', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
?_errorNames@XMLDocument@tinyxml2@@0PAPBDA DD FLAT:??_C@_0M@OFJBHGBM@XML_SUCCESS?$AA@ ; tinyxml2::XMLDocument::_errorNames
	DD	FLAT:??_C@_0BB@IGIENDAL@XML_NO_ATTRIBUTE?$AA@
	DD	FLAT:??_C@_0BJ@NLEFELMO@XML_WRONG_ATTRIBUTE_TYPE?$AA@
	DD	FLAT:??_C@_0BJ@FAMPBCLJ@XML_ERROR_FILE_NOT_FOUND?$AA@
	DD	FLAT:??_C@_0CD@IINDOEGO@XML_ERROR_FILE_COULD_NOT_BE_OPEN@
	DD	FLAT:??_C@_0BK@LJEPDGMH@XML_ERROR_FILE_READ_ERROR?$AA@
	DD	FLAT:??_C@_0BL@NNOBPLPE@XML_ERROR_ELEMENT_MISMATCH?$AA@
	DD	FLAT:??_C@_0BK@LPPPMOBG@XML_ERROR_PARSING_ELEMENT?$AA@
	DD	FLAT:??_C@_0BM@LDAFAPCN@XML_ERROR_PARSING_ATTRIBUTE?$AA@
	DD	FLAT:??_C@_0BK@HFOKKMCK@XML_ERROR_IDENTIFYING_TAG?$AA@
	DD	FLAT:??_C@_0BH@GPBIBIKN@XML_ERROR_PARSING_TEXT?$AA@
	DD	FLAT:??_C@_0BI@EPMILKIP@XML_ERROR_PARSING_CDATA?$AA@
	DD	FLAT:??_C@_0BK@KECLFPGB@XML_ERROR_PARSING_COMMENT?$AA@
	DD	FLAT:??_C@_0BO@JFKIELCK@XML_ERROR_PARSING_DECLARATION?$AA@
	DD	FLAT:??_C@_0BK@OFBGHHPE@XML_ERROR_PARSING_UNKNOWN?$AA@
	DD	FLAT:??_C@_0BJ@CHGEEKHN@XML_ERROR_EMPTY_DOCUMENT?$AA@
	DD	FLAT:??_C@_0BN@LCLEMLDC@XML_ERROR_MISMATCHED_ELEMENT?$AA@
	DD	FLAT:??_C@_0BC@IEJHGDCA@XML_ERROR_PARSING?$AA@
	DD	FLAT:??_C@_0BJ@NENGEPDP@XML_CAN_NOT_CONVERT_TEXT?$AA@
	DD	FLAT:??_C@_0BB@PLDKPHOM@XML_NO_TEXT_NODE?$AA@
?xmlHeader@?4??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4PBDB DD FLAT:??_C@_02HFBBBACF@?$DM?$DP?$AA@ ; `tinyxml2::XMLDocument::Identify'::`5'::xmlHeader
?commentHeader@?4??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4PBDB DD FLAT:??_C@_04FFDNBKGC@?$DM?$CB?9?9?$AA@ ; `tinyxml2::XMLDocument::Identify'::`5'::commentHeader
?dtdHeader@?4??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4PBDB DD FLAT:??_C@_02KBFACPPK@?$DM?$CB?$AA@ ; `tinyxml2::XMLDocument::Identify'::`5'::dtdHeader
?cdataHeader@?4??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4PBDB DD FLAT:??_C@_09BLLNCBLF@?$DM?$CB?$FLCDATA?$FL?$AA@ ; `tinyxml2::XMLDocument::Identify'::`5'::cdataHeader
?elementHeader@?4??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4PBDB DD FLAT:??_C@_01MNNFJEPP@?$DM?$AA@ ; `tinyxml2::XMLDocument::Identify'::`5'::elementHeader
_DATA	ENDS
;	COMDAT ??_C@_02GHFEHLK@gt?$AA@
CONST	SEGMENT
??_C@_02GHFEHLK@gt?$AA@ DB 'gt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KCAKIFL@lt?$AA@
CONST	SEGMENT
??_C@_02KCAKIFL@lt?$AA@ DB 'lt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LBCJFAKL@apos?$AA@
CONST	SEGMENT
??_C@_04LBCJFAKL@apos?$AA@ DB 'apos', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DCBBJBAA@amp?$AA@
CONST	SEGMENT
??_C@_03DCBBJBAA@amp?$AA@ DB 'amp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04KJFGKBNM@quot?$AA@
CONST	SEGMENT
??_C@_04KJFGKBNM@quot?$AA@ DB 'quot', 00H		; `string'
CONST	ENDS
CONST	SEGMENT
_entities DD	FLAT:??_C@_04KJFGKBNM@quot?$AA@
	DD	04H
	DB	022H
	ORG $+3
	DD	FLAT:??_C@_03DCBBJBAA@amp?$AA@
	DD	03H
	DB	026H
	ORG $+3
	DD	FLAT:??_C@_04LBCJFAKL@apos?$AA@
	DD	04H
	DB	027H
	ORG $+3
	DD	FLAT:??_C@_02KCAKIFL@lt?$AA@
	DD	02H
	DB	03cH
	ORG $+3
	DD	FLAT:??_C@_02GHFEHLK@gt?$AA@
	DD	02H
	DB	03eH
	ORG $+3
?LEN@?4??PrintError@XMLDocument@tinyxml2@@QBEXXZ@4HB DD 014H ; `tinyxml2::XMLDocument::PrintError'::`5'::LEN
?bom@?4??PushHeader@XMLPrinter@tinyxml2@@QAEX_N0@Z@4QBEB DB 0efH ; `tinyxml2::XMLPrinter::PushHeader'::`5'::bom
	DB	0bbH
	DB	0bfH
	DB	00H
?xmlHeaderLen@?4??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4HB DD 02H ; `tinyxml2::XMLDocument::Identify'::`5'::xmlHeaderLen
?commentHeaderLen@?4??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4HB DD 04H ; `tinyxml2::XMLDocument::Identify'::`5'::commentHeaderLen
?dtdHeaderLen@?4??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4HB DD 02H ; `tinyxml2::XMLDocument::Identify'::`5'::dtdHeaderLen
?cdataHeaderLen@?4??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4HB DD 09H ; `tinyxml2::XMLDocument::Identify'::`5'::cdataHeaderLen
?elementHeaderLen@?4??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4HB DD 01H ; `tinyxml2::XMLDocument::Identify'::`5'::elementHeaderLen
CONST	ENDS
;	COMDAT ??_C@_0BB@PLDKPHOM@XML_NO_TEXT_NODE?$AA@
CONST	SEGMENT
??_C@_0BB@PLDKPHOM@XML_NO_TEXT_NODE?$AA@ DB 'XML_NO_TEXT_NODE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NENGEPDP@XML_CAN_NOT_CONVERT_TEXT?$AA@
CONST	SEGMENT
??_C@_0BJ@NENGEPDP@XML_CAN_NOT_CONVERT_TEXT?$AA@ DB 'XML_CAN_NOT_CONVERT_'
	DB	'TEXT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IEJHGDCA@XML_ERROR_PARSING?$AA@
CONST	SEGMENT
??_C@_0BC@IEJHGDCA@XML_ERROR_PARSING?$AA@ DB 'XML_ERROR_PARSING', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LCLEMLDC@XML_ERROR_MISMATCHED_ELEMENT?$AA@
CONST	SEGMENT
??_C@_0BN@LCLEMLDC@XML_ERROR_MISMATCHED_ELEMENT?$AA@ DB 'XML_ERROR_MISMAT'
	DB	'CHED_ELEMENT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CHGEEKHN@XML_ERROR_EMPTY_DOCUMENT?$AA@
CONST	SEGMENT
??_C@_0BJ@CHGEEKHN@XML_ERROR_EMPTY_DOCUMENT?$AA@ DB 'XML_ERROR_EMPTY_DOCU'
	DB	'MENT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@OFBGHHPE@XML_ERROR_PARSING_UNKNOWN?$AA@
CONST	SEGMENT
??_C@_0BK@OFBGHHPE@XML_ERROR_PARSING_UNKNOWN?$AA@ DB 'XML_ERROR_PARSING_U'
	DB	'NKNOWN', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JFKIELCK@XML_ERROR_PARSING_DECLARATION?$AA@
CONST	SEGMENT
??_C@_0BO@JFKIELCK@XML_ERROR_PARSING_DECLARATION?$AA@ DB 'XML_ERROR_PARSI'
	DB	'NG_DECLARATION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KECLFPGB@XML_ERROR_PARSING_COMMENT?$AA@
CONST	SEGMENT
??_C@_0BK@KECLFPGB@XML_ERROR_PARSING_COMMENT?$AA@ DB 'XML_ERROR_PARSING_C'
	DB	'OMMENT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EPMILKIP@XML_ERROR_PARSING_CDATA?$AA@
CONST	SEGMENT
??_C@_0BI@EPMILKIP@XML_ERROR_PARSING_CDATA?$AA@ DB 'XML_ERROR_PARSING_CDA'
	DB	'TA', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GPBIBIKN@XML_ERROR_PARSING_TEXT?$AA@
CONST	SEGMENT
??_C@_0BH@GPBIBIKN@XML_ERROR_PARSING_TEXT?$AA@ DB 'XML_ERROR_PARSING_TEXT'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HFOKKMCK@XML_ERROR_IDENTIFYING_TAG?$AA@
CONST	SEGMENT
??_C@_0BK@HFOKKMCK@XML_ERROR_IDENTIFYING_TAG?$AA@ DB 'XML_ERROR_IDENTIFYI'
	DB	'NG_TAG', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LDAFAPCN@XML_ERROR_PARSING_ATTRIBUTE?$AA@
CONST	SEGMENT
??_C@_0BM@LDAFAPCN@XML_ERROR_PARSING_ATTRIBUTE?$AA@ DB 'XML_ERROR_PARSING'
	DB	'_ATTRIBUTE', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LPPPMOBG@XML_ERROR_PARSING_ELEMENT?$AA@
CONST	SEGMENT
??_C@_0BK@LPPPMOBG@XML_ERROR_PARSING_ELEMENT?$AA@ DB 'XML_ERROR_PARSING_E'
	DB	'LEMENT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NNOBPLPE@XML_ERROR_ELEMENT_MISMATCH?$AA@
CONST	SEGMENT
??_C@_0BL@NNOBPLPE@XML_ERROR_ELEMENT_MISMATCH?$AA@ DB 'XML_ERROR_ELEMENT_'
	DB	'MISMATCH', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LJEPDGMH@XML_ERROR_FILE_READ_ERROR?$AA@
CONST	SEGMENT
??_C@_0BK@LJEPDGMH@XML_ERROR_FILE_READ_ERROR?$AA@ DB 'XML_ERROR_FILE_READ'
	DB	'_ERROR', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@IINDOEGO@XML_ERROR_FILE_COULD_NOT_BE_OPEN@
CONST	SEGMENT
??_C@_0CD@IINDOEGO@XML_ERROR_FILE_COULD_NOT_BE_OPEN@ DB 'XML_ERROR_FILE_C'
	DB	'OULD_NOT_BE_OPENED', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FAMPBCLJ@XML_ERROR_FILE_NOT_FOUND?$AA@
CONST	SEGMENT
??_C@_0BJ@FAMPBCLJ@XML_ERROR_FILE_NOT_FOUND?$AA@ DB 'XML_ERROR_FILE_NOT_F'
	DB	'OUND', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NLEFELMO@XML_WRONG_ATTRIBUTE_TYPE?$AA@
CONST	SEGMENT
??_C@_0BJ@NLEFELMO@XML_WRONG_ATTRIBUTE_TYPE?$AA@ DB 'XML_WRONG_ATTRIBUTE_'
	DB	'TYPE', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IGIENDAL@XML_NO_ATTRIBUTE?$AA@
CONST	SEGMENT
??_C@_0BB@IGIENDAL@XML_NO_ATTRIBUTE?$AA@ DB 'XML_NO_ATTRIBUTE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OFJBHGBM@XML_SUCCESS?$AA@
CONST	SEGMENT
??_C@_0M@OFJBHGBM@XML_SUCCESS?$AA@ DB 'XML_SUCCESS', 00H ; `string'
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	?TIXML_SNPRINTF@@YAHPADIPBDZZ			; TIXML_SNPRINTF
PUBLIC	??0StrPair@tinyxml2@@QAE@XZ			; tinyxml2::StrPair::StrPair
PUBLIC	??1StrPair@tinyxml2@@QAE@XZ			; tinyxml2::StrPair::~StrPair
PUBLIC	?Set@StrPair@tinyxml2@@QAEXPAD0H@Z		; tinyxml2::StrPair::Set
PUBLIC	?GetStr@StrPair@tinyxml2@@QAEPBDXZ		; tinyxml2::StrPair::GetStr
PUBLIC	?Empty@StrPair@tinyxml2@@QBE_NXZ		; tinyxml2::StrPair::Empty
PUBLIC	?SetInternedStr@StrPair@tinyxml2@@QAEXPBD@Z	; tinyxml2::StrPair::SetInternedStr
PUBLIC	?SetStr@StrPair@tinyxml2@@QAEXPBDH@Z		; tinyxml2::StrPair::SetStr
PUBLIC	?ParseText@StrPair@tinyxml2@@QAEPADPADPBDH@Z	; tinyxml2::StrPair::ParseText
PUBLIC	?ParseName@StrPair@tinyxml2@@QAEPADPAD@Z	; tinyxml2::StrPair::ParseName
PUBLIC	?Reset@StrPair@tinyxml2@@AAEXXZ			; tinyxml2::StrPair::Reset
PUBLIC	?CollapseWhitespace@StrPair@tinyxml2@@AAEXXZ	; tinyxml2::StrPair::CollapseWhitespace
PUBLIC	??0MemPool@tinyxml2@@QAE@XZ			; tinyxml2::MemPool::MemPool
PUBLIC	??1MemPool@tinyxml2@@UAE@XZ			; tinyxml2::MemPool::~MemPool
PUBLIC	??_GMemPool@tinyxml2@@UAEPAXI@Z			; tinyxml2::MemPool::`scalar deleting destructor'
PUBLIC	??1XMLVisitor@tinyxml2@@UAE@XZ			; tinyxml2::XMLVisitor::~XMLVisitor
PUBLIC	?VisitEnter@XMLVisitor@tinyxml2@@UAE_NABVXMLDocument@2@@Z ; tinyxml2::XMLVisitor::VisitEnter
PUBLIC	?VisitExit@XMLVisitor@tinyxml2@@UAE_NABVXMLDocument@2@@Z ; tinyxml2::XMLVisitor::VisitExit
PUBLIC	?VisitEnter@XMLVisitor@tinyxml2@@UAE_NABVXMLElement@2@PBVXMLAttribute@2@@Z ; tinyxml2::XMLVisitor::VisitEnter
PUBLIC	?VisitExit@XMLVisitor@tinyxml2@@UAE_NABVXMLElement@2@@Z ; tinyxml2::XMLVisitor::VisitExit
PUBLIC	?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLDeclaration@2@@Z ; tinyxml2::XMLVisitor::Visit
PUBLIC	?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLText@2@@Z ; tinyxml2::XMLVisitor::Visit
PUBLIC	?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLComment@2@@Z ; tinyxml2::XMLVisitor::Visit
PUBLIC	?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLUnknown@2@@Z ; tinyxml2::XMLVisitor::Visit
PUBLIC	??0XMLVisitor@tinyxml2@@QAE@XZ			; tinyxml2::XMLVisitor::XMLVisitor
PUBLIC	??_GXMLVisitor@tinyxml2@@UAEPAXI@Z		; tinyxml2::XMLVisitor::`scalar deleting destructor'
PUBLIC	?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPBDPBD@Z	; tinyxml2::XMLUtil::SkipWhiteSpace
PUBLIC	?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPADPAD@Z	; tinyxml2::XMLUtil::SkipWhiteSpace
PUBLIC	?IsWhiteSpace@XMLUtil@tinyxml2@@SA_ND@Z		; tinyxml2::XMLUtil::IsWhiteSpace
PUBLIC	?IsNameStartChar@XMLUtil@tinyxml2@@SA_NE@Z	; tinyxml2::XMLUtil::IsNameStartChar
PUBLIC	?IsNameChar@XMLUtil@tinyxml2@@SA_NE@Z		; tinyxml2::XMLUtil::IsNameChar
PUBLIC	?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z	; tinyxml2::XMLUtil::StringEqual
PUBLIC	?IsUTF8Continuation@XMLUtil@tinyxml2@@SA_ND@Z	; tinyxml2::XMLUtil::IsUTF8Continuation
PUBLIC	?ReadBOM@XMLUtil@tinyxml2@@SAPBDPBDPA_N@Z	; tinyxml2::XMLUtil::ReadBOM
PUBLIC	?GetCharacterRef@XMLUtil@tinyxml2@@SAPBDPBDPADPAH@Z ; tinyxml2::XMLUtil::GetCharacterRef
PUBLIC	?ConvertUTF32ToUTF8@XMLUtil@tinyxml2@@SAXKPADPAH@Z ; tinyxml2::XMLUtil::ConvertUTF32ToUTF8
PUBLIC	?ToStr@XMLUtil@tinyxml2@@SAXHPADH@Z		; tinyxml2::XMLUtil::ToStr
PUBLIC	?ToStr@XMLUtil@tinyxml2@@SAXIPADH@Z		; tinyxml2::XMLUtil::ToStr
PUBLIC	?ToStr@XMLUtil@tinyxml2@@SAX_NPADH@Z		; tinyxml2::XMLUtil::ToStr
PUBLIC	?ToStr@XMLUtil@tinyxml2@@SAXMPADH@Z		; tinyxml2::XMLUtil::ToStr
PUBLIC	?ToStr@XMLUtil@tinyxml2@@SAXNPADH@Z		; tinyxml2::XMLUtil::ToStr
PUBLIC	?ToInt@XMLUtil@tinyxml2@@SA_NPBDPAH@Z		; tinyxml2::XMLUtil::ToInt
PUBLIC	?ToUnsigned@XMLUtil@tinyxml2@@SA_NPBDPAI@Z	; tinyxml2::XMLUtil::ToUnsigned
PUBLIC	?ToBool@XMLUtil@tinyxml2@@SA_NPBDPA_N@Z		; tinyxml2::XMLUtil::ToBool
PUBLIC	?ToFloat@XMLUtil@tinyxml2@@SA_NPBDPAM@Z		; tinyxml2::XMLUtil::ToFloat
PUBLIC	?ToDouble@XMLUtil@tinyxml2@@SA_NPBDPAN@Z	; tinyxml2::XMLUtil::ToDouble
PUBLIC	?GetDocument@XMLNode@tinyxml2@@QAEPAVXMLDocument@2@XZ ; tinyxml2::XMLNode::GetDocument
PUBLIC	?ToElement@XMLNode@tinyxml2@@UAEPAVXMLElement@2@XZ ; tinyxml2::XMLNode::ToElement
PUBLIC	?ToText@XMLNode@tinyxml2@@UAEPAVXMLText@2@XZ	; tinyxml2::XMLNode::ToText
PUBLIC	?ToComment@XMLNode@tinyxml2@@UAEPAVXMLComment@2@XZ ; tinyxml2::XMLNode::ToComment
PUBLIC	?ToDocument@XMLNode@tinyxml2@@UAEPAVXMLDocument@2@XZ ; tinyxml2::XMLNode::ToDocument
PUBLIC	?ToDeclaration@XMLNode@tinyxml2@@UAEPAVXMLDeclaration@2@XZ ; tinyxml2::XMLNode::ToDeclaration
PUBLIC	?ToUnknown@XMLNode@tinyxml2@@UAEPAVXMLUnknown@2@XZ ; tinyxml2::XMLNode::ToUnknown
PUBLIC	?ToElement@XMLNode@tinyxml2@@UBEPBVXMLElement@2@XZ ; tinyxml2::XMLNode::ToElement
PUBLIC	?ToText@XMLNode@tinyxml2@@UBEPBVXMLText@2@XZ	; tinyxml2::XMLNode::ToText
PUBLIC	?ToComment@XMLNode@tinyxml2@@UBEPBVXMLComment@2@XZ ; tinyxml2::XMLNode::ToComment
PUBLIC	?ToDocument@XMLNode@tinyxml2@@UBEPBVXMLDocument@2@XZ ; tinyxml2::XMLNode::ToDocument
PUBLIC	?ToDeclaration@XMLNode@tinyxml2@@UBEPBVXMLDeclaration@2@XZ ; tinyxml2::XMLNode::ToDeclaration
PUBLIC	?ToUnknown@XMLNode@tinyxml2@@UBEPBVXMLUnknown@2@XZ ; tinyxml2::XMLNode::ToUnknown
PUBLIC	?Value@XMLNode@tinyxml2@@QBEPBDXZ		; tinyxml2::XMLNode::Value
PUBLIC	?SetValue@XMLNode@tinyxml2@@QAEXPBD_N@Z		; tinyxml2::XMLNode::SetValue
PUBLIC	?Parent@XMLNode@tinyxml2@@QBEPBV12@XZ		; tinyxml2::XMLNode::Parent
PUBLIC	?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ	; tinyxml2::XMLNode::FirstChild
PUBLIC	?FirstChild@XMLNode@tinyxml2@@QAEPAV12@XZ	; tinyxml2::XMLNode::FirstChild
PUBLIC	?FirstChildElement@XMLNode@tinyxml2@@QBEPBVXMLElement@2@PBD@Z ; tinyxml2::XMLNode::FirstChildElement
PUBLIC	?LastChildElement@XMLNode@tinyxml2@@QBEPBVXMLElement@2@PBD@Z ; tinyxml2::XMLNode::LastChildElement
PUBLIC	?PreviousSiblingElement@XMLNode@tinyxml2@@QBEPBVXMLElement@2@PBD@Z ; tinyxml2::XMLNode::PreviousSiblingElement
PUBLIC	?NextSibling@XMLNode@tinyxml2@@QBEPBV12@XZ	; tinyxml2::XMLNode::NextSibling
PUBLIC	?NextSiblingElement@XMLNode@tinyxml2@@QBEPBVXMLElement@2@PBD@Z ; tinyxml2::XMLNode::NextSiblingElement
PUBLIC	?InsertEndChild@XMLNode@tinyxml2@@QAEPAV12@PAV12@@Z ; tinyxml2::XMLNode::InsertEndChild
PUBLIC	?InsertFirstChild@XMLNode@tinyxml2@@QAEPAV12@PAV12@@Z ; tinyxml2::XMLNode::InsertFirstChild
PUBLIC	?InsertAfterChild@XMLNode@tinyxml2@@QAEPAV12@PAV12@0@Z ; tinyxml2::XMLNode::InsertAfterChild
PUBLIC	?DeleteChildren@XMLNode@tinyxml2@@QAEXXZ	; tinyxml2::XMLNode::DeleteChildren
PUBLIC	?DeleteChild@XMLNode@tinyxml2@@QAEXPAV12@@Z	; tinyxml2::XMLNode::DeleteChild
PUBLIC	?ParseDeep@XMLNode@tinyxml2@@UAEPADPADPAVStrPair@2@@Z ; tinyxml2::XMLNode::ParseDeep
PUBLIC	??0XMLNode@tinyxml2@@IAE@PAVXMLDocument@1@@Z	; tinyxml2::XMLNode::XMLNode
PUBLIC	??1XMLNode@tinyxml2@@MAE@XZ			; tinyxml2::XMLNode::~XMLNode
PUBLIC	?Unlink@XMLNode@tinyxml2@@AAEXPAV12@@Z		; tinyxml2::XMLNode::Unlink
PUBLIC	?DeleteNode@XMLNode@tinyxml2@@CAXPAV12@@Z	; tinyxml2::XMLNode::DeleteNode
PUBLIC	??_GXMLNode@tinyxml2@@MAEPAXI@Z			; tinyxml2::XMLNode::`scalar deleting destructor'
PUBLIC	?Accept@XMLText@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z ; tinyxml2::XMLText::Accept
PUBLIC	?ToText@XMLText@tinyxml2@@UAEPAV12@XZ		; tinyxml2::XMLText::ToText
PUBLIC	?ToText@XMLText@tinyxml2@@UBEPBV12@XZ		; tinyxml2::XMLText::ToText
PUBLIC	?SetCData@XMLText@tinyxml2@@QAEX_N@Z		; tinyxml2::XMLText::SetCData
PUBLIC	?CData@XMLText@tinyxml2@@QBE_NXZ		; tinyxml2::XMLText::CData
PUBLIC	?ParseDeep@XMLText@tinyxml2@@UAEPADPADPAVStrPair@2@@Z ; tinyxml2::XMLText::ParseDeep
PUBLIC	?ShallowClone@XMLText@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z ; tinyxml2::XMLText::ShallowClone
PUBLIC	?ShallowEqual@XMLText@tinyxml2@@UBE_NPBVXMLNode@2@@Z ; tinyxml2::XMLText::ShallowEqual
PUBLIC	??0XMLText@tinyxml2@@IAE@PAVXMLDocument@1@@Z	; tinyxml2::XMLText::XMLText
PUBLIC	??1XMLText@tinyxml2@@MAE@XZ			; tinyxml2::XMLText::~XMLText
PUBLIC	??_GXMLText@tinyxml2@@MAEPAXI@Z			; tinyxml2::XMLText::`scalar deleting destructor'
PUBLIC	?ToComment@XMLComment@tinyxml2@@UAEPAV12@XZ	; tinyxml2::XMLComment::ToComment
PUBLIC	?ToComment@XMLComment@tinyxml2@@UBEPBV12@XZ	; tinyxml2::XMLComment::ToComment
PUBLIC	?Accept@XMLComment@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z ; tinyxml2::XMLComment::Accept
PUBLIC	?ParseDeep@XMLComment@tinyxml2@@UAEPADPADPAVStrPair@2@@Z ; tinyxml2::XMLComment::ParseDeep
PUBLIC	?ShallowClone@XMLComment@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z ; tinyxml2::XMLComment::ShallowClone
PUBLIC	?ShallowEqual@XMLComment@tinyxml2@@UBE_NPBVXMLNode@2@@Z ; tinyxml2::XMLComment::ShallowEqual
PUBLIC	??0XMLComment@tinyxml2@@IAE@PAVXMLDocument@1@@Z	; tinyxml2::XMLComment::XMLComment
PUBLIC	??1XMLComment@tinyxml2@@MAE@XZ			; tinyxml2::XMLComment::~XMLComment
PUBLIC	??_GXMLComment@tinyxml2@@MAEPAXI@Z		; tinyxml2::XMLComment::`scalar deleting destructor'
PUBLIC	?ToDeclaration@XMLDeclaration@tinyxml2@@UAEPAV12@XZ ; tinyxml2::XMLDeclaration::ToDeclaration
PUBLIC	?ToDeclaration@XMLDeclaration@tinyxml2@@UBEPBV12@XZ ; tinyxml2::XMLDeclaration::ToDeclaration
PUBLIC	?Accept@XMLDeclaration@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z ; tinyxml2::XMLDeclaration::Accept
PUBLIC	?ParseDeep@XMLDeclaration@tinyxml2@@UAEPADPADPAVStrPair@2@@Z ; tinyxml2::XMLDeclaration::ParseDeep
PUBLIC	?ShallowClone@XMLDeclaration@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z ; tinyxml2::XMLDeclaration::ShallowClone
PUBLIC	?ShallowEqual@XMLDeclaration@tinyxml2@@UBE_NPBVXMLNode@2@@Z ; tinyxml2::XMLDeclaration::ShallowEqual
PUBLIC	??0XMLDeclaration@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLDeclaration::XMLDeclaration
PUBLIC	??1XMLDeclaration@tinyxml2@@MAE@XZ		; tinyxml2::XMLDeclaration::~XMLDeclaration
PUBLIC	??_GXMLDeclaration@tinyxml2@@MAEPAXI@Z		; tinyxml2::XMLDeclaration::`scalar deleting destructor'
PUBLIC	?ToUnknown@XMLUnknown@tinyxml2@@UAEPAV12@XZ	; tinyxml2::XMLUnknown::ToUnknown
PUBLIC	?ToUnknown@XMLUnknown@tinyxml2@@UBEPBV12@XZ	; tinyxml2::XMLUnknown::ToUnknown
PUBLIC	?Accept@XMLUnknown@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z ; tinyxml2::XMLUnknown::Accept
PUBLIC	?ParseDeep@XMLUnknown@tinyxml2@@UAEPADPADPAVStrPair@2@@Z ; tinyxml2::XMLUnknown::ParseDeep
PUBLIC	?ShallowClone@XMLUnknown@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z ; tinyxml2::XMLUnknown::ShallowClone
PUBLIC	?ShallowEqual@XMLUnknown@tinyxml2@@UBE_NPBVXMLNode@2@@Z ; tinyxml2::XMLUnknown::ShallowEqual
PUBLIC	??0XMLUnknown@tinyxml2@@IAE@PAVXMLDocument@1@@Z	; tinyxml2::XMLUnknown::XMLUnknown
PUBLIC	??1XMLUnknown@tinyxml2@@MAE@XZ			; tinyxml2::XMLUnknown::~XMLUnknown
PUBLIC	??_GXMLUnknown@tinyxml2@@MAEPAXI@Z		; tinyxml2::XMLUnknown::`scalar deleting destructor'
PUBLIC	?Name@XMLAttribute@tinyxml2@@QBEPBDXZ		; tinyxml2::XMLAttribute::Name
PUBLIC	?Value@XMLAttribute@tinyxml2@@QBEPBDXZ		; tinyxml2::XMLAttribute::Value
PUBLIC	?Next@XMLAttribute@tinyxml2@@QBEPBV12@XZ	; tinyxml2::XMLAttribute::Next
PUBLIC	?QueryIntValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PAH@Z ; tinyxml2::XMLAttribute::QueryIntValue
PUBLIC	?QueryUnsignedValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PAI@Z ; tinyxml2::XMLAttribute::QueryUnsignedValue
PUBLIC	?QueryBoolValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PA_N@Z ; tinyxml2::XMLAttribute::QueryBoolValue
PUBLIC	?QueryDoubleValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PAN@Z ; tinyxml2::XMLAttribute::QueryDoubleValue
PUBLIC	?QueryFloatValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PAM@Z ; tinyxml2::XMLAttribute::QueryFloatValue
PUBLIC	?SetAttribute@XMLAttribute@tinyxml2@@QAEXPBD@Z	; tinyxml2::XMLAttribute::SetAttribute
PUBLIC	?SetAttribute@XMLAttribute@tinyxml2@@QAEXH@Z	; tinyxml2::XMLAttribute::SetAttribute
PUBLIC	?SetAttribute@XMLAttribute@tinyxml2@@QAEXI@Z	; tinyxml2::XMLAttribute::SetAttribute
PUBLIC	?SetAttribute@XMLAttribute@tinyxml2@@QAEX_N@Z	; tinyxml2::XMLAttribute::SetAttribute
PUBLIC	?SetAttribute@XMLAttribute@tinyxml2@@QAEXN@Z	; tinyxml2::XMLAttribute::SetAttribute
PUBLIC	?SetAttribute@XMLAttribute@tinyxml2@@QAEXM@Z	; tinyxml2::XMLAttribute::SetAttribute
PUBLIC	??0XMLAttribute@tinyxml2@@AAE@XZ		; tinyxml2::XMLAttribute::XMLAttribute
PUBLIC	??1XMLAttribute@tinyxml2@@EAE@XZ		; tinyxml2::XMLAttribute::~XMLAttribute
PUBLIC	?SetName@XMLAttribute@tinyxml2@@AAEXPBD@Z	; tinyxml2::XMLAttribute::SetName
PUBLIC	?ParseDeep@XMLAttribute@tinyxml2@@AAEPADPAD_N@Z	; tinyxml2::XMLAttribute::ParseDeep
PUBLIC	??_GXMLAttribute@tinyxml2@@EAEPAXI@Z		; tinyxml2::XMLAttribute::`scalar deleting destructor'
PUBLIC	?Name@XMLElement@tinyxml2@@QBEPBDXZ		; tinyxml2::XMLElement::Name
PUBLIC	?SetName@XMLElement@tinyxml2@@QAEXPBD_N@Z	; tinyxml2::XMLElement::SetName
PUBLIC	?ToElement@XMLElement@tinyxml2@@UAEPAV12@XZ	; tinyxml2::XMLElement::ToElement
PUBLIC	?ToElement@XMLElement@tinyxml2@@UBEPBV12@XZ	; tinyxml2::XMLElement::ToElement
PUBLIC	?Accept@XMLElement@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z ; tinyxml2::XMLElement::Accept
PUBLIC	?Attribute@XMLElement@tinyxml2@@QBEPBDPBD0@Z	; tinyxml2::XMLElement::Attribute
PUBLIC	?SetAttribute@XMLElement@tinyxml2@@QAEXPBD0@Z	; tinyxml2::XMLElement::SetAttribute
PUBLIC	?DeleteAttribute@XMLElement@tinyxml2@@QAEXPBD@Z	; tinyxml2::XMLElement::DeleteAttribute
PUBLIC	?FirstAttribute@XMLElement@tinyxml2@@QBEPBVXMLAttribute@2@XZ ; tinyxml2::XMLElement::FirstAttribute
PUBLIC	?FindAttribute@XMLElement@tinyxml2@@QBEPBVXMLAttribute@2@PBD@Z ; tinyxml2::XMLElement::FindAttribute
PUBLIC	?GetText@XMLElement@tinyxml2@@QBEPBDXZ		; tinyxml2::XMLElement::GetText
PUBLIC	?SetText@XMLElement@tinyxml2@@QAEXPBD@Z		; tinyxml2::XMLElement::SetText
PUBLIC	?SetText@XMLElement@tinyxml2@@QAEXH@Z		; tinyxml2::XMLElement::SetText
PUBLIC	?SetText@XMLElement@tinyxml2@@QAEXI@Z		; tinyxml2::XMLElement::SetText
PUBLIC	?SetText@XMLElement@tinyxml2@@QAEX_N@Z		; tinyxml2::XMLElement::SetText
PUBLIC	?SetText@XMLElement@tinyxml2@@QAEXN@Z		; tinyxml2::XMLElement::SetText
PUBLIC	?SetText@XMLElement@tinyxml2@@QAEXM@Z		; tinyxml2::XMLElement::SetText
PUBLIC	?QueryIntText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PAH@Z ; tinyxml2::XMLElement::QueryIntText
PUBLIC	?QueryUnsignedText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PAI@Z ; tinyxml2::XMLElement::QueryUnsignedText
PUBLIC	?QueryBoolText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PA_N@Z ; tinyxml2::XMLElement::QueryBoolText
PUBLIC	?QueryDoubleText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PAN@Z ; tinyxml2::XMLElement::QueryDoubleText
PUBLIC	?QueryFloatText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PAM@Z ; tinyxml2::XMLElement::QueryFloatText
PUBLIC	?ClosingType@XMLElement@tinyxml2@@QBEHXZ	; tinyxml2::XMLElement::ClosingType
PUBLIC	?ParseDeep@XMLElement@tinyxml2@@UAEPADPADPAVStrPair@2@@Z ; tinyxml2::XMLElement::ParseDeep
PUBLIC	?ShallowClone@XMLElement@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z ; tinyxml2::XMLElement::ShallowClone
PUBLIC	?ShallowEqual@XMLElement@tinyxml2@@UBE_NPBVXMLNode@2@@Z ; tinyxml2::XMLElement::ShallowEqual
PUBLIC	??0XMLElement@tinyxml2@@AAE@PAVXMLDocument@1@@Z	; tinyxml2::XMLElement::XMLElement
PUBLIC	??1XMLElement@tinyxml2@@EAE@XZ			; tinyxml2::XMLElement::~XMLElement
PUBLIC	?FindAttribute@XMLElement@tinyxml2@@AAEPAVXMLAttribute@2@PBD@Z ; tinyxml2::XMLElement::FindAttribute
PUBLIC	?FindOrCreateAttribute@XMLElement@tinyxml2@@AAEPAVXMLAttribute@2@PBD@Z ; tinyxml2::XMLElement::FindOrCreateAttribute
PUBLIC	?ParseAttributes@XMLElement@tinyxml2@@AAEPADPAD@Z ; tinyxml2::XMLElement::ParseAttributes
PUBLIC	?DeleteAttribute@XMLElement@tinyxml2@@CAXPAVXMLAttribute@2@@Z ; tinyxml2::XMLElement::DeleteAttribute
PUBLIC	??_GXMLElement@tinyxml2@@EAEPAXI@Z		; tinyxml2::XMLElement::`scalar deleting destructor'
PUBLIC	??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z ; tinyxml2::XMLDocument::XMLDocument
PUBLIC	??1XMLDocument@tinyxml2@@UAE@XZ			; tinyxml2::XMLDocument::~XMLDocument
PUBLIC	?ToDocument@XMLDocument@tinyxml2@@UAEPAV12@XZ	; tinyxml2::XMLDocument::ToDocument
PUBLIC	?ToDocument@XMLDocument@tinyxml2@@UBEPBV12@XZ	; tinyxml2::XMLDocument::ToDocument
PUBLIC	?Parse@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PBDI@Z ; tinyxml2::XMLDocument::Parse
PUBLIC	?LoadFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PBD@Z ; tinyxml2::XMLDocument::LoadFile
PUBLIC	?LoadFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@@Z ; tinyxml2::XMLDocument::LoadFile
PUBLIC	?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PBD_N@Z ; tinyxml2::XMLDocument::SaveFile
PUBLIC	?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@_N@Z ; tinyxml2::XMLDocument::SaveFile
PUBLIC	?ProcessEntities@XMLDocument@tinyxml2@@QBE_NXZ	; tinyxml2::XMLDocument::ProcessEntities
PUBLIC	?WhitespaceMode@XMLDocument@tinyxml2@@QBE?AW4Whitespace@2@XZ ; tinyxml2::XMLDocument::WhitespaceMode
PUBLIC	?HasBOM@XMLDocument@tinyxml2@@QBE_NXZ		; tinyxml2::XMLDocument::HasBOM
PUBLIC	?Print@XMLDocument@tinyxml2@@QBEXPAVXMLPrinter@2@@Z ; tinyxml2::XMLDocument::Print
PUBLIC	?Accept@XMLDocument@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z ; tinyxml2::XMLDocument::Accept
PUBLIC	?NewElement@XMLDocument@tinyxml2@@QAEPAVXMLElement@2@PBD@Z ; tinyxml2::XMLDocument::NewElement
PUBLIC	?NewComment@XMLDocument@tinyxml2@@QAEPAVXMLComment@2@PBD@Z ; tinyxml2::XMLDocument::NewComment
PUBLIC	?NewText@XMLDocument@tinyxml2@@QAEPAVXMLText@2@PBD@Z ; tinyxml2::XMLDocument::NewText
PUBLIC	?NewDeclaration@XMLDocument@tinyxml2@@QAEPAVXMLDeclaration@2@PBD@Z ; tinyxml2::XMLDocument::NewDeclaration
PUBLIC	?NewUnknown@XMLDocument@tinyxml2@@QAEPAVXMLUnknown@2@PBD@Z ; tinyxml2::XMLDocument::NewUnknown
PUBLIC	?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError
PUBLIC	?Error@XMLDocument@tinyxml2@@QBE_NXZ		; tinyxml2::XMLDocument::Error
PUBLIC	?ErrorName@XMLDocument@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLDocument::ErrorName
PUBLIC	?PrintError@XMLDocument@tinyxml2@@QBEXXZ	; tinyxml2::XMLDocument::PrintError
PUBLIC	?Clear@XMLDocument@tinyxml2@@QAEXXZ		; tinyxml2::XMLDocument::Clear
PUBLIC	?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z ; tinyxml2::XMLDocument::Identify
PUBLIC	?ShallowClone@XMLDocument@tinyxml2@@UBEPAVXMLNode@2@PAV12@@Z ; tinyxml2::XMLDocument::ShallowClone
PUBLIC	?ShallowEqual@XMLDocument@tinyxml2@@UBE_NPBVXMLNode@2@@Z ; tinyxml2::XMLDocument::ShallowEqual
PUBLIC	??0?$MemPoolT@$0DE@@tinyxml2@@QAE@XZ		; tinyxml2::MemPoolT<52>::MemPoolT<52>
PUBLIC	??1?$MemPoolT@$0DE@@tinyxml2@@UAE@XZ		; tinyxml2::MemPoolT<52>::~MemPoolT<52>
PUBLIC	?Clear@?$MemPoolT@$0DE@@tinyxml2@@UAEXXZ	; tinyxml2::MemPoolT<52>::Clear
PUBLIC	?ItemSize@?$MemPoolT@$0DE@@tinyxml2@@UBEHXZ	; tinyxml2::MemPoolT<52>::ItemSize
PUBLIC	?CurrentAllocs@?$MemPoolT@$0DE@@tinyxml2@@QBEHXZ ; tinyxml2::MemPoolT<52>::CurrentAllocs
PUBLIC	?Alloc@?$MemPoolT@$0DE@@tinyxml2@@UAEPAXXZ	; tinyxml2::MemPoolT<52>::Alloc
PUBLIC	?Free@?$MemPoolT@$0DE@@tinyxml2@@UAEXPAX@Z	; tinyxml2::MemPoolT<52>::Free
PUBLIC	?SetTracked@?$MemPoolT@$0DE@@tinyxml2@@UAEXXZ	; tinyxml2::MemPoolT<52>::SetTracked
PUBLIC	?Untracked@?$MemPoolT@$0DE@@tinyxml2@@QBEHXZ	; tinyxml2::MemPoolT<52>::Untracked
PUBLIC	??0?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::DynArray<tinyxml2::MemPoolT<52>::Block *,10>
PUBLIC	??1?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::~DynArray<tinyxml2::MemPoolT<52>::Block *,10>
PUBLIC	?Push@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0DE@@2@@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::Push
PUBLIC	?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0DE@@2@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::Pop
PUBLIC	?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QBE_NXZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::Empty
PUBLIC	?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@AAEXH@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::EnsureCapacity
PUBLIC	??_G?$MemPoolT@$0DE@@tinyxml2@@UAEPAXI@Z	; tinyxml2::MemPoolT<52>::`scalar deleting destructor'
PUBLIC	??0?$MemPoolT@$0CE@@tinyxml2@@QAE@XZ		; tinyxml2::MemPoolT<36>::MemPoolT<36>
PUBLIC	??1?$MemPoolT@$0CE@@tinyxml2@@UAE@XZ		; tinyxml2::MemPoolT<36>::~MemPoolT<36>
PUBLIC	?Clear@?$MemPoolT@$0CE@@tinyxml2@@UAEXXZ	; tinyxml2::MemPoolT<36>::Clear
PUBLIC	?ItemSize@?$MemPoolT@$0CE@@tinyxml2@@UBEHXZ	; tinyxml2::MemPoolT<36>::ItemSize
PUBLIC	?CurrentAllocs@?$MemPoolT@$0CE@@tinyxml2@@QBEHXZ ; tinyxml2::MemPoolT<36>::CurrentAllocs
PUBLIC	?Alloc@?$MemPoolT@$0CE@@tinyxml2@@UAEPAXXZ	; tinyxml2::MemPoolT<36>::Alloc
PUBLIC	?Free@?$MemPoolT@$0CE@@tinyxml2@@UAEXPAX@Z	; tinyxml2::MemPoolT<36>::Free
PUBLIC	?SetTracked@?$MemPoolT@$0CE@@tinyxml2@@UAEXXZ	; tinyxml2::MemPoolT<36>::SetTracked
PUBLIC	?Untracked@?$MemPoolT@$0CE@@tinyxml2@@QBEHXZ	; tinyxml2::MemPoolT<36>::Untracked
PUBLIC	??0?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::DynArray<tinyxml2::MemPoolT<36>::Block *,10>
PUBLIC	??1?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::~DynArray<tinyxml2::MemPoolT<36>::Block *,10>
PUBLIC	?Push@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0CE@@2@@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::Push
PUBLIC	?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0CE@@2@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::Pop
PUBLIC	?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QBE_NXZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::Empty
PUBLIC	?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@AAEXH@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::EnsureCapacity
PUBLIC	??_G?$MemPoolT@$0CE@@tinyxml2@@UAEPAXI@Z	; tinyxml2::MemPoolT<36>::`scalar deleting destructor'
PUBLIC	??0?$MemPoolT@$0DA@@tinyxml2@@QAE@XZ		; tinyxml2::MemPoolT<48>::MemPoolT<48>
PUBLIC	??1?$MemPoolT@$0DA@@tinyxml2@@UAE@XZ		; tinyxml2::MemPoolT<48>::~MemPoolT<48>
PUBLIC	?Clear@?$MemPoolT@$0DA@@tinyxml2@@UAEXXZ	; tinyxml2::MemPoolT<48>::Clear
PUBLIC	?ItemSize@?$MemPoolT@$0DA@@tinyxml2@@UBEHXZ	; tinyxml2::MemPoolT<48>::ItemSize
PUBLIC	?CurrentAllocs@?$MemPoolT@$0DA@@tinyxml2@@QBEHXZ ; tinyxml2::MemPoolT<48>::CurrentAllocs
PUBLIC	?Alloc@?$MemPoolT@$0DA@@tinyxml2@@UAEPAXXZ	; tinyxml2::MemPoolT<48>::Alloc
PUBLIC	?Free@?$MemPoolT@$0DA@@tinyxml2@@UAEXPAX@Z	; tinyxml2::MemPoolT<48>::Free
PUBLIC	?SetTracked@?$MemPoolT@$0DA@@tinyxml2@@UAEXXZ	; tinyxml2::MemPoolT<48>::SetTracked
PUBLIC	?Untracked@?$MemPoolT@$0DA@@tinyxml2@@QBEHXZ	; tinyxml2::MemPoolT<48>::Untracked
PUBLIC	??0?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::DynArray<tinyxml2::MemPoolT<48>::Block *,10>
PUBLIC	??1?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::~DynArray<tinyxml2::MemPoolT<48>::Block *,10>
PUBLIC	?Push@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0DA@@2@@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::Push
PUBLIC	?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0DA@@2@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::Pop
PUBLIC	?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QBE_NXZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::Empty
PUBLIC	?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@AAEXH@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::EnsureCapacity
PUBLIC	??_G?$MemPoolT@$0DA@@tinyxml2@@UAEPAXI@Z	; tinyxml2::MemPoolT<48>::`scalar deleting destructor'
PUBLIC	??0?$MemPoolT@$0CM@@tinyxml2@@QAE@XZ		; tinyxml2::MemPoolT<44>::MemPoolT<44>
PUBLIC	??1?$MemPoolT@$0CM@@tinyxml2@@UAE@XZ		; tinyxml2::MemPoolT<44>::~MemPoolT<44>
PUBLIC	?Clear@?$MemPoolT@$0CM@@tinyxml2@@UAEXXZ	; tinyxml2::MemPoolT<44>::Clear
PUBLIC	?ItemSize@?$MemPoolT@$0CM@@tinyxml2@@UBEHXZ	; tinyxml2::MemPoolT<44>::ItemSize
PUBLIC	?CurrentAllocs@?$MemPoolT@$0CM@@tinyxml2@@QBEHXZ ; tinyxml2::MemPoolT<44>::CurrentAllocs
PUBLIC	?Alloc@?$MemPoolT@$0CM@@tinyxml2@@UAEPAXXZ	; tinyxml2::MemPoolT<44>::Alloc
PUBLIC	?Free@?$MemPoolT@$0CM@@tinyxml2@@UAEXPAX@Z	; tinyxml2::MemPoolT<44>::Free
PUBLIC	?SetTracked@?$MemPoolT@$0CM@@tinyxml2@@UAEXXZ	; tinyxml2::MemPoolT<44>::SetTracked
PUBLIC	?Untracked@?$MemPoolT@$0CM@@tinyxml2@@QBEHXZ	; tinyxml2::MemPoolT<44>::Untracked
PUBLIC	??0?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::DynArray<tinyxml2::MemPoolT<44>::Block *,10>
PUBLIC	??1?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::~DynArray<tinyxml2::MemPoolT<44>::Block *,10>
PUBLIC	?Push@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0CM@@2@@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::Push
PUBLIC	?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0CM@@2@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::Pop
PUBLIC	?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QBE_NXZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::Empty
PUBLIC	?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@AAEXH@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::EnsureCapacity
PUBLIC	??_G?$MemPoolT@$0CM@@tinyxml2@@UAEPAXI@Z	; tinyxml2::MemPoolT<44>::`scalar deleting destructor'
PUBLIC	??_GXMLDocument@tinyxml2@@UAEPAXI@Z		; tinyxml2::XMLDocument::`scalar deleting destructor'
PUBLIC	??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z	; tinyxml2::XMLPrinter::XMLPrinter
PUBLIC	??1XMLPrinter@tinyxml2@@UAE@XZ			; tinyxml2::XMLPrinter::~XMLPrinter
PUBLIC	?PushHeader@XMLPrinter@tinyxml2@@QAEX_N0@Z	; tinyxml2::XMLPrinter::PushHeader
PUBLIC	?OpenElement@XMLPrinter@tinyxml2@@QAEXPBD_N@Z	; tinyxml2::XMLPrinter::OpenElement
PUBLIC	?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBD0@Z	; tinyxml2::XMLPrinter::PushAttribute
PUBLIC	?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBDH@Z	; tinyxml2::XMLPrinter::PushAttribute
PUBLIC	?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBDI@Z	; tinyxml2::XMLPrinter::PushAttribute
PUBLIC	?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBD_N@Z	; tinyxml2::XMLPrinter::PushAttribute
PUBLIC	?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBDN@Z	; tinyxml2::XMLPrinter::PushAttribute
PUBLIC	?CloseElement@XMLPrinter@tinyxml2@@UAEX_N@Z	; tinyxml2::XMLPrinter::CloseElement
PUBLIC	?PushText@XMLPrinter@tinyxml2@@QAEXPBD_N@Z	; tinyxml2::XMLPrinter::PushText
PUBLIC	?PushText@XMLPrinter@tinyxml2@@QAEXH@Z		; tinyxml2::XMLPrinter::PushText
PUBLIC	?PushText@XMLPrinter@tinyxml2@@QAEXI@Z		; tinyxml2::XMLPrinter::PushText
PUBLIC	?PushText@XMLPrinter@tinyxml2@@QAEX_N@Z		; tinyxml2::XMLPrinter::PushText
PUBLIC	?PushText@XMLPrinter@tinyxml2@@QAEXM@Z		; tinyxml2::XMLPrinter::PushText
PUBLIC	?PushText@XMLPrinter@tinyxml2@@QAEXN@Z		; tinyxml2::XMLPrinter::PushText
PUBLIC	?PushComment@XMLPrinter@tinyxml2@@QAEXPBD@Z	; tinyxml2::XMLPrinter::PushComment
PUBLIC	?PushDeclaration@XMLPrinter@tinyxml2@@QAEXPBD@Z	; tinyxml2::XMLPrinter::PushDeclaration
PUBLIC	?PushUnknown@XMLPrinter@tinyxml2@@QAEXPBD@Z	; tinyxml2::XMLPrinter::PushUnknown
PUBLIC	?VisitEnter@XMLPrinter@tinyxml2@@UAE_NABVXMLDocument@2@@Z ; tinyxml2::XMLPrinter::VisitEnter
PUBLIC	?VisitExit@XMLPrinter@tinyxml2@@UAE_NABVXMLDocument@2@@Z ; tinyxml2::XMLPrinter::VisitExit
PUBLIC	?VisitEnter@XMLPrinter@tinyxml2@@UAE_NABVXMLElement@2@PBVXMLAttribute@2@@Z ; tinyxml2::XMLPrinter::VisitEnter
PUBLIC	?VisitExit@XMLPrinter@tinyxml2@@UAE_NABVXMLElement@2@@Z ; tinyxml2::XMLPrinter::VisitExit
PUBLIC	?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLText@2@@Z ; tinyxml2::XMLPrinter::Visit
PUBLIC	?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLComment@2@@Z ; tinyxml2::XMLPrinter::Visit
PUBLIC	?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLDeclaration@2@@Z ; tinyxml2::XMLPrinter::Visit
PUBLIC	?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLUnknown@2@@Z ; tinyxml2::XMLPrinter::Visit
PUBLIC	?CompactMode@XMLPrinter@tinyxml2@@MAE_NABVXMLElement@2@@Z ; tinyxml2::XMLPrinter::CompactMode
PUBLIC	?PrintSpace@XMLPrinter@tinyxml2@@MAEXH@Z	; tinyxml2::XMLPrinter::PrintSpace
PUBLIC	?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ		; tinyxml2::XMLPrinter::Print
PUBLIC	?SealElement@XMLPrinter@tinyxml2@@IAEXXZ	; tinyxml2::XMLPrinter::SealElement
PUBLIC	??0?$DynArray@PBD$09@tinyxml2@@QAE@XZ		; tinyxml2::DynArray<char const *,10>::DynArray<char const *,10>
PUBLIC	??1?$DynArray@PBD$09@tinyxml2@@QAE@XZ		; tinyxml2::DynArray<char const *,10>::~DynArray<char const *,10>
PUBLIC	?Push@?$DynArray@PBD$09@tinyxml2@@QAEXPBD@Z	; tinyxml2::DynArray<char const *,10>::Push
PUBLIC	?Pop@?$DynArray@PBD$09@tinyxml2@@QAEPBDXZ	; tinyxml2::DynArray<char const *,10>::Pop
PUBLIC	?EnsureCapacity@?$DynArray@PBD$09@tinyxml2@@AAEXH@Z ; tinyxml2::DynArray<char const *,10>::EnsureCapacity
PUBLIC	?PrintString@XMLPrinter@tinyxml2@@AAEXPBD_N@Z	; tinyxml2::XMLPrinter::PrintString
PUBLIC	??0?$DynArray@D$0BE@@tinyxml2@@QAE@XZ		; tinyxml2::DynArray<char,20>::DynArray<char,20>
PUBLIC	??1?$DynArray@D$0BE@@tinyxml2@@QAE@XZ		; tinyxml2::DynArray<char,20>::~DynArray<char,20>
PUBLIC	?Push@?$DynArray@D$0BE@@tinyxml2@@QAEXD@Z	; tinyxml2::DynArray<char,20>::Push
PUBLIC	?PushArr@?$DynArray@D$0BE@@tinyxml2@@QAEPADH@Z	; tinyxml2::DynArray<char,20>::PushArr
PUBLIC	?EnsureCapacity@?$DynArray@D$0BE@@tinyxml2@@AAEXH@Z ; tinyxml2::DynArray<char,20>::EnsureCapacity
PUBLIC	??_GXMLPrinter@tinyxml2@@UAEPAXI@Z		; tinyxml2::XMLPrinter::`scalar deleting destructor'
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	??_7MemPool@tinyxml2@@6B@			; tinyxml2::MemPool::`vftable'
PUBLIC	??_7XMLVisitor@tinyxml2@@6B@			; tinyxml2::XMLVisitor::`vftable'
PUBLIC	??_7XMLNode@tinyxml2@@6B@			; tinyxml2::XMLNode::`vftable'
PUBLIC	??_7XMLText@tinyxml2@@6B@			; tinyxml2::XMLText::`vftable'
PUBLIC	??_7XMLComment@tinyxml2@@6B@			; tinyxml2::XMLComment::`vftable'
PUBLIC	??_7XMLDeclaration@tinyxml2@@6B@		; tinyxml2::XMLDeclaration::`vftable'
PUBLIC	??_7XMLUnknown@tinyxml2@@6B@			; tinyxml2::XMLUnknown::`vftable'
PUBLIC	??_7XMLAttribute@tinyxml2@@6B@			; tinyxml2::XMLAttribute::`vftable'
PUBLIC	??_7XMLElement@tinyxml2@@6B@			; tinyxml2::XMLElement::`vftable'
PUBLIC	??_7?$MemPoolT@$0DE@@tinyxml2@@6B@		; tinyxml2::MemPoolT<52>::`vftable'
PUBLIC	??_7?$MemPoolT@$0CE@@tinyxml2@@6B@		; tinyxml2::MemPoolT<36>::`vftable'
PUBLIC	??_7?$MemPoolT@$0DA@@tinyxml2@@6B@		; tinyxml2::MemPoolT<48>::`vftable'
PUBLIC	??_7?$MemPoolT@$0CM@@tinyxml2@@6B@		; tinyxml2::MemPoolT<44>::`vftable'
PUBLIC	??_7XMLDocument@tinyxml2@@6B@			; tinyxml2::XMLDocument::`vftable'
PUBLIC	??_7XMLPrinter@tinyxml2@@6B@			; tinyxml2::XMLPrinter::`vftable'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_02GMHACPFF@?$CFu?$AA@			; `string'
PUBLIC	??_C@_04HANFDJND@?$CF?48g?$AA@			; `string'
PUBLIC	??_C@_05CEKCMKAN@?$CF?417g?$AA@			; `string'
PUBLIC	??_C@_04LOAJBDKD@true?$AA@			; `string'
PUBLIC	??_C@_05LAPONLG@false?$AA@			; `string'
PUBLIC	??_C@_02NJPGOMH@?$CFf?$AA@			; `string'
PUBLIC	??_C@_03DLDNIBIK@?$CFlf?$AA@			; `string'
PUBLIC	??_C@_03MCHNFBAC@?$FN?$FN?$DO?$AA@		; `string'
PUBLIC	??_C@_03PNLDJJMO@?9?9?$DO?$AA@			; `string'
PUBLIC	??_C@_02GOEMJPDN@?$DP?$DO?$AA@			; `string'
PUBLIC	??_C@_01PPODPGHN@?$DO?$AA@			; `string'
PUBLIC	??_C@_0CD@MCGGMGEP@xml?5version?$DN?$CC1?40?$CC?5encoding?$DN?$CCUTF?9@ ; `string'
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_01NOFIACDB@w?$AA@				; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
PUBLIC	??_C@_0CO@CKABJOJH@XMLDocument?5error?5id?$DN?$CFd?5?8?$CFs?8?5str@ ; `string'
PUBLIC	??_C@_04PFOHOKJK@?5?5?5?5?$AA@			; `string'
PUBLIC	??_C@_02HAOIJKIC@?$CFc?$AA@			; `string'
PUBLIC	??_C@_04IKLFLEHL@?$CG?$CFs?$DL?$AA@		; `string'
PUBLIC	??_C@_0BC@CIAMHNHO@xml?5version?$DN?$CC1?40?$CC?$AA@ ; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_03FONCMJME@?$DM?$CFs?$AA@			; `string'
PUBLIC	??_C@_05LCDLMEIP@?5?$CFs?$DN?$CC?$AA@		; `string'
PUBLIC	??_C@_01BJJEKLCA@?$CC?$AA@			; `string'
PUBLIC	??_C@_02HCGKDMEN@?1?$DO?$AA@			; `string'
PUBLIC	??_C@_05POIKLDCH@?$DM?1?$CFs?$DO?$AA@		; `string'
PUBLIC	??_C@_09PNDCPLLD@?$DM?$CB?9?9?$CFs?9?9?$DO?$AA@	; `string'
PUBLIC	??_C@_06OGCFEMAJ@?$DM?$DP?$CFs?$DP?$DO?$AA@	; `string'
PUBLIC	??_C@_05EBLKANEG@?$DM?$CB?$CFs?$DO?$AA@		; `string'
PUBLIC	??_R4XMLDocument@tinyxml2@@6B@			; tinyxml2::XMLDocument::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVXMLDocument@tinyxml2@@@8		; tinyxml2::XMLDocument `RTTI Type Descriptor'
PUBLIC	??_R3XMLDocument@tinyxml2@@8			; tinyxml2::XMLDocument::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2XMLDocument@tinyxml2@@8			; tinyxml2::XMLDocument::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@XMLDocument@tinyxml2@@8		; tinyxml2::XMLDocument::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@XMLNode@tinyxml2@@8		; tinyxml2::XMLNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVXMLNode@tinyxml2@@@8			; tinyxml2::XMLNode `RTTI Type Descriptor'
PUBLIC	??_R3XMLNode@tinyxml2@@8			; tinyxml2::XMLNode::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2XMLNode@tinyxml2@@8			; tinyxml2::XMLNode::`RTTI Base Class Array'
PUBLIC	??_R4XMLElement@tinyxml2@@6B@			; tinyxml2::XMLElement::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVXMLElement@tinyxml2@@@8			; tinyxml2::XMLElement `RTTI Type Descriptor'
PUBLIC	??_R3XMLElement@tinyxml2@@8			; tinyxml2::XMLElement::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2XMLElement@tinyxml2@@8			; tinyxml2::XMLElement::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@XMLElement@tinyxml2@@8		; tinyxml2::XMLElement::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4XMLAttribute@tinyxml2@@6B@			; tinyxml2::XMLAttribute::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVXMLAttribute@tinyxml2@@@8		; tinyxml2::XMLAttribute `RTTI Type Descriptor'
PUBLIC	??_R3XMLAttribute@tinyxml2@@8			; tinyxml2::XMLAttribute::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2XMLAttribute@tinyxml2@@8			; tinyxml2::XMLAttribute::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@XMLAttribute@tinyxml2@@8		; tinyxml2::XMLAttribute::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4XMLComment@tinyxml2@@6B@			; tinyxml2::XMLComment::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVXMLComment@tinyxml2@@@8			; tinyxml2::XMLComment `RTTI Type Descriptor'
PUBLIC	??_R3XMLComment@tinyxml2@@8			; tinyxml2::XMLComment::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2XMLComment@tinyxml2@@8			; tinyxml2::XMLComment::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@XMLComment@tinyxml2@@8		; tinyxml2::XMLComment::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4XMLText@tinyxml2@@6B@			; tinyxml2::XMLText::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVXMLText@tinyxml2@@@8			; tinyxml2::XMLText `RTTI Type Descriptor'
PUBLIC	??_R3XMLText@tinyxml2@@8			; tinyxml2::XMLText::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2XMLText@tinyxml2@@8			; tinyxml2::XMLText::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@XMLText@tinyxml2@@8		; tinyxml2::XMLText::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4XMLDeclaration@tinyxml2@@6B@		; tinyxml2::XMLDeclaration::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVXMLDeclaration@tinyxml2@@@8		; tinyxml2::XMLDeclaration `RTTI Type Descriptor'
PUBLIC	??_R3XMLDeclaration@tinyxml2@@8			; tinyxml2::XMLDeclaration::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2XMLDeclaration@tinyxml2@@8			; tinyxml2::XMLDeclaration::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@XMLDeclaration@tinyxml2@@8	; tinyxml2::XMLDeclaration::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4XMLUnknown@tinyxml2@@6B@			; tinyxml2::XMLUnknown::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVXMLUnknown@tinyxml2@@@8			; tinyxml2::XMLUnknown `RTTI Type Descriptor'
PUBLIC	??_R3XMLUnknown@tinyxml2@@8			; tinyxml2::XMLUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2XMLUnknown@tinyxml2@@8			; tinyxml2::XMLUnknown::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@XMLUnknown@tinyxml2@@8		; tinyxml2::XMLUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4XMLPrinter@tinyxml2@@6B@			; tinyxml2::XMLPrinter::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVXMLPrinter@tinyxml2@@@8			; tinyxml2::XMLPrinter `RTTI Type Descriptor'
PUBLIC	??_R3XMLPrinter@tinyxml2@@8			; tinyxml2::XMLPrinter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2XMLPrinter@tinyxml2@@8			; tinyxml2::XMLPrinter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@XMLPrinter@tinyxml2@@8		; tinyxml2::XMLPrinter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@XMLVisitor@tinyxml2@@8		; tinyxml2::XMLVisitor::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVXMLVisitor@tinyxml2@@@8			; tinyxml2::XMLVisitor `RTTI Type Descriptor'
PUBLIC	??_R3XMLVisitor@tinyxml2@@8			; tinyxml2::XMLVisitor::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2XMLVisitor@tinyxml2@@8			; tinyxml2::XMLVisitor::`RTTI Base Class Array'
PUBLIC	??_R4MemPool@tinyxml2@@6B@			; tinyxml2::MemPool::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMemPool@tinyxml2@@@8			; tinyxml2::MemPool `RTTI Type Descriptor'
PUBLIC	??_R3MemPool@tinyxml2@@8			; tinyxml2::MemPool::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2MemPool@tinyxml2@@8			; tinyxml2::MemPool::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MemPool@tinyxml2@@8		; tinyxml2::MemPool::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4XMLVisitor@tinyxml2@@6B@			; tinyxml2::XMLVisitor::`RTTI Complete Object Locator'
PUBLIC	??_R4XMLNode@tinyxml2@@6B@			; tinyxml2::XMLNode::`RTTI Complete Object Locator'
PUBLIC	??_R4?$MemPoolT@$0DE@@tinyxml2@@6B@		; tinyxml2::MemPoolT<52>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$MemPoolT@$0DE@@tinyxml2@@@8		; tinyxml2::MemPoolT<52> `RTTI Type Descriptor'
PUBLIC	??_R3?$MemPoolT@$0DE@@tinyxml2@@8		; tinyxml2::MemPoolT<52>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$MemPoolT@$0DE@@tinyxml2@@8		; tinyxml2::MemPoolT<52>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$MemPoolT@$0DE@@tinyxml2@@8	; tinyxml2::MemPoolT<52>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$MemPoolT@$0CE@@tinyxml2@@6B@		; tinyxml2::MemPoolT<36>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$MemPoolT@$0CE@@tinyxml2@@@8		; tinyxml2::MemPoolT<36> `RTTI Type Descriptor'
PUBLIC	??_R3?$MemPoolT@$0CE@@tinyxml2@@8		; tinyxml2::MemPoolT<36>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$MemPoolT@$0CE@@tinyxml2@@8		; tinyxml2::MemPoolT<36>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$MemPoolT@$0CE@@tinyxml2@@8	; tinyxml2::MemPoolT<36>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$MemPoolT@$0DA@@tinyxml2@@6B@		; tinyxml2::MemPoolT<48>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$MemPoolT@$0DA@@tinyxml2@@@8		; tinyxml2::MemPoolT<48> `RTTI Type Descriptor'
PUBLIC	??_R3?$MemPoolT@$0DA@@tinyxml2@@8		; tinyxml2::MemPoolT<48>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$MemPoolT@$0DA@@tinyxml2@@8		; tinyxml2::MemPoolT<48>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$MemPoolT@$0DA@@tinyxml2@@8	; tinyxml2::MemPoolT<48>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$MemPoolT@$0CM@@tinyxml2@@6B@		; tinyxml2::MemPoolT<44>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$MemPoolT@$0CM@@tinyxml2@@@8		; tinyxml2::MemPoolT<44> `RTTI Type Descriptor'
PUBLIC	??_R3?$MemPoolT@$0CM@@tinyxml2@@8		; tinyxml2::MemPoolT<44>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$MemPoolT@$0CM@@tinyxml2@@8		; tinyxml2::MemPoolT<44>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$MemPoolT@$0CM@@tinyxml2@@8	; tinyxml2::MemPoolT<44>::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_isalpha:PROC
EXTRN	_isdigit:PROC
EXTRN	_isspace:PROC
EXTRN	___iob_func:PROC
EXTRN	_fclose:PROC
EXTRN	_ferror:PROC
EXTRN	_fgetc:PROC
EXTRN	_fopen_s:PROC
EXTRN	_fread:PROC
EXTRN	_fseek:PROC
EXTRN	_ftell:PROC
EXTRN	_printf:PROC
EXTRN	_sscanf_s:PROC
EXTRN	_vfprintf:PROC
EXTRN	_vsnprintf_s:PROC
EXTRN	__vscprintf:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_strlen:PROC
EXTRN	_strchr:PROC
EXTRN	_strncmp:PROC
EXTRN	??_EMemPool@tinyxml2@@UAEPAXI@Z:PROC		; tinyxml2::MemPool::`vector deleting destructor'
EXTRN	??_EXMLVisitor@tinyxml2@@UAEPAXI@Z:PROC		; tinyxml2::XMLVisitor::`vector deleting destructor'
EXTRN	??_EXMLNode@tinyxml2@@MAEPAXI@Z:PROC		; tinyxml2::XMLNode::`vector deleting destructor'
EXTRN	??_EXMLText@tinyxml2@@MAEPAXI@Z:PROC		; tinyxml2::XMLText::`vector deleting destructor'
EXTRN	??_EXMLComment@tinyxml2@@MAEPAXI@Z:PROC		; tinyxml2::XMLComment::`vector deleting destructor'
EXTRN	??_EXMLDeclaration@tinyxml2@@MAEPAXI@Z:PROC	; tinyxml2::XMLDeclaration::`vector deleting destructor'
EXTRN	??_EXMLUnknown@tinyxml2@@MAEPAXI@Z:PROC		; tinyxml2::XMLUnknown::`vector deleting destructor'
EXTRN	??_EXMLAttribute@tinyxml2@@EAEPAXI@Z:PROC	; tinyxml2::XMLAttribute::`vector deleting destructor'
EXTRN	??_EXMLElement@tinyxml2@@EAEPAXI@Z:PROC		; tinyxml2::XMLElement::`vector deleting destructor'
EXTRN	??_E?$MemPoolT@$0DE@@tinyxml2@@UAEPAXI@Z:PROC	; tinyxml2::MemPoolT<52>::`vector deleting destructor'
EXTRN	??_E?$MemPoolT@$0CE@@tinyxml2@@UAEPAXI@Z:PROC	; tinyxml2::MemPoolT<36>::`vector deleting destructor'
EXTRN	??_E?$MemPoolT@$0DA@@tinyxml2@@UAEPAXI@Z:PROC	; tinyxml2::MemPoolT<48>::`vector deleting destructor'
EXTRN	??_E?$MemPoolT@$0CM@@tinyxml2@@UAEPAXI@Z:PROC	; tinyxml2::MemPoolT<44>::`vector deleting destructor'
EXTRN	??_EXMLDocument@tinyxml2@@UAEPAXI@Z:PROC	; tinyxml2::XMLDocument::`vector deleting destructor'
EXTRN	??_EXMLPrinter@tinyxml2@@UAEPAXI@Z:PROC		; tinyxml2::XMLPrinter::`vector deleting destructor'
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@?$MemPoolT@$0CM@@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$MemPoolT@$0CM@@tinyxml2@@8 DD FLAT:??_R0?AV?$MemPoolT@$0CM@@tinyxml2@@@8 ; tinyxml2::MemPoolT<44>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$MemPoolT@$0CM@@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R2?$MemPoolT@$0CM@@tinyxml2@@8
rdata$r	SEGMENT
??_R2?$MemPoolT@$0CM@@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@?$MemPoolT@$0CM@@tinyxml2@@8 ; tinyxml2::MemPoolT<44>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@MemPool@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R3?$MemPoolT@$0CM@@tinyxml2@@8
rdata$r	SEGMENT
??_R3?$MemPoolT@$0CM@@tinyxml2@@8 DD 00H		; tinyxml2::MemPoolT<44>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$MemPoolT@$0CM@@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$MemPoolT@$0CM@@tinyxml2@@@8
data$r	SEGMENT
??_R0?AV?$MemPoolT@$0CM@@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@ ; tinyxml2::MemPoolT<44> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$MemPoolT@$0CM@@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$MemPoolT@$0CM@@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4?$MemPoolT@$0CM@@tinyxml2@@6B@ DD 00H		; tinyxml2::MemPoolT<44>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$MemPoolT@$0CM@@tinyxml2@@@8
	DD	FLAT:??_R3?$MemPoolT@$0CM@@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$MemPoolT@$0DA@@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$MemPoolT@$0DA@@tinyxml2@@8 DD FLAT:??_R0?AV?$MemPoolT@$0DA@@tinyxml2@@@8 ; tinyxml2::MemPoolT<48>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$MemPoolT@$0DA@@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R2?$MemPoolT@$0DA@@tinyxml2@@8
rdata$r	SEGMENT
??_R2?$MemPoolT@$0DA@@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@?$MemPoolT@$0DA@@tinyxml2@@8 ; tinyxml2::MemPoolT<48>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@MemPool@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R3?$MemPoolT@$0DA@@tinyxml2@@8
rdata$r	SEGMENT
??_R3?$MemPoolT@$0DA@@tinyxml2@@8 DD 00H		; tinyxml2::MemPoolT<48>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$MemPoolT@$0DA@@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$MemPoolT@$0DA@@tinyxml2@@@8
data$r	SEGMENT
??_R0?AV?$MemPoolT@$0DA@@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@ ; tinyxml2::MemPoolT<48> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$MemPoolT@$0DA@@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$MemPoolT@$0DA@@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4?$MemPoolT@$0DA@@tinyxml2@@6B@ DD 00H		; tinyxml2::MemPoolT<48>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$MemPoolT@$0DA@@tinyxml2@@@8
	DD	FLAT:??_R3?$MemPoolT@$0DA@@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$MemPoolT@$0CE@@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$MemPoolT@$0CE@@tinyxml2@@8 DD FLAT:??_R0?AV?$MemPoolT@$0CE@@tinyxml2@@@8 ; tinyxml2::MemPoolT<36>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$MemPoolT@$0CE@@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R2?$MemPoolT@$0CE@@tinyxml2@@8
rdata$r	SEGMENT
??_R2?$MemPoolT@$0CE@@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@?$MemPoolT@$0CE@@tinyxml2@@8 ; tinyxml2::MemPoolT<36>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@MemPool@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R3?$MemPoolT@$0CE@@tinyxml2@@8
rdata$r	SEGMENT
??_R3?$MemPoolT@$0CE@@tinyxml2@@8 DD 00H		; tinyxml2::MemPoolT<36>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$MemPoolT@$0CE@@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$MemPoolT@$0CE@@tinyxml2@@@8
data$r	SEGMENT
??_R0?AV?$MemPoolT@$0CE@@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@ ; tinyxml2::MemPoolT<36> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$MemPoolT@$0CE@@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$MemPoolT@$0CE@@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4?$MemPoolT@$0CE@@tinyxml2@@6B@ DD 00H		; tinyxml2::MemPoolT<36>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$MemPoolT@$0CE@@tinyxml2@@@8
	DD	FLAT:??_R3?$MemPoolT@$0CE@@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$MemPoolT@$0DE@@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$MemPoolT@$0DE@@tinyxml2@@8 DD FLAT:??_R0?AV?$MemPoolT@$0DE@@tinyxml2@@@8 ; tinyxml2::MemPoolT<52>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$MemPoolT@$0DE@@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R2?$MemPoolT@$0DE@@tinyxml2@@8
rdata$r	SEGMENT
??_R2?$MemPoolT@$0DE@@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@?$MemPoolT@$0DE@@tinyxml2@@8 ; tinyxml2::MemPoolT<52>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@MemPool@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R3?$MemPoolT@$0DE@@tinyxml2@@8
rdata$r	SEGMENT
??_R3?$MemPoolT@$0DE@@tinyxml2@@8 DD 00H		; tinyxml2::MemPoolT<52>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$MemPoolT@$0DE@@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$MemPoolT@$0DE@@tinyxml2@@@8
data$r	SEGMENT
??_R0?AV?$MemPoolT@$0DE@@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@ ; tinyxml2::MemPoolT<52> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$MemPoolT@$0DE@@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$MemPoolT@$0DE@@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4?$MemPoolT@$0DE@@tinyxml2@@6B@ DD 00H		; tinyxml2::MemPoolT<52>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$MemPoolT@$0DE@@tinyxml2@@@8
	DD	FLAT:??_R3?$MemPoolT@$0DE@@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R4XMLNode@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4XMLNode@tinyxml2@@6B@ DD 00H			; tinyxml2::XMLNode::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVXMLNode@tinyxml2@@@8
	DD	FLAT:??_R3XMLNode@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R4XMLVisitor@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4XMLVisitor@tinyxml2@@6B@ DD 00H			; tinyxml2::XMLVisitor::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVXMLVisitor@tinyxml2@@@8
	DD	FLAT:??_R3XMLVisitor@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@MemPool@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MemPool@tinyxml2@@8 DD FLAT:??_R0?AVMemPool@tinyxml2@@@8 ; tinyxml2::MemPool::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MemPool@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R2MemPool@tinyxml2@@8
rdata$r	SEGMENT
??_R2MemPool@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@MemPool@tinyxml2@@8 ; tinyxml2::MemPool::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3MemPool@tinyxml2@@8
rdata$r	SEGMENT
??_R3MemPool@tinyxml2@@8 DD 00H				; tinyxml2::MemPool::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2MemPool@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMemPool@tinyxml2@@@8
data$r	SEGMENT
??_R0?AVMemPool@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@	; tinyxml2::MemPool `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMemPool@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ??_R4MemPool@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4MemPool@tinyxml2@@6B@ DD 00H			; tinyxml2::MemPool::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMemPool@tinyxml2@@@8
	DD	FLAT:??_R3MemPool@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R2XMLVisitor@tinyxml2@@8
rdata$r	SEGMENT
??_R2XMLVisitor@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@XMLVisitor@tinyxml2@@8 ; tinyxml2::XMLVisitor::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3XMLVisitor@tinyxml2@@8
rdata$r	SEGMENT
??_R3XMLVisitor@tinyxml2@@8 DD 00H			; tinyxml2::XMLVisitor::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2XMLVisitor@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVXMLVisitor@tinyxml2@@@8
data$r	SEGMENT
??_R0?AVXMLVisitor@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@ ; tinyxml2::XMLVisitor `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVXMLVisitor@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@XMLVisitor@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@XMLVisitor@tinyxml2@@8 DD FLAT:??_R0?AVXMLVisitor@tinyxml2@@@8 ; tinyxml2::XMLVisitor::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3XMLVisitor@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@XMLPrinter@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@XMLPrinter@tinyxml2@@8 DD FLAT:??_R0?AVXMLPrinter@tinyxml2@@@8 ; tinyxml2::XMLPrinter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3XMLPrinter@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R2XMLPrinter@tinyxml2@@8
rdata$r	SEGMENT
??_R2XMLPrinter@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@XMLPrinter@tinyxml2@@8 ; tinyxml2::XMLPrinter::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@XMLVisitor@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R3XMLPrinter@tinyxml2@@8
rdata$r	SEGMENT
??_R3XMLPrinter@tinyxml2@@8 DD 00H			; tinyxml2::XMLPrinter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2XMLPrinter@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVXMLPrinter@tinyxml2@@@8
data$r	SEGMENT
??_R0?AVXMLPrinter@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@ ; tinyxml2::XMLPrinter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVXMLPrinter@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ??_R4XMLPrinter@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4XMLPrinter@tinyxml2@@6B@ DD 00H			; tinyxml2::XMLPrinter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVXMLPrinter@tinyxml2@@@8
	DD	FLAT:??_R3XMLPrinter@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@XMLUnknown@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@XMLUnknown@tinyxml2@@8 DD FLAT:??_R0?AVXMLUnknown@tinyxml2@@@8 ; tinyxml2::XMLUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3XMLUnknown@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R2XMLUnknown@tinyxml2@@8
rdata$r	SEGMENT
??_R2XMLUnknown@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@XMLUnknown@tinyxml2@@8 ; tinyxml2::XMLUnknown::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@XMLNode@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R3XMLUnknown@tinyxml2@@8
rdata$r	SEGMENT
??_R3XMLUnknown@tinyxml2@@8 DD 00H			; tinyxml2::XMLUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2XMLUnknown@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVXMLUnknown@tinyxml2@@@8
data$r	SEGMENT
??_R0?AVXMLUnknown@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@ ; tinyxml2::XMLUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVXMLUnknown@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ??_R4XMLUnknown@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4XMLUnknown@tinyxml2@@6B@ DD 00H			; tinyxml2::XMLUnknown::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVXMLUnknown@tinyxml2@@@8
	DD	FLAT:??_R3XMLUnknown@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@XMLDeclaration@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@XMLDeclaration@tinyxml2@@8 DD FLAT:??_R0?AVXMLDeclaration@tinyxml2@@@8 ; tinyxml2::XMLDeclaration::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3XMLDeclaration@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R2XMLDeclaration@tinyxml2@@8
rdata$r	SEGMENT
??_R2XMLDeclaration@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@XMLDeclaration@tinyxml2@@8 ; tinyxml2::XMLDeclaration::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@XMLNode@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R3XMLDeclaration@tinyxml2@@8
rdata$r	SEGMENT
??_R3XMLDeclaration@tinyxml2@@8 DD 00H			; tinyxml2::XMLDeclaration::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2XMLDeclaration@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVXMLDeclaration@tinyxml2@@@8
data$r	SEGMENT
??_R0?AVXMLDeclaration@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@ ; tinyxml2::XMLDeclaration `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVXMLDeclaration@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ??_R4XMLDeclaration@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4XMLDeclaration@tinyxml2@@6B@ DD 00H		; tinyxml2::XMLDeclaration::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVXMLDeclaration@tinyxml2@@@8
	DD	FLAT:??_R3XMLDeclaration@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@XMLText@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@XMLText@tinyxml2@@8 DD FLAT:??_R0?AVXMLText@tinyxml2@@@8 ; tinyxml2::XMLText::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3XMLText@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R2XMLText@tinyxml2@@8
rdata$r	SEGMENT
??_R2XMLText@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@XMLText@tinyxml2@@8 ; tinyxml2::XMLText::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@XMLNode@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R3XMLText@tinyxml2@@8
rdata$r	SEGMENT
??_R3XMLText@tinyxml2@@8 DD 00H				; tinyxml2::XMLText::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2XMLText@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVXMLText@tinyxml2@@@8
data$r	SEGMENT
??_R0?AVXMLText@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@	; tinyxml2::XMLText `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVXMLText@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ??_R4XMLText@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4XMLText@tinyxml2@@6B@ DD 00H			; tinyxml2::XMLText::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVXMLText@tinyxml2@@@8
	DD	FLAT:??_R3XMLText@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@XMLComment@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@XMLComment@tinyxml2@@8 DD FLAT:??_R0?AVXMLComment@tinyxml2@@@8 ; tinyxml2::XMLComment::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3XMLComment@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R2XMLComment@tinyxml2@@8
rdata$r	SEGMENT
??_R2XMLComment@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@XMLComment@tinyxml2@@8 ; tinyxml2::XMLComment::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@XMLNode@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R3XMLComment@tinyxml2@@8
rdata$r	SEGMENT
??_R3XMLComment@tinyxml2@@8 DD 00H			; tinyxml2::XMLComment::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2XMLComment@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVXMLComment@tinyxml2@@@8
data$r	SEGMENT
??_R0?AVXMLComment@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@ ; tinyxml2::XMLComment `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVXMLComment@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ??_R4XMLComment@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4XMLComment@tinyxml2@@6B@ DD 00H			; tinyxml2::XMLComment::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVXMLComment@tinyxml2@@@8
	DD	FLAT:??_R3XMLComment@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@XMLAttribute@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@XMLAttribute@tinyxml2@@8 DD FLAT:??_R0?AVXMLAttribute@tinyxml2@@@8 ; tinyxml2::XMLAttribute::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3XMLAttribute@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R2XMLAttribute@tinyxml2@@8
rdata$r	SEGMENT
??_R2XMLAttribute@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@XMLAttribute@tinyxml2@@8 ; tinyxml2::XMLAttribute::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3XMLAttribute@tinyxml2@@8
rdata$r	SEGMENT
??_R3XMLAttribute@tinyxml2@@8 DD 00H			; tinyxml2::XMLAttribute::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2XMLAttribute@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVXMLAttribute@tinyxml2@@@8
data$r	SEGMENT
??_R0?AVXMLAttribute@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@ ; tinyxml2::XMLAttribute `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVXMLAttribute@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ??_R4XMLAttribute@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4XMLAttribute@tinyxml2@@6B@ DD 00H			; tinyxml2::XMLAttribute::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVXMLAttribute@tinyxml2@@@8
	DD	FLAT:??_R3XMLAttribute@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@XMLElement@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@XMLElement@tinyxml2@@8 DD FLAT:??_R0?AVXMLElement@tinyxml2@@@8 ; tinyxml2::XMLElement::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3XMLElement@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R2XMLElement@tinyxml2@@8
rdata$r	SEGMENT
??_R2XMLElement@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@XMLElement@tinyxml2@@8 ; tinyxml2::XMLElement::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@XMLNode@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R3XMLElement@tinyxml2@@8
rdata$r	SEGMENT
??_R3XMLElement@tinyxml2@@8 DD 00H			; tinyxml2::XMLElement::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2XMLElement@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVXMLElement@tinyxml2@@@8
data$r	SEGMENT
??_R0?AVXMLElement@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@ ; tinyxml2::XMLElement `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVXMLElement@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ??_R4XMLElement@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4XMLElement@tinyxml2@@6B@ DD 00H			; tinyxml2::XMLElement::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVXMLElement@tinyxml2@@@8
	DD	FLAT:??_R3XMLElement@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R2XMLNode@tinyxml2@@8
rdata$r	SEGMENT
??_R2XMLNode@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@XMLNode@tinyxml2@@8 ; tinyxml2::XMLNode::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3XMLNode@tinyxml2@@8
rdata$r	SEGMENT
??_R3XMLNode@tinyxml2@@8 DD 00H				; tinyxml2::XMLNode::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2XMLNode@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVXMLNode@tinyxml2@@@8
data$r	SEGMENT
??_R0?AVXMLNode@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@	; tinyxml2::XMLNode `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVXMLNode@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@XMLNode@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@XMLNode@tinyxml2@@8 DD FLAT:??_R0?AVXMLNode@tinyxml2@@@8 ; tinyxml2::XMLNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3XMLNode@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@XMLDocument@tinyxml2@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@XMLDocument@tinyxml2@@8 DD FLAT:??_R0?AVXMLDocument@tinyxml2@@@8 ; tinyxml2::XMLDocument::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3XMLDocument@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R2XMLDocument@tinyxml2@@8
rdata$r	SEGMENT
??_R2XMLDocument@tinyxml2@@8 DD FLAT:??_R1A@?0A@EA@XMLDocument@tinyxml2@@8 ; tinyxml2::XMLDocument::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@XMLNode@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R3XMLDocument@tinyxml2@@8
rdata$r	SEGMENT
??_R3XMLDocument@tinyxml2@@8 DD 00H			; tinyxml2::XMLDocument::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2XMLDocument@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVXMLDocument@tinyxml2@@@8
data$r	SEGMENT
??_R0?AVXMLDocument@tinyxml2@@@8 DD FLAT:??_7type_info@@6B@ ; tinyxml2::XMLDocument `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVXMLDocument@tinyxml2@@', 00H
data$r	ENDS
;	COMDAT ??_R4XMLDocument@tinyxml2@@6B@
rdata$r	SEGMENT
??_R4XMLDocument@tinyxml2@@6B@ DD 00H			; tinyxml2::XMLDocument::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVXMLDocument@tinyxml2@@@8
	DD	FLAT:??_R3XMLDocument@tinyxml2@@8
rdata$r	ENDS
;	COMDAT ??_C@_05EBLKANEG@?$DM?$CB?$CFs?$DO?$AA@
CONST	SEGMENT
??_C@_05EBLKANEG@?$DM?$CB?$CFs?$DO?$AA@ DB '<!%s>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06OGCFEMAJ@?$DM?$DP?$CFs?$DP?$DO?$AA@
CONST	SEGMENT
??_C@_06OGCFEMAJ@?$DM?$DP?$CFs?$DP?$DO?$AA@ DB '<?%s?>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PNDCPLLD@?$DM?$CB?9?9?$CFs?9?9?$DO?$AA@
CONST	SEGMENT
??_C@_09PNDCPLLD@?$DM?$CB?9?9?$CFs?9?9?$DO?$AA@ DB '<!--%s-->', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05POIKLDCH@?$DM?1?$CFs?$DO?$AA@
CONST	SEGMENT
??_C@_05POIKLDCH@?$DM?1?$CFs?$DO?$AA@ DB '</%s>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02HCGKDMEN@?1?$DO?$AA@
CONST	SEGMENT
??_C@_02HCGKDMEN@?1?$DO?$AA@ DB '/>', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01BJJEKLCA@?$CC?$AA@
CONST	SEGMENT
??_C@_01BJJEKLCA@?$CC?$AA@ DB '"', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LCDLMEIP@?5?$CFs?$DN?$CC?$AA@
CONST	SEGMENT
??_C@_05LCDLMEIP@?5?$CFs?$DN?$CC?$AA@ DB ' %s="', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03FONCMJME@?$DM?$CFs?$AA@
CONST	SEGMENT
??_C@_03FONCMJME@?$DM?$CFs?$AA@ DB '<%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CIAMHNHO@xml?5version?$DN?$CC1?40?$CC?$AA@
CONST	SEGMENT
??_C@_0BC@CIAMHNHO@xml?5version?$DN?$CC1?40?$CC?$AA@ DB 'xml version="1.0'
	DB	'"', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04IKLFLEHL@?$CG?$CFs?$DL?$AA@
CONST	SEGMENT
??_C@_04IKLFLEHL@?$CG?$CFs?$DL?$AA@ DB '&%s;', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02HAOIJKIC@?$CFc?$AA@
CONST	SEGMENT
??_C@_02HAOIJKIC@?$CFc?$AA@ DB '%c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PFOHOKJK@?5?5?5?5?$AA@
CONST	SEGMENT
??_C@_04PFOHOKJK@?5?5?5?5?$AA@ DB '    ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@CKABJOJH@XMLDocument?5error?5id?$DN?$CFd?5?8?$CFs?8?5str@
CONST	SEGMENT
??_C@_0CO@CKABJOJH@XMLDocument?5error?5id?$DN?$CFd?5?8?$CFs?8?5str@ DB 'X'
	DB	'MLDocument error id=%d ''%s'' str1=%s str2=%s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w?$AA@
CONST	SEGMENT
??_C@_01NOFIACDB@w?$AA@ DB 'w', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@MCGGMGEP@xml?5version?$DN?$CC1?40?$CC?5encoding?$DN?$CCUTF?9@
CONST	SEGMENT
??_C@_0CD@MCGGMGEP@xml?5version?$DN?$CC1?40?$CC?5encoding?$DN?$CCUTF?9@ DB 'x'
	DB	'ml version="1.0" encoding="UTF-8"', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01PPODPGHN@?$DO?$AA@
CONST	SEGMENT
??_C@_01PPODPGHN@?$DO?$AA@ DB '>', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GOEMJPDN@?$DP?$DO?$AA@
CONST	SEGMENT
??_C@_02GOEMJPDN@?$DP?$DO?$AA@ DB '?>', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03PNLDJJMO@?9?9?$DO?$AA@
CONST	SEGMENT
??_C@_03PNLDJJMO@?9?9?$DO?$AA@ DB '-->', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03MCHNFBAC@?$FN?$FN?$DO?$AA@
CONST	SEGMENT
??_C@_03MCHNFBAC@?$FN?$FN?$DO?$AA@ DB ']]>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03DLDNIBIK@?$CFlf?$AA@
CONST	SEGMENT
??_C@_03DLDNIBIK@?$CFlf?$AA@ DB '%lf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02NJPGOMH@?$CFf?$AA@
CONST	SEGMENT
??_C@_02NJPGOMH@?$CFf?$AA@ DB '%f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT
??_C@_05LAPONLG@false?$AA@ DB 'false', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT
??_C@_04LOAJBDKD@true?$AA@ DB 'true', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CEKCMKAN@?$CF?417g?$AA@
CONST	SEGMENT
??_C@_05CEKCMKAN@?$CF?417g?$AA@ DB '%.17g', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HANFDJND@?$CF?48g?$AA@
CONST	SEGMENT
??_C@_04HANFDJND@?$CF?48g?$AA@ DB '%.8g', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMHACPFF@?$CFu?$AA@
CONST	SEGMENT
??_C@_02GMHACPFF@?$CFu?$AA@ DB '%u', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7XMLPrinter@tinyxml2@@6B@
CONST	SEGMENT
??_7XMLPrinter@tinyxml2@@6B@ DD FLAT:??_R4XMLPrinter@tinyxml2@@6B@ ; tinyxml2::XMLPrinter::`vftable'
	DD	FLAT:??_EXMLPrinter@tinyxml2@@UAEPAXI@Z
	DD	FLAT:?VisitEnter@XMLPrinter@tinyxml2@@UAE_NABVXMLElement@2@PBVXMLAttribute@2@@Z
	DD	FLAT:?VisitEnter@XMLPrinter@tinyxml2@@UAE_NABVXMLDocument@2@@Z
	DD	FLAT:?VisitExit@XMLPrinter@tinyxml2@@UAE_NABVXMLElement@2@@Z
	DD	FLAT:?VisitExit@XMLPrinter@tinyxml2@@UAE_NABVXMLDocument@2@@Z
	DD	FLAT:?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLUnknown@2@@Z
	DD	FLAT:?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLComment@2@@Z
	DD	FLAT:?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLText@2@@Z
	DD	FLAT:?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLDeclaration@2@@Z
	DD	FLAT:?CloseElement@XMLPrinter@tinyxml2@@UAEX_N@Z
	DD	FLAT:?CompactMode@XMLPrinter@tinyxml2@@MAE_NABVXMLElement@2@@Z
	DD	FLAT:?PrintSpace@XMLPrinter@tinyxml2@@MAEXH@Z
CONST	ENDS
;	COMDAT ??_7XMLDocument@tinyxml2@@6B@
CONST	SEGMENT
??_7XMLDocument@tinyxml2@@6B@ DD FLAT:??_R4XMLDocument@tinyxml2@@6B@ ; tinyxml2::XMLDocument::`vftable'
	DD	FLAT:?ToElement@XMLNode@tinyxml2@@UBEPBVXMLElement@2@XZ
	DD	FLAT:?ToElement@XMLNode@tinyxml2@@UAEPAVXMLElement@2@XZ
	DD	FLAT:?ToText@XMLNode@tinyxml2@@UBEPBVXMLText@2@XZ
	DD	FLAT:?ToText@XMLNode@tinyxml2@@UAEPAVXMLText@2@XZ
	DD	FLAT:?ToComment@XMLNode@tinyxml2@@UBEPBVXMLComment@2@XZ
	DD	FLAT:?ToComment@XMLNode@tinyxml2@@UAEPAVXMLComment@2@XZ
	DD	FLAT:?ToDocument@XMLDocument@tinyxml2@@UBEPBV12@XZ
	DD	FLAT:?ToDocument@XMLDocument@tinyxml2@@UAEPAV12@XZ
	DD	FLAT:?ToDeclaration@XMLNode@tinyxml2@@UBEPBVXMLDeclaration@2@XZ
	DD	FLAT:?ToDeclaration@XMLNode@tinyxml2@@UAEPAVXMLDeclaration@2@XZ
	DD	FLAT:?ToUnknown@XMLNode@tinyxml2@@UBEPBVXMLUnknown@2@XZ
	DD	FLAT:?ToUnknown@XMLNode@tinyxml2@@UAEPAVXMLUnknown@2@XZ
	DD	FLAT:?ShallowClone@XMLDocument@tinyxml2@@UBEPAVXMLNode@2@PAV12@@Z
	DD	FLAT:?ShallowEqual@XMLDocument@tinyxml2@@UBE_NPBVXMLNode@2@@Z
	DD	FLAT:?Accept@XMLDocument@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z
	DD	FLAT:?ParseDeep@XMLNode@tinyxml2@@UAEPADPADPAVStrPair@2@@Z
	DD	FLAT:??_EXMLDocument@tinyxml2@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7?$MemPoolT@$0CM@@tinyxml2@@6B@
CONST	SEGMENT
??_7?$MemPoolT@$0CM@@tinyxml2@@6B@ DD FLAT:??_R4?$MemPoolT@$0CM@@tinyxml2@@6B@ ; tinyxml2::MemPoolT<44>::`vftable'
	DD	FLAT:??_E?$MemPoolT@$0CM@@tinyxml2@@UAEPAXI@Z
	DD	FLAT:?ItemSize@?$MemPoolT@$0CM@@tinyxml2@@UBEHXZ
	DD	FLAT:?Alloc@?$MemPoolT@$0CM@@tinyxml2@@UAEPAXXZ
	DD	FLAT:?Free@?$MemPoolT@$0CM@@tinyxml2@@UAEXPAX@Z
	DD	FLAT:?SetTracked@?$MemPoolT@$0CM@@tinyxml2@@UAEXXZ
	DD	FLAT:?Clear@?$MemPoolT@$0CM@@tinyxml2@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7?$MemPoolT@$0DA@@tinyxml2@@6B@
CONST	SEGMENT
??_7?$MemPoolT@$0DA@@tinyxml2@@6B@ DD FLAT:??_R4?$MemPoolT@$0DA@@tinyxml2@@6B@ ; tinyxml2::MemPoolT<48>::`vftable'
	DD	FLAT:??_E?$MemPoolT@$0DA@@tinyxml2@@UAEPAXI@Z
	DD	FLAT:?ItemSize@?$MemPoolT@$0DA@@tinyxml2@@UBEHXZ
	DD	FLAT:?Alloc@?$MemPoolT@$0DA@@tinyxml2@@UAEPAXXZ
	DD	FLAT:?Free@?$MemPoolT@$0DA@@tinyxml2@@UAEXPAX@Z
	DD	FLAT:?SetTracked@?$MemPoolT@$0DA@@tinyxml2@@UAEXXZ
	DD	FLAT:?Clear@?$MemPoolT@$0DA@@tinyxml2@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7?$MemPoolT@$0CE@@tinyxml2@@6B@
CONST	SEGMENT
??_7?$MemPoolT@$0CE@@tinyxml2@@6B@ DD FLAT:??_R4?$MemPoolT@$0CE@@tinyxml2@@6B@ ; tinyxml2::MemPoolT<36>::`vftable'
	DD	FLAT:??_E?$MemPoolT@$0CE@@tinyxml2@@UAEPAXI@Z
	DD	FLAT:?ItemSize@?$MemPoolT@$0CE@@tinyxml2@@UBEHXZ
	DD	FLAT:?Alloc@?$MemPoolT@$0CE@@tinyxml2@@UAEPAXXZ
	DD	FLAT:?Free@?$MemPoolT@$0CE@@tinyxml2@@UAEXPAX@Z
	DD	FLAT:?SetTracked@?$MemPoolT@$0CE@@tinyxml2@@UAEXXZ
	DD	FLAT:?Clear@?$MemPoolT@$0CE@@tinyxml2@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7?$MemPoolT@$0DE@@tinyxml2@@6B@
CONST	SEGMENT
??_7?$MemPoolT@$0DE@@tinyxml2@@6B@ DD FLAT:??_R4?$MemPoolT@$0DE@@tinyxml2@@6B@ ; tinyxml2::MemPoolT<52>::`vftable'
	DD	FLAT:??_E?$MemPoolT@$0DE@@tinyxml2@@UAEPAXI@Z
	DD	FLAT:?ItemSize@?$MemPoolT@$0DE@@tinyxml2@@UBEHXZ
	DD	FLAT:?Alloc@?$MemPoolT@$0DE@@tinyxml2@@UAEPAXXZ
	DD	FLAT:?Free@?$MemPoolT@$0DE@@tinyxml2@@UAEXPAX@Z
	DD	FLAT:?SetTracked@?$MemPoolT@$0DE@@tinyxml2@@UAEXXZ
	DD	FLAT:?Clear@?$MemPoolT@$0DE@@tinyxml2@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7XMLElement@tinyxml2@@6B@
CONST	SEGMENT
??_7XMLElement@tinyxml2@@6B@ DD FLAT:??_R4XMLElement@tinyxml2@@6B@ ; tinyxml2::XMLElement::`vftable'
	DD	FLAT:?ToElement@XMLElement@tinyxml2@@UBEPBV12@XZ
	DD	FLAT:?ToElement@XMLElement@tinyxml2@@UAEPAV12@XZ
	DD	FLAT:?ToText@XMLNode@tinyxml2@@UBEPBVXMLText@2@XZ
	DD	FLAT:?ToText@XMLNode@tinyxml2@@UAEPAVXMLText@2@XZ
	DD	FLAT:?ToComment@XMLNode@tinyxml2@@UBEPBVXMLComment@2@XZ
	DD	FLAT:?ToComment@XMLNode@tinyxml2@@UAEPAVXMLComment@2@XZ
	DD	FLAT:?ToDocument@XMLNode@tinyxml2@@UBEPBVXMLDocument@2@XZ
	DD	FLAT:?ToDocument@XMLNode@tinyxml2@@UAEPAVXMLDocument@2@XZ
	DD	FLAT:?ToDeclaration@XMLNode@tinyxml2@@UBEPBVXMLDeclaration@2@XZ
	DD	FLAT:?ToDeclaration@XMLNode@tinyxml2@@UAEPAVXMLDeclaration@2@XZ
	DD	FLAT:?ToUnknown@XMLNode@tinyxml2@@UBEPBVXMLUnknown@2@XZ
	DD	FLAT:?ToUnknown@XMLNode@tinyxml2@@UAEPAVXMLUnknown@2@XZ
	DD	FLAT:?ShallowClone@XMLElement@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z
	DD	FLAT:?ShallowEqual@XMLElement@tinyxml2@@UBE_NPBVXMLNode@2@@Z
	DD	FLAT:?Accept@XMLElement@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z
	DD	FLAT:?ParseDeep@XMLElement@tinyxml2@@UAEPADPADPAVStrPair@2@@Z
	DD	FLAT:??_EXMLElement@tinyxml2@@EAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7XMLAttribute@tinyxml2@@6B@
CONST	SEGMENT
??_7XMLAttribute@tinyxml2@@6B@ DD FLAT:??_R4XMLAttribute@tinyxml2@@6B@ ; tinyxml2::XMLAttribute::`vftable'
	DD	FLAT:??_EXMLAttribute@tinyxml2@@EAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7XMLUnknown@tinyxml2@@6B@
CONST	SEGMENT
??_7XMLUnknown@tinyxml2@@6B@ DD FLAT:??_R4XMLUnknown@tinyxml2@@6B@ ; tinyxml2::XMLUnknown::`vftable'
	DD	FLAT:?ToElement@XMLNode@tinyxml2@@UBEPBVXMLElement@2@XZ
	DD	FLAT:?ToElement@XMLNode@tinyxml2@@UAEPAVXMLElement@2@XZ
	DD	FLAT:?ToText@XMLNode@tinyxml2@@UBEPBVXMLText@2@XZ
	DD	FLAT:?ToText@XMLNode@tinyxml2@@UAEPAVXMLText@2@XZ
	DD	FLAT:?ToComment@XMLNode@tinyxml2@@UBEPBVXMLComment@2@XZ
	DD	FLAT:?ToComment@XMLNode@tinyxml2@@UAEPAVXMLComment@2@XZ
	DD	FLAT:?ToDocument@XMLNode@tinyxml2@@UBEPBVXMLDocument@2@XZ
	DD	FLAT:?ToDocument@XMLNode@tinyxml2@@UAEPAVXMLDocument@2@XZ
	DD	FLAT:?ToDeclaration@XMLNode@tinyxml2@@UBEPBVXMLDeclaration@2@XZ
	DD	FLAT:?ToDeclaration@XMLNode@tinyxml2@@UAEPAVXMLDeclaration@2@XZ
	DD	FLAT:?ToUnknown@XMLUnknown@tinyxml2@@UBEPBV12@XZ
	DD	FLAT:?ToUnknown@XMLUnknown@tinyxml2@@UAEPAV12@XZ
	DD	FLAT:?ShallowClone@XMLUnknown@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z
	DD	FLAT:?ShallowEqual@XMLUnknown@tinyxml2@@UBE_NPBVXMLNode@2@@Z
	DD	FLAT:?Accept@XMLUnknown@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z
	DD	FLAT:?ParseDeep@XMLUnknown@tinyxml2@@UAEPADPADPAVStrPair@2@@Z
	DD	FLAT:??_EXMLUnknown@tinyxml2@@MAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7XMLDeclaration@tinyxml2@@6B@
CONST	SEGMENT
??_7XMLDeclaration@tinyxml2@@6B@ DD FLAT:??_R4XMLDeclaration@tinyxml2@@6B@ ; tinyxml2::XMLDeclaration::`vftable'
	DD	FLAT:?ToElement@XMLNode@tinyxml2@@UBEPBVXMLElement@2@XZ
	DD	FLAT:?ToElement@XMLNode@tinyxml2@@UAEPAVXMLElement@2@XZ
	DD	FLAT:?ToText@XMLNode@tinyxml2@@UBEPBVXMLText@2@XZ
	DD	FLAT:?ToText@XMLNode@tinyxml2@@UAEPAVXMLText@2@XZ
	DD	FLAT:?ToComment@XMLNode@tinyxml2@@UBEPBVXMLComment@2@XZ
	DD	FLAT:?ToComment@XMLNode@tinyxml2@@UAEPAVXMLComment@2@XZ
	DD	FLAT:?ToDocument@XMLNode@tinyxml2@@UBEPBVXMLDocument@2@XZ
	DD	FLAT:?ToDocument@XMLNode@tinyxml2@@UAEPAVXMLDocument@2@XZ
	DD	FLAT:?ToDeclaration@XMLDeclaration@tinyxml2@@UBEPBV12@XZ
	DD	FLAT:?ToDeclaration@XMLDeclaration@tinyxml2@@UAEPAV12@XZ
	DD	FLAT:?ToUnknown@XMLNode@tinyxml2@@UBEPBVXMLUnknown@2@XZ
	DD	FLAT:?ToUnknown@XMLNode@tinyxml2@@UAEPAVXMLUnknown@2@XZ
	DD	FLAT:?ShallowClone@XMLDeclaration@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z
	DD	FLAT:?ShallowEqual@XMLDeclaration@tinyxml2@@UBE_NPBVXMLNode@2@@Z
	DD	FLAT:?Accept@XMLDeclaration@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z
	DD	FLAT:?ParseDeep@XMLDeclaration@tinyxml2@@UAEPADPADPAVStrPair@2@@Z
	DD	FLAT:??_EXMLDeclaration@tinyxml2@@MAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7XMLComment@tinyxml2@@6B@
CONST	SEGMENT
??_7XMLComment@tinyxml2@@6B@ DD FLAT:??_R4XMLComment@tinyxml2@@6B@ ; tinyxml2::XMLComment::`vftable'
	DD	FLAT:?ToElement@XMLNode@tinyxml2@@UBEPBVXMLElement@2@XZ
	DD	FLAT:?ToElement@XMLNode@tinyxml2@@UAEPAVXMLElement@2@XZ
	DD	FLAT:?ToText@XMLNode@tinyxml2@@UBEPBVXMLText@2@XZ
	DD	FLAT:?ToText@XMLNode@tinyxml2@@UAEPAVXMLText@2@XZ
	DD	FLAT:?ToComment@XMLComment@tinyxml2@@UBEPBV12@XZ
	DD	FLAT:?ToComment@XMLComment@tinyxml2@@UAEPAV12@XZ
	DD	FLAT:?ToDocument@XMLNode@tinyxml2@@UBEPBVXMLDocument@2@XZ
	DD	FLAT:?ToDocument@XMLNode@tinyxml2@@UAEPAVXMLDocument@2@XZ
	DD	FLAT:?ToDeclaration@XMLNode@tinyxml2@@UBEPBVXMLDeclaration@2@XZ
	DD	FLAT:?ToDeclaration@XMLNode@tinyxml2@@UAEPAVXMLDeclaration@2@XZ
	DD	FLAT:?ToUnknown@XMLNode@tinyxml2@@UBEPBVXMLUnknown@2@XZ
	DD	FLAT:?ToUnknown@XMLNode@tinyxml2@@UAEPAVXMLUnknown@2@XZ
	DD	FLAT:?ShallowClone@XMLComment@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z
	DD	FLAT:?ShallowEqual@XMLComment@tinyxml2@@UBE_NPBVXMLNode@2@@Z
	DD	FLAT:?Accept@XMLComment@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z
	DD	FLAT:?ParseDeep@XMLComment@tinyxml2@@UAEPADPADPAVStrPair@2@@Z
	DD	FLAT:??_EXMLComment@tinyxml2@@MAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7XMLText@tinyxml2@@6B@
CONST	SEGMENT
??_7XMLText@tinyxml2@@6B@ DD FLAT:??_R4XMLText@tinyxml2@@6B@ ; tinyxml2::XMLText::`vftable'
	DD	FLAT:?ToElement@XMLNode@tinyxml2@@UBEPBVXMLElement@2@XZ
	DD	FLAT:?ToElement@XMLNode@tinyxml2@@UAEPAVXMLElement@2@XZ
	DD	FLAT:?ToText@XMLText@tinyxml2@@UBEPBV12@XZ
	DD	FLAT:?ToText@XMLText@tinyxml2@@UAEPAV12@XZ
	DD	FLAT:?ToComment@XMLNode@tinyxml2@@UBEPBVXMLComment@2@XZ
	DD	FLAT:?ToComment@XMLNode@tinyxml2@@UAEPAVXMLComment@2@XZ
	DD	FLAT:?ToDocument@XMLNode@tinyxml2@@UBEPBVXMLDocument@2@XZ
	DD	FLAT:?ToDocument@XMLNode@tinyxml2@@UAEPAVXMLDocument@2@XZ
	DD	FLAT:?ToDeclaration@XMLNode@tinyxml2@@UBEPBVXMLDeclaration@2@XZ
	DD	FLAT:?ToDeclaration@XMLNode@tinyxml2@@UAEPAVXMLDeclaration@2@XZ
	DD	FLAT:?ToUnknown@XMLNode@tinyxml2@@UBEPBVXMLUnknown@2@XZ
	DD	FLAT:?ToUnknown@XMLNode@tinyxml2@@UAEPAVXMLUnknown@2@XZ
	DD	FLAT:?ShallowClone@XMLText@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z
	DD	FLAT:?ShallowEqual@XMLText@tinyxml2@@UBE_NPBVXMLNode@2@@Z
	DD	FLAT:?Accept@XMLText@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z
	DD	FLAT:?ParseDeep@XMLText@tinyxml2@@UAEPADPADPAVStrPair@2@@Z
	DD	FLAT:??_EXMLText@tinyxml2@@MAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7XMLNode@tinyxml2@@6B@
CONST	SEGMENT
??_7XMLNode@tinyxml2@@6B@ DD FLAT:??_R4XMLNode@tinyxml2@@6B@ ; tinyxml2::XMLNode::`vftable'
	DD	FLAT:?ToElement@XMLNode@tinyxml2@@UBEPBVXMLElement@2@XZ
	DD	FLAT:?ToElement@XMLNode@tinyxml2@@UAEPAVXMLElement@2@XZ
	DD	FLAT:?ToText@XMLNode@tinyxml2@@UBEPBVXMLText@2@XZ
	DD	FLAT:?ToText@XMLNode@tinyxml2@@UAEPAVXMLText@2@XZ
	DD	FLAT:?ToComment@XMLNode@tinyxml2@@UBEPBVXMLComment@2@XZ
	DD	FLAT:?ToComment@XMLNode@tinyxml2@@UAEPAVXMLComment@2@XZ
	DD	FLAT:?ToDocument@XMLNode@tinyxml2@@UBEPBVXMLDocument@2@XZ
	DD	FLAT:?ToDocument@XMLNode@tinyxml2@@UAEPAVXMLDocument@2@XZ
	DD	FLAT:?ToDeclaration@XMLNode@tinyxml2@@UBEPBVXMLDeclaration@2@XZ
	DD	FLAT:?ToDeclaration@XMLNode@tinyxml2@@UAEPAVXMLDeclaration@2@XZ
	DD	FLAT:?ToUnknown@XMLNode@tinyxml2@@UBEPBVXMLUnknown@2@XZ
	DD	FLAT:?ToUnknown@XMLNode@tinyxml2@@UAEPAVXMLUnknown@2@XZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?ParseDeep@XMLNode@tinyxml2@@UAEPADPADPAVStrPair@2@@Z
	DD	FLAT:??_EXMLNode@tinyxml2@@MAEPAXI@Z
CONST	ENDS
;	COMDAT ??_7XMLVisitor@tinyxml2@@6B@
CONST	SEGMENT
??_7XMLVisitor@tinyxml2@@6B@ DD FLAT:??_R4XMLVisitor@tinyxml2@@6B@ ; tinyxml2::XMLVisitor::`vftable'
	DD	FLAT:??_EXMLVisitor@tinyxml2@@UAEPAXI@Z
	DD	FLAT:?VisitEnter@XMLVisitor@tinyxml2@@UAE_NABVXMLElement@2@PBVXMLAttribute@2@@Z
	DD	FLAT:?VisitEnter@XMLVisitor@tinyxml2@@UAE_NABVXMLDocument@2@@Z
	DD	FLAT:?VisitExit@XMLVisitor@tinyxml2@@UAE_NABVXMLElement@2@@Z
	DD	FLAT:?VisitExit@XMLVisitor@tinyxml2@@UAE_NABVXMLDocument@2@@Z
	DD	FLAT:?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLUnknown@2@@Z
	DD	FLAT:?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLComment@2@@Z
	DD	FLAT:?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLText@2@@Z
	DD	FLAT:?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLDeclaration@2@@Z
CONST	ENDS
;	COMDAT ??_7MemPool@tinyxml2@@6B@
CONST	SEGMENT
??_7MemPool@tinyxml2@@6B@ DD FLAT:??_R4MemPool@tinyxml2@@6B@ ; tinyxml2::MemPool::`vftable'
	DD	FLAT:??_EMemPool@tinyxml2@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1XMLPrinter@tinyxml2@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1XMLPrinter@tinyxml2@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1XMLPrinter@tinyxml2@@UAE@XZ$1
__ehfuncinfo$??1XMLPrinter@tinyxml2@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1XMLPrinter@tinyxml2@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z$2
__ehfuncinfo$??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$MemPoolT@$0CM@@tinyxml2@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$MemPoolT@$0CM@@tinyxml2@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1?$MemPoolT@$0CM@@tinyxml2@@UAE@XZ$1
__ehfuncinfo$??1?$MemPoolT@$0CM@@tinyxml2@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1?$MemPoolT@$0CM@@tinyxml2@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$MemPoolT@$0CM@@tinyxml2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$MemPoolT@$0CM@@tinyxml2@@QAE@XZ$0
__ehfuncinfo$??0?$MemPoolT@$0CM@@tinyxml2@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$MemPoolT@$0CM@@tinyxml2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$MemPoolT@$0DA@@tinyxml2@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$MemPoolT@$0DA@@tinyxml2@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1?$MemPoolT@$0DA@@tinyxml2@@UAE@XZ$1
__ehfuncinfo$??1?$MemPoolT@$0DA@@tinyxml2@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1?$MemPoolT@$0DA@@tinyxml2@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$MemPoolT@$0DA@@tinyxml2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$MemPoolT@$0DA@@tinyxml2@@QAE@XZ$0
__ehfuncinfo$??0?$MemPoolT@$0DA@@tinyxml2@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$MemPoolT@$0DA@@tinyxml2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$MemPoolT@$0CE@@tinyxml2@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$MemPoolT@$0CE@@tinyxml2@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1?$MemPoolT@$0CE@@tinyxml2@@UAE@XZ$1
__ehfuncinfo$??1?$MemPoolT@$0CE@@tinyxml2@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1?$MemPoolT@$0CE@@tinyxml2@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$MemPoolT@$0CE@@tinyxml2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$MemPoolT@$0CE@@tinyxml2@@QAE@XZ$0
__ehfuncinfo$??0?$MemPoolT@$0CE@@tinyxml2@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$MemPoolT@$0CE@@tinyxml2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$MemPoolT@$0DE@@tinyxml2@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$MemPoolT@$0DE@@tinyxml2@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1?$MemPoolT@$0DE@@tinyxml2@@UAE@XZ$1
__ehfuncinfo$??1?$MemPoolT@$0DE@@tinyxml2@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1?$MemPoolT@$0DE@@tinyxml2@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$MemPoolT@$0DE@@tinyxml2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$MemPoolT@$0DE@@tinyxml2@@QAE@XZ$0
__ehfuncinfo$??0?$MemPoolT@$0DE@@tinyxml2@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$MemPoolT@$0DE@@tinyxml2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?NewUnknown@XMLDocument@tinyxml2@@QAEPAVXMLUnknown@2@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NewUnknown@XMLDocument@tinyxml2@@QAEPAVXMLUnknown@2@PBD@Z$0
__ehfuncinfo$?NewUnknown@XMLDocument@tinyxml2@@QAEPAVXMLUnknown@2@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?NewUnknown@XMLDocument@tinyxml2@@QAEPAVXMLUnknown@2@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?NewDeclaration@XMLDocument@tinyxml2@@QAEPAVXMLDeclaration@2@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NewDeclaration@XMLDocument@tinyxml2@@QAEPAVXMLDeclaration@2@PBD@Z$0
__ehfuncinfo$?NewDeclaration@XMLDocument@tinyxml2@@QAEPAVXMLDeclaration@2@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?NewDeclaration@XMLDocument@tinyxml2@@QAEPAVXMLDeclaration@2@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?NewText@XMLDocument@tinyxml2@@QAEPAVXMLText@2@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NewText@XMLDocument@tinyxml2@@QAEPAVXMLText@2@PBD@Z$0
__ehfuncinfo$?NewText@XMLDocument@tinyxml2@@QAEPAVXMLText@2@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?NewText@XMLDocument@tinyxml2@@QAEPAVXMLText@2@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?NewComment@XMLDocument@tinyxml2@@QAEPAVXMLComment@2@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NewComment@XMLDocument@tinyxml2@@QAEPAVXMLComment@2@PBD@Z$0
__ehfuncinfo$?NewComment@XMLDocument@tinyxml2@@QAEPAVXMLComment@2@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?NewComment@XMLDocument@tinyxml2@@QAEPAVXMLComment@2@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?NewElement@XMLDocument@tinyxml2@@QAEPAVXMLElement@2@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NewElement@XMLDocument@tinyxml2@@QAEPAVXMLElement@2@PBD@Z$0
__ehfuncinfo$?NewElement@XMLDocument@tinyxml2@@QAEPAVXMLElement@2@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?NewElement@XMLDocument@tinyxml2@@QAEPAVXMLElement@2@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Print@XMLDocument@tinyxml2@@QBEXPAVXMLPrinter@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Print@XMLDocument@tinyxml2@@QBEXPAVXMLPrinter@2@@Z$0
__ehfuncinfo$?Print@XMLDocument@tinyxml2@@QBEXPAVXMLPrinter@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Print@XMLDocument@tinyxml2@@QBEXPAVXMLPrinter@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@_N@Z$0
__ehfuncinfo$?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1XMLDocument@tinyxml2@@UAE@XZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??1XMLDocument@tinyxml2@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1XMLDocument@tinyxml2@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1XMLDocument@tinyxml2@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1XMLDocument@tinyxml2@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1XMLDocument@tinyxml2@@UAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1XMLDocument@tinyxml2@@UAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1XMLDocument@tinyxml2@@UAE@XZ$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z$3
__ehfuncinfo$??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ParseAttributes@XMLElement@tinyxml2@@AAEPADPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ParseAttributes@XMLElement@tinyxml2@@AAEPADPAD@Z$0
__ehfuncinfo$?ParseAttributes@XMLElement@tinyxml2@@AAEPADPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ParseAttributes@XMLElement@tinyxml2@@AAEPADPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?FindOrCreateAttribute@XMLElement@tinyxml2@@AAEPAVXMLAttribute@2@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindOrCreateAttribute@XMLElement@tinyxml2@@AAEPAVXMLAttribute@2@PBD@Z$0
__ehfuncinfo$?FindOrCreateAttribute@XMLElement@tinyxml2@@AAEPAVXMLAttribute@2@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindOrCreateAttribute@XMLElement@tinyxml2@@AAEPAVXMLAttribute@2@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1XMLElement@tinyxml2@@EAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1XMLElement@tinyxml2@@EAE@XZ$0
__ehfuncinfo$??1XMLElement@tinyxml2@@EAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1XMLElement@tinyxml2@@EAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1XMLAttribute@tinyxml2@@EAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1XMLAttribute@tinyxml2@@EAE@XZ$0
__ehfuncinfo$??1XMLAttribute@tinyxml2@@EAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1XMLAttribute@tinyxml2@@EAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0XMLAttribute@tinyxml2@@AAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0XMLAttribute@tinyxml2@@AAE@XZ$0
__ehfuncinfo$??0XMLAttribute@tinyxml2@@AAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0XMLAttribute@tinyxml2@@AAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1XMLNode@tinyxml2@@MAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1XMLNode@tinyxml2@@MAE@XZ$0
__ehfuncinfo$??1XMLNode@tinyxml2@@MAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1XMLNode@tinyxml2@@MAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ParseDeep@XMLNode@tinyxml2@@UAEPADPADPAVStrPair@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ParseDeep@XMLNode@tinyxml2@@UAEPADPADPAVStrPair@2@@Z$0
__ehfuncinfo$?ParseDeep@XMLNode@tinyxml2@@UAEPADPADPAVStrPair@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ParseDeep@XMLNode@tinyxml2@@UAEPADPADPAVStrPair@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?callfopen@tinyxml2@@YAPAU_iobuf@@PBD0@Z
_TEXT	SEGMENT
_err$ = -20						; size = 4
_fp$ = -8						; size = 4
_filepath$ = 8						; size = 4
_mode$ = 12						; size = 4
?callfopen@tinyxml2@@YAPAU_iobuf@@PBD0@Z PROC		; tinyxml2::callfopen, COMDAT

; 1704 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1705 : #if defined(_MSC_VER) && (_MSC_VER >= 1400 ) && (!defined WINCE)
; 1706 :     FILE* fp = 0;

	mov	DWORD PTR _fp$[ebp], 0

; 1707 :     errno_t err = fopen_s( &fp, filepath, mode );

	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _filepath$[ebp]
	push	ecx
	lea	edx, DWORD PTR _fp$[ebp]
	push	edx
	call	_fopen_s
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _err$[ebp], eax

; 1708 :     if ( err ) {

	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN1@callfopen

; 1709 :         return 0;

	xor	eax, eax
	jmp	SHORT $LN2@callfopen
$LN1@callfopen:

; 1710 :     }
; 1711 : #else
; 1712 :     FILE* fp = fopen( filepath, mode );
; 1713 : #endif
; 1714 :     return fp;

	mov	eax, DWORD PTR _fp$[ebp]
$LN2@callfopen:

; 1715 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@callfopen
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@callfopen:
	DD	1
	DD	$LN5@callfopen
$LN5@callfopen:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN4@callfopen
$LN4@callfopen:
	DB	102					; 00000066H
	DB	112					; 00000070H
	DB	0
?callfopen@tinyxml2@@YAPAU_iobuf@@PBD0@Z ENDP		; tinyxml2::callfopen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 65   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GXMLPrinter@tinyxml2@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GXMLPrinter@tinyxml2@@UAEPAXI@Z PROC			; tinyxml2::XMLPrinter::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1XMLPrinter@tinyxml2@@UAE@XZ		; tinyxml2::XMLPrinter::~XMLPrinter
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GXMLPrinter@tinyxml2@@UAEPAXI@Z ENDP			; tinyxml2::XMLPrinter::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?EnsureCapacity@?$DynArray@D$0BE@@tinyxml2@@AAEXH@Z
_TEXT	SEGMENT
$T1 = -248						; size = 4
$T2 = -236						; size = 4
_newMem$3 = -32						; size = 4
_newAllocated$4 = -20					; size = 4
_this$ = -8						; size = 4
_cap$ = 8						; size = 4
?EnsureCapacity@?$DynArray@D$0BE@@tinyxml2@@AAEXH@Z PROC ; tinyxml2::DynArray<char,20>::EnsureCapacity, COMDAT
; _this$ = ecx

; 285  :     void EnsureCapacity( int cap ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 286  :         if ( cap > _allocated ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cap$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jle	SHORT $LN3@EnsureCapa

; 287  :             int newAllocated = cap * 2;

	mov	eax, DWORD PTR _cap$[ebp]
	shl	eax, 1
	mov	DWORD PTR _newAllocated$4[ebp], eax

; 288  :             T* newMem = new T[newAllocated];

	mov	eax, DWORD PTR _newAllocated$4[ebp]
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR _newMem$3[ebp], ecx

; 289  :             memcpy( newMem, _mem, sizeof(T)*_size );	// warning: not using constructors, only works for PODs

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _newMem$3[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 290  :             if ( _mem != _pool ) {

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], eax
	je	SHORT $LN1@EnsureCapa

; 291  :                 delete [] _mem;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@EnsureCapa:

; 292  :             }
; 293  :             _mem = newMem;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newMem$3[ebp]
	mov	DWORD PTR [eax], ecx

; 294  :             _allocated = newAllocated;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newAllocated$4[ebp]
	mov	DWORD PTR [eax+24], ecx
$LN3@EnsureCapa:

; 295  :         }
; 296  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?EnsureCapacity@?$DynArray@D$0BE@@tinyxml2@@AAEXH@Z ENDP ; tinyxml2::DynArray<char,20>::EnsureCapacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?PushArr@?$DynArray@D$0BE@@tinyxml2@@QAEPADH@Z
_TEXT	SEGMENT
_ret$ = -20						; size = 4
_this$ = -8						; size = 4
_count$ = 8						; size = 4
?PushArr@?$DynArray@D$0BE@@tinyxml2@@QAEPADH@Z PROC	; tinyxml2::DynArray<char,20>::PushArr, COMDAT
; _this$ = ecx

; 233  :     T* PushArr( int count ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 234  :         EnsureCapacity( _size+count );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, DWORD PTR _count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnsureCapacity@?$DynArray@D$0BE@@tinyxml2@@AAEXH@Z ; tinyxml2::DynArray<char,20>::EnsureCapacity

; 235  :         T* ret = &_mem[_size];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR _ret$[ebp], ecx

; 236  :         _size += count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx

; 237  :         return ret;

	mov	eax, DWORD PTR _ret$[ebp]

; 238  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?PushArr@?$DynArray@D$0BE@@tinyxml2@@QAEPADH@Z ENDP	; tinyxml2::DynArray<char,20>::PushArr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Push@?$DynArray@D$0BE@@tinyxml2@@QAEXD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_t$ = 8							; size = 1
?Push@?$DynArray@D$0BE@@tinyxml2@@QAEXD@Z PROC		; tinyxml2::DynArray<char,20>::Push, COMDAT
; _this$ = ecx

; 228  :     void Push( T t ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 229  :         EnsureCapacity( _size+1 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnsureCapacity@?$DynArray@D$0BE@@tinyxml2@@AAEXH@Z ; tinyxml2::DynArray<char,20>::EnsureCapacity

; 230  :         _mem[_size++] = t;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	dl, BYTE PTR _t$[ebp]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx

; 231  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Push@?$DynArray@D$0BE@@tinyxml2@@QAEXD@Z ENDP		; tinyxml2::DynArray<char,20>::Push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ??1?$DynArray@D$0BE@@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
??1?$DynArray@D$0BE@@tinyxml2@@QAE@XZ PROC		; tinyxml2::DynArray<char,20>::~DynArray<char,20>, COMDAT
; _this$ = ecx

; 218  :     ~DynArray() {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 219  :         if ( _mem != _pool ) {

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], eax
	je	SHORT $LN2@DynArray

; 220  :             delete [] _mem;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@DynArray:

; 221  :         }
; 222  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$DynArray@D$0BE@@tinyxml2@@QAE@XZ ENDP		; tinyxml2::DynArray<char,20>::~DynArray<char,20>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ??0?$DynArray@D$0BE@@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$DynArray@D$0BE@@tinyxml2@@QAE@XZ PROC		; tinyxml2::DynArray<char,20>::DynArray<char,20>, COMDAT
; _this$ = ecx

; 212  :     DynArray< T, INIT >() {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 213  :         _mem = _pool;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 214  :         _allocated = INIT;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 20			; 00000014H

; 215  :         _size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 216  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$DynArray@D$0BE@@tinyxml2@@QAE@XZ ENDP		; tinyxml2::DynArray<char,20>::DynArray<char,20>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?PrintString@XMLPrinter@tinyxml2@@AAEXPBD_N@Z
_TEXT	SEGMENT
tv68 = -244						; size = 4
_i$1 = -44						; size = 4
_flag$ = -32						; size = 4
_q$ = -20						; size = 4
_this$ = -8						; size = 4
_p$ = 8							; size = 4
_restricted$ = 12					; size = 1
?PrintString@XMLPrinter@tinyxml2@@AAEXPBD_N@Z PROC	; tinyxml2::XMLPrinter::PrintString, COMDAT
; _this$ = ecx

; 1958 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1959 :     // Look for runs of bytes between entities to print.
; 1960 :     const char* q = p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _q$[ebp], eax

; 1961 :     const bool* flag = restricted ? _restrictedEntityFlag : _entityFlag;

	movzx	eax, BYTE PTR _restricted$[ebp]
	test	eax, eax
	je	SHORT $LN16@PrintStrin
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 142				; 0000008eH
	mov	DWORD PTR tv68[ebp], ecx
	jmp	SHORT $LN17@PrintStrin
$LN16@PrintStrin:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 78					; 0000004eH
	mov	DWORD PTR tv68[ebp], edx
$LN17@PrintStrin:
	mov	eax, DWORD PTR tv68[ebp]
	mov	DWORD PTR _flag$[ebp], eax

; 1962 : 
; 1963 :     if ( _processEntities ) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+76]
	test	ecx, ecx
	je	$LN13@PrintStrin
$LN12@PrintStrin:

; 1964 :         while ( *q ) {

	mov	eax, DWORD PTR _q$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN13@PrintStrin

; 1965 :             // Remember, char is sometimes signed. (How many times has that bitten me?)
; 1966 :             if ( *q > 0 && *q < ENTITY_RANGE ) {

	mov	eax, DWORD PTR _q$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jle	$LN10@PrintStrin
	mov	eax, DWORD PTR _q$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 64					; 00000040H
	jge	$LN10@PrintStrin

; 1967 :                 // Check for entities. If one is found, flush
; 1968 :                 // the stream up until the entity, write the
; 1969 :                 // entity, and keep looking.
; 1970 :                 if ( flag[(unsigned)(*q)] ) {

	mov	eax, DWORD PTR _q$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _flag$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	je	$LN10@PrintStrin
$LN8@PrintStrin:

; 1971 :                     while ( p < q ) {

	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR _q$[ebp]
	jae	SHORT $LN7@PrintStrin

; 1972 :                         Print( "%c", *p );

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	push	ecx
	push	OFFSET ??_C@_02HAOIJKIC@?$CFc?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ	; tinyxml2::XMLPrinter::Print
	add	esp, 12					; 0000000cH

; 1973 :                         ++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 1974 :                     }

	jmp	SHORT $LN8@PrintStrin
$LN7@PrintStrin:

; 1975 :                     for( int i=0; i<NUM_ENTITIES; ++i ) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN6@PrintStrin
$LN5@PrintStrin:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN6@PrintStrin:
	cmp	DWORD PTR _i$1[ebp], 5
	jge	SHORT $LN4@PrintStrin

; 1976 :                         if ( entities[i].value == *q ) {

	imul	eax, DWORD PTR _i$1[ebp], 12
	movsx	ecx, BYTE PTR _entities[eax+8]
	mov	edx, DWORD PTR _q$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	jne	SHORT $LN3@PrintStrin

; 1977 :                             Print( "&%s;", entities[i].pattern );

	imul	eax, DWORD PTR _i$1[ebp], 12
	mov	ecx, DWORD PTR _entities[eax]
	push	ecx
	push	OFFSET ??_C@_04IKLFLEHL@?$CG?$CFs?$DL?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ	; tinyxml2::XMLPrinter::Print
	add	esp, 12					; 0000000cH

; 1978 :                             break;

	jmp	SHORT $LN4@PrintStrin
$LN3@PrintStrin:

; 1979 :                         }
; 1980 :                     }

	jmp	SHORT $LN5@PrintStrin
$LN4@PrintStrin:

; 1981 :                     ++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN10@PrintStrin:

; 1982 :                 }
; 1983 :             }
; 1984 :             ++q;

	mov	eax, DWORD PTR _q$[ebp]
	add	eax, 1
	mov	DWORD PTR _q$[ebp], eax

; 1985 :         }

	jmp	$LN12@PrintStrin
$LN13@PrintStrin:

; 1986 :     }
; 1987 :     // Flush the remaining string. This will be the entire
; 1988 :     // string if an entity wasn't found.
; 1989 :     if ( !_processEntities || (q-p > 0) ) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+76]
	test	ecx, ecx
	je	SHORT $LN1@PrintStrin
	mov	eax, DWORD PTR _q$[ebp]
	sub	eax, DWORD PTR _p$[ebp]
	test	eax, eax
	jle	SHORT $LN14@PrintStrin
$LN1@PrintStrin:

; 1990 :         Print( "%s", p );

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ	; tinyxml2::XMLPrinter::Print
	add	esp, 12					; 0000000cH
$LN14@PrintStrin:

; 1991 :     }
; 1992 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?PrintString@XMLPrinter@tinyxml2@@AAEXPBD_N@Z ENDP	; tinyxml2::XMLPrinter::PrintString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?EnsureCapacity@?$DynArray@PBD$09@tinyxml2@@AAEXH@Z
_TEXT	SEGMENT
$T1 = -248						; size = 4
$T2 = -236						; size = 4
_newMem$3 = -32						; size = 4
_newAllocated$4 = -20					; size = 4
_this$ = -8						; size = 4
_cap$ = 8						; size = 4
?EnsureCapacity@?$DynArray@PBD$09@tinyxml2@@AAEXH@Z PROC ; tinyxml2::DynArray<char const *,10>::EnsureCapacity, COMDAT
; _this$ = ecx

; 285  :     void EnsureCapacity( int cap ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 286  :         if ( cap > _allocated ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cap$[ebp]
	cmp	ecx, DWORD PTR [eax+44]
	jle	$LN3@EnsureCapa

; 287  :             int newAllocated = cap * 2;

	mov	eax, DWORD PTR _cap$[ebp]
	shl	eax, 1
	mov	DWORD PTR _newAllocated$4[ebp], eax

; 288  :             T* newMem = new T[newAllocated];

	xor	ecx, ecx
	mov	eax, DWORD PTR _newAllocated$4[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _newMem$3[ebp], eax

; 289  :             memcpy( newMem, _mem, sizeof(T)*_size );	// warning: not using constructors, only works for PODs

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _newMem$3[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 290  :             if ( _mem != _pool ) {

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], eax
	je	SHORT $LN1@EnsureCapa

; 291  :                 delete [] _mem;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@EnsureCapa:

; 292  :             }
; 293  :             _mem = newMem;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newMem$3[ebp]
	mov	DWORD PTR [eax], ecx

; 294  :             _allocated = newAllocated;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newAllocated$4[ebp]
	mov	DWORD PTR [eax+44], ecx
$LN3@EnsureCapa:

; 295  :         }
; 296  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?EnsureCapacity@?$DynArray@PBD$09@tinyxml2@@AAEXH@Z ENDP ; tinyxml2::DynArray<char const *,10>::EnsureCapacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Pop@?$DynArray@PBD$09@tinyxml2@@QAEPBDXZ
_TEXT	SEGMENT
tv69 = -208						; size = 4
_this$ = -8						; size = 4
?Pop@?$DynArray@PBD$09@tinyxml2@@QAEPBDXZ PROC		; tinyxml2::DynArray<char const *,10>::Pop, COMDAT
; _this$ = ecx

; 240  :     T Pop() {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 241  :         return _mem[--_size];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	sub	ecx, 1
	mov	DWORD PTR tv69[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR [edx+48], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR tv69[ebp]
	mov	eax, DWORD PTR [edx+eax*4]

; 242  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Pop@?$DynArray@PBD$09@tinyxml2@@QAEPBDXZ ENDP		; tinyxml2::DynArray<char const *,10>::Pop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Push@?$DynArray@PBD$09@tinyxml2@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_t$ = 8							; size = 4
?Push@?$DynArray@PBD$09@tinyxml2@@QAEXPBD@Z PROC	; tinyxml2::DynArray<char const *,10>::Push, COMDAT
; _this$ = ecx

; 228  :     void Push( T t ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 229  :         EnsureCapacity( _size+1 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnsureCapacity@?$DynArray@PBD$09@tinyxml2@@AAEXH@Z ; tinyxml2::DynArray<char const *,10>::EnsureCapacity

; 230  :         _mem[_size++] = t;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], ecx

; 231  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Push@?$DynArray@PBD$09@tinyxml2@@QAEXPBD@Z ENDP	; tinyxml2::DynArray<char const *,10>::Push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ??1?$DynArray@PBD$09@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
??1?$DynArray@PBD$09@tinyxml2@@QAE@XZ PROC		; tinyxml2::DynArray<char const *,10>::~DynArray<char const *,10>, COMDAT
; _this$ = ecx

; 218  :     ~DynArray() {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 219  :         if ( _mem != _pool ) {

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], eax
	je	SHORT $LN2@DynArray

; 220  :             delete [] _mem;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@DynArray:

; 221  :         }
; 222  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$DynArray@PBD$09@tinyxml2@@QAE@XZ ENDP		; tinyxml2::DynArray<char const *,10>::~DynArray<char const *,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ??0?$DynArray@PBD$09@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$DynArray@PBD$09@tinyxml2@@QAE@XZ PROC		; tinyxml2::DynArray<char const *,10>::DynArray<char const *,10>, COMDAT
; _this$ = ecx

; 212  :     DynArray< T, INIT >() {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 213  :         _mem = _pool;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 214  :         _allocated = INIT;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 10			; 0000000aH

; 215  :         _size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0

; 216  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$DynArray@PBD$09@tinyxml2@@QAE@XZ ENDP		; tinyxml2::DynArray<char const *,10>::DynArray<char const *,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?SealElement@XMLPrinter@tinyxml2@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?SealElement@XMLPrinter@tinyxml2@@IAEXXZ PROC		; tinyxml2::XMLPrinter::SealElement, COMDAT
; _this$ = ecx

; 2096 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2097 :     _elementJustOpened = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 0

; 2098 :     Print( ">" );

	push	OFFSET ??_C@_01PPODPGHN@?$DO?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ	; tinyxml2::XMLPrinter::Print
	add	esp, 8

; 2099 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SealElement@XMLPrinter@tinyxml2@@IAEXXZ ENDP		; tinyxml2::XMLPrinter::SealElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ
_TEXT	SEGMENT
_p$1 = -32						; size = 4
_len$2 = -20						; size = 4
_va$ = -8						; size = 4
_this$ = 8						; size = 4
_format$ = 12						; size = 4
?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ PROC		; tinyxml2::XMLPrinter::Print, COMDAT

; 1908 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1909 :     va_list     va;
; 1910 :     va_start( va, format );

	lea	eax, DWORD PTR _format$[ebp+4]
	mov	DWORD PTR _va$[ebp], eax

; 1911 : 
; 1912 :     if ( _fp ) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN2@Print

; 1913 :         vfprintf( _fp, format, va );

	mov	eax, DWORD PTR _va$[ebp]
	push	eax
	mov	ecx, DWORD PTR _format$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	call	_vfprintf
	add	esp, 12					; 0000000cH

; 1914 :     }
; 1915 :     else {

	jmp	SHORT $LN1@Print
$LN2@Print:

; 1916 : #if defined(_MSC_VER) && (_MSC_VER >= 1400 )
; 1917 : 		#if defined(WINCE)
; 1918 : 		int len = 512;
; 1919 : 		do {
; 1920 : 		    len = len*2;
; 1921 : 		    char* str = new char[len]();
; 1922 : 			len = _vsnprintf(str, len, format, va);
; 1923 : 			delete[] str;
; 1924 : 		}while (len < 0);
; 1925 : 		#else
; 1926 :         int len = _vscprintf( format, va );

	mov	eax, DWORD PTR _va$[ebp]
	push	eax
	mov	ecx, DWORD PTR _format$[ebp]
	push	ecx
	call	__vscprintf
	add	esp, 8
	mov	DWORD PTR _len$2[ebp], eax

; 1927 : 		#endif
; 1928 : #else
; 1929 :         int len = vsnprintf( 0, 0, format, va );
; 1930 : #endif
; 1931 :         // Close out and re-start the va-args
; 1932 :         va_end( va );

	mov	DWORD PTR _va$[ebp], 0

; 1933 :         va_start( va, format );

	lea	eax, DWORD PTR _format$[ebp+4]
	mov	DWORD PTR _va$[ebp], eax

; 1934 :         char* p = _buffer.PushArr( len ) - 1;	// back up over the null terminator.

	mov	eax, DWORD PTR _len$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	call	?PushArr@?$DynArray@D$0BE@@tinyxml2@@QAEPADH@Z ; tinyxml2::DynArray<char,20>::PushArr
	sub	eax, 1
	mov	DWORD PTR _p$1[ebp], eax

; 1935 : #if defined(_MSC_VER) && (_MSC_VER >= 1400 )
; 1936 : 		#if defined(WINCE)
; 1937 : 		_vsnprintf( p, len+1, format, va );
; 1938 : 		#else
; 1939 : 		vsnprintf_s( p, len+1, _TRUNCATE, format, va );

	mov	eax, DWORD PTR _va$[ebp]
	push	eax
	mov	ecx, DWORD PTR _format$[ebp]
	push	ecx
	push	-1
	mov	edx, DWORD PTR _len$2[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _p$1[ebp]
	push	eax
	call	_vsnprintf_s
	add	esp, 20					; 00000014H
$LN1@Print:

; 1940 : 		#endif
; 1941 : #else
; 1942 : 		vsnprintf( p, len+1, format, va );
; 1943 : #endif
; 1944 :     }
; 1945 :     va_end( va );

	mov	DWORD PTR _va$[ebp], 0

; 1946 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ ENDP		; tinyxml2::XMLPrinter::Print
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?PrintSpace@XMLPrinter@tinyxml2@@MAEXH@Z
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_this$ = -8						; size = 4
_depth$ = 8						; size = 4
?PrintSpace@XMLPrinter@tinyxml2@@MAEXH@Z PROC		; tinyxml2::XMLPrinter::PrintSpace, COMDAT
; _this$ = ecx

; 1950 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1951 :     for( int i=0; i<depth; ++i ) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@PrintSpace
$LN2@PrintSpace:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@PrintSpace:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _depth$[ebp]
	jge	SHORT $LN4@PrintSpace

; 1952 :         Print( "    " );

	push	OFFSET ??_C@_04PFOHOKJK@?5?5?5?5?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ	; tinyxml2::XMLPrinter::Print
	add	esp, 8

; 1953 :     }

	jmp	SHORT $LN2@PrintSpace
$LN4@PrintSpace:

; 1954 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?PrintSpace@XMLPrinter@tinyxml2@@MAEXH@Z ENDP		; tinyxml2::XMLPrinter::PrintSpace
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?CompactMode@XMLPrinter@tinyxml2@@MAE_NABVXMLElement@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
?CompactMode@XMLPrinter@tinyxml2@@MAE_NABVXMLElement@2@@Z PROC ; tinyxml2::XMLPrinter::CompactMode, COMDAT
; _this$ = ecx

; 2052 : 	virtual bool CompactMode( const XMLElement& )	{ return _compactMode; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+77]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?CompactMode@XMLPrinter@tinyxml2@@MAE_NABVXMLElement@2@@Z ENDP ; tinyxml2::XMLPrinter::CompactMode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLUnknown@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_unknown$ = 8						; size = 4
?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLUnknown@2@@Z PROC ; tinyxml2::XMLPrinter::Visit, COMDAT
; _this$ = ecx

; 2252 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2253 :     PushUnknown( unknown.Value() );

	mov	ecx, DWORD PTR _unknown$[ebp]
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PushUnknown@XMLPrinter@tinyxml2@@QAEXPBD@Z ; tinyxml2::XMLPrinter::PushUnknown

; 2254 :     return true;

	mov	al, 1

; 2255 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLUnknown@2@@Z ENDP ; tinyxml2::XMLPrinter::Visit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLDeclaration@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_declaration$ = 8					; size = 4
?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLDeclaration@2@@Z PROC ; tinyxml2::XMLPrinter::Visit, COMDAT
; _this$ = ecx

; 2245 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2246 :     PushDeclaration( declaration.Value() );

	mov	ecx, DWORD PTR _declaration$[ebp]
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PushDeclaration@XMLPrinter@tinyxml2@@QAEXPBD@Z ; tinyxml2::XMLPrinter::PushDeclaration

; 2247 :     return true;

	mov	al, 1

; 2248 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLDeclaration@2@@Z ENDP ; tinyxml2::XMLPrinter::Visit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLComment@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_comment$ = 8						; size = 4
?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLComment@2@@Z PROC ; tinyxml2::XMLPrinter::Visit, COMDAT
; _this$ = ecx

; 2239 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2240 :     PushComment( comment.Value() );

	mov	ecx, DWORD PTR _comment$[ebp]
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PushComment@XMLPrinter@tinyxml2@@QAEXPBD@Z ; tinyxml2::XMLPrinter::PushComment

; 2241 :     return true;

	mov	al, 1

; 2242 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLComment@2@@Z ENDP ; tinyxml2::XMLPrinter::Visit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLText@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLText@2@@Z PROC	; tinyxml2::XMLPrinter::Visit, COMDAT
; _this$ = ecx

; 2232 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2233 :     PushText( text.Value(), text.CData() );

	mov	ecx, DWORD PTR _text$[ebp]
	call	?CData@XMLText@tinyxml2@@QBE_NXZ	; tinyxml2::XMLText::CData
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PushText@XMLPrinter@tinyxml2@@QAEXPBD_N@Z ; tinyxml2::XMLPrinter::PushText

; 2234 :     return true;

	mov	al, 1

; 2235 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Visit@XMLPrinter@tinyxml2@@UAE_NABVXMLText@2@@Z ENDP	; tinyxml2::XMLPrinter::Visit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?VisitExit@XMLPrinter@tinyxml2@@UAE_NABVXMLElement@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_element$ = 8						; size = 4
?VisitExit@XMLPrinter@tinyxml2@@UAE_NABVXMLElement@2@@Z PROC ; tinyxml2::XMLPrinter::VisitExit, COMDAT
; _this$ = ecx

; 2225 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2226 :     CloseElement( CompactMode(element) );

	mov	esi, esp
	mov	eax, DWORD PTR _element$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+36]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2227 :     return true;

	mov	al, 1

; 2228 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?VisitExit@XMLPrinter@tinyxml2@@UAE_NABVXMLElement@2@@Z ENDP ; tinyxml2::XMLPrinter::VisitExit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?VisitEnter@XMLPrinter@tinyxml2@@UAE_NABVXMLElement@2@PBVXMLAttribute@2@@Z
_TEXT	SEGMENT
tv71 = -232						; size = 4
tv82 = -229						; size = 1
_compactMode$ = -29					; size = 1
_parentElem$ = -20					; size = 4
_this$ = -8						; size = 4
_element$ = 8						; size = 4
_attribute$ = 12					; size = 4
?VisitEnter@XMLPrinter@tinyxml2@@UAE_NABVXMLElement@2@PBVXMLAttribute@2@@Z PROC ; tinyxml2::XMLPrinter::VisitEnter, COMDAT
; _this$ = ecx

; 2212 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2213 : 	const XMLElement*	parentElem = element.Parent()->ToElement();

	mov	ecx, DWORD PTR _element$[ebp]
	call	?Parent@XMLNode@tinyxml2@@QBEPBV12@XZ	; tinyxml2::XMLNode::Parent
	mov	DWORD PTR tv71[ebp], eax
	mov	eax, DWORD PTR tv71[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR tv71[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _parentElem$[ebp], eax

; 2214 : 	bool		compactMode = parentElem ? CompactMode(*parentElem) : _compactMode;

	cmp	DWORD PTR _parentElem$[ebp], 0
	je	SHORT $LN5@VisitEnter
	mov	esi, esp
	mov	eax, DWORD PTR _parentElem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR tv82[ebp], al
	jmp	SHORT $LN6@VisitEnter
$LN5@VisitEnter:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [ecx+77]
	mov	BYTE PTR tv82[ebp], dl
$LN6@VisitEnter:
	mov	al, BYTE PTR tv82[ebp]
	mov	BYTE PTR _compactMode$[ebp], al

; 2215 :     OpenElement( element.Name(), compactMode );

	movzx	eax, BYTE PTR _compactMode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _element$[ebp]
	call	?Name@XMLElement@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLElement::Name
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OpenElement@XMLPrinter@tinyxml2@@QAEXPBD_N@Z ; tinyxml2::XMLPrinter::OpenElement
$LN2@VisitEnter:

; 2216 :     while ( attribute ) {

	cmp	DWORD PTR _attribute$[ebp], 0
	je	SHORT $LN1@VisitEnter

; 2217 :         PushAttribute( attribute->Name(), attribute->Value() );

	mov	ecx, DWORD PTR _attribute$[ebp]
	call	?Value@XMLAttribute@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLAttribute::Value
	push	eax
	mov	ecx, DWORD PTR _attribute$[ebp]
	call	?Name@XMLAttribute@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLAttribute::Name
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBD0@Z ; tinyxml2::XMLPrinter::PushAttribute

; 2218 :         attribute = attribute->Next();

	mov	ecx, DWORD PTR _attribute$[ebp]
	call	?Next@XMLAttribute@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLAttribute::Next
	mov	DWORD PTR _attribute$[ebp], eax

; 2219 :     }

	jmp	SHORT $LN2@VisitEnter
$LN1@VisitEnter:

; 2220 :     return true;

	mov	al, 1

; 2221 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?VisitEnter@XMLPrinter@tinyxml2@@UAE_NABVXMLElement@2@PBVXMLAttribute@2@@Z ENDP ; tinyxml2::XMLPrinter::VisitEnter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?VisitExit@XMLPrinter@tinyxml2@@UAE_NABVXMLDocument@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
?VisitExit@XMLPrinter@tinyxml2@@UAE_NABVXMLDocument@2@@Z PROC ; tinyxml2::XMLPrinter::VisitExit, COMDAT
; _this$ = ecx

; 2015 :     virtual bool VisitExit( const XMLDocument& /*doc*/ )			{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2016 :         return true;

	mov	al, 1

; 2017 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?VisitExit@XMLPrinter@tinyxml2@@UAE_NABVXMLDocument@2@@Z ENDP ; tinyxml2::XMLPrinter::VisitExit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?VisitEnter@XMLPrinter@tinyxml2@@UAE_NABVXMLDocument@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_doc$ = 8						; size = 4
?VisitEnter@XMLPrinter@tinyxml2@@UAE_NABVXMLDocument@2@@Z PROC ; tinyxml2::XMLPrinter::VisitEnter, COMDAT
; _this$ = ecx

; 2202 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2203 :     _processEntities = doc.ProcessEntities();

	mov	ecx, DWORD PTR _doc$[ebp]
	call	?ProcessEntities@XMLDocument@tinyxml2@@QBE_NXZ ; tinyxml2::XMLDocument::ProcessEntities
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+76], al

; 2204 :     if ( doc.HasBOM() ) {

	mov	ecx, DWORD PTR _doc$[ebp]
	call	?HasBOM@XMLDocument@tinyxml2@@QBE_NXZ	; tinyxml2::XMLDocument::HasBOM
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@VisitEnter

; 2205 :         PushHeader( true, false );

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PushHeader@XMLPrinter@tinyxml2@@QAEX_N0@Z ; tinyxml2::XMLPrinter::PushHeader
$LN1@VisitEnter:

; 2206 :     }
; 2207 :     return true;

	mov	al, 1

; 2208 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?VisitEnter@XMLPrinter@tinyxml2@@UAE_NABVXMLDocument@2@@Z ENDP ; tinyxml2::XMLPrinter::VisitEnter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?PushUnknown@XMLPrinter@tinyxml2@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_value$ = 8						; size = 4
?PushUnknown@XMLPrinter@tinyxml2@@QAEXPBD@Z PROC	; tinyxml2::XMLPrinter::PushUnknown, COMDAT
; _this$ = ecx

; 2188 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2189 :     if ( _elementJustOpened ) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN2@PushUnknow

; 2190 :         SealElement();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SealElement@XMLPrinter@tinyxml2@@IAEXXZ ; tinyxml2::XMLPrinter::SealElement
$LN2@PushUnknow:

; 2191 :     }
; 2192 :     if ( _textDepth < 0 && !_firstElement && !_compactMode) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	jge	SHORT $LN1@PushUnknow
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	jne	SHORT $LN1@PushUnknow
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+77]
	test	ecx, ecx
	jne	SHORT $LN1@PushUnknow

; 2193 :         Print( "\n" );

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ	; tinyxml2::XMLPrinter::Print
	add	esp, 8

; 2194 :         PrintSpace( _depth );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@PushUnknow:

; 2195 :     }
; 2196 :     _firstElement = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+60], 0

; 2197 :     Print( "<!%s>", value );

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	push	OFFSET ??_C@_05EBLKANEG@?$DM?$CB?$CFs?$DO?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ	; tinyxml2::XMLPrinter::Print
	add	esp, 12					; 0000000cH

; 2198 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?PushUnknown@XMLPrinter@tinyxml2@@QAEXPBD@Z ENDP	; tinyxml2::XMLPrinter::PushUnknown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?PushDeclaration@XMLPrinter@tinyxml2@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_value$ = 8						; size = 4
?PushDeclaration@XMLPrinter@tinyxml2@@QAEXPBD@Z PROC	; tinyxml2::XMLPrinter::PushDeclaration, COMDAT
; _this$ = ecx

; 2174 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2175 :     if ( _elementJustOpened ) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN2@PushDeclar

; 2176 :         SealElement();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SealElement@XMLPrinter@tinyxml2@@IAEXXZ ; tinyxml2::XMLPrinter::SealElement
$LN2@PushDeclar:

; 2177 :     }
; 2178 :     if ( _textDepth < 0 && !_firstElement && !_compactMode) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	jge	SHORT $LN1@PushDeclar
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	jne	SHORT $LN1@PushDeclar
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+77]
	test	ecx, ecx
	jne	SHORT $LN1@PushDeclar

; 2179 :         Print( "\n" );

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ	; tinyxml2::XMLPrinter::Print
	add	esp, 8

; 2180 :         PrintSpace( _depth );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@PushDeclar:

; 2181 :     }
; 2182 :     _firstElement = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+60], 0

; 2183 :     Print( "<?%s?>", value );

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	push	OFFSET ??_C@_06OGCFEMAJ@?$DM?$DP?$CFs?$DP?$DO?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ	; tinyxml2::XMLPrinter::Print
	add	esp, 12					; 0000000cH

; 2184 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?PushDeclaration@XMLPrinter@tinyxml2@@QAEXPBD@Z ENDP	; tinyxml2::XMLPrinter::PushDeclaration
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?PushComment@XMLPrinter@tinyxml2@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_comment$ = 8						; size = 4
?PushComment@XMLPrinter@tinyxml2@@QAEXPBD@Z PROC	; tinyxml2::XMLPrinter::PushComment, COMDAT
; _this$ = ecx

; 2160 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2161 :     if ( _elementJustOpened ) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN2@PushCommen

; 2162 :         SealElement();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SealElement@XMLPrinter@tinyxml2@@IAEXXZ ; tinyxml2::XMLPrinter::SealElement
$LN2@PushCommen:

; 2163 :     }
; 2164 :     if ( _textDepth < 0 && !_firstElement && !_compactMode) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	jge	SHORT $LN1@PushCommen
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	jne	SHORT $LN1@PushCommen
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+77]
	test	ecx, ecx
	jne	SHORT $LN1@PushCommen

; 2165 :         Print( "\n" );

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ	; tinyxml2::XMLPrinter::Print
	add	esp, 8

; 2166 :         PrintSpace( _depth );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@PushCommen:

; 2167 :     }
; 2168 :     _firstElement = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+60], 0

; 2169 :     Print( "<!--%s-->", comment );

	mov	eax, DWORD PTR _comment$[ebp]
	push	eax
	push	OFFSET ??_C@_09PNDCPLLD@?$DM?$CB?9?9?$CFs?9?9?$DO?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ	; tinyxml2::XMLPrinter::Print
	add	esp, 12					; 0000000cH

; 2170 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?PushComment@XMLPrinter@tinyxml2@@QAEXPBD@Z ENDP	; tinyxml2::XMLPrinter::PushComment
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?PushText@XMLPrinter@tinyxml2@@QAEXN@Z
_TEXT	SEGMENT
_buf$ = -220						; size = 200
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_value$ = 8						; size = 8
?PushText@XMLPrinter@tinyxml2@@QAEXN@Z PROC		; tinyxml2::XMLPrinter::PushText, COMDAT
; _this$ = ecx

; 2152 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-416]
	mov	ecx, 104				; 00000068H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2153 :     char buf[BUF_SIZE];
; 2154 :     XMLUtil::ToStr( value, buf, BUF_SIZE );

	push	200					; 000000c8H
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	sub	esp, 8
	movsd	xmm0, QWORD PTR _value$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?ToStr@XMLUtil@tinyxml2@@SAXNPADH@Z	; tinyxml2::XMLUtil::ToStr
	add	esp, 16					; 00000010H

; 2155 :     PushText( buf, false );

	push	0
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PushText@XMLPrinter@tinyxml2@@QAEXPBD_N@Z ; tinyxml2::XMLPrinter::PushText

; 2156 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@PushText
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 416				; 000001a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN5@PushText:
	DD	1
	DD	$LN4@PushText
$LN4@PushText:
	DD	-220					; ffffff24H
	DD	200					; 000000c8H
	DD	$LN3@PushText
$LN3@PushText:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?PushText@XMLPrinter@tinyxml2@@QAEXN@Z ENDP		; tinyxml2::XMLPrinter::PushText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?PushText@XMLPrinter@tinyxml2@@QAEXM@Z
_TEXT	SEGMENT
_buf$ = -220						; size = 200
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_value$ = 8						; size = 4
?PushText@XMLPrinter@tinyxml2@@QAEXM@Z PROC		; tinyxml2::XMLPrinter::PushText, COMDAT
; _this$ = ecx

; 2144 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-416]
	mov	ecx, 104				; 00000068H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2145 :     char buf[BUF_SIZE];
; 2146 :     XMLUtil::ToStr( value, buf, BUF_SIZE );

	push	200					; 000000c8H
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _value$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?ToStr@XMLUtil@tinyxml2@@SAXMPADH@Z	; tinyxml2::XMLUtil::ToStr
	add	esp, 12					; 0000000cH

; 2147 :     PushText( buf, false );

	push	0
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PushText@XMLPrinter@tinyxml2@@QAEXPBD_N@Z ; tinyxml2::XMLPrinter::PushText

; 2148 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@PushText
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 416				; 000001a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN5@PushText:
	DD	1
	DD	$LN4@PushText
$LN4@PushText:
	DD	-220					; ffffff24H
	DD	200					; 000000c8H
	DD	$LN3@PushText
$LN3@PushText:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?PushText@XMLPrinter@tinyxml2@@QAEXM@Z ENDP		; tinyxml2::XMLPrinter::PushText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?PushText@XMLPrinter@tinyxml2@@QAEX_N@Z
_TEXT	SEGMENT
_buf$ = -220						; size = 200
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_value$ = 8						; size = 1
?PushText@XMLPrinter@tinyxml2@@QAEX_N@Z PROC		; tinyxml2::XMLPrinter::PushText, COMDAT
; _this$ = ecx

; 2136 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-416]
	mov	ecx, 104				; 00000068H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2137 :     char buf[BUF_SIZE];
; 2138 :     XMLUtil::ToStr( value, buf, BUF_SIZE );

	push	200					; 000000c8H
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _value$[ebp]
	push	ecx
	call	?ToStr@XMLUtil@tinyxml2@@SAX_NPADH@Z	; tinyxml2::XMLUtil::ToStr
	add	esp, 12					; 0000000cH

; 2139 :     PushText( buf, false );

	push	0
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PushText@XMLPrinter@tinyxml2@@QAEXPBD_N@Z ; tinyxml2::XMLPrinter::PushText

; 2140 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@PushText
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 416				; 000001a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN5@PushText:
	DD	1
	DD	$LN4@PushText
$LN4@PushText:
	DD	-220					; ffffff24H
	DD	200					; 000000c8H
	DD	$LN3@PushText
$LN3@PushText:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?PushText@XMLPrinter@tinyxml2@@QAEX_N@Z ENDP		; tinyxml2::XMLPrinter::PushText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?PushText@XMLPrinter@tinyxml2@@QAEXI@Z
_TEXT	SEGMENT
_buf$ = -220						; size = 200
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_value$ = 8						; size = 4
?PushText@XMLPrinter@tinyxml2@@QAEXI@Z PROC		; tinyxml2::XMLPrinter::PushText, COMDAT
; _this$ = ecx

; 2128 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-416]
	mov	ecx, 104				; 00000068H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2129 :     char buf[BUF_SIZE];
; 2130 :     XMLUtil::ToStr( value, buf, BUF_SIZE );

	push	200					; 000000c8H
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	call	?ToStr@XMLUtil@tinyxml2@@SAXIPADH@Z	; tinyxml2::XMLUtil::ToStr
	add	esp, 12					; 0000000cH

; 2131 :     PushText( buf, false );

	push	0
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PushText@XMLPrinter@tinyxml2@@QAEXPBD_N@Z ; tinyxml2::XMLPrinter::PushText

; 2132 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@PushText
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 416				; 000001a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN5@PushText:
	DD	1
	DD	$LN4@PushText
$LN4@PushText:
	DD	-220					; ffffff24H
	DD	200					; 000000c8H
	DD	$LN3@PushText
$LN3@PushText:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?PushText@XMLPrinter@tinyxml2@@QAEXI@Z ENDP		; tinyxml2::XMLPrinter::PushText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?PushText@XMLPrinter@tinyxml2@@QAEXH@Z
_TEXT	SEGMENT
_buf$ = -220						; size = 200
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_value$ = 8						; size = 4
?PushText@XMLPrinter@tinyxml2@@QAEXH@Z PROC		; tinyxml2::XMLPrinter::PushText, COMDAT
; _this$ = ecx

; 2120 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-416]
	mov	ecx, 104				; 00000068H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2121 :     char buf[BUF_SIZE];
; 2122 :     XMLUtil::ToStr( value, buf, BUF_SIZE );

	push	200					; 000000c8H
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	call	?ToStr@XMLUtil@tinyxml2@@SAXHPADH@Z	; tinyxml2::XMLUtil::ToStr
	add	esp, 12					; 0000000cH

; 2123 :     PushText( buf, false );

	push	0
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PushText@XMLPrinter@tinyxml2@@QAEXPBD_N@Z ; tinyxml2::XMLPrinter::PushText

; 2124 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@PushText
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 416				; 000001a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN5@PushText:
	DD	1
	DD	$LN4@PushText
$LN4@PushText:
	DD	-220					; ffffff24H
	DD	200					; 000000c8H
	DD	$LN3@PushText
$LN3@PushText:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?PushText@XMLPrinter@tinyxml2@@QAEXH@Z ENDP		; tinyxml2::XMLPrinter::PushText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?PushText@XMLPrinter@tinyxml2@@QAEXPBD_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_text$ = 8						; size = 4
_cdata$ = 12						; size = 1
?PushText@XMLPrinter@tinyxml2@@QAEXPBD_N@Z PROC		; tinyxml2::XMLPrinter::PushText, COMDAT
; _this$ = ecx

; 2103 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2104 :     _textDepth = _depth-1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 2105 : 
; 2106 :     if ( _elementJustOpened ) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN3@PushText

; 2107 :         SealElement();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SealElement@XMLPrinter@tinyxml2@@IAEXXZ ; tinyxml2::XMLPrinter::SealElement
$LN3@PushText:

; 2108 :     }
; 2109 :     if ( cdata ) {

	movzx	eax, BYTE PTR _cdata$[ebp]
	test	eax, eax
	je	SHORT $LN2@PushText

; 2110 :         Print( "<![CDATA[" );

	push	OFFSET ??_C@_09BLLNCBLF@?$DM?$CB?$FLCDATA?$FL?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ	; tinyxml2::XMLPrinter::Print
	add	esp, 8

; 2111 :         Print( "%s", text );

	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ	; tinyxml2::XMLPrinter::Print
	add	esp, 12					; 0000000cH

; 2112 :         Print( "]]>" );

	push	OFFSET ??_C@_03MCHNFBAC@?$FN?$FN?$DO?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ	; tinyxml2::XMLPrinter::Print
	add	esp, 8

; 2113 :     }
; 2114 :     else {

	jmp	SHORT $LN4@PushText
$LN2@PushText:

; 2115 :         PrintString( text, true );

	push	1
	mov	eax, DWORD PTR _text$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PrintString@XMLPrinter@tinyxml2@@AAEXPBD_N@Z ; tinyxml2::XMLPrinter::PrintString
$LN4@PushText:

; 2116 :     }
; 2117 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?PushText@XMLPrinter@tinyxml2@@QAEXPBD_N@Z ENDP		; tinyxml2::XMLPrinter::PushText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?CloseElement@XMLPrinter@tinyxml2@@UAEX_N@Z
_TEXT	SEGMENT
_name$ = -20						; size = 4
_this$ = -8						; size = 4
_compactMode$ = 8					; size = 1
?CloseElement@XMLPrinter@tinyxml2@@UAEX_N@Z PROC	; tinyxml2::XMLPrinter::CloseElement, COMDAT
; _this$ = ecx

; 2070 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2071 :     --_depth;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+68], ecx

; 2072 :     const char* name = _stack.Pop();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Pop@?$DynArray@PBD$09@tinyxml2@@QAEPBDXZ ; tinyxml2::DynArray<char const *,10>::Pop
	mov	DWORD PTR _name$[ebp], eax

; 2073 : 
; 2074 :     if ( _elementJustOpened ) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN5@CloseEleme

; 2075 :         Print( "/>" );

	push	OFFSET ??_C@_02HCGKDMEN@?1?$DO?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ	; tinyxml2::XMLPrinter::Print
	add	esp, 8

; 2076 :     }
; 2077 :     else {

	jmp	SHORT $LN4@CloseEleme
$LN5@CloseEleme:

; 2078 :         if ( _textDepth < 0 && !compactMode) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	jge	SHORT $LN3@CloseEleme
	movzx	eax, BYTE PTR _compactMode$[ebp]
	test	eax, eax
	jne	SHORT $LN3@CloseEleme

; 2079 :             Print( "\n" );

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ	; tinyxml2::XMLPrinter::Print
	add	esp, 8

; 2080 :             PrintSpace( _depth );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@CloseEleme:

; 2081 :         }
; 2082 :         Print( "</%s>", name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_05POIKLDCH@?$DM?1?$CFs?$DO?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ	; tinyxml2::XMLPrinter::Print
	add	esp, 12					; 0000000cH
$LN4@CloseEleme:

; 2083 :     }
; 2084 : 
; 2085 :     if ( _textDepth == _depth ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+72]
	cmp	edx, DWORD PTR [ecx+68]
	jne	SHORT $LN2@CloseEleme

; 2086 :         _textDepth = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], -1
$LN2@CloseEleme:

; 2087 :     }
; 2088 :     if ( _depth == 0 && !compactMode) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+68], 0
	jne	SHORT $LN1@CloseEleme
	movzx	eax, BYTE PTR _compactMode$[ebp]
	test	eax, eax
	jne	SHORT $LN1@CloseEleme

; 2089 :         Print( "\n" );

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ	; tinyxml2::XMLPrinter::Print
	add	esp, 8
$LN1@CloseEleme:

; 2090 :     }
; 2091 :     _elementJustOpened = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 0

; 2092 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?CloseElement@XMLPrinter@tinyxml2@@UAEX_N@Z ENDP	; tinyxml2::XMLPrinter::CloseElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBDN@Z
_TEXT	SEGMENT
_buf$ = -220						; size = 200
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_name$ = 8						; size = 4
_v$ = 12						; size = 8
?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBDN@Z PROC	; tinyxml2::XMLPrinter::PushAttribute, COMDAT
; _this$ = ecx

; 2062 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-416]
	mov	ecx, 104				; 00000068H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2063 :     char buf[BUF_SIZE];
; 2064 :     XMLUtil::ToStr( v, buf, BUF_SIZE );

	push	200					; 000000c8H
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	sub	esp, 8
	movsd	xmm0, QWORD PTR _v$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?ToStr@XMLUtil@tinyxml2@@SAXNPADH@Z	; tinyxml2::XMLUtil::ToStr
	add	esp, 16					; 00000010H

; 2065 :     PushAttribute( name, buf );

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBD0@Z ; tinyxml2::XMLPrinter::PushAttribute

; 2066 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@PushAttrib
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 416				; 000001a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN5@PushAttrib:
	DD	1
	DD	$LN4@PushAttrib
$LN4@PushAttrib:
	DD	-220					; ffffff24H
	DD	200					; 000000c8H
	DD	$LN3@PushAttrib
$LN3@PushAttrib:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBDN@Z ENDP	; tinyxml2::XMLPrinter::PushAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBD_N@Z
_TEXT	SEGMENT
_buf$ = -220						; size = 200
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_name$ = 8						; size = 4
_v$ = 12						; size = 1
?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBD_N@Z PROC	; tinyxml2::XMLPrinter::PushAttribute, COMDAT
; _this$ = ecx

; 2054 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-416]
	mov	ecx, 104				; 00000068H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2055 :     char buf[BUF_SIZE];
; 2056 :     XMLUtil::ToStr( v, buf, BUF_SIZE );

	push	200					; 000000c8H
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _v$[ebp]
	push	ecx
	call	?ToStr@XMLUtil@tinyxml2@@SAX_NPADH@Z	; tinyxml2::XMLUtil::ToStr
	add	esp, 12					; 0000000cH

; 2057 :     PushAttribute( name, buf );

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBD0@Z ; tinyxml2::XMLPrinter::PushAttribute

; 2058 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@PushAttrib
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 416				; 000001a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN5@PushAttrib:
	DD	1
	DD	$LN4@PushAttrib
$LN4@PushAttrib:
	DD	-220					; ffffff24H
	DD	200					; 000000c8H
	DD	$LN3@PushAttrib
$LN3@PushAttrib:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBD_N@Z ENDP	; tinyxml2::XMLPrinter::PushAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBDI@Z
_TEXT	SEGMENT
_buf$ = -220						; size = 200
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_name$ = 8						; size = 4
_v$ = 12						; size = 4
?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBDI@Z PROC	; tinyxml2::XMLPrinter::PushAttribute, COMDAT
; _this$ = ecx

; 2046 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-416]
	mov	ecx, 104				; 00000068H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2047 :     char buf[BUF_SIZE];
; 2048 :     XMLUtil::ToStr( v, buf, BUF_SIZE );

	push	200					; 000000c8H
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	?ToStr@XMLUtil@tinyxml2@@SAXIPADH@Z	; tinyxml2::XMLUtil::ToStr
	add	esp, 12					; 0000000cH

; 2049 :     PushAttribute( name, buf );

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBD0@Z ; tinyxml2::XMLPrinter::PushAttribute

; 2050 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@PushAttrib
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 416				; 000001a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN5@PushAttrib:
	DD	1
	DD	$LN4@PushAttrib
$LN4@PushAttrib:
	DD	-220					; ffffff24H
	DD	200					; 000000c8H
	DD	$LN3@PushAttrib
$LN3@PushAttrib:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBDI@Z ENDP	; tinyxml2::XMLPrinter::PushAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBDH@Z
_TEXT	SEGMENT
_buf$ = -220						; size = 200
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_name$ = 8						; size = 4
_v$ = 12						; size = 4
?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBDH@Z PROC	; tinyxml2::XMLPrinter::PushAttribute, COMDAT
; _this$ = ecx

; 2038 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-416]
	mov	ecx, 104				; 00000068H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2039 :     char buf[BUF_SIZE];
; 2040 :     XMLUtil::ToStr( v, buf, BUF_SIZE );

	push	200					; 000000c8H
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	?ToStr@XMLUtil@tinyxml2@@SAXHPADH@Z	; tinyxml2::XMLUtil::ToStr
	add	esp, 12					; 0000000cH

; 2041 :     PushAttribute( name, buf );

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBD0@Z ; tinyxml2::XMLPrinter::PushAttribute

; 2042 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@PushAttrib
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 416				; 000001a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN5@PushAttrib:
	DD	1
	DD	$LN4@PushAttrib
$LN4@PushAttrib:
	DD	-220					; ffffff24H
	DD	200					; 000000c8H
	DD	$LN3@PushAttrib
$LN3@PushAttrib:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBDH@Z ENDP	; tinyxml2::XMLPrinter::PushAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBD0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_name$ = 8						; size = 4
_value$ = 12						; size = 4
?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBD0@Z PROC	; tinyxml2::XMLPrinter::PushAttribute, COMDAT
; _this$ = ecx

; 2029 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2030 :     TIXMLASSERT( _elementJustOpened );

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	jne	SHORT $LN1@PushAttrib
	int	3
$LN1@PushAttrib:

; 2031 :     Print( " %s=\"", name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_05LCDLMEIP@?5?$CFs?$DN?$CC?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ	; tinyxml2::XMLPrinter::Print
	add	esp, 12					; 0000000cH

; 2032 :     PrintString( value, false );

	push	0
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PrintString@XMLPrinter@tinyxml2@@AAEXPBD_N@Z ; tinyxml2::XMLPrinter::PrintString

; 2033 :     Print( "\"" );

	push	OFFSET ??_C@_01BJJEKLCA@?$CC?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ	; tinyxml2::XMLPrinter::Print
	add	esp, 8

; 2034 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?PushAttribute@XMLPrinter@tinyxml2@@QAEXPBD0@Z ENDP	; tinyxml2::XMLPrinter::PushAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?OpenElement@XMLPrinter@tinyxml2@@QAEXPBD_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_name$ = 8						; size = 4
_compactMode$ = 12					; size = 1
?OpenElement@XMLPrinter@tinyxml2@@QAEXPBD_N@Z PROC	; tinyxml2::XMLPrinter::OpenElement, COMDAT
; _this$ = ecx

; 2008 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2009 :     if ( _elementJustOpened ) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN3@OpenElemen

; 2010 :         SealElement();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SealElement@XMLPrinter@tinyxml2@@IAEXXZ ; tinyxml2::XMLPrinter::SealElement
$LN3@OpenElemen:

; 2011 :     }
; 2012 :     _stack.Push( name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Push@?$DynArray@PBD$09@tinyxml2@@QAEXPBD@Z ; tinyxml2::DynArray<char const *,10>::Push

; 2013 : 
; 2014 :     if ( _textDepth < 0 && !_firstElement && !compactMode ) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	jge	SHORT $LN2@OpenElemen
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	jne	SHORT $LN2@OpenElemen
	movzx	eax, BYTE PTR _compactMode$[ebp]
	test	eax, eax
	jne	SHORT $LN2@OpenElemen

; 2015 :         Print( "\n" );

	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ	; tinyxml2::XMLPrinter::Print
	add	esp, 8
$LN2@OpenElemen:

; 2016 :     }
; 2017 :     if ( !compactMode ) {

	movzx	eax, BYTE PTR _compactMode$[ebp]
	test	eax, eax
	jne	SHORT $LN1@OpenElemen

; 2018 :         PrintSpace( _depth );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@OpenElemen:

; 2019 :     }
; 2020 : 
; 2021 :     Print( "<%s", name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_03FONCMJME@?$DM?$CFs?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ	; tinyxml2::XMLPrinter::Print
	add	esp, 12					; 0000000cH

; 2022 :     _elementJustOpened = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 1

; 2023 :     _firstElement = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+60], 0

; 2024 :     ++_depth;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+68], ecx

; 2025 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?OpenElement@XMLPrinter@tinyxml2@@QAEXPBD_N@Z ENDP	; tinyxml2::XMLPrinter::OpenElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?PushHeader@XMLPrinter@tinyxml2@@QAEX_N0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_writeBOM$ = 8						; size = 1
_writeDec$ = 12						; size = 1
?PushHeader@XMLPrinter@tinyxml2@@QAEX_N0@Z PROC		; tinyxml2::XMLPrinter::PushHeader, COMDAT
; _this$ = ecx

; 1996 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1997 :     if ( writeBOM ) {

	movzx	eax, BYTE PTR _writeBOM$[ebp]
	test	eax, eax
	je	SHORT $LN2@PushHeader

; 1998 :         static const unsigned char bom[] = { TIXML_UTF_LEAD_0, TIXML_UTF_LEAD_1, TIXML_UTF_LEAD_2, 0 };
; 1999 :         Print( "%s", bom );

	push	OFFSET ?bom@?4??PushHeader@XMLPrinter@tinyxml2@@QAEX_N0@Z@4QBEB
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?Print@XMLPrinter@tinyxml2@@IAAXPBDZZ	; tinyxml2::XMLPrinter::Print
	add	esp, 12					; 0000000cH
$LN2@PushHeader:

; 2000 :     }
; 2001 :     if ( writeDec ) {

	movzx	eax, BYTE PTR _writeDec$[ebp]
	test	eax, eax
	je	SHORT $LN3@PushHeader

; 2002 :         PushDeclaration( "xml version=\"1.0\"" );

	push	OFFSET ??_C@_0BC@CIAMHNHO@xml?5version?$DN?$CC1?40?$CC?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PushDeclaration@XMLPrinter@tinyxml2@@QAEXPBD@Z ; tinyxml2::XMLPrinter::PushDeclaration
$LN3@PushHeader:

; 2003 :     }
; 2004 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?PushHeader@XMLPrinter@tinyxml2@@QAEX_N0@Z ENDP		; tinyxml2::XMLPrinter::PushHeader
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ??1XMLPrinter@tinyxml2@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1XMLPrinter@tinyxml2@@UAE@XZ PROC			; tinyxml2::XMLPrinter::~XMLPrinter, COMDAT
; _this$ = ecx

; 1978 :     virtual ~XMLPrinter()	{}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1XMLPrinter@tinyxml2@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7XMLPrinter@tinyxml2@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	call	??1?$DynArray@D$0BE@@tinyxml2@@QAE@XZ	; tinyxml2::DynArray<char,20>::~DynArray<char,20>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$DynArray@PBD$09@tinyxml2@@QAE@XZ	; tinyxml2::DynArray<char const *,10>::~DynArray<char const *,10>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1XMLVisitor@tinyxml2@@UAE@XZ		; tinyxml2::XMLVisitor::~XMLVisitor
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1XMLPrinter@tinyxml2@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1XMLVisitor@tinyxml2@@UAE@XZ		; tinyxml2::XMLVisitor::~XMLVisitor
__unwindfunclet$??1XMLPrinter@tinyxml2@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$DynArray@PBD$09@tinyxml2@@QAE@XZ	; tinyxml2::DynArray<char const *,10>::~DynArray<char const *,10>
__ehhandler$??1XMLPrinter@tinyxml2@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1XMLPrinter@tinyxml2@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1XMLPrinter@tinyxml2@@UAE@XZ ENDP			; tinyxml2::XMLPrinter::~XMLPrinter
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z
_TEXT	SEGMENT
_i$2 = -44						; size = 4
_i$3 = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_file$ = 8						; size = 4
_compact$ = 12						; size = 1
_depth$ = 16						; size = 4
??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z PROC	; tinyxml2::XMLPrinter::XMLPrinter, COMDAT
; _this$ = ecx

; 1889 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0XMLVisitor@tinyxml2@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7XMLPrinter@tinyxml2@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$DynArray@PBD$09@tinyxml2@@QAE@XZ	; tinyxml2::DynArray<char const *,10>::DynArray<char const *,10>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+60], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _file$[ebp]
	mov	DWORD PTR [eax+64], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _depth$[ebp]
	mov	DWORD PTR [eax+68], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+76], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _compact$[ebp]
	mov	BYTE PTR [eax+77], cl
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	call	??0?$DynArray@D$0BE@@tinyxml2@@QAE@XZ	; tinyxml2::DynArray<char,20>::DynArray<char,20>
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 1890 :     for( int i=0; i<ENTITY_RANGE; ++i ) {

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN8@XMLPrinter
$LN7@XMLPrinter:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN8@XMLPrinter:
	cmp	DWORD PTR _i$3[ebp], 64			; 00000040H
	jge	SHORT $LN6@XMLPrinter

; 1891 :         _entityFlag[i] = false;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$3[ebp]
	mov	BYTE PTR [eax+78], 0

; 1892 :         _restrictedEntityFlag[i] = false;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$3[ebp]
	mov	BYTE PTR [eax+142], 0

; 1893 :     }

	jmp	SHORT $LN7@XMLPrinter
$LN6@XMLPrinter:

; 1894 :     for( int i=0; i<NUM_ENTITIES; ++i ) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN5@XMLPrinter
$LN4@XMLPrinter:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN5@XMLPrinter:
	cmp	DWORD PTR _i$2[ebp], 5
	jge	SHORT $LN3@XMLPrinter

; 1895 :         TIXMLASSERT( entities[i].value < ENTITY_RANGE );

	imul	eax, DWORD PTR _i$2[ebp], 12
	movsx	ecx, BYTE PTR _entities[eax+8]
	cmp	ecx, 64					; 00000040H
	jl	SHORT $LN2@XMLPrinter
	int	3
$LN2@XMLPrinter:

; 1896 :         if ( entities[i].value < ENTITY_RANGE ) {

	imul	eax, DWORD PTR _i$2[ebp], 12
	movsx	ecx, BYTE PTR _entities[eax+8]
	cmp	ecx, 64					; 00000040H
	jge	SHORT $LN1@XMLPrinter

; 1897 :             _entityFlag[ (int)entities[i].value ] = true;

	imul	eax, DWORD PTR _i$2[ebp], 12
	movsx	ecx, BYTE PTR _entities[eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+78], 1
$LN1@XMLPrinter:

; 1898 :         }
; 1899 :     }

	jmp	SHORT $LN4@XMLPrinter
$LN3@XMLPrinter:

; 1900 :     _restrictedEntityFlag[(int)'&'] = true;

	mov	eax, 1
	imul	ecx, eax, 38
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+142], 1

; 1901 :     _restrictedEntityFlag[(int)'<'] = true;

	mov	eax, 1
	imul	ecx, eax, 60
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+142], 1

; 1902 :     _restrictedEntityFlag[(int)'>'] = true;	// not required, but consistency is nice

	mov	eax, 1
	imul	ecx, eax, 62
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+ecx+142], 1

; 1903 :     _buffer.Push( 0 );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	call	?Push@?$DynArray@D$0BE@@tinyxml2@@QAEXD@Z ; tinyxml2::DynArray<char,20>::Push

; 1904 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1XMLVisitor@tinyxml2@@UAE@XZ		; tinyxml2::XMLVisitor::~XMLVisitor
__unwindfunclet$??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$DynArray@PBD$09@tinyxml2@@QAE@XZ	; tinyxml2::DynArray<char const *,10>::~DynArray<char const *,10>
__unwindfunclet$??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	jmp	??1?$DynArray@D$0BE@@tinyxml2@@QAE@XZ	; tinyxml2::DynArray<char,20>::~DynArray<char,20>
__ehhandler$??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-244]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z ENDP	; tinyxml2::XMLPrinter::XMLPrinter
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GXMLDocument@tinyxml2@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GXMLDocument@tinyxml2@@UAEPAXI@Z PROC		; tinyxml2::XMLDocument::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1XMLDocument@tinyxml2@@UAE@XZ		; tinyxml2::XMLDocument::~XMLDocument
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GXMLDocument@tinyxml2@@UAEPAXI@Z ENDP		; tinyxml2::XMLDocument::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$MemPoolT@$0CM@@tinyxml2@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$MemPoolT@$0CM@@tinyxml2@@UAEPAXI@Z PROC		; tinyxml2::MemPoolT<44>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$MemPoolT@$0CM@@tinyxml2@@UAE@XZ	; tinyxml2::MemPoolT<44>::~MemPoolT<44>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$MemPoolT@$0CM@@tinyxml2@@UAEPAXI@Z ENDP		; tinyxml2::MemPoolT<44>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@AAEXH@Z
_TEXT	SEGMENT
$T1 = -248						; size = 4
$T2 = -236						; size = 4
_newMem$3 = -32						; size = 4
_newAllocated$4 = -20					; size = 4
_this$ = -8						; size = 4
_cap$ = 8						; size = 4
?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@AAEXH@Z PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::EnsureCapacity, COMDAT
; _this$ = ecx

; 285  :     void EnsureCapacity( int cap ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 286  :         if ( cap > _allocated ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cap$[ebp]
	cmp	ecx, DWORD PTR [eax+44]
	jle	$LN3@EnsureCapa

; 287  :             int newAllocated = cap * 2;

	mov	eax, DWORD PTR _cap$[ebp]
	shl	eax, 1
	mov	DWORD PTR _newAllocated$4[ebp], eax

; 288  :             T* newMem = new T[newAllocated];

	xor	ecx, ecx
	mov	eax, DWORD PTR _newAllocated$4[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _newMem$3[ebp], eax

; 289  :             memcpy( newMem, _mem, sizeof(T)*_size );	// warning: not using constructors, only works for PODs

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _newMem$3[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 290  :             if ( _mem != _pool ) {

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], eax
	je	SHORT $LN1@EnsureCapa

; 291  :                 delete [] _mem;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@EnsureCapa:

; 292  :             }
; 293  :             _mem = newMem;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newMem$3[ebp]
	mov	DWORD PTR [eax], ecx

; 294  :             _allocated = newAllocated;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newAllocated$4[ebp]
	mov	DWORD PTR [eax+44], ecx
$LN3@EnsureCapa:

; 295  :         }
; 296  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@AAEXH@Z ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::EnsureCapacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -208						; size = 4
_this$ = -8						; size = 4
?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QBE_NXZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::Empty, COMDAT
; _this$ = ecx

; 249  :     bool Empty() const					{

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 250  :         return _size == 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	jne	SHORT $LN3@Empty
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Empty
$LN3@Empty:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Empty:
	mov	al, BYTE PTR tv66[ebp]

; 251  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QBE_NXZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::Empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0CM@@2@XZ
_TEXT	SEGMENT
tv69 = -208						; size = 4
_this$ = -8						; size = 4
?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0CM@@2@XZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::Pop, COMDAT
; _this$ = ecx

; 240  :     T Pop() {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 241  :         return _mem[--_size];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	sub	ecx, 1
	mov	DWORD PTR tv69[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR [edx+48], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR tv69[ebp]
	mov	eax, DWORD PTR [edx+eax*4]

; 242  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0CM@@2@XZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::Pop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Push@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0CM@@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_t$ = 8							; size = 4
?Push@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0CM@@2@@Z PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::Push, COMDAT
; _this$ = ecx

; 228  :     void Push( T t ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 229  :         EnsureCapacity( _size+1 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@AAEXH@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::EnsureCapacity

; 230  :         _mem[_size++] = t;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], ecx

; 231  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Push@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0CM@@2@@Z ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::Push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ??1?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
??1?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAE@XZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::~DynArray<tinyxml2::MemPoolT<44>::Block *,10>, COMDAT
; _this$ = ecx

; 218  :     ~DynArray() {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 219  :         if ( _mem != _pool ) {

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], eax
	je	SHORT $LN2@DynArray

; 220  :             delete [] _mem;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@DynArray:

; 221  :         }
; 222  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAE@XZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::~DynArray<tinyxml2::MemPoolT<44>::Block *,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ??0?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAE@XZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::DynArray<tinyxml2::MemPoolT<44>::Block *,10>, COMDAT
; _this$ = ecx

; 212  :     DynArray< T, INIT >() {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 213  :         _mem = _pool;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 214  :         _allocated = INIT;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 10			; 0000000aH

; 215  :         _size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0

; 216  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAE@XZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::DynArray<tinyxml2::MemPoolT<44>::Block *,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Untracked@?$MemPoolT@$0CM@@tinyxml2@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Untracked@?$MemPoolT@$0CM@@tinyxml2@@QBEHXZ PROC	; tinyxml2::MemPoolT<44>::Untracked, COMDAT
; _this$ = ecx

; 400  :     int Untracked() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 401  :         return _nUntracked;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+72]

; 402  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Untracked@?$MemPoolT@$0CM@@tinyxml2@@QBEHXZ ENDP	; tinyxml2::MemPoolT<44>::Untracked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?SetTracked@?$MemPoolT@$0CM@@tinyxml2@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?SetTracked@?$MemPoolT@$0CM@@tinyxml2@@UAEXXZ PROC	; tinyxml2::MemPoolT<44>::SetTracked, COMDAT
; _this$ = ecx

; 396  :     void SetTracked() {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 397  :         _nUntracked--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 398  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetTracked@?$MemPoolT@$0CM@@tinyxml2@@UAEXXZ ENDP	; tinyxml2::MemPoolT<44>::SetTracked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Free@?$MemPoolT@$0CM@@tinyxml2@@UAEXPAX@Z
_TEXT	SEGMENT
_chunk$ = -20						; size = 4
_this$ = -8						; size = 4
_mem$ = 8						; size = 4
?Free@?$MemPoolT@$0CM@@tinyxml2@@UAEXPAX@Z PROC		; tinyxml2::MemPoolT<44>::Free, COMDAT
; _this$ = ecx

; 379  :     virtual void Free( void* mem ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 380  :         if ( !mem ) {

	cmp	DWORD PTR _mem$[ebp], 0
	jne	SHORT $LN1@Free

; 381  :             return;

	jmp	SHORT $LN2@Free
$LN1@Free:

; 382  :         }
; 383  :         --_currentAllocs;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], ecx

; 384  :         Chunk* chunk = static_cast<Chunk*>( mem );

	mov	eax, DWORD PTR _mem$[ebp]
	mov	DWORD PTR _chunk$[ebp], eax

; 385  : #ifdef DEBUG
; 386  :         memset( chunk, 0xfe, sizeof(Chunk) );

	push	44					; 0000002cH
	push	254					; 000000feH
	mov	eax, DWORD PTR _chunk$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 387  : #endif
; 388  :         chunk->next = _root;

	mov	eax, DWORD PTR _chunk$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax], edx

; 389  :         _root = chunk;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _chunk$[ebp]
	mov	DWORD PTR [eax+56], ecx
$LN2@Free:

; 390  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Free@?$MemPoolT@$0CM@@tinyxml2@@UAEXPAX@Z ENDP		; tinyxml2::MemPoolT<44>::Free
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Alloc@?$MemPoolT@$0CM@@tinyxml2@@UAEPAXXZ
_TEXT	SEGMENT
tv69 = -268						; size = 4
$T1 = -260						; size = 4
$T2 = -248						; size = 4
_result$ = -44						; size = 4
_i$3 = -32						; size = 4
_block$4 = -20						; size = 4
_this$ = -8						; size = 4
?Alloc@?$MemPoolT@$0CM@@tinyxml2@@UAEPAXXZ PROC		; tinyxml2::MemPoolT<44>::Alloc, COMDAT
; _this$ = ecx

; 355  :     virtual void* Alloc() {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 356  :         if ( !_root ) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+56], 0
	jne	$LN5@Alloc

; 357  :             // Need a new block.
; 358  :             Block* block = new Block();

	mov	DWORD PTR $T1[ebp], 4092		; 00000ffcH
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN8@Alloc
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN9@Alloc
$LN8@Alloc:
	mov	DWORD PTR tv69[ebp], 0
$LN9@Alloc:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR _block$4[ebp], ecx

; 359  :             _blockPtrs.Push( block );

	mov	eax, DWORD PTR _block$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Push@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0CM@@2@@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::Push

; 360  : 
; 361  :             for( int i=0; i<COUNT-1; ++i ) {

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@Alloc
$LN3@Alloc:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN4@Alloc:
	cmp	DWORD PTR _i$3[ebp], 92			; 0000005cH
	jge	SHORT $LN2@Alloc

; 362  :                 block->chunk[i].next = &block->chunk[i+1];

	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	imul	ecx, eax, 44
	add	ecx, DWORD PTR _block$4[ebp]
	imul	edx, DWORD PTR _i$3[ebp], 44
	mov	eax, DWORD PTR _block$4[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 363  :             }

	jmp	SHORT $LN3@Alloc
$LN2@Alloc:

; 364  :             block->chunk[COUNT-1].next = 0;

	mov	eax, 44					; 0000002cH
	imul	ecx, eax, 92
	mov	edx, DWORD PTR _block$4[ebp]
	mov	DWORD PTR [edx+ecx], 0

; 365  :             _root = block->chunk;

	mov	eax, DWORD PTR _block$4[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], eax
$LN5@Alloc:

; 366  :         }
; 367  :         void* result = _root;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _result$[ebp], ecx

; 368  :         _root = _root->next;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+56], eax

; 369  : 
; 370  :         ++_currentAllocs;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], ecx

; 371  :         if ( _currentAllocs > _maxAllocs ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+60]
	cmp	edx, DWORD PTR [ecx+68]
	jle	SHORT $LN1@Alloc

; 372  :             _maxAllocs = _currentAllocs;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+68], edx
$LN1@Alloc:

; 373  :         }
; 374  :         _nAllocs++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+64], ecx

; 375  :         _nUntracked++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 376  :         return result;

	mov	eax, DWORD PTR _result$[ebp]

; 377  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Alloc@?$MemPoolT@$0CM@@tinyxml2@@UAEPAXXZ ENDP		; tinyxml2::MemPoolT<44>::Alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?CurrentAllocs@?$MemPoolT@$0CM@@tinyxml2@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?CurrentAllocs@?$MemPoolT@$0CM@@tinyxml2@@QBEHXZ PROC	; tinyxml2::MemPoolT<44>::CurrentAllocs, COMDAT
; _this$ = ecx

; 351  :     int CurrentAllocs() const		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 352  :         return _currentAllocs;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+60]

; 353  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CurrentAllocs@?$MemPoolT@$0CM@@tinyxml2@@QBEHXZ ENDP	; tinyxml2::MemPoolT<44>::CurrentAllocs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ItemSize@?$MemPoolT@$0CM@@tinyxml2@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ItemSize@?$MemPoolT@$0CM@@tinyxml2@@UBEHXZ PROC	; tinyxml2::MemPoolT<44>::ItemSize, COMDAT
; _this$ = ecx

; 348  :     virtual int ItemSize() const	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 349  :         return SIZE;

	mov	eax, 44					; 0000002cH

; 350  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ItemSize@?$MemPoolT@$0CM@@tinyxml2@@UBEHXZ ENDP	; tinyxml2::MemPoolT<44>::ItemSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Clear@?$MemPoolT@$0CM@@tinyxml2@@UAEXXZ
_TEXT	SEGMENT
$T1 = -224						; size = 4
_b$2 = -20						; size = 4
_this$ = -8						; size = 4
?Clear@?$MemPoolT@$0CM@@tinyxml2@@UAEXXZ PROC		; tinyxml2::MemPoolT<44>::Clear, COMDAT
; _this$ = ecx

; 335  :     void Clear() {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN2@Clear:

; 336  :         // Delete the blocks.
; 337  :         while( !_blockPtrs.Empty()) {

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QBE_NXZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::Empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@Clear

; 338  :             Block* b  = _blockPtrs.Pop();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0CM@@2@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::Pop
	mov	DWORD PTR _b$2[ebp], eax

; 339  :             delete b;

	mov	eax, DWORD PTR _b$2[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 340  :         }

	jmp	SHORT $LN2@Clear
$LN1@Clear:

; 341  :         _root = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0

; 342  :         _currentAllocs = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 0

; 343  :         _nAllocs = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0

; 344  :         _maxAllocs = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 0

; 345  :         _nUntracked = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 0

; 346  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$MemPoolT@$0CM@@tinyxml2@@UAEXXZ ENDP		; tinyxml2::MemPoolT<44>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ??1?$MemPoolT@$0CM@@tinyxml2@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$MemPoolT@$0CM@@tinyxml2@@UAE@XZ PROC		; tinyxml2::MemPoolT<44>::~MemPoolT<44>, COMDAT
; _this$ = ecx

; 331  :     ~MemPoolT() {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$MemPoolT@$0CM@@tinyxml2@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$MemPoolT@$0CM@@tinyxml2@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 332  :         Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$MemPoolT@$0CM@@tinyxml2@@UAEXXZ ; tinyxml2::MemPoolT<44>::Clear

; 333  :     }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::~DynArray<tinyxml2::MemPoolT<44>::Block *,10>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MemPool@tinyxml2@@UAE@XZ		; tinyxml2::MemPool::~MemPool
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$MemPoolT@$0CM@@tinyxml2@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1MemPool@tinyxml2@@UAE@XZ		; tinyxml2::MemPool::~MemPool
__unwindfunclet$??1?$MemPoolT@$0CM@@tinyxml2@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::~DynArray<tinyxml2::MemPoolT<44>::Block *,10>
__ehhandler$??1?$MemPoolT@$0CM@@tinyxml2@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$MemPoolT@$0CM@@tinyxml2@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$MemPoolT@$0CM@@tinyxml2@@UAE@XZ ENDP		; tinyxml2::MemPoolT<44>::~MemPoolT<44>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ??0?$MemPoolT@$0CM@@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$MemPoolT@$0CM@@tinyxml2@@QAE@XZ PROC		; tinyxml2::MemPoolT<44>::MemPoolT<44>, COMDAT
; _this$ = ecx

; 330  :     MemPoolT() : _root(0), _currentAllocs(0), _nAllocs(0), _maxAllocs(0), _nUntracked(0)	{}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$MemPoolT@$0CM@@tinyxml2@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0MemPool@tinyxml2@@QAE@XZ		; tinyxml2::MemPool::MemPool
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$MemPoolT@$0CM@@tinyxml2@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$DynArray@PAUBlock@?$MemPoolT@$0CM@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<44>::Block *,10>::DynArray<tinyxml2::MemPoolT<44>::Block *,10>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$MemPoolT@$0CM@@tinyxml2@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1MemPool@tinyxml2@@UAE@XZ		; tinyxml2::MemPool::~MemPool
__ehhandler$??0?$MemPoolT@$0CM@@tinyxml2@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$MemPoolT@$0CM@@tinyxml2@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$MemPoolT@$0CM@@tinyxml2@@QAE@XZ ENDP		; tinyxml2::MemPoolT<44>::MemPoolT<44>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$MemPoolT@$0DA@@tinyxml2@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$MemPoolT@$0DA@@tinyxml2@@UAEPAXI@Z PROC		; tinyxml2::MemPoolT<48>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$MemPoolT@$0DA@@tinyxml2@@UAE@XZ	; tinyxml2::MemPoolT<48>::~MemPoolT<48>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$MemPoolT@$0DA@@tinyxml2@@UAEPAXI@Z ENDP		; tinyxml2::MemPoolT<48>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@AAEXH@Z
_TEXT	SEGMENT
$T1 = -248						; size = 4
$T2 = -236						; size = 4
_newMem$3 = -32						; size = 4
_newAllocated$4 = -20					; size = 4
_this$ = -8						; size = 4
_cap$ = 8						; size = 4
?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@AAEXH@Z PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::EnsureCapacity, COMDAT
; _this$ = ecx

; 285  :     void EnsureCapacity( int cap ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 286  :         if ( cap > _allocated ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cap$[ebp]
	cmp	ecx, DWORD PTR [eax+44]
	jle	$LN3@EnsureCapa

; 287  :             int newAllocated = cap * 2;

	mov	eax, DWORD PTR _cap$[ebp]
	shl	eax, 1
	mov	DWORD PTR _newAllocated$4[ebp], eax

; 288  :             T* newMem = new T[newAllocated];

	xor	ecx, ecx
	mov	eax, DWORD PTR _newAllocated$4[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _newMem$3[ebp], eax

; 289  :             memcpy( newMem, _mem, sizeof(T)*_size );	// warning: not using constructors, only works for PODs

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _newMem$3[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 290  :             if ( _mem != _pool ) {

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], eax
	je	SHORT $LN1@EnsureCapa

; 291  :                 delete [] _mem;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@EnsureCapa:

; 292  :             }
; 293  :             _mem = newMem;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newMem$3[ebp]
	mov	DWORD PTR [eax], ecx

; 294  :             _allocated = newAllocated;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newAllocated$4[ebp]
	mov	DWORD PTR [eax+44], ecx
$LN3@EnsureCapa:

; 295  :         }
; 296  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@AAEXH@Z ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::EnsureCapacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -208						; size = 4
_this$ = -8						; size = 4
?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QBE_NXZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::Empty, COMDAT
; _this$ = ecx

; 249  :     bool Empty() const					{

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 250  :         return _size == 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	jne	SHORT $LN3@Empty
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Empty
$LN3@Empty:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Empty:
	mov	al, BYTE PTR tv66[ebp]

; 251  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QBE_NXZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::Empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0DA@@2@XZ
_TEXT	SEGMENT
tv69 = -208						; size = 4
_this$ = -8						; size = 4
?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0DA@@2@XZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::Pop, COMDAT
; _this$ = ecx

; 240  :     T Pop() {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 241  :         return _mem[--_size];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	sub	ecx, 1
	mov	DWORD PTR tv69[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR [edx+48], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR tv69[ebp]
	mov	eax, DWORD PTR [edx+eax*4]

; 242  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0DA@@2@XZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::Pop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Push@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0DA@@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_t$ = 8							; size = 4
?Push@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0DA@@2@@Z PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::Push, COMDAT
; _this$ = ecx

; 228  :     void Push( T t ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 229  :         EnsureCapacity( _size+1 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@AAEXH@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::EnsureCapacity

; 230  :         _mem[_size++] = t;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], ecx

; 231  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Push@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0DA@@2@@Z ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::Push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ??1?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
??1?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAE@XZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::~DynArray<tinyxml2::MemPoolT<48>::Block *,10>, COMDAT
; _this$ = ecx

; 218  :     ~DynArray() {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 219  :         if ( _mem != _pool ) {

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], eax
	je	SHORT $LN2@DynArray

; 220  :             delete [] _mem;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@DynArray:

; 221  :         }
; 222  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAE@XZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::~DynArray<tinyxml2::MemPoolT<48>::Block *,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ??0?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAE@XZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::DynArray<tinyxml2::MemPoolT<48>::Block *,10>, COMDAT
; _this$ = ecx

; 212  :     DynArray< T, INIT >() {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 213  :         _mem = _pool;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 214  :         _allocated = INIT;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 10			; 0000000aH

; 215  :         _size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0

; 216  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAE@XZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::DynArray<tinyxml2::MemPoolT<48>::Block *,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Untracked@?$MemPoolT@$0DA@@tinyxml2@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Untracked@?$MemPoolT@$0DA@@tinyxml2@@QBEHXZ PROC	; tinyxml2::MemPoolT<48>::Untracked, COMDAT
; _this$ = ecx

; 400  :     int Untracked() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 401  :         return _nUntracked;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+72]

; 402  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Untracked@?$MemPoolT@$0DA@@tinyxml2@@QBEHXZ ENDP	; tinyxml2::MemPoolT<48>::Untracked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?SetTracked@?$MemPoolT@$0DA@@tinyxml2@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?SetTracked@?$MemPoolT@$0DA@@tinyxml2@@UAEXXZ PROC	; tinyxml2::MemPoolT<48>::SetTracked, COMDAT
; _this$ = ecx

; 396  :     void SetTracked() {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 397  :         _nUntracked--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 398  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetTracked@?$MemPoolT@$0DA@@tinyxml2@@UAEXXZ ENDP	; tinyxml2::MemPoolT<48>::SetTracked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Free@?$MemPoolT@$0DA@@tinyxml2@@UAEXPAX@Z
_TEXT	SEGMENT
_chunk$ = -20						; size = 4
_this$ = -8						; size = 4
_mem$ = 8						; size = 4
?Free@?$MemPoolT@$0DA@@tinyxml2@@UAEXPAX@Z PROC		; tinyxml2::MemPoolT<48>::Free, COMDAT
; _this$ = ecx

; 379  :     virtual void Free( void* mem ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 380  :         if ( !mem ) {

	cmp	DWORD PTR _mem$[ebp], 0
	jne	SHORT $LN1@Free

; 381  :             return;

	jmp	SHORT $LN2@Free
$LN1@Free:

; 382  :         }
; 383  :         --_currentAllocs;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], ecx

; 384  :         Chunk* chunk = static_cast<Chunk*>( mem );

	mov	eax, DWORD PTR _mem$[ebp]
	mov	DWORD PTR _chunk$[ebp], eax

; 385  : #ifdef DEBUG
; 386  :         memset( chunk, 0xfe, sizeof(Chunk) );

	push	48					; 00000030H
	push	254					; 000000feH
	mov	eax, DWORD PTR _chunk$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 387  : #endif
; 388  :         chunk->next = _root;

	mov	eax, DWORD PTR _chunk$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax], edx

; 389  :         _root = chunk;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _chunk$[ebp]
	mov	DWORD PTR [eax+56], ecx
$LN2@Free:

; 390  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Free@?$MemPoolT@$0DA@@tinyxml2@@UAEXPAX@Z ENDP		; tinyxml2::MemPoolT<48>::Free
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Alloc@?$MemPoolT@$0DA@@tinyxml2@@UAEPAXXZ
_TEXT	SEGMENT
tv69 = -268						; size = 4
$T1 = -260						; size = 4
$T2 = -248						; size = 4
_result$ = -44						; size = 4
_i$3 = -32						; size = 4
_block$4 = -20						; size = 4
_this$ = -8						; size = 4
?Alloc@?$MemPoolT@$0DA@@tinyxml2@@UAEPAXXZ PROC		; tinyxml2::MemPoolT<48>::Alloc, COMDAT
; _this$ = ecx

; 355  :     virtual void* Alloc() {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 356  :         if ( !_root ) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+56], 0
	jne	$LN5@Alloc

; 357  :             // Need a new block.
; 358  :             Block* block = new Block();

	mov	DWORD PTR $T1[ebp], 4080		; 00000ff0H
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN8@Alloc
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN9@Alloc
$LN8@Alloc:
	mov	DWORD PTR tv69[ebp], 0
$LN9@Alloc:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR _block$4[ebp], ecx

; 359  :             _blockPtrs.Push( block );

	mov	eax, DWORD PTR _block$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Push@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0DA@@2@@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::Push

; 360  : 
; 361  :             for( int i=0; i<COUNT-1; ++i ) {

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@Alloc
$LN3@Alloc:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN4@Alloc:
	cmp	DWORD PTR _i$3[ebp], 84			; 00000054H
	jge	SHORT $LN2@Alloc

; 362  :                 block->chunk[i].next = &block->chunk[i+1];

	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	imul	ecx, eax, 48
	add	ecx, DWORD PTR _block$4[ebp]
	imul	edx, DWORD PTR _i$3[ebp], 48
	mov	eax, DWORD PTR _block$4[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 363  :             }

	jmp	SHORT $LN3@Alloc
$LN2@Alloc:

; 364  :             block->chunk[COUNT-1].next = 0;

	mov	eax, 48					; 00000030H
	imul	ecx, eax, 84
	mov	edx, DWORD PTR _block$4[ebp]
	mov	DWORD PTR [edx+ecx], 0

; 365  :             _root = block->chunk;

	mov	eax, DWORD PTR _block$4[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], eax
$LN5@Alloc:

; 366  :         }
; 367  :         void* result = _root;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _result$[ebp], ecx

; 368  :         _root = _root->next;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+56], eax

; 369  : 
; 370  :         ++_currentAllocs;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], ecx

; 371  :         if ( _currentAllocs > _maxAllocs ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+60]
	cmp	edx, DWORD PTR [ecx+68]
	jle	SHORT $LN1@Alloc

; 372  :             _maxAllocs = _currentAllocs;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+68], edx
$LN1@Alloc:

; 373  :         }
; 374  :         _nAllocs++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+64], ecx

; 375  :         _nUntracked++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 376  :         return result;

	mov	eax, DWORD PTR _result$[ebp]

; 377  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Alloc@?$MemPoolT@$0DA@@tinyxml2@@UAEPAXXZ ENDP		; tinyxml2::MemPoolT<48>::Alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?CurrentAllocs@?$MemPoolT@$0DA@@tinyxml2@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?CurrentAllocs@?$MemPoolT@$0DA@@tinyxml2@@QBEHXZ PROC	; tinyxml2::MemPoolT<48>::CurrentAllocs, COMDAT
; _this$ = ecx

; 351  :     int CurrentAllocs() const		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 352  :         return _currentAllocs;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+60]

; 353  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CurrentAllocs@?$MemPoolT@$0DA@@tinyxml2@@QBEHXZ ENDP	; tinyxml2::MemPoolT<48>::CurrentAllocs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ItemSize@?$MemPoolT@$0DA@@tinyxml2@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ItemSize@?$MemPoolT@$0DA@@tinyxml2@@UBEHXZ PROC	; tinyxml2::MemPoolT<48>::ItemSize, COMDAT
; _this$ = ecx

; 348  :     virtual int ItemSize() const	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 349  :         return SIZE;

	mov	eax, 48					; 00000030H

; 350  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ItemSize@?$MemPoolT@$0DA@@tinyxml2@@UBEHXZ ENDP	; tinyxml2::MemPoolT<48>::ItemSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Clear@?$MemPoolT@$0DA@@tinyxml2@@UAEXXZ
_TEXT	SEGMENT
$T1 = -224						; size = 4
_b$2 = -20						; size = 4
_this$ = -8						; size = 4
?Clear@?$MemPoolT@$0DA@@tinyxml2@@UAEXXZ PROC		; tinyxml2::MemPoolT<48>::Clear, COMDAT
; _this$ = ecx

; 335  :     void Clear() {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN2@Clear:

; 336  :         // Delete the blocks.
; 337  :         while( !_blockPtrs.Empty()) {

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QBE_NXZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::Empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@Clear

; 338  :             Block* b  = _blockPtrs.Pop();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0DA@@2@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::Pop
	mov	DWORD PTR _b$2[ebp], eax

; 339  :             delete b;

	mov	eax, DWORD PTR _b$2[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 340  :         }

	jmp	SHORT $LN2@Clear
$LN1@Clear:

; 341  :         _root = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0

; 342  :         _currentAllocs = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 0

; 343  :         _nAllocs = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0

; 344  :         _maxAllocs = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 0

; 345  :         _nUntracked = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 0

; 346  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$MemPoolT@$0DA@@tinyxml2@@UAEXXZ ENDP		; tinyxml2::MemPoolT<48>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ??1?$MemPoolT@$0DA@@tinyxml2@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$MemPoolT@$0DA@@tinyxml2@@UAE@XZ PROC		; tinyxml2::MemPoolT<48>::~MemPoolT<48>, COMDAT
; _this$ = ecx

; 331  :     ~MemPoolT() {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$MemPoolT@$0DA@@tinyxml2@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$MemPoolT@$0DA@@tinyxml2@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 332  :         Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$MemPoolT@$0DA@@tinyxml2@@UAEXXZ ; tinyxml2::MemPoolT<48>::Clear

; 333  :     }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::~DynArray<tinyxml2::MemPoolT<48>::Block *,10>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MemPool@tinyxml2@@UAE@XZ		; tinyxml2::MemPool::~MemPool
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$MemPoolT@$0DA@@tinyxml2@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1MemPool@tinyxml2@@UAE@XZ		; tinyxml2::MemPool::~MemPool
__unwindfunclet$??1?$MemPoolT@$0DA@@tinyxml2@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::~DynArray<tinyxml2::MemPoolT<48>::Block *,10>
__ehhandler$??1?$MemPoolT@$0DA@@tinyxml2@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$MemPoolT@$0DA@@tinyxml2@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$MemPoolT@$0DA@@tinyxml2@@UAE@XZ ENDP		; tinyxml2::MemPoolT<48>::~MemPoolT<48>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ??0?$MemPoolT@$0DA@@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$MemPoolT@$0DA@@tinyxml2@@QAE@XZ PROC		; tinyxml2::MemPoolT<48>::MemPoolT<48>, COMDAT
; _this$ = ecx

; 330  :     MemPoolT() : _root(0), _currentAllocs(0), _nAllocs(0), _maxAllocs(0), _nUntracked(0)	{}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$MemPoolT@$0DA@@tinyxml2@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0MemPool@tinyxml2@@QAE@XZ		; tinyxml2::MemPool::MemPool
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$MemPoolT@$0DA@@tinyxml2@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$DynArray@PAUBlock@?$MemPoolT@$0DA@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<48>::Block *,10>::DynArray<tinyxml2::MemPoolT<48>::Block *,10>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$MemPoolT@$0DA@@tinyxml2@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1MemPool@tinyxml2@@UAE@XZ		; tinyxml2::MemPool::~MemPool
__ehhandler$??0?$MemPoolT@$0DA@@tinyxml2@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$MemPoolT@$0DA@@tinyxml2@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$MemPoolT@$0DA@@tinyxml2@@QAE@XZ ENDP		; tinyxml2::MemPoolT<48>::MemPoolT<48>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$MemPoolT@$0CE@@tinyxml2@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$MemPoolT@$0CE@@tinyxml2@@UAEPAXI@Z PROC		; tinyxml2::MemPoolT<36>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$MemPoolT@$0CE@@tinyxml2@@UAE@XZ	; tinyxml2::MemPoolT<36>::~MemPoolT<36>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$MemPoolT@$0CE@@tinyxml2@@UAEPAXI@Z ENDP		; tinyxml2::MemPoolT<36>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@AAEXH@Z
_TEXT	SEGMENT
$T1 = -248						; size = 4
$T2 = -236						; size = 4
_newMem$3 = -32						; size = 4
_newAllocated$4 = -20					; size = 4
_this$ = -8						; size = 4
_cap$ = 8						; size = 4
?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@AAEXH@Z PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::EnsureCapacity, COMDAT
; _this$ = ecx

; 285  :     void EnsureCapacity( int cap ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 286  :         if ( cap > _allocated ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cap$[ebp]
	cmp	ecx, DWORD PTR [eax+44]
	jle	$LN3@EnsureCapa

; 287  :             int newAllocated = cap * 2;

	mov	eax, DWORD PTR _cap$[ebp]
	shl	eax, 1
	mov	DWORD PTR _newAllocated$4[ebp], eax

; 288  :             T* newMem = new T[newAllocated];

	xor	ecx, ecx
	mov	eax, DWORD PTR _newAllocated$4[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _newMem$3[ebp], eax

; 289  :             memcpy( newMem, _mem, sizeof(T)*_size );	// warning: not using constructors, only works for PODs

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _newMem$3[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 290  :             if ( _mem != _pool ) {

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], eax
	je	SHORT $LN1@EnsureCapa

; 291  :                 delete [] _mem;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@EnsureCapa:

; 292  :             }
; 293  :             _mem = newMem;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newMem$3[ebp]
	mov	DWORD PTR [eax], ecx

; 294  :             _allocated = newAllocated;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newAllocated$4[ebp]
	mov	DWORD PTR [eax+44], ecx
$LN3@EnsureCapa:

; 295  :         }
; 296  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@AAEXH@Z ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::EnsureCapacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -208						; size = 4
_this$ = -8						; size = 4
?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QBE_NXZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::Empty, COMDAT
; _this$ = ecx

; 249  :     bool Empty() const					{

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 250  :         return _size == 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	jne	SHORT $LN3@Empty
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Empty
$LN3@Empty:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Empty:
	mov	al, BYTE PTR tv66[ebp]

; 251  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QBE_NXZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::Empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0CE@@2@XZ
_TEXT	SEGMENT
tv69 = -208						; size = 4
_this$ = -8						; size = 4
?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0CE@@2@XZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::Pop, COMDAT
; _this$ = ecx

; 240  :     T Pop() {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 241  :         return _mem[--_size];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	sub	ecx, 1
	mov	DWORD PTR tv69[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR [edx+48], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR tv69[ebp]
	mov	eax, DWORD PTR [edx+eax*4]

; 242  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0CE@@2@XZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::Pop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Push@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0CE@@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_t$ = 8							; size = 4
?Push@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0CE@@2@@Z PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::Push, COMDAT
; _this$ = ecx

; 228  :     void Push( T t ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 229  :         EnsureCapacity( _size+1 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@AAEXH@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::EnsureCapacity

; 230  :         _mem[_size++] = t;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], ecx

; 231  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Push@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0CE@@2@@Z ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::Push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ??1?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
??1?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAE@XZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::~DynArray<tinyxml2::MemPoolT<36>::Block *,10>, COMDAT
; _this$ = ecx

; 218  :     ~DynArray() {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 219  :         if ( _mem != _pool ) {

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], eax
	je	SHORT $LN2@DynArray

; 220  :             delete [] _mem;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@DynArray:

; 221  :         }
; 222  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAE@XZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::~DynArray<tinyxml2::MemPoolT<36>::Block *,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ??0?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAE@XZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::DynArray<tinyxml2::MemPoolT<36>::Block *,10>, COMDAT
; _this$ = ecx

; 212  :     DynArray< T, INIT >() {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 213  :         _mem = _pool;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 214  :         _allocated = INIT;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 10			; 0000000aH

; 215  :         _size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0

; 216  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAE@XZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::DynArray<tinyxml2::MemPoolT<36>::Block *,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Untracked@?$MemPoolT@$0CE@@tinyxml2@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Untracked@?$MemPoolT@$0CE@@tinyxml2@@QBEHXZ PROC	; tinyxml2::MemPoolT<36>::Untracked, COMDAT
; _this$ = ecx

; 400  :     int Untracked() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 401  :         return _nUntracked;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+72]

; 402  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Untracked@?$MemPoolT@$0CE@@tinyxml2@@QBEHXZ ENDP	; tinyxml2::MemPoolT<36>::Untracked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?SetTracked@?$MemPoolT@$0CE@@tinyxml2@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?SetTracked@?$MemPoolT@$0CE@@tinyxml2@@UAEXXZ PROC	; tinyxml2::MemPoolT<36>::SetTracked, COMDAT
; _this$ = ecx

; 396  :     void SetTracked() {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 397  :         _nUntracked--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 398  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetTracked@?$MemPoolT@$0CE@@tinyxml2@@UAEXXZ ENDP	; tinyxml2::MemPoolT<36>::SetTracked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Free@?$MemPoolT@$0CE@@tinyxml2@@UAEXPAX@Z
_TEXT	SEGMENT
_chunk$ = -20						; size = 4
_this$ = -8						; size = 4
_mem$ = 8						; size = 4
?Free@?$MemPoolT@$0CE@@tinyxml2@@UAEXPAX@Z PROC		; tinyxml2::MemPoolT<36>::Free, COMDAT
; _this$ = ecx

; 379  :     virtual void Free( void* mem ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 380  :         if ( !mem ) {

	cmp	DWORD PTR _mem$[ebp], 0
	jne	SHORT $LN1@Free

; 381  :             return;

	jmp	SHORT $LN2@Free
$LN1@Free:

; 382  :         }
; 383  :         --_currentAllocs;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], ecx

; 384  :         Chunk* chunk = static_cast<Chunk*>( mem );

	mov	eax, DWORD PTR _mem$[ebp]
	mov	DWORD PTR _chunk$[ebp], eax

; 385  : #ifdef DEBUG
; 386  :         memset( chunk, 0xfe, sizeof(Chunk) );

	push	36					; 00000024H
	push	254					; 000000feH
	mov	eax, DWORD PTR _chunk$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 387  : #endif
; 388  :         chunk->next = _root;

	mov	eax, DWORD PTR _chunk$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax], edx

; 389  :         _root = chunk;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _chunk$[ebp]
	mov	DWORD PTR [eax+56], ecx
$LN2@Free:

; 390  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Free@?$MemPoolT@$0CE@@tinyxml2@@UAEXPAX@Z ENDP		; tinyxml2::MemPoolT<36>::Free
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Alloc@?$MemPoolT@$0CE@@tinyxml2@@UAEPAXXZ
_TEXT	SEGMENT
tv69 = -268						; size = 4
$T1 = -260						; size = 4
$T2 = -248						; size = 4
_result$ = -44						; size = 4
_i$3 = -32						; size = 4
_block$4 = -20						; size = 4
_this$ = -8						; size = 4
?Alloc@?$MemPoolT@$0CE@@tinyxml2@@UAEPAXXZ PROC		; tinyxml2::MemPoolT<36>::Alloc, COMDAT
; _this$ = ecx

; 355  :     virtual void* Alloc() {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 356  :         if ( !_root ) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+56], 0
	jne	$LN5@Alloc

; 357  :             // Need a new block.
; 358  :             Block* block = new Block();

	mov	DWORD PTR $T1[ebp], 4068		; 00000fe4H
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN8@Alloc
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN9@Alloc
$LN8@Alloc:
	mov	DWORD PTR tv69[ebp], 0
$LN9@Alloc:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR _block$4[ebp], ecx

; 359  :             _blockPtrs.Push( block );

	mov	eax, DWORD PTR _block$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Push@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0CE@@2@@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::Push

; 360  : 
; 361  :             for( int i=0; i<COUNT-1; ++i ) {

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@Alloc
$LN3@Alloc:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN4@Alloc:
	cmp	DWORD PTR _i$3[ebp], 112		; 00000070H
	jge	SHORT $LN2@Alloc

; 362  :                 block->chunk[i].next = &block->chunk[i+1];

	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	imul	ecx, eax, 36
	add	ecx, DWORD PTR _block$4[ebp]
	imul	edx, DWORD PTR _i$3[ebp], 36
	mov	eax, DWORD PTR _block$4[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 363  :             }

	jmp	SHORT $LN3@Alloc
$LN2@Alloc:

; 364  :             block->chunk[COUNT-1].next = 0;

	mov	eax, 36					; 00000024H
	imul	ecx, eax, 112
	mov	edx, DWORD PTR _block$4[ebp]
	mov	DWORD PTR [edx+ecx], 0

; 365  :             _root = block->chunk;

	mov	eax, DWORD PTR _block$4[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], eax
$LN5@Alloc:

; 366  :         }
; 367  :         void* result = _root;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _result$[ebp], ecx

; 368  :         _root = _root->next;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+56], eax

; 369  : 
; 370  :         ++_currentAllocs;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], ecx

; 371  :         if ( _currentAllocs > _maxAllocs ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+60]
	cmp	edx, DWORD PTR [ecx+68]
	jle	SHORT $LN1@Alloc

; 372  :             _maxAllocs = _currentAllocs;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+68], edx
$LN1@Alloc:

; 373  :         }
; 374  :         _nAllocs++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+64], ecx

; 375  :         _nUntracked++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 376  :         return result;

	mov	eax, DWORD PTR _result$[ebp]

; 377  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Alloc@?$MemPoolT@$0CE@@tinyxml2@@UAEPAXXZ ENDP		; tinyxml2::MemPoolT<36>::Alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?CurrentAllocs@?$MemPoolT@$0CE@@tinyxml2@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?CurrentAllocs@?$MemPoolT@$0CE@@tinyxml2@@QBEHXZ PROC	; tinyxml2::MemPoolT<36>::CurrentAllocs, COMDAT
; _this$ = ecx

; 351  :     int CurrentAllocs() const		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 352  :         return _currentAllocs;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+60]

; 353  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CurrentAllocs@?$MemPoolT@$0CE@@tinyxml2@@QBEHXZ ENDP	; tinyxml2::MemPoolT<36>::CurrentAllocs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ItemSize@?$MemPoolT@$0CE@@tinyxml2@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ItemSize@?$MemPoolT@$0CE@@tinyxml2@@UBEHXZ PROC	; tinyxml2::MemPoolT<36>::ItemSize, COMDAT
; _this$ = ecx

; 348  :     virtual int ItemSize() const	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 349  :         return SIZE;

	mov	eax, 36					; 00000024H

; 350  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ItemSize@?$MemPoolT@$0CE@@tinyxml2@@UBEHXZ ENDP	; tinyxml2::MemPoolT<36>::ItemSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Clear@?$MemPoolT@$0CE@@tinyxml2@@UAEXXZ
_TEXT	SEGMENT
$T1 = -224						; size = 4
_b$2 = -20						; size = 4
_this$ = -8						; size = 4
?Clear@?$MemPoolT@$0CE@@tinyxml2@@UAEXXZ PROC		; tinyxml2::MemPoolT<36>::Clear, COMDAT
; _this$ = ecx

; 335  :     void Clear() {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN2@Clear:

; 336  :         // Delete the blocks.
; 337  :         while( !_blockPtrs.Empty()) {

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QBE_NXZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::Empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@Clear

; 338  :             Block* b  = _blockPtrs.Pop();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0CE@@2@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::Pop
	mov	DWORD PTR _b$2[ebp], eax

; 339  :             delete b;

	mov	eax, DWORD PTR _b$2[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 340  :         }

	jmp	SHORT $LN2@Clear
$LN1@Clear:

; 341  :         _root = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0

; 342  :         _currentAllocs = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 0

; 343  :         _nAllocs = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0

; 344  :         _maxAllocs = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 0

; 345  :         _nUntracked = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 0

; 346  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$MemPoolT@$0CE@@tinyxml2@@UAEXXZ ENDP		; tinyxml2::MemPoolT<36>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ??1?$MemPoolT@$0CE@@tinyxml2@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$MemPoolT@$0CE@@tinyxml2@@UAE@XZ PROC		; tinyxml2::MemPoolT<36>::~MemPoolT<36>, COMDAT
; _this$ = ecx

; 331  :     ~MemPoolT() {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$MemPoolT@$0CE@@tinyxml2@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$MemPoolT@$0CE@@tinyxml2@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 332  :         Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$MemPoolT@$0CE@@tinyxml2@@UAEXXZ ; tinyxml2::MemPoolT<36>::Clear

; 333  :     }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::~DynArray<tinyxml2::MemPoolT<36>::Block *,10>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MemPool@tinyxml2@@UAE@XZ		; tinyxml2::MemPool::~MemPool
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$MemPoolT@$0CE@@tinyxml2@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1MemPool@tinyxml2@@UAE@XZ		; tinyxml2::MemPool::~MemPool
__unwindfunclet$??1?$MemPoolT@$0CE@@tinyxml2@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::~DynArray<tinyxml2::MemPoolT<36>::Block *,10>
__ehhandler$??1?$MemPoolT@$0CE@@tinyxml2@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$MemPoolT@$0CE@@tinyxml2@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$MemPoolT@$0CE@@tinyxml2@@UAE@XZ ENDP		; tinyxml2::MemPoolT<36>::~MemPoolT<36>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ??0?$MemPoolT@$0CE@@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$MemPoolT@$0CE@@tinyxml2@@QAE@XZ PROC		; tinyxml2::MemPoolT<36>::MemPoolT<36>, COMDAT
; _this$ = ecx

; 330  :     MemPoolT() : _root(0), _currentAllocs(0), _nAllocs(0), _maxAllocs(0), _nUntracked(0)	{}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$MemPoolT@$0CE@@tinyxml2@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0MemPool@tinyxml2@@QAE@XZ		; tinyxml2::MemPool::MemPool
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$MemPoolT@$0CE@@tinyxml2@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$DynArray@PAUBlock@?$MemPoolT@$0CE@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<36>::Block *,10>::DynArray<tinyxml2::MemPoolT<36>::Block *,10>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$MemPoolT@$0CE@@tinyxml2@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1MemPool@tinyxml2@@UAE@XZ		; tinyxml2::MemPool::~MemPool
__ehhandler$??0?$MemPoolT@$0CE@@tinyxml2@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$MemPoolT@$0CE@@tinyxml2@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$MemPoolT@$0CE@@tinyxml2@@QAE@XZ ENDP		; tinyxml2::MemPoolT<36>::MemPoolT<36>
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$MemPoolT@$0DE@@tinyxml2@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$MemPoolT@$0DE@@tinyxml2@@UAEPAXI@Z PROC		; tinyxml2::MemPoolT<52>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$MemPoolT@$0DE@@tinyxml2@@UAE@XZ	; tinyxml2::MemPoolT<52>::~MemPoolT<52>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$MemPoolT@$0DE@@tinyxml2@@UAEPAXI@Z ENDP		; tinyxml2::MemPoolT<52>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@AAEXH@Z
_TEXT	SEGMENT
$T1 = -248						; size = 4
$T2 = -236						; size = 4
_newMem$3 = -32						; size = 4
_newAllocated$4 = -20					; size = 4
_this$ = -8						; size = 4
_cap$ = 8						; size = 4
?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@AAEXH@Z PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::EnsureCapacity, COMDAT
; _this$ = ecx

; 285  :     void EnsureCapacity( int cap ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 286  :         if ( cap > _allocated ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cap$[ebp]
	cmp	ecx, DWORD PTR [eax+44]
	jle	$LN3@EnsureCapa

; 287  :             int newAllocated = cap * 2;

	mov	eax, DWORD PTR _cap$[ebp]
	shl	eax, 1
	mov	DWORD PTR _newAllocated$4[ebp], eax

; 288  :             T* newMem = new T[newAllocated];

	xor	ecx, ecx
	mov	eax, DWORD PTR _newAllocated$4[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _newMem$3[ebp], eax

; 289  :             memcpy( newMem, _mem, sizeof(T)*_size );	// warning: not using constructors, only works for PODs

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _newMem$3[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 290  :             if ( _mem != _pool ) {

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], eax
	je	SHORT $LN1@EnsureCapa

; 291  :                 delete [] _mem;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@EnsureCapa:

; 292  :             }
; 293  :             _mem = newMem;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newMem$3[ebp]
	mov	DWORD PTR [eax], ecx

; 294  :             _allocated = newAllocated;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newAllocated$4[ebp]
	mov	DWORD PTR [eax+44], ecx
$LN3@EnsureCapa:

; 295  :         }
; 296  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@AAEXH@Z ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::EnsureCapacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -208						; size = 4
_this$ = -8						; size = 4
?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QBE_NXZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::Empty, COMDAT
; _this$ = ecx

; 249  :     bool Empty() const					{

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 250  :         return _size == 0;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	jne	SHORT $LN3@Empty
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Empty
$LN3@Empty:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Empty:
	mov	al, BYTE PTR tv66[ebp]

; 251  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QBE_NXZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::Empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0DE@@2@XZ
_TEXT	SEGMENT
tv69 = -208						; size = 4
_this$ = -8						; size = 4
?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0DE@@2@XZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::Pop, COMDAT
; _this$ = ecx

; 240  :     T Pop() {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 241  :         return _mem[--_size];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	sub	ecx, 1
	mov	DWORD PTR tv69[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR [edx+48], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR tv69[ebp]
	mov	eax, DWORD PTR [edx+eax*4]

; 242  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0DE@@2@XZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::Pop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Push@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0DE@@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_t$ = 8							; size = 4
?Push@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0DE@@2@@Z PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::Push, COMDAT
; _this$ = ecx

; 228  :     void Push( T t ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 229  :         EnsureCapacity( _size+1 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnsureCapacity@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@AAEXH@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::EnsureCapacity

; 230  :         _mem[_size++] = t;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], ecx

; 231  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Push@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0DE@@2@@Z ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::Push
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ??1?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
??1?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAE@XZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::~DynArray<tinyxml2::MemPoolT<52>::Block *,10>, COMDAT
; _this$ = ecx

; 218  :     ~DynArray() {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 219  :         if ( _mem != _pool ) {

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], eax
	je	SHORT $LN2@DynArray

; 220  :             delete [] _mem;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@DynArray:

; 221  :         }
; 222  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAE@XZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::~DynArray<tinyxml2::MemPoolT<52>::Block *,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ??0?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAE@XZ PROC ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::DynArray<tinyxml2::MemPoolT<52>::Block *,10>, COMDAT
; _this$ = ecx

; 212  :     DynArray< T, INIT >() {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 213  :         _mem = _pool;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 214  :         _allocated = INIT;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 10			; 0000000aH

; 215  :         _size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0

; 216  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAE@XZ ENDP ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::DynArray<tinyxml2::MemPoolT<52>::Block *,10>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Untracked@?$MemPoolT@$0DE@@tinyxml2@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Untracked@?$MemPoolT@$0DE@@tinyxml2@@QBEHXZ PROC	; tinyxml2::MemPoolT<52>::Untracked, COMDAT
; _this$ = ecx

; 400  :     int Untracked() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 401  :         return _nUntracked;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+72]

; 402  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Untracked@?$MemPoolT@$0DE@@tinyxml2@@QBEHXZ ENDP	; tinyxml2::MemPoolT<52>::Untracked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?SetTracked@?$MemPoolT@$0DE@@tinyxml2@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?SetTracked@?$MemPoolT@$0DE@@tinyxml2@@UAEXXZ PROC	; tinyxml2::MemPoolT<52>::SetTracked, COMDAT
; _this$ = ecx

; 396  :     void SetTracked() {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 397  :         _nUntracked--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 398  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetTracked@?$MemPoolT@$0DE@@tinyxml2@@UAEXXZ ENDP	; tinyxml2::MemPoolT<52>::SetTracked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Free@?$MemPoolT@$0DE@@tinyxml2@@UAEXPAX@Z
_TEXT	SEGMENT
_chunk$ = -20						; size = 4
_this$ = -8						; size = 4
_mem$ = 8						; size = 4
?Free@?$MemPoolT@$0DE@@tinyxml2@@UAEXPAX@Z PROC		; tinyxml2::MemPoolT<52>::Free, COMDAT
; _this$ = ecx

; 379  :     virtual void Free( void* mem ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 380  :         if ( !mem ) {

	cmp	DWORD PTR _mem$[ebp], 0
	jne	SHORT $LN1@Free

; 381  :             return;

	jmp	SHORT $LN2@Free
$LN1@Free:

; 382  :         }
; 383  :         --_currentAllocs;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], ecx

; 384  :         Chunk* chunk = static_cast<Chunk*>( mem );

	mov	eax, DWORD PTR _mem$[ebp]
	mov	DWORD PTR _chunk$[ebp], eax

; 385  : #ifdef DEBUG
; 386  :         memset( chunk, 0xfe, sizeof(Chunk) );

	push	52					; 00000034H
	push	254					; 000000feH
	mov	eax, DWORD PTR _chunk$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 387  : #endif
; 388  :         chunk->next = _root;

	mov	eax, DWORD PTR _chunk$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax], edx

; 389  :         _root = chunk;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _chunk$[ebp]
	mov	DWORD PTR [eax+56], ecx
$LN2@Free:

; 390  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Free@?$MemPoolT@$0DE@@tinyxml2@@UAEXPAX@Z ENDP		; tinyxml2::MemPoolT<52>::Free
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Alloc@?$MemPoolT@$0DE@@tinyxml2@@UAEPAXXZ
_TEXT	SEGMENT
tv69 = -268						; size = 4
$T1 = -260						; size = 4
$T2 = -248						; size = 4
_result$ = -44						; size = 4
_i$3 = -32						; size = 4
_block$4 = -20						; size = 4
_this$ = -8						; size = 4
?Alloc@?$MemPoolT@$0DE@@tinyxml2@@UAEPAXXZ PROC		; tinyxml2::MemPoolT<52>::Alloc, COMDAT
; _this$ = ecx

; 355  :     virtual void* Alloc() {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 356  :         if ( !_root ) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+56], 0
	jne	$LN5@Alloc

; 357  :             // Need a new block.
; 358  :             Block* block = new Block();

	mov	DWORD PTR $T1[ebp], 4056		; 00000fd8H
	mov	eax, DWORD PTR $T1[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN8@Alloc
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN9@Alloc
$LN8@Alloc:
	mov	DWORD PTR tv69[ebp], 0
$LN9@Alloc:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR _block$4[ebp], ecx

; 359  :             _blockPtrs.Push( block );

	mov	eax, DWORD PTR _block$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Push@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAEXPAUBlock@?$MemPoolT@$0DE@@2@@Z ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::Push

; 360  : 
; 361  :             for( int i=0; i<COUNT-1; ++i ) {

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@Alloc
$LN3@Alloc:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN4@Alloc:
	cmp	DWORD PTR _i$3[ebp], 77			; 0000004dH
	jge	SHORT $LN2@Alloc

; 362  :                 block->chunk[i].next = &block->chunk[i+1];

	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	imul	ecx, eax, 52
	add	ecx, DWORD PTR _block$4[ebp]
	imul	edx, DWORD PTR _i$3[ebp], 52
	mov	eax, DWORD PTR _block$4[ebp]
	mov	DWORD PTR [eax+edx], ecx

; 363  :             }

	jmp	SHORT $LN3@Alloc
$LN2@Alloc:

; 364  :             block->chunk[COUNT-1].next = 0;

	mov	eax, 52					; 00000034H
	imul	ecx, eax, 77
	mov	edx, DWORD PTR _block$4[ebp]
	mov	DWORD PTR [edx+ecx], 0

; 365  :             _root = block->chunk;

	mov	eax, DWORD PTR _block$4[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], eax
$LN5@Alloc:

; 366  :         }
; 367  :         void* result = _root;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _result$[ebp], ecx

; 368  :         _root = _root->next;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+56], eax

; 369  : 
; 370  :         ++_currentAllocs;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], ecx

; 371  :         if ( _currentAllocs > _maxAllocs ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+60]
	cmp	edx, DWORD PTR [ecx+68]
	jle	SHORT $LN1@Alloc

; 372  :             _maxAllocs = _currentAllocs;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR [eax+68], edx
$LN1@Alloc:

; 373  :         }
; 374  :         _nAllocs++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+64], ecx

; 375  :         _nUntracked++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+72], ecx

; 376  :         return result;

	mov	eax, DWORD PTR _result$[ebp]

; 377  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Alloc@?$MemPoolT@$0DE@@tinyxml2@@UAEPAXXZ ENDP		; tinyxml2::MemPoolT<52>::Alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?CurrentAllocs@?$MemPoolT@$0DE@@tinyxml2@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?CurrentAllocs@?$MemPoolT@$0DE@@tinyxml2@@QBEHXZ PROC	; tinyxml2::MemPoolT<52>::CurrentAllocs, COMDAT
; _this$ = ecx

; 351  :     int CurrentAllocs() const		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 352  :         return _currentAllocs;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+60]

; 353  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CurrentAllocs@?$MemPoolT@$0DE@@tinyxml2@@QBEHXZ ENDP	; tinyxml2::MemPoolT<52>::CurrentAllocs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ItemSize@?$MemPoolT@$0DE@@tinyxml2@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ItemSize@?$MemPoolT@$0DE@@tinyxml2@@UBEHXZ PROC	; tinyxml2::MemPoolT<52>::ItemSize, COMDAT
; _this$ = ecx

; 348  :     virtual int ItemSize() const	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 349  :         return SIZE;

	mov	eax, 52					; 00000034H

; 350  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ItemSize@?$MemPoolT@$0DE@@tinyxml2@@UBEHXZ ENDP	; tinyxml2::MemPoolT<52>::ItemSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Clear@?$MemPoolT@$0DE@@tinyxml2@@UAEXXZ
_TEXT	SEGMENT
$T1 = -224						; size = 4
_b$2 = -20						; size = 4
_this$ = -8						; size = 4
?Clear@?$MemPoolT@$0DE@@tinyxml2@@UAEXXZ PROC		; tinyxml2::MemPoolT<52>::Clear, COMDAT
; _this$ = ecx

; 335  :     void Clear() {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN2@Clear:

; 336  :         // Delete the blocks.
; 337  :         while( !_blockPtrs.Empty()) {

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Empty@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QBE_NXZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::Empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@Clear

; 338  :             Block* b  = _blockPtrs.Pop();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Pop@?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAEPAUBlock@?$MemPoolT@$0DE@@2@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::Pop
	mov	DWORD PTR _b$2[ebp], eax

; 339  :             delete b;

	mov	eax, DWORD PTR _b$2[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 340  :         }

	jmp	SHORT $LN2@Clear
$LN1@Clear:

; 341  :         _root = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0

; 342  :         _currentAllocs = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 0

; 343  :         _nAllocs = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0

; 344  :         _maxAllocs = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 0

; 345  :         _nUntracked = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 0

; 346  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$MemPoolT@$0DE@@tinyxml2@@UAEXXZ ENDP		; tinyxml2::MemPoolT<52>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ??1?$MemPoolT@$0DE@@tinyxml2@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$MemPoolT@$0DE@@tinyxml2@@UAE@XZ PROC		; tinyxml2::MemPoolT<52>::~MemPoolT<52>, COMDAT
; _this$ = ecx

; 331  :     ~MemPoolT() {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$MemPoolT@$0DE@@tinyxml2@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$MemPoolT@$0DE@@tinyxml2@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 332  :         Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$MemPoolT@$0DE@@tinyxml2@@UAEXXZ ; tinyxml2::MemPoolT<52>::Clear

; 333  :     }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::~DynArray<tinyxml2::MemPoolT<52>::Block *,10>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MemPool@tinyxml2@@UAE@XZ		; tinyxml2::MemPool::~MemPool
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$MemPoolT@$0DE@@tinyxml2@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1MemPool@tinyxml2@@UAE@XZ		; tinyxml2::MemPool::~MemPool
__unwindfunclet$??1?$MemPoolT@$0DE@@tinyxml2@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::~DynArray<tinyxml2::MemPoolT<52>::Block *,10>
__ehhandler$??1?$MemPoolT@$0DE@@tinyxml2@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$MemPoolT@$0DE@@tinyxml2@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$MemPoolT@$0DE@@tinyxml2@@UAE@XZ ENDP		; tinyxml2::MemPoolT<52>::~MemPoolT<52>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ??0?$MemPoolT@$0DE@@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$MemPoolT@$0DE@@tinyxml2@@QAE@XZ PROC		; tinyxml2::MemPoolT<52>::MemPoolT<52>, COMDAT
; _this$ = ecx

; 330  :     MemPoolT() : _root(0), _currentAllocs(0), _nAllocs(0), _maxAllocs(0), _nUntracked(0)	{}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$MemPoolT@$0DE@@tinyxml2@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0MemPool@tinyxml2@@QAE@XZ		; tinyxml2::MemPool::MemPool
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$MemPoolT@$0DE@@tinyxml2@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$DynArray@PAUBlock@?$MemPoolT@$0DE@@tinyxml2@@$09@tinyxml2@@QAE@XZ ; tinyxml2::DynArray<tinyxml2::MemPoolT<52>::Block *,10>::DynArray<tinyxml2::MemPoolT<52>::Block *,10>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$MemPoolT@$0DE@@tinyxml2@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1MemPool@tinyxml2@@UAE@XZ		; tinyxml2::MemPool::~MemPool
__ehhandler$??0?$MemPoolT@$0DE@@tinyxml2@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$MemPoolT@$0DE@@tinyxml2@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$MemPoolT@$0DE@@tinyxml2@@QAE@XZ ENDP		; tinyxml2::MemPoolT<52>::MemPoolT<52>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ShallowEqual@XMLDocument@tinyxml2@@UBE_NPBVXMLNode@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
?ShallowEqual@XMLDocument@tinyxml2@@UBE_NPBVXMLNode@2@@Z PROC ; tinyxml2::XMLDocument::ShallowEqual, COMDAT
; _this$ = ecx

; 1697 :     virtual bool ShallowEqual( const XMLNode* /*compare*/ ) const	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1698 :         return false;

	xor	al, al

; 1699 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ShallowEqual@XMLDocument@tinyxml2@@UBE_NPBVXMLNode@2@@Z ENDP ; tinyxml2::XMLDocument::ShallowEqual
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ShallowClone@XMLDocument@tinyxml2@@UBEPAVXMLNode@2@PAV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
?ShallowClone@XMLDocument@tinyxml2@@UBEPAVXMLNode@2@PAV12@@Z PROC ; tinyxml2::XMLDocument::ShallowClone, COMDAT
; _this$ = ecx

; 1694 :     virtual XMLNode* ShallowClone( XMLDocument* /*document*/ ) const	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1695 :         return 0;

	xor	eax, eax

; 1696 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ShallowClone@XMLDocument@tinyxml2@@UBEPAVXMLNode@2@PAV12@@Z ENDP ; tinyxml2::XMLDocument::ShallowClone
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z
_TEXT	SEGMENT
tv313 = -472						; size = 4
tv282 = -472						; size = 4
tv245 = -472						; size = 4
tv203 = -472						; size = 4
tv169 = -472						; size = 4
tv132 = -472						; size = 4
$T2 = -464						; size = 4
$T3 = -452						; size = 4
$T4 = -440						; size = 4
$T5 = -428						; size = 4
$T6 = -416						; size = 4
$T7 = -404						; size = 4
$T8 = -392						; size = 4
$T9 = -380						; size = 4
$T10 = -368						; size = 4
$T11 = -356						; size = 4
$T12 = -344						; size = 4
$T13 = -332						; size = 4
$T14 = -320						; size = 4
$T15 = -308						; size = 4
$T16 = -296						; size = 4
$T17 = -284						; size = 4
$T18 = -272						; size = 4
$T19 = -260						; size = 4
_text$20 = -56						; size = 4
_returnNode$ = -44					; size = 4
_start$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
_node$ = 12						; size = 4
?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z PROC ; tinyxml2::XMLDocument::Identify, COMDAT
; _this$ = ecx

; 482  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 460				; 000001ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-472]
	mov	ecx, 115				; 00000073H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 483  :     char* const start = p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _start$[ebp], eax

; 484  :     p = XMLUtil::SkipWhiteSpace( p );

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPADPAD@Z ; tinyxml2::XMLUtil::SkipWhiteSpace
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax

; 485  :     if( !p || !*p ) {

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN13@Identify
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN14@Identify
$LN13@Identify:

; 486  :         return p;

	mov	eax, DWORD PTR _p$[ebp]
	jmp	$LN15@Identify
$LN14@Identify:

; 487  :     }
; 488  : 
; 489  :     // What is this thing?
; 490  : 	// These strings define the matching patters:
; 491  :     static const char* xmlHeader		= { "<?" };
; 492  :     static const char* commentHeader	= { "<!--" };
; 493  :     static const char* dtdHeader		= { "<!" };
; 494  :     static const char* cdataHeader		= { "<![CDATA[" };
; 495  :     static const char* elementHeader	= { "<" };	// and a header for everything else; check last.
; 496  : 
; 497  :     static const int xmlHeaderLen		= 2;
; 498  :     static const int commentHeaderLen	= 4;
; 499  :     static const int dtdHeaderLen		= 2;
; 500  :     static const int cdataHeaderLen		= 9;
; 501  :     static const int elementHeaderLen	= 1;
; 502  : 
; 503  : #if defined(_MSC_VER)
; 504  : #pragma warning ( push )
; 505  : #pragma warning ( disable : 4127 )
; 506  : #endif
; 507  :     TIXMLASSERT( sizeof( XMLComment ) == sizeof( XMLUnknown ) );		// use same memory pool

	xor	eax, eax
	je	SHORT $LN12@Identify
	int	3
$LN12@Identify:

; 508  :     TIXMLASSERT( sizeof( XMLComment ) == sizeof( XMLDeclaration ) );	// use same memory pool

	xor	eax, eax
	je	SHORT $LN11@Identify
	int	3
$LN11@Identify:

; 509  : #if defined(_MSC_VER)
; 510  : #pragma warning (pop)
; 511  : #endif
; 512  :     XMLNode* returnNode = 0;

	mov	DWORD PTR _returnNode$[ebp], 0

; 513  :     if ( XMLUtil::StringEqual( p, xmlHeader, xmlHeaderLen ) ) {

	push	2
	mov	eax, DWORD PTR ?xmlHeader@?4??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4PBDB
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	$LN10@Identify

; 514  :         returnNode = new (_commentPool.Alloc()) XMLDeclaration( this );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+296]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR $T4[ebp]
	push	ecx
	push	44					; 0000002cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN17@Identify
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0XMLDeclaration@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLDeclaration::XMLDeclaration
	mov	DWORD PTR tv132[ebp], eax
	jmp	SHORT $LN18@Identify
$LN17@Identify:
	mov	DWORD PTR tv132[ebp], 0
$LN18@Identify:
	mov	eax, DWORD PTR tv132[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _returnNode$[ebp], ecx

; 515  :         returnNode->_memPool = &_commentPool;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 296				; 00000128H
	mov	ecx, DWORD PTR _returnNode$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 516  :         p += xmlHeaderLen;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	jmp	$LN9@Identify
$LN10@Identify:

; 517  :     }
; 518  :     else if ( XMLUtil::StringEqual( p, commentHeader, commentHeaderLen ) ) {

	push	4
	mov	eax, DWORD PTR ?commentHeader@?4??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4PBDB
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	$LN8@Identify

; 519  :         returnNode = new (_commentPool.Alloc()) XMLComment( this );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+296]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T7[ebp], eax
	mov	ecx, DWORD PTR $T7[ebp]
	push	ecx
	push	44					; 0000002cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN19@Identify
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T6[ebp]
	call	??0XMLComment@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLComment::XMLComment
	mov	DWORD PTR tv169[ebp], eax
	jmp	SHORT $LN20@Identify
$LN19@Identify:
	mov	DWORD PTR tv169[ebp], 0
$LN20@Identify:
	mov	eax, DWORD PTR tv169[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T5[ebp]
	mov	DWORD PTR _returnNode$[ebp], ecx

; 520  :         returnNode->_memPool = &_commentPool;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 296				; 00000128H
	mov	ecx, DWORD PTR _returnNode$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 521  :         p += commentHeaderLen;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
	jmp	$LN9@Identify
$LN8@Identify:

; 522  :     }
; 523  :     else if ( XMLUtil::StringEqual( p, cdataHeader, cdataHeaderLen ) ) {

	push	9
	mov	eax, DWORD PTR ?cdataHeader@?4??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4PBDB
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	$LN6@Identify

; 524  :         XMLText* text = new (_textPool.Alloc()) XMLText( this );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+220]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T10[ebp], eax
	mov	ecx, DWORD PTR $T10[ebp]
	push	ecx
	push	48					; 00000030H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN21@Identify
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T9[ebp]
	call	??0XMLText@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLText::XMLText
	mov	DWORD PTR tv203[ebp], eax
	jmp	SHORT $LN22@Identify
$LN21@Identify:
	mov	DWORD PTR tv203[ebp], 0
$LN22@Identify:
	mov	eax, DWORD PTR tv203[ebp]
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T8[ebp]
	mov	DWORD PTR _text$20[ebp], ecx

; 525  :         returnNode = text;

	mov	eax, DWORD PTR _text$20[ebp]
	mov	DWORD PTR _returnNode$[ebp], eax

; 526  :         returnNode->_memPool = &_textPool;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 220				; 000000dcH
	mov	ecx, DWORD PTR _returnNode$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 527  :         p += cdataHeaderLen;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 9
	mov	DWORD PTR _p$[ebp], eax

; 528  :         text->SetCData( true );

	push	1
	mov	ecx, DWORD PTR _text$20[ebp]
	call	?SetCData@XMLText@tinyxml2@@QAEX_N@Z	; tinyxml2::XMLText::SetCData
	jmp	$LN9@Identify
$LN6@Identify:

; 529  :     }
; 530  :     else if ( XMLUtil::StringEqual( p, dtdHeader, dtdHeaderLen ) ) {

	push	2
	mov	eax, DWORD PTR ?dtdHeader@?4??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4PBDB
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	$LN4@Identify

; 531  :         returnNode = new (_commentPool.Alloc()) XMLUnknown( this );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+296]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T13[ebp], eax
	mov	ecx, DWORD PTR $T13[ebp]
	push	ecx
	push	44					; 0000002cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T12[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T12[ebp], 0
	je	SHORT $LN23@Identify
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T12[ebp]
	call	??0XMLUnknown@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLUnknown::XMLUnknown
	mov	DWORD PTR tv245[ebp], eax
	jmp	SHORT $LN24@Identify
$LN23@Identify:
	mov	DWORD PTR tv245[ebp], 0
$LN24@Identify:
	mov	eax, DWORD PTR tv245[ebp]
	mov	DWORD PTR $T11[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T11[ebp]
	mov	DWORD PTR _returnNode$[ebp], ecx

; 532  :         returnNode->_memPool = &_commentPool;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 296				; 00000128H
	mov	ecx, DWORD PTR _returnNode$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 533  :         p += dtdHeaderLen;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	jmp	$LN9@Identify
$LN4@Identify:

; 534  :     }
; 535  :     else if ( XMLUtil::StringEqual( p, elementHeader, elementHeaderLen ) ) {

	push	1
	mov	eax, DWORD PTR ?elementHeader@?4??Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@3@@Z@4PBDB
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	$LN2@Identify

; 536  :         returnNode = new (_elementPool.Alloc()) XMLElement( this );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+68]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T16[ebp], eax
	mov	ecx, DWORD PTR $T16[ebp]
	push	ecx
	push	52					; 00000034H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T15[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T15[ebp], 0
	je	SHORT $LN25@Identify
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T15[ebp]
	call	??0XMLElement@tinyxml2@@AAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLElement::XMLElement
	mov	DWORD PTR tv282[ebp], eax
	jmp	SHORT $LN26@Identify
$LN25@Identify:
	mov	DWORD PTR tv282[ebp], 0
$LN26@Identify:
	mov	eax, DWORD PTR tv282[ebp]
	mov	DWORD PTR $T14[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T14[ebp]
	mov	DWORD PTR _returnNode$[ebp], ecx

; 537  :         returnNode->_memPool = &_elementPool;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _returnNode$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 538  :         p += elementHeaderLen;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 539  :     }
; 540  :     else {

	jmp	$LN9@Identify
$LN2@Identify:

; 541  :         returnNode = new (_textPool.Alloc()) XMLText( this );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+220]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T19[ebp], eax
	mov	ecx, DWORD PTR $T19[ebp]
	push	ecx
	push	48					; 00000030H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T18[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T18[ebp], 0
	je	SHORT $LN27@Identify
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T18[ebp]
	call	??0XMLText@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLText::XMLText
	mov	DWORD PTR tv313[ebp], eax
	jmp	SHORT $LN28@Identify
$LN27@Identify:
	mov	DWORD PTR tv313[ebp], 0
$LN28@Identify:
	mov	eax, DWORD PTR tv313[ebp]
	mov	DWORD PTR $T17[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T17[ebp]
	mov	DWORD PTR _returnNode$[ebp], ecx

; 542  :         returnNode->_memPool = &_textPool;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 220				; 000000dcH
	mov	ecx, DWORD PTR _returnNode$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 543  :         p = start;	// Back it up, all the text counts.

	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _p$[ebp], eax
$LN9@Identify:

; 544  :     }
; 545  : 
; 546  :     *node = returnNode;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _returnNode$[ebp]
	mov	DWORD PTR [eax], ecx

; 547  :     return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN15@Identify:

; 548  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 472				; 000001d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z$1:
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z$2:
	mov	eax, DWORD PTR $T10[ebp]
	push	eax
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z$3:
	mov	eax, DWORD PTR $T13[ebp]
	push	eax
	mov	eax, DWORD PTR $T12[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z$4:
	mov	eax, DWORD PTR $T16[ebp]
	push	eax
	mov	eax, DWORD PTR $T15[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z$5:
	mov	eax, DWORD PTR $T19[ebp]
	push	eax
	mov	eax, DWORD PTR $T18[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-476]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z ENDP ; tinyxml2::XMLDocument::Identify
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?Clear@XMLDocument@tinyxml2@@QAEXXZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
?Clear@XMLDocument@tinyxml2@@QAEXXZ PROC		; tinyxml2::XMLDocument::Clear, COMDAT
; _this$ = ecx

; 1631 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1632 :     DeleteChildren();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteChildren@XMLNode@tinyxml2@@QAEXXZ ; tinyxml2::XMLNode::DeleteChildren

; 1633 : 
; 1634 :     _errorID = XML_NO_ERROR;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0

; 1635 :     _errorStr1 = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0

; 1636 :     _errorStr2 = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 0

; 1637 : 
; 1638 :     delete [] _charBuffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 1639 :     _charBuffer = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0

; 1640 : 
; 1641 : #if 0
; 1642 :     _textPool.Trace( "text" );
; 1643 :     _elementPool.Trace( "element" );
; 1644 :     _commentPool.Trace( "comment" );
; 1645 :     _attributePool.Trace( "attribute" );
; 1646 : #endif
; 1647 :     
; 1648 : #ifdef DEBUG
; 1649 :     if ( Error() == false ) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Error@XMLDocument@tinyxml2@@QBE_NXZ	; tinyxml2::XMLDocument::Error
	movzx	eax, al
	test	eax, eax
	jne	$LN6@Clear

; 1650 :         TIXMLASSERT( _elementPool.CurrentAllocs()   == _elementPool.Untracked() );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	?CurrentAllocs@?$MemPoolT@$0DE@@tinyxml2@@QBEHXZ ; tinyxml2::MemPoolT<52>::CurrentAllocs
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	?Untracked@?$MemPoolT@$0DE@@tinyxml2@@QBEHXZ ; tinyxml2::MemPoolT<52>::Untracked
	cmp	esi, eax
	je	SHORT $LN4@Clear
	int	3
$LN4@Clear:

; 1651 :         TIXMLASSERT( _attributePool.CurrentAllocs() == _attributePool.Untracked() );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?CurrentAllocs@?$MemPoolT@$0CE@@tinyxml2@@QBEHXZ ; tinyxml2::MemPoolT<36>::CurrentAllocs
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?Untracked@?$MemPoolT@$0CE@@tinyxml2@@QBEHXZ ; tinyxml2::MemPoolT<36>::Untracked
	cmp	esi, eax
	je	SHORT $LN3@Clear
	int	3
$LN3@Clear:

; 1652 :         TIXMLASSERT( _textPool.CurrentAllocs()      == _textPool.Untracked() );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	call	?CurrentAllocs@?$MemPoolT@$0DA@@tinyxml2@@QBEHXZ ; tinyxml2::MemPoolT<48>::CurrentAllocs
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	call	?Untracked@?$MemPoolT@$0DA@@tinyxml2@@QBEHXZ ; tinyxml2::MemPoolT<48>::Untracked
	cmp	esi, eax
	je	SHORT $LN2@Clear
	int	3
$LN2@Clear:

; 1653 :         TIXMLASSERT( _commentPool.CurrentAllocs()   == _commentPool.Untracked() );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	call	?CurrentAllocs@?$MemPoolT@$0CM@@tinyxml2@@QBEHXZ ; tinyxml2::MemPoolT<44>::CurrentAllocs
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	call	?Untracked@?$MemPoolT@$0CM@@tinyxml2@@QBEHXZ ; tinyxml2::MemPoolT<44>::Untracked
	cmp	esi, eax
	je	SHORT $LN6@Clear
	int	3
$LN6@Clear:

; 1654 :     }
; 1655 : #endif
; 1656 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@XMLDocument@tinyxml2@@QAEXXZ ENDP		; tinyxml2::XMLDocument::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?PrintError@XMLDocument@tinyxml2@@QBEXXZ
_TEXT	SEGMENT
_buf2$1 = -68						; size = 20
_buf1$2 = -40						; size = 20
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?PrintError@XMLDocument@tinyxml2@@QBEXXZ PROC		; tinyxml2::XMLDocument::PrintError, COMDAT
; _this$ = ecx

; 1862 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1863 :     if ( _errorID ) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	$LN4@PrintError

; 1864 :         static const int LEN = 20;
; 1865 :         char buf1[LEN] = { 0 };

	mov	BYTE PTR _buf1$2[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _buf1$2[ebp+1], eax
	mov	DWORD PTR _buf1$2[ebp+5], eax
	mov	DWORD PTR _buf1$2[ebp+9], eax
	mov	DWORD PTR _buf1$2[ebp+13], eax
	mov	WORD PTR _buf1$2[ebp+17], ax
	mov	BYTE PTR _buf1$2[ebp+19], al

; 1866 :         char buf2[LEN] = { 0 };

	mov	BYTE PTR _buf2$1[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _buf2$1[ebp+1], eax
	mov	DWORD PTR _buf2$1[ebp+5], eax
	mov	DWORD PTR _buf2$1[ebp+9], eax
	mov	DWORD PTR _buf2$1[ebp+13], eax
	mov	WORD PTR _buf2$1[ebp+17], ax
	mov	BYTE PTR _buf2$1[ebp+19], al

; 1867 : 
; 1868 :         if ( _errorStr1 ) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN2@PrintError

; 1869 :             TIXML_SNPRINTF( buf1, LEN, "%s", _errorStr1 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	20					; 00000014H
	lea	edx, DWORD PTR _buf1$2[ebp]
	push	edx
	call	?TIXML_SNPRINTF@@YAHPADIPBDZZ		; TIXML_SNPRINTF
	add	esp, 16					; 00000010H
$LN2@PrintError:

; 1870 :         }
; 1871 :         if ( _errorStr2 ) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN1@PrintError

; 1872 :             TIXML_SNPRINTF( buf2, LEN, "%s", _errorStr2 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs?$AA@
	push	20					; 00000014H
	lea	edx, DWORD PTR _buf2$1[ebp]
	push	edx
	call	?TIXML_SNPRINTF@@YAHPADIPBDZZ		; TIXML_SNPRINTF
	add	esp, 16					; 00000010H
$LN1@PrintError:

; 1873 :         }
; 1874 : 
; 1875 :         printf( "XMLDocument error id=%d '%s' str1=%s str2=%s\n",
; 1876 :                 _errorID, ErrorName(), buf1, buf2 );

	lea	eax, DWORD PTR _buf2$1[ebp]
	push	eax
	lea	ecx, DWORD PTR _buf1$2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ErrorName@XMLDocument@tinyxml2@@QBEPBDXZ ; tinyxml2::XMLDocument::ErrorName
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	push	OFFSET ??_C@_0CO@CKABJOJH@XMLDocument?5error?5id?$DN?$CFd?5?8?$CFs?8?5str@
	call	_printf
	add	esp, 20					; 00000014H
$LN4@PrintError:

; 1877 :     }
; 1878 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@PrintError
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN9@PrintError:
	DD	2
	DD	$LN8@PrintError
$LN8@PrintError:
	DD	-40					; ffffffd8H
	DD	20					; 00000014H
	DD	$LN6@PrintError
	DD	-68					; ffffffbcH
	DD	20					; 00000014H
	DD	$LN7@PrintError
$LN7@PrintError:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	50					; 00000032H
	DB	0
$LN6@PrintError:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	49					; 00000031H
	DB	0
?PrintError@XMLDocument@tinyxml2@@QBEXXZ ENDP		; tinyxml2::XMLDocument::PrintError
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ErrorName@XMLDocument@tinyxml2@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ErrorName@XMLDocument@tinyxml2@@QBEPBDXZ PROC		; tinyxml2::XMLDocument::ErrorName, COMDAT
; _this$ = ecx

; 1856 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1857 : 	TIXMLASSERT( _errorID >= 0 && _errorID < XML_ERROR_COUNT );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	jl	SHORT $LN1@ErrorName
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 20			; 00000014H
	jl	SHORT $LN2@ErrorName
$LN1@ErrorName:
	int	3
$LN2@ErrorName:

; 1858 : 	return _errorNames[_errorID];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	eax, DWORD PTR ?_errorNames@XMLDocument@tinyxml2@@0PAPBDA[ecx*4]

; 1859 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ErrorName@XMLDocument@tinyxml2@@QBEPBDXZ ENDP		; tinyxml2::XMLDocument::ErrorName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Error@XMLDocument@tinyxml2@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -208						; size = 4
_this$ = -8						; size = 4
?Error@XMLDocument@tinyxml2@@QBE_NXZ PROC		; tinyxml2::XMLDocument::Error, COMDAT
; _this$ = ecx

; 1668 :     bool Error() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1669 :         return _errorID != XML_NO_ERROR;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN3@Error
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Error
$LN3@Error:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Error:
	mov	al, BYTE PTR tv66[ebp]

; 1670 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Error@XMLDocument@tinyxml2@@QBE_NXZ ENDP		; tinyxml2::XMLDocument::Error
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_error$ = 8						; size = 4
_str1$ = 12						; size = 4
_str2$ = 16						; size = 4
?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z PROC ; tinyxml2::XMLDocument::SetError, COMDAT
; _this$ = ecx

; 1848 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1849 :     TIXMLASSERT( error >= 0 && error < XML_ERROR_COUNT );

	cmp	DWORD PTR _error$[ebp], 0
	jl	SHORT $LN1@SetError
	cmp	DWORD PTR _error$[ebp], 20		; 00000014H
	jl	SHORT $LN2@SetError
$LN1@SetError:
	int	3
$LN2@SetError:

; 1850 :     _errorID = error;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [eax+48], ecx

; 1851 :     _errorStr1 = str1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _str1$[ebp]
	mov	DWORD PTR [eax+56], ecx

; 1852 :     _errorStr2 = str2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _str2$[ebp]
	mov	DWORD PTR [eax+60], ecx

; 1853 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ENDP ; tinyxml2::XMLDocument::SetError
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?NewUnknown@XMLDocument@tinyxml2@@QAEPAVXMLUnknown@2@PBD@Z
_TEXT	SEGMENT
tv84 = -268						; size = 4
$T2 = -260						; size = 4
$T3 = -248						; size = 4
$T4 = -236						; size = 4
_unk$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_str$ = 8						; size = 4
?NewUnknown@XMLDocument@tinyxml2@@QAEPAVXMLUnknown@2@PBD@Z PROC ; tinyxml2::XMLDocument::NewUnknown, COMDAT
; _this$ = ecx

; 1696 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?NewUnknown@XMLDocument@tinyxml2@@QAEPAVXMLUnknown@2@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1697 :     XMLUnknown* unk = new (_commentPool.Alloc()) XMLUnknown( this );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+296]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR $T4[ebp]
	push	ecx
	push	44					; 0000002cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@NewUnknown
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0XMLUnknown@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLUnknown::XMLUnknown
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN4@NewUnknown
$LN3@NewUnknown:
	mov	DWORD PTR tv84[ebp], 0
$LN4@NewUnknown:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _unk$[ebp], ecx

; 1698 :     unk->_memPool = &_commentPool;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 296				; 00000128H
	mov	ecx, DWORD PTR _unk$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 1699 :     unk->SetValue( str );

	push	0
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _unk$[ebp]
	call	?SetValue@XMLNode@tinyxml2@@QAEXPBD_N@Z	; tinyxml2::XMLNode::SetValue

; 1700 :     return unk;

	mov	eax, DWORD PTR _unk$[ebp]

; 1701 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?NewUnknown@XMLDocument@tinyxml2@@QAEPAVXMLUnknown@2@PBD@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?NewUnknown@XMLDocument@tinyxml2@@QAEPAVXMLUnknown@2@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?NewUnknown@XMLDocument@tinyxml2@@QAEPAVXMLUnknown@2@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?NewUnknown@XMLDocument@tinyxml2@@QAEPAVXMLUnknown@2@PBD@Z ENDP ; tinyxml2::XMLDocument::NewUnknown
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?NewDeclaration@XMLDocument@tinyxml2@@QAEPAVXMLDeclaration@2@PBD@Z
_TEXT	SEGMENT
tv133 = -268						; size = 4
tv84 = -268						; size = 4
$T2 = -260						; size = 4
$T3 = -248						; size = 4
$T4 = -236						; size = 4
_dec$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_str$ = 8						; size = 4
?NewDeclaration@XMLDocument@tinyxml2@@QAEPAVXMLDeclaration@2@PBD@Z PROC ; tinyxml2::XMLDocument::NewDeclaration, COMDAT
; _this$ = ecx

; 1687 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?NewDeclaration@XMLDocument@tinyxml2@@QAEPAVXMLDeclaration@2@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1688 :     XMLDeclaration* dec = new (_commentPool.Alloc()) XMLDeclaration( this );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+296]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR $T4[ebp]
	push	ecx
	push	44					; 0000002cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@NewDeclara
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0XMLDeclaration@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLDeclaration::XMLDeclaration
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN4@NewDeclara
$LN3@NewDeclara:
	mov	DWORD PTR tv84[ebp], 0
$LN4@NewDeclara:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _dec$[ebp], ecx

; 1689 :     dec->_memPool = &_commentPool;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 296				; 00000128H
	mov	ecx, DWORD PTR _dec$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 1690 :     dec->SetValue( str ? str : "xml version=\"1.0\" encoding=\"UTF-8\"" );

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN5@NewDeclara
	mov	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN6@NewDeclara
$LN5@NewDeclara:
	mov	DWORD PTR tv133[ebp], OFFSET ??_C@_0CD@MCGGMGEP@xml?5version?$DN?$CC1?40?$CC?5encoding?$DN?$CCUTF?9@
$LN6@NewDeclara:
	push	0
	mov	ecx, DWORD PTR tv133[ebp]
	push	ecx
	mov	ecx, DWORD PTR _dec$[ebp]
	call	?SetValue@XMLNode@tinyxml2@@QAEXPBD_N@Z	; tinyxml2::XMLNode::SetValue

; 1691 :     return dec;

	mov	eax, DWORD PTR _dec$[ebp]

; 1692 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?NewDeclaration@XMLDocument@tinyxml2@@QAEPAVXMLDeclaration@2@PBD@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?NewDeclaration@XMLDocument@tinyxml2@@QAEPAVXMLDeclaration@2@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?NewDeclaration@XMLDocument@tinyxml2@@QAEPAVXMLDeclaration@2@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?NewDeclaration@XMLDocument@tinyxml2@@QAEPAVXMLDeclaration@2@PBD@Z ENDP ; tinyxml2::XMLDocument::NewDeclaration
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?NewText@XMLDocument@tinyxml2@@QAEPAVXMLText@2@PBD@Z
_TEXT	SEGMENT
tv84 = -268						; size = 4
$T2 = -260						; size = 4
$T3 = -248						; size = 4
$T4 = -236						; size = 4
_text$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_str$ = 8						; size = 4
?NewText@XMLDocument@tinyxml2@@QAEPAVXMLText@2@PBD@Z PROC ; tinyxml2::XMLDocument::NewText, COMDAT
; _this$ = ecx

; 1678 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?NewText@XMLDocument@tinyxml2@@QAEPAVXMLText@2@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1679 :     XMLText* text = new (_textPool.Alloc()) XMLText( this );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+220]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR $T4[ebp]
	push	ecx
	push	48					; 00000030H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@NewText
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0XMLText@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLText::XMLText
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN4@NewText
$LN3@NewText:
	mov	DWORD PTR tv84[ebp], 0
$LN4@NewText:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _text$[ebp], ecx

; 1680 :     text->_memPool = &_textPool;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 220				; 000000dcH
	mov	ecx, DWORD PTR _text$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 1681 :     text->SetValue( str );

	push	0
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	call	?SetValue@XMLNode@tinyxml2@@QAEXPBD_N@Z	; tinyxml2::XMLNode::SetValue

; 1682 :     return text;

	mov	eax, DWORD PTR _text$[ebp]

; 1683 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?NewText@XMLDocument@tinyxml2@@QAEPAVXMLText@2@PBD@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?NewText@XMLDocument@tinyxml2@@QAEPAVXMLText@2@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?NewText@XMLDocument@tinyxml2@@QAEPAVXMLText@2@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?NewText@XMLDocument@tinyxml2@@QAEPAVXMLText@2@PBD@Z ENDP ; tinyxml2::XMLDocument::NewText
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?NewComment@XMLDocument@tinyxml2@@QAEPAVXMLComment@2@PBD@Z
_TEXT	SEGMENT
tv84 = -268						; size = 4
$T2 = -260						; size = 4
$T3 = -248						; size = 4
$T4 = -236						; size = 4
_comment$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_str$ = 8						; size = 4
?NewComment@XMLDocument@tinyxml2@@QAEPAVXMLComment@2@PBD@Z PROC ; tinyxml2::XMLDocument::NewComment, COMDAT
; _this$ = ecx

; 1669 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?NewComment@XMLDocument@tinyxml2@@QAEPAVXMLComment@2@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1670 :     XMLComment* comment = new (_commentPool.Alloc()) XMLComment( this );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+296]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR $T4[ebp]
	push	ecx
	push	44					; 0000002cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@NewComment
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0XMLComment@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLComment::XMLComment
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN4@NewComment
$LN3@NewComment:
	mov	DWORD PTR tv84[ebp], 0
$LN4@NewComment:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _comment$[ebp], ecx

; 1671 :     comment->_memPool = &_commentPool;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 296				; 00000128H
	mov	ecx, DWORD PTR _comment$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 1672 :     comment->SetValue( str );

	push	0
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _comment$[ebp]
	call	?SetValue@XMLNode@tinyxml2@@QAEXPBD_N@Z	; tinyxml2::XMLNode::SetValue

; 1673 :     return comment;

	mov	eax, DWORD PTR _comment$[ebp]

; 1674 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?NewComment@XMLDocument@tinyxml2@@QAEPAVXMLComment@2@PBD@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?NewComment@XMLDocument@tinyxml2@@QAEPAVXMLComment@2@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?NewComment@XMLDocument@tinyxml2@@QAEPAVXMLComment@2@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?NewComment@XMLDocument@tinyxml2@@QAEPAVXMLComment@2@PBD@Z ENDP ; tinyxml2::XMLDocument::NewComment
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?NewElement@XMLDocument@tinyxml2@@QAEPAVXMLElement@2@PBD@Z
_TEXT	SEGMENT
tv84 = -268						; size = 4
$T2 = -260						; size = 4
$T3 = -248						; size = 4
$T4 = -236						; size = 4
_ele$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
?NewElement@XMLDocument@tinyxml2@@QAEPAVXMLElement@2@PBD@Z PROC ; tinyxml2::XMLDocument::NewElement, COMDAT
; _this$ = ecx

; 1660 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?NewElement@XMLDocument@tinyxml2@@QAEPAVXMLElement@2@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1661 :     XMLElement* ele = new (_elementPool.Alloc()) XMLElement( this );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+68]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR $T4[ebp]
	push	ecx
	push	52					; 00000034H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@NewElement
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0XMLElement@tinyxml2@@AAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLElement::XMLElement
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN4@NewElement
$LN3@NewElement:
	mov	DWORD PTR tv84[ebp], 0
$LN4@NewElement:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _ele$[ebp], ecx

; 1662 :     ele->_memPool = &_elementPool;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 68					; 00000044H
	mov	ecx, DWORD PTR _ele$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 1663 :     ele->SetName( name );

	push	0
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ele$[ebp]
	call	?SetName@XMLElement@tinyxml2@@QAEXPBD_N@Z ; tinyxml2::XMLElement::SetName

; 1664 :     return ele;

	mov	eax, DWORD PTR _ele$[ebp]

; 1665 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?NewElement@XMLDocument@tinyxml2@@QAEPAVXMLElement@2@PBD@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?NewElement@XMLDocument@tinyxml2@@QAEPAVXMLElement@2@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?NewElement@XMLDocument@tinyxml2@@QAEPAVXMLElement@2@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?NewElement@XMLDocument@tinyxml2@@QAEPAVXMLElement@2@PBD@Z ENDP ; tinyxml2::XMLDocument::NewElement
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?Accept@XMLDocument@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z
_TEXT	SEGMENT
_node$1 = -20						; size = 4
_this$ = -8						; size = 4
_visitor$ = 8						; size = 4
?Accept@XMLDocument@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z PROC ; tinyxml2::XMLDocument::Accept, COMDAT
; _this$ = ecx

; 552  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 553  :     if ( visitor->VisitEnter( *this ) ) {

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _visitor$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _visitor$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@Accept

; 554  :         for ( const XMLNode* node=FirstChild(); node; node=node->NextSibling() ) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
	mov	DWORD PTR _node$1[ebp], eax
	jmp	SHORT $LN4@Accept
$LN3@Accept:
	mov	ecx, DWORD PTR _node$1[ebp]
	call	?NextSibling@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::NextSibling
	mov	DWORD PTR _node$1[ebp], eax
$LN4@Accept:
	cmp	DWORD PTR _node$1[ebp], 0
	je	SHORT $LN5@Accept

; 555  :             if ( !node->Accept( visitor ) ) {

	mov	esi, esp
	mov	eax, DWORD PTR _visitor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _node$1[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _node$1[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@Accept

; 556  :                 break;

	jmp	SHORT $LN5@Accept
$LN1@Accept:

; 557  :             }
; 558  :         }

	jmp	SHORT $LN3@Accept
$LN5@Accept:

; 559  :     }
; 560  :     return visitor->VisitExit( *this );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _visitor$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _visitor$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 561  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Accept@XMLDocument@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z ENDP ; tinyxml2::XMLDocument::Accept
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?Print@XMLDocument@tinyxml2@@QBEXPAVXMLPrinter@2@@Z
_TEXT	SEGMENT
_stdStreamer$ = -272					; size = 240
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_streamer$ = 8						; size = 4
?Print@XMLDocument@tinyxml2@@QBEXPAVXMLPrinter@2@@Z PROC ; tinyxml2::XMLDocument::Print, COMDAT
; _this$ = ecx

; 1838 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Print@XMLDocument@tinyxml2@@QBEXPAVXMLPrinter@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 456				; 000001c8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-468]
	mov	ecx, 114				; 00000072H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1839 :     XMLPrinter stdStreamer( stdout );

	push	0
	push	0
	call	___iob_func
	mov	ecx, 32					; 00000020H
	shl	ecx, 0
	add	eax, ecx
	push	eax
	lea	ecx, DWORD PTR _stdStreamer$[ebp]
	call	??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z ; tinyxml2::XMLPrinter::XMLPrinter
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1840 :     if ( !streamer ) {

	cmp	DWORD PTR _streamer$[ebp], 0
	jne	SHORT $LN1@Print

; 1841 :         streamer = &stdStreamer;

	lea	eax, DWORD PTR _stdStreamer$[ebp]
	mov	DWORD PTR _streamer$[ebp], eax
$LN1@Print:

; 1842 :     }
; 1843 :     Accept( streamer );

	mov	esi, esp
	mov	eax, DWORD PTR _streamer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1844 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _stdStreamer$[ebp]
	call	??1XMLPrinter@tinyxml2@@UAE@XZ		; tinyxml2::XMLPrinter::~XMLPrinter
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Print
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 468				; 000001d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN8@Print:
	DD	1
	DD	$LN7@Print
$LN7@Print:
	DD	-272					; fffffef0H
	DD	240					; 000000f0H
	DD	$LN5@Print
$LN5@Print:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	100					; 00000064H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Print@XMLDocument@tinyxml2@@QBEXPAVXMLPrinter@2@@Z$0:
	lea	ecx, DWORD PTR _stdStreamer$[ebp]
	jmp	??1XMLPrinter@tinyxml2@@UAE@XZ		; tinyxml2::XMLPrinter::~XMLPrinter
__ehhandler$?Print@XMLDocument@tinyxml2@@QBEXPAVXMLPrinter@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-472]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Print@XMLDocument@tinyxml2@@QBEXPAVXMLPrinter@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Print@XMLDocument@tinyxml2@@QBEXPAVXMLPrinter@2@@Z ENDP ; tinyxml2::XMLDocument::Print
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?HasBOM@XMLDocument@tinyxml2@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?HasBOM@XMLDocument@tinyxml2@@QBE_NXZ PROC		; tinyxml2::XMLDocument::HasBOM, COMDAT
; _this$ = ecx

; 1584 :     bool HasBOM() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1585 :         return _writeBOM;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+44]

; 1586 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?HasBOM@XMLDocument@tinyxml2@@QBE_NXZ ENDP		; tinyxml2::XMLDocument::HasBOM
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?WhitespaceMode@XMLDocument@tinyxml2@@QBE?AW4Whitespace@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?WhitespaceMode@XMLDocument@tinyxml2@@QBE?AW4Whitespace@2@XZ PROC ; tinyxml2::XMLDocument::WhitespaceMode, COMDAT
; _this$ = ecx

; 1577 :     Whitespace WhitespaceMode() const	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1578 :         return _whitespace;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+52]

; 1579 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?WhitespaceMode@XMLDocument@tinyxml2@@QBE?AW4Whitespace@2@XZ ENDP ; tinyxml2::XMLDocument::WhitespaceMode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ProcessEntities@XMLDocument@tinyxml2@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ProcessEntities@XMLDocument@tinyxml2@@QBE_NXZ PROC	; tinyxml2::XMLDocument::ProcessEntities, COMDAT
; _this$ = ecx

; 1574 :     bool ProcessEntities() const		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1575 :         return _processEntities;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+45]

; 1576 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ProcessEntities@XMLDocument@tinyxml2@@QBE_NXZ ENDP	; tinyxml2::XMLDocument::ProcessEntities
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@_N@Z
_TEXT	SEGMENT
$T2 = -476						; size = 4
_stream$ = -272						; size = 240
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_fp$ = 8						; size = 4
_compact$ = 12						; size = 1
?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@_N@Z PROC ; tinyxml2::XMLDocument::SaveFile, COMDAT
; _this$ = ecx

; 1791 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 468				; 000001d4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-480]
	mov	ecx, 117				; 00000075H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1792 :     XMLPrinter stream( fp, compact );

	push	0
	movzx	eax, BYTE PTR _compact$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _stream$[ebp]
	call	??0XMLPrinter@tinyxml2@@QAE@PAU_iobuf@@_NH@Z ; tinyxml2::XMLPrinter::XMLPrinter
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1793 :     Print( &stream );

	lea	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Print@XMLDocument@tinyxml2@@QBEXPAVXMLPrinter@2@@Z ; tinyxml2::XMLDocument::Print

; 1794 :     return _errorID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _stream$[ebp]
	call	??1XMLPrinter@tinyxml2@@UAE@XZ		; tinyxml2::XMLPrinter::~XMLPrinter
	mov	eax, DWORD PTR $T2[ebp]

; 1795 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@SaveFile
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 480				; 000001e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN7@SaveFile:
	DD	1
	DD	$LN6@SaveFile
$LN6@SaveFile:
	DD	-272					; fffffef0H
	DD	240					; 000000f0H
	DD	$LN4@SaveFile
$LN4@SaveFile:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@_N@Z$0:
	lea	ecx, DWORD PTR _stream$[ebp]
	jmp	??1XMLPrinter@tinyxml2@@UAE@XZ		; tinyxml2::XMLPrinter::~XMLPrinter
__ehhandler$?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-484]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@_N@Z ENDP ; tinyxml2::XMLDocument::SaveFile
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PBD_N@Z
_TEXT	SEGMENT
_fp$ = -20						; size = 4
_this$ = -8						; size = 4
_filename$ = 8						; size = 4
_compact$ = 12						; size = 1
?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PBD_N@Z PROC ; tinyxml2::XMLDocument::SaveFile, COMDAT
; _this$ = ecx

; 1778 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1779 :     FILE* fp = callfopen( filename, "w" );

	push	OFFSET ??_C@_01NOFIACDB@w?$AA@
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	?callfopen@tinyxml2@@YAPAU_iobuf@@PBD0@Z ; tinyxml2::callfopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 1780 :     if ( !fp ) {

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN1@SaveFile

; 1781 :         SetError( XML_ERROR_FILE_COULD_NOT_BE_OPENED, filename, 0 );

	push	0
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError

; 1782 :         return _errorID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]
	jmp	SHORT $LN2@SaveFile
$LN1@SaveFile:

; 1783 :     }
; 1784 :     SaveFile(fp, compact);

	movzx	eax, BYTE PTR _compact$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fp$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@_N@Z ; tinyxml2::XMLDocument::SaveFile

; 1785 :     fclose( fp );

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 1786 :     return _errorID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]
$LN2@SaveFile:

; 1787 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SaveFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PBD_N@Z ENDP ; tinyxml2::XMLDocument::SaveFile
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?LoadFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@@Z
_TEXT	SEGMENT
$T1 = -260						; size = 4
_p$ = -56						; size = 4
_read$ = -44						; size = 4
_size$ = -32						; size = 4
_filelength$ = -20					; size = 4
_this$ = -8						; size = 4
_fp$ = 8						; size = 4
?LoadFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@@Z PROC ; tinyxml2::XMLDocument::LoadFile, COMDAT
; _this$ = ecx

; 1732 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 :     Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@XMLDocument@tinyxml2@@QAEXXZ	; tinyxml2::XMLDocument::Clear

; 1734 : 
; 1735 :     fseek( fp, 0, SEEK_SET );

	push	0
	push	0
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fseek
	add	esp, 12					; 0000000cH

; 1736 :     if ( fgetc( fp ) == EOF && ferror( fp ) != 0 ) {

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fgetc
	add	esp, 4
	cmp	eax, -1
	jne	SHORT $LN6@LoadFile
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_ferror
	add	esp, 4
	test	eax, eax
	je	SHORT $LN6@LoadFile

; 1737 :         SetError( XML_ERROR_FILE_READ_ERROR, 0, 0 );

	push	0
	push	0
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError

; 1738 :         return _errorID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]
	jmp	$LN7@LoadFile
$LN6@LoadFile:

; 1739 :     }
; 1740 : 
; 1741 :     fseek( fp, 0, SEEK_END );

	push	2
	push	0
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fseek
	add	esp, 12					; 0000000cH

; 1742 :     const long filelength = ftell( fp );

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_ftell
	add	esp, 4
	mov	DWORD PTR _filelength$[ebp], eax

; 1743 :     fseek( fp, 0, SEEK_SET );

	push	0
	push	0
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fseek
	add	esp, 12					; 0000000cH

; 1744 :     if ( filelength == -1L ) {

	cmp	DWORD PTR _filelength$[ebp], -1
	jne	SHORT $LN5@LoadFile

; 1745 :         SetError( XML_ERROR_FILE_READ_ERROR, 0, 0 );

	push	0
	push	0
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError

; 1746 :         return _errorID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]
	jmp	$LN7@LoadFile
$LN5@LoadFile:

; 1747 :     }
; 1748 : 
; 1749 :     const size_t size = filelength;

	mov	eax, DWORD PTR _filelength$[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 1750 :     if ( size == 0 ) {

	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN4@LoadFile

; 1751 :         SetError( XML_ERROR_EMPTY_DOCUMENT, 0, 0 );

	push	0
	push	0
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError

; 1752 :         return _errorID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]
	jmp	$LN7@LoadFile
$LN4@LoadFile:

; 1753 :     }
; 1754 : 
; 1755 :     _charBuffer = new char[size+1];

	mov	eax, DWORD PTR _size$[ebp]
	add	eax, 1
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+64], edx

; 1756 :     size_t read = fread( _charBuffer, 1, size, fp );

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	call	_fread
	add	esp, 16					; 00000010H
	mov	DWORD PTR _read$[ebp], eax

; 1757 :     if ( read != size ) {

	mov	eax, DWORD PTR _read$[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	je	SHORT $LN3@LoadFile

; 1758 :         SetError( XML_ERROR_FILE_READ_ERROR, 0, 0 );

	push	0
	push	0
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError

; 1759 :         return _errorID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]
	jmp	$LN7@LoadFile
$LN3@LoadFile:

; 1760 :     }
; 1761 : 
; 1762 :     _charBuffer[size] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _size$[ebp]
	mov	BYTE PTR [ecx+edx], 0

; 1763 : 
; 1764 :     const char* p = _charBuffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _p$[ebp], ecx

; 1765 :     p = XMLUtil::SkipWhiteSpace( p );

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPBDPBD@Z ; tinyxml2::XMLUtil::SkipWhiteSpace
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax

; 1766 :     p = XMLUtil::ReadBOM( p, &_writeBOM );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 44					; 0000002cH
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?ReadBOM@XMLUtil@tinyxml2@@SAPBDPBDPA_N@Z ; tinyxml2::XMLUtil::ReadBOM
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax

; 1767 :     if ( !p || !*p ) {

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN1@LoadFile
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN2@LoadFile
$LN1@LoadFile:

; 1768 :         SetError( XML_ERROR_EMPTY_DOCUMENT, 0, 0 );

	push	0
	push	0
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError

; 1769 :         return _errorID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]
	jmp	SHORT $LN7@LoadFile
$LN2@LoadFile:

; 1770 :     }
; 1771 : 
; 1772 :     ParseDeep( _charBuffer + (p-_charBuffer), 0 );

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+64]
	push	ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1773 :     return _errorID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]
$LN7@LoadFile:

; 1774 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?LoadFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@@Z ENDP ; tinyxml2::XMLDocument::LoadFile
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?LoadFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PBD@Z
_TEXT	SEGMENT
_fp$ = -20						; size = 4
_this$ = -8						; size = 4
_filename$ = 8						; size = 4
?LoadFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PBD@Z PROC ; tinyxml2::XMLDocument::LoadFile, COMDAT
; _this$ = ecx

; 1718 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1719 :     Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@XMLDocument@tinyxml2@@QAEXXZ	; tinyxml2::XMLDocument::Clear

; 1720 :     FILE* fp = callfopen( filename, "rb" );

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	?callfopen@tinyxml2@@YAPAU_iobuf@@PBD0@Z ; tinyxml2::callfopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 1721 :     if ( !fp ) {

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN1@LoadFile

; 1722 :         SetError( XML_ERROR_FILE_NOT_FOUND, filename, 0 );

	push	0
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError

; 1723 :         return _errorID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]
	jmp	SHORT $LN2@LoadFile
$LN1@LoadFile:

; 1724 :     }
; 1725 :     LoadFile( fp );

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PAU_iobuf@@@Z ; tinyxml2::XMLDocument::LoadFile

; 1726 :     fclose( fp );

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 1727 :     return _errorID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]
$LN2@LoadFile:

; 1728 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?LoadFile@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PBD@Z ENDP ; tinyxml2::XMLDocument::LoadFile
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?Parse@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PBDI@Z
_TEXT	SEGMENT
$T1 = -236						; size = 4
_delta$ = -32						; size = 4
_start$ = -20						; size = 4
_this$ = -8						; size = 4
_p$ = 8							; size = 4
_len$ = 12						; size = 4
?Parse@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PBDI@Z PROC ; tinyxml2::XMLDocument::Parse, COMDAT
; _this$ = ecx

; 1799 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1800 : 	const char* start = p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _start$[ebp], eax

; 1801 :     Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@XMLDocument@tinyxml2@@QAEXXZ	; tinyxml2::XMLDocument::Clear

; 1802 : 
; 1803 :     if ( len == 0 || !p || !*p ) {

	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN5@Parse
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN5@Parse
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN6@Parse
$LN5@Parse:

; 1804 :         SetError( XML_ERROR_EMPTY_DOCUMENT, 0, 0 );

	push	0
	push	0
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError

; 1805 :         return _errorID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]
	jmp	$LN7@Parse
$LN6@Parse:

; 1806 :     }
; 1807 :     if ( len == (size_t)(-1) ) {

	cmp	DWORD PTR _len$[ebp], -1
	jne	SHORT $LN4@Parse

; 1808 :         len = strlen( p );

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax
$LN4@Parse:

; 1809 :     }
; 1810 :     _charBuffer = new char[ len+1 ];

	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+64], edx

; 1811 :     memcpy( _charBuffer, p, len );

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1812 :     _charBuffer[len] = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [ecx+edx], 0

; 1813 : 
; 1814 :     p = XMLUtil::SkipWhiteSpace( p );

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPBDPBD@Z ; tinyxml2::XMLUtil::SkipWhiteSpace
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax

; 1815 :     p = XMLUtil::ReadBOM( p, &_writeBOM );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 44					; 0000002cH
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?ReadBOM@XMLUtil@tinyxml2@@SAPBDPBDPA_N@Z ; tinyxml2::XMLUtil::ReadBOM
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax

; 1816 :     if ( !p || !*p ) {

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@Parse
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@Parse
$LN2@Parse:

; 1817 :         SetError( XML_ERROR_EMPTY_DOCUMENT, 0, 0 );

	push	0
	push	0
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError

; 1818 :         return _errorID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]
	jmp	$LN7@Parse
$LN3@Parse:

; 1819 :     }
; 1820 : 
; 1821 :     ptrdiff_t delta = p - start;	// skip initial whitespace, BOM, etc.

	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _delta$[ebp], eax

; 1822 :     ParseDeep( _charBuffer+delta, 0 );

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	add	ecx, DWORD PTR _delta$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+60]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1823 :     if (_errorID) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	$LN1@Parse

; 1824 :         // clean up now essentially dangling memory.
; 1825 :         // and the parse fail can put objects in the
; 1826 :         // pools that are dead and inaccessible.
; 1827 :         DeleteChildren();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteChildren@XMLNode@tinyxml2@@QAEXXZ ; tinyxml2::XMLNode::DeleteChildren

; 1828 :         _elementPool.Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+68]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1829 :         _attributePool.Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+144]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1830 :         _textPool.Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+220]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1831 :         _commentPool.Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+296]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Parse:

; 1832 :     }
; 1833 :     return _errorID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]
$LN7@Parse:

; 1834 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Parse@XMLDocument@tinyxml2@@QAE?AW4XMLError@2@PBDI@Z ENDP ; tinyxml2::XMLDocument::Parse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ToDocument@XMLDocument@tinyxml2@@UBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToDocument@XMLDocument@tinyxml2@@UBEPBV12@XZ PROC	; tinyxml2::XMLDocument::ToDocument, COMDAT
; _this$ = ecx

; 1526 :     virtual const XMLDocument* ToDocument() const	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1527 :         return this;

	mov	eax, DWORD PTR _this$[ebp]

; 1528 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDocument@XMLDocument@tinyxml2@@UBEPBV12@XZ ENDP	; tinyxml2::XMLDocument::ToDocument
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ToDocument@XMLDocument@tinyxml2@@UAEPAV12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToDocument@XMLDocument@tinyxml2@@UAEPAV12@XZ PROC	; tinyxml2::XMLDocument::ToDocument, COMDAT
; _this$ = ecx

; 1523 :     virtual XMLDocument* ToDocument()				{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1524 :         return this;

	mov	eax, DWORD PTR _this$[ebp]

; 1525 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDocument@XMLDocument@tinyxml2@@UAEPAV12@XZ ENDP	; tinyxml2::XMLDocument::ToDocument
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ??1XMLDocument@tinyxml2@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1XMLDocument@tinyxml2@@UAE@XZ PROC			; tinyxml2::XMLDocument::~XMLDocument, COMDAT
; _this$ = ecx

; 1625 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1XMLDocument@tinyxml2@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7XMLDocument@tinyxml2@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 4

; 1626 :     Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@XMLDocument@tinyxml2@@QAEXXZ	; tinyxml2::XMLDocument::Clear

; 1627 : }

	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	call	??1?$MemPoolT@$0CM@@tinyxml2@@UAE@XZ	; tinyxml2::MemPoolT<44>::~MemPoolT<44>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	call	??1?$MemPoolT@$0DA@@tinyxml2@@UAE@XZ	; tinyxml2::MemPoolT<48>::~MemPoolT<48>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	??1?$MemPoolT@$0CE@@tinyxml2@@UAE@XZ	; tinyxml2::MemPoolT<36>::~MemPoolT<36>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??1?$MemPoolT@$0DE@@tinyxml2@@UAE@XZ	; tinyxml2::MemPoolT<52>::~MemPoolT<52>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1XMLNode@tinyxml2@@MAE@XZ		; tinyxml2::XMLNode::~XMLNode
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1XMLDocument@tinyxml2@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1XMLNode@tinyxml2@@MAE@XZ		; tinyxml2::XMLNode::~XMLNode
__unwindfunclet$??1XMLDocument@tinyxml2@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	jmp	??1?$MemPoolT@$0DE@@tinyxml2@@UAE@XZ	; tinyxml2::MemPoolT<52>::~MemPoolT<52>
__unwindfunclet$??1XMLDocument@tinyxml2@@UAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	jmp	??1?$MemPoolT@$0CE@@tinyxml2@@UAE@XZ	; tinyxml2::MemPoolT<36>::~MemPoolT<36>
__unwindfunclet$??1XMLDocument@tinyxml2@@UAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	jmp	??1?$MemPoolT@$0DA@@tinyxml2@@UAE@XZ	; tinyxml2::MemPoolT<48>::~MemPoolT<48>
__unwindfunclet$??1XMLDocument@tinyxml2@@UAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	jmp	??1?$MemPoolT@$0CM@@tinyxml2@@UAE@XZ	; tinyxml2::MemPoolT<44>::~MemPoolT<44>
__ehhandler$??1XMLDocument@tinyxml2@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1XMLDocument@tinyxml2@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1XMLDocument@tinyxml2@@UAE@XZ ENDP			; tinyxml2::XMLDocument::~XMLDocument
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_processEntities$ = 8					; size = 1
_whitespace$ = 12					; size = 4
??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z PROC	; tinyxml2::XMLDocument::XMLDocument, COMDAT
; _this$ = ecx

; 1619 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0XMLNode@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLNode::XMLNode
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7XMLDocument@tinyxml2@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+44], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _processEntities$[ebp]
	mov	BYTE PTR [eax+45], cl
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _whitespace$[ebp]
	mov	DWORD PTR [eax+52], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??0?$MemPoolT@$0DE@@tinyxml2@@QAE@XZ	; tinyxml2::MemPoolT<52>::MemPoolT<52>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	??0?$MemPoolT@$0CE@@tinyxml2@@QAE@XZ	; tinyxml2::MemPoolT<36>::MemPoolT<36>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	call	??0?$MemPoolT@$0DA@@tinyxml2@@QAE@XZ	; tinyxml2::MemPoolT<48>::MemPoolT<48>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 296				; 00000128H
	call	??0?$MemPoolT@$0CM@@tinyxml2@@QAE@XZ	; tinyxml2::MemPoolT<44>::MemPoolT<44>

; 1620 :     _document = this;	// avoid warning about 'this' in initializer list

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1621 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1XMLNode@tinyxml2@@MAE@XZ		; tinyxml2::XMLNode::~XMLNode
__unwindfunclet$??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	jmp	??1?$MemPoolT@$0DE@@tinyxml2@@UAE@XZ	; tinyxml2::MemPoolT<52>::~MemPoolT<52>
__unwindfunclet$??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	jmp	??1?$MemPoolT@$0CE@@tinyxml2@@UAE@XZ	; tinyxml2::MemPoolT<36>::~MemPoolT<36>
__unwindfunclet$??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 220				; 000000dcH
	jmp	??1?$MemPoolT@$0DA@@tinyxml2@@UAE@XZ	; tinyxml2::MemPoolT<48>::~MemPoolT<48>
__ehhandler$??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0XMLDocument@tinyxml2@@QAE@_NW4Whitespace@1@@Z ENDP	; tinyxml2::XMLDocument::XMLDocument
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GXMLElement@tinyxml2@@EAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GXMLElement@tinyxml2@@EAEPAXI@Z PROC			; tinyxml2::XMLElement::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1XMLElement@tinyxml2@@EAE@XZ		; tinyxml2::XMLElement::~XMLElement
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GXMLElement@tinyxml2@@EAEPAXI@Z ENDP			; tinyxml2::XMLElement::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?DeleteAttribute@XMLElement@tinyxml2@@CAXPAVXMLAttribute@2@@Z
_TEXT	SEGMENT
_pool$ = -8						; size = 4
_attribute$ = 8						; size = 4
?DeleteAttribute@XMLElement@tinyxml2@@CAXPAVXMLAttribute@2@@Z PROC ; tinyxml2::XMLElement::DeleteAttribute, COMDAT

; 1487 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1488 :     if ( attribute == 0 ) {

	cmp	DWORD PTR _attribute$[ebp], 0
	jne	SHORT $LN1@DeleteAttr

; 1489 :         return;

	jmp	SHORT $LN2@DeleteAttr
$LN1@DeleteAttr:

; 1490 :     }
; 1491 :     MemPool* pool = attribute->_memPool;

	mov	eax, DWORD PTR _attribute$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _pool$[ebp], ecx

; 1492 :     attribute->~XMLAttribute();

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _attribute$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _attribute$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1493 :     pool->Free( attribute );

	mov	esi, esp
	mov	eax, DWORD PTR _attribute$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pool$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pool$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DeleteAttr:

; 1494 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteAttribute@XMLElement@tinyxml2@@CAXPAVXMLAttribute@2@@Z ENDP ; tinyxml2::XMLElement::DeleteAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ParseAttributes@XMLElement@tinyxml2@@AAEPADPAD@Z
_TEXT	SEGMENT
tv142 = -292						; size = 4
$T2 = -284						; size = 4
$T3 = -272						; size = 4
$T4 = -260						; size = 4
_attrib$5 = -56						; size = 4
_prevAttribute$ = -44					; size = 4
_start$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
?ParseAttributes@XMLElement@tinyxml2@@AAEPADPAD@Z PROC	; tinyxml2::XMLElement::ParseAttributes, COMDAT
; _this$ = ecx

; 1431 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ParseAttributes@XMLElement@tinyxml2@@AAEPADPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1432 :     const char* start = p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _start$[ebp], eax

; 1433 :     XMLAttribute* prevAttribute = 0;

	mov	DWORD PTR _prevAttribute$[ebp], 0
$LN14@ParseAttri:

; 1434 : 
; 1435 :     // Read the attributes.
; 1436 :     while( p ) {

	cmp	DWORD PTR _p$[ebp], 0
	je	$LN13@ParseAttri

; 1437 :         p = XMLUtil::SkipWhiteSpace( p );

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPADPAD@Z ; tinyxml2::XMLUtil::SkipWhiteSpace
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax

; 1438 :         if ( !p || !(*p) ) {

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN11@ParseAttri
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN12@ParseAttri
$LN11@ParseAttri:

; 1439 :             _document->SetError( XML_ERROR_PARSING_ELEMENT, start, Name() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Name@XMLElement@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLElement::Name
	push	eax
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError

; 1440 :             return 0;

	xor	eax, eax
	jmp	$LN15@ParseAttri
$LN12@ParseAttri:

; 1441 :         }
; 1442 : 
; 1443 :         // attribute.
; 1444 :         if (XMLUtil::IsNameStartChar( *p ) ) {

	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	?IsNameStartChar@XMLUtil@tinyxml2@@SA_NE@Z ; tinyxml2::XMLUtil::IsNameStartChar
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	je	$LN10@ParseAttri

; 1445 :             XMLAttribute* attrib = new (_document->_attributePool.Alloc() ) XMLAttribute();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 144				; 00000090H
	mov	edx, DWORD PTR [ecx+144]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR $T4[ebp]
	push	ecx
	push	36					; 00000024H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN17@ParseAttri
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0XMLAttribute@tinyxml2@@AAE@XZ	; tinyxml2::XMLAttribute::XMLAttribute
	mov	DWORD PTR tv142[ebp], eax
	jmp	SHORT $LN18@ParseAttri
$LN17@ParseAttri:
	mov	DWORD PTR tv142[ebp], 0
$LN18@ParseAttri:
	mov	edx, DWORD PTR tv142[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR _attrib$5[ebp], eax

; 1446 :             attrib->_memPool = &_document->_attributePool;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 144				; 00000090H
	mov	edx, DWORD PTR _attrib$5[ebp]
	mov	DWORD PTR [edx+32], ecx

; 1447 : 			attrib->_memPool->SetTracked();

	mov	eax, DWORD PTR _attrib$5[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _attrib$5[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1448 : 
; 1449 :             p = attrib->ParseDeep( p, _document->ProcessEntities() );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?ProcessEntities@XMLDocument@tinyxml2@@QBE_NXZ ; tinyxml2::XMLDocument::ProcessEntities
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR _attrib$5[ebp]
	call	?ParseDeep@XMLAttribute@tinyxml2@@AAEPADPAD_N@Z ; tinyxml2::XMLAttribute::ParseDeep
	mov	DWORD PTR _p$[ebp], eax

; 1450 :             if ( !p || Attribute( attrib->Name() ) ) {

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN8@ParseAttri
	push	0
	mov	ecx, DWORD PTR _attrib$5[ebp]
	call	?Name@XMLAttribute@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLAttribute::Name
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Attribute@XMLElement@tinyxml2@@QBEPBDPBD0@Z ; tinyxml2::XMLElement::Attribute
	test	eax, eax
	je	SHORT $LN9@ParseAttri
$LN8@ParseAttri:

; 1451 :                 DeleteAttribute( attrib );

	mov	eax, DWORD PTR _attrib$5[ebp]
	push	eax
	call	?DeleteAttribute@XMLElement@tinyxml2@@CAXPAVXMLAttribute@2@@Z ; tinyxml2::XMLElement::DeleteAttribute
	add	esp, 4

; 1452 :                 _document->SetError( XML_ERROR_PARSING_ATTRIBUTE, start, p );

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError

; 1453 :                 return 0;

	xor	eax, eax
	jmp	$LN15@ParseAttri
$LN9@ParseAttri:

; 1454 :             }
; 1455 :             // There is a minor bug here: if the attribute in the source xml
; 1456 :             // document is duplicated, it will not be detected and the
; 1457 :             // attribute will be doubly added. However, tracking the 'prevAttribute'
; 1458 :             // avoids re-scanning the attribute list. Preferring performance for
; 1459 :             // now, may reconsider in the future.
; 1460 :             if ( prevAttribute ) {

	cmp	DWORD PTR _prevAttribute$[ebp], 0
	je	SHORT $LN7@ParseAttri

; 1461 :                 prevAttribute->_next = attrib;

	mov	eax, DWORD PTR _prevAttribute$[ebp]
	mov	ecx, DWORD PTR _attrib$5[ebp]
	mov	DWORD PTR [eax+28], ecx

; 1462 :             }
; 1463 :             else {

	jmp	SHORT $LN6@ParseAttri
$LN7@ParseAttri:

; 1464 :                 _rootAttribute = attrib;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _attrib$5[ebp]
	mov	DWORD PTR [eax+48], ecx
$LN6@ParseAttri:

; 1465 :             }
; 1466 :             prevAttribute = attrib;

	mov	eax, DWORD PTR _attrib$5[ebp]
	mov	DWORD PTR _prevAttribute$[ebp], eax
	jmp	SHORT $LN5@ParseAttri
$LN10@ParseAttri:

; 1467 :         }
; 1468 :         // end of the tag
; 1469 :         else if ( *p == '/' && *(p+1) == '>' ) {

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 47					; 0000002fH
	jne	SHORT $LN4@ParseAttri
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	cmp	ecx, 62					; 0000003eH
	jne	SHORT $LN4@ParseAttri

; 1470 :             _closingType = CLOSED;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 1

; 1471 :             return p+2;	// done; sealed element.

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	jmp	SHORT $LN15@ParseAttri
	jmp	SHORT $LN5@ParseAttri
$LN4@ParseAttri:

; 1472 :         }
; 1473 :         // end of the tag
; 1474 :         else if ( *p == '>' ) {

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 62					; 0000003eH
	jne	SHORT $LN2@ParseAttri

; 1475 :             ++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 1476 :             break;

	jmp	SHORT $LN13@ParseAttri

; 1477 :         }
; 1478 :         else {

	jmp	SHORT $LN5@ParseAttri
$LN2@ParseAttri:

; 1479 :             _document->SetError( XML_ERROR_PARSING_ELEMENT, start, p );

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	push	7
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError

; 1480 :             return 0;

	xor	eax, eax
	jmp	SHORT $LN15@ParseAttri
$LN5@ParseAttri:

; 1481 :         }
; 1482 :     }

	jmp	$LN14@ParseAttri
$LN13@ParseAttri:

; 1483 :     return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN15@ParseAttri:

; 1484 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ParseAttributes@XMLElement@tinyxml2@@AAEPADPAD@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?ParseAttributes@XMLElement@tinyxml2@@AAEPADPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-296]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ParseAttributes@XMLElement@tinyxml2@@AAEPADPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ParseAttributes@XMLElement@tinyxml2@@AAEPADPAD@Z ENDP	; tinyxml2::XMLElement::ParseAttributes
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?FindOrCreateAttribute@XMLElement@tinyxml2@@AAEPAVXMLAttribute@2@PBD@Z
_TEXT	SEGMENT
tv133 = -280						; size = 4
$T2 = -272						; size = 4
$T3 = -260						; size = 4
$T4 = -248						; size = 4
_attrib$ = -44						; size = 4
_last$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
?FindOrCreateAttribute@XMLElement@tinyxml2@@AAEPAVXMLAttribute@2@PBD@Z PROC ; tinyxml2::XMLElement::FindOrCreateAttribute, COMDAT
; _this$ = ecx

; 1385 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindOrCreateAttribute@XMLElement@tinyxml2@@AAEPAVXMLAttribute@2@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1386 :     XMLAttribute* last = 0;

	mov	DWORD PTR _last$[ebp], 0

; 1387 :     XMLAttribute* attrib = 0;

	mov	DWORD PTR _attrib$[ebp], 0

; 1388 :     for( attrib = _rootAttribute;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _attrib$[ebp], ecx

; 1389 :             attrib;

	jmp	SHORT $LN7@FindOrCrea
$LN6@FindOrCrea:

; 1390 :             last = attrib, attrib = attrib->_next ) {

	mov	eax, DWORD PTR _attrib$[ebp]
	mov	DWORD PTR _last$[ebp], eax
	mov	ecx, DWORD PTR _attrib$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _attrib$[ebp], edx
$LN7@FindOrCrea:
	cmp	DWORD PTR _attrib$[ebp], 0
	je	SHORT $LN5@FindOrCrea

; 1391 :         if ( XMLUtil::StringEqual( attrib->Name(), name ) ) {

	push	2147483647				; 7fffffffH
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _attrib$[ebp]
	call	?Name@XMLAttribute@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLAttribute::Name
	push	eax
	call	?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
	add	esp, 12					; 0000000cH
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN4@FindOrCrea

; 1392 :             break;

	jmp	SHORT $LN5@FindOrCrea
$LN4@FindOrCrea:

; 1393 :         }
; 1394 :     }

	jmp	SHORT $LN6@FindOrCrea
$LN5@FindOrCrea:

; 1395 :     if ( !attrib ) {

	cmp	DWORD PTR _attrib$[ebp], 0
	jne	$LN3@FindOrCrea

; 1396 :         attrib = new (_document->_attributePool.Alloc() ) XMLAttribute();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 144				; 00000090H
	mov	edx, DWORD PTR [ecx+144]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR $T4[ebp]
	push	ecx
	push	36					; 00000024H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN10@FindOrCrea
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0XMLAttribute@tinyxml2@@AAE@XZ	; tinyxml2::XMLAttribute::XMLAttribute
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN11@FindOrCrea
$LN10@FindOrCrea:
	mov	DWORD PTR tv133[ebp], 0
$LN11@FindOrCrea:
	mov	edx, DWORD PTR tv133[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR _attrib$[ebp], eax

; 1397 :         attrib->_memPool = &_document->_attributePool;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 144				; 00000090H
	mov	edx, DWORD PTR _attrib$[ebp]
	mov	DWORD PTR [edx+32], ecx

; 1398 :         if ( last ) {

	cmp	DWORD PTR _last$[ebp], 0
	je	SHORT $LN2@FindOrCrea

; 1399 :             last->_next = attrib;

	mov	eax, DWORD PTR _last$[ebp]
	mov	ecx, DWORD PTR _attrib$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 1400 :         }
; 1401 :         else {

	jmp	SHORT $LN1@FindOrCrea
$LN2@FindOrCrea:

; 1402 :             _rootAttribute = attrib;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _attrib$[ebp]
	mov	DWORD PTR [eax+48], ecx
$LN1@FindOrCrea:

; 1403 :         }
; 1404 :         attrib->SetName( name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _attrib$[ebp]
	call	?SetName@XMLAttribute@tinyxml2@@AAEXPBD@Z ; tinyxml2::XMLAttribute::SetName

; 1405 :         attrib->_memPool->SetTracked(); // always created and linked.

	mov	eax, DWORD PTR _attrib$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _attrib$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@FindOrCrea:

; 1406 :     }
; 1407 :     return attrib;

	mov	eax, DWORD PTR _attrib$[ebp]

; 1408 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FindOrCreateAttribute@XMLElement@tinyxml2@@AAEPAVXMLAttribute@2@PBD@Z$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?FindOrCreateAttribute@XMLElement@tinyxml2@@AAEPAVXMLAttribute@2@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-284]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindOrCreateAttribute@XMLElement@tinyxml2@@AAEPAVXMLAttribute@2@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindOrCreateAttribute@XMLElement@tinyxml2@@AAEPAVXMLAttribute@2@PBD@Z ENDP ; tinyxml2::XMLElement::FindOrCreateAttribute
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?FindAttribute@XMLElement@tinyxml2@@AAEPAVXMLAttribute@2@PBD@Z
_TEXT	SEGMENT
_a$1 = -20						; size = 4
_this$ = -8						; size = 4
_name$ = 8						; size = 4
?FindAttribute@XMLElement@tinyxml2@@AAEPAVXMLAttribute@2@PBD@Z PROC ; tinyxml2::XMLElement::FindAttribute, COMDAT
; _this$ = ecx

; 1224 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1225 :     for( XMLAttribute* a = _rootAttribute; a; a = a->_next ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _a$1[ebp], ecx
	jmp	SHORT $LN4@FindAttrib
$LN3@FindAttrib:
	mov	eax, DWORD PTR _a$1[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _a$1[ebp], ecx
$LN4@FindAttrib:
	cmp	DWORD PTR _a$1[ebp], 0
	je	SHORT $LN2@FindAttrib

; 1226 :         if ( XMLUtil::StringEqual( a->Name(), name ) ) {

	push	2147483647				; 7fffffffH
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$1[ebp]
	call	?Name@XMLAttribute@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLAttribute::Name
	push	eax
	call	?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
	add	esp, 12					; 0000000cH
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@FindAttrib

; 1227 :             return a;

	mov	eax, DWORD PTR _a$1[ebp]
	jmp	SHORT $LN5@FindAttrib
$LN1@FindAttrib:

; 1228 :         }
; 1229 :     }

	jmp	SHORT $LN3@FindAttrib
$LN2@FindAttrib:

; 1230 :     return 0;

	xor	eax, eax
$LN5@FindAttrib:

; 1231 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FindAttribute@XMLElement@tinyxml2@@AAEPAVXMLAttribute@2@PBD@Z ENDP ; tinyxml2::XMLElement::FindAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ??1XMLElement@tinyxml2@@EAE@XZ
_TEXT	SEGMENT
_next$2 = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1XMLElement@tinyxml2@@EAE@XZ PROC			; tinyxml2::XMLElement::~XMLElement, COMDAT
; _this$ = ecx

; 1214 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1XMLElement@tinyxml2@@EAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7XMLElement@tinyxml2@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
$LN2@XMLElement:

; 1215 :     while( _rootAttribute ) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN3@XMLElement

; 1216 :         XMLAttribute* next = _rootAttribute->_next;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _next$2[ebp], edx

; 1217 :         DeleteAttribute( _rootAttribute );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	?DeleteAttribute@XMLElement@tinyxml2@@CAXPAVXMLAttribute@2@@Z ; tinyxml2::XMLElement::DeleteAttribute
	add	esp, 4

; 1218 :         _rootAttribute = next;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _next$2[ebp]
	mov	DWORD PTR [eax+48], ecx

; 1219 :     }

	jmp	SHORT $LN2@XMLElement
$LN3@XMLElement:

; 1220 : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1XMLNode@tinyxml2@@MAE@XZ		; tinyxml2::XMLNode::~XMLNode
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1XMLElement@tinyxml2@@EAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1XMLNode@tinyxml2@@MAE@XZ		; tinyxml2::XMLNode::~XMLNode
__ehhandler$??1XMLElement@tinyxml2@@EAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1XMLElement@tinyxml2@@EAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1XMLElement@tinyxml2@@EAE@XZ ENDP			; tinyxml2::XMLElement::~XMLElement
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ??0XMLElement@tinyxml2@@AAE@PAVXMLDocument@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_doc$ = 8						; size = 4
??0XMLElement@tinyxml2@@AAE@PAVXMLDocument@1@@Z PROC	; tinyxml2::XMLElement::XMLElement, COMDAT
; _this$ = ecx

; 1209 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0XMLNode@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLNode::XMLNode
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7XMLElement@tinyxml2@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0

; 1210 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0XMLElement@tinyxml2@@AAE@PAVXMLDocument@1@@Z ENDP	; tinyxml2::XMLElement::XMLElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ShallowEqual@XMLElement@tinyxml2@@UBE_NPBVXMLNode@2@@Z
_TEXT	SEGMENT
_b$1 = -44						; size = 4
_a$2 = -32						; size = 4
_other$ = -20						; size = 4
_this$ = -8						; size = 4
_compare$ = 8						; size = 4
?ShallowEqual@XMLElement@tinyxml2@@UBE_NPBVXMLNode@2@@Z PROC ; tinyxml2::XMLElement::ShallowEqual, COMDAT
; _this$ = ecx

; 1546 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1547 :     const XMLElement* other = compare->ToElement();

	mov	eax, DWORD PTR _compare$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _compare$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _other$[ebp], eax

; 1548 :     if ( other && XMLUtil::StringEqual( other->Value(), Value() )) {

	cmp	DWORD PTR _other$[ebp], 0
	je	$LN6@ShallowEqu
	push	2147483647				; 7fffffffH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value
	push	eax
	mov	ecx, DWORD PTR _other$[ebp]
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value
	push	eax
	call	?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
	add	esp, 12					; 0000000cH
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@ShallowEqu

; 1549 : 
; 1550 :         const XMLAttribute* a=FirstAttribute();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstAttribute@XMLElement@tinyxml2@@QBEPBVXMLAttribute@2@XZ ; tinyxml2::XMLElement::FirstAttribute
	mov	DWORD PTR _a$2[ebp], eax

; 1551 :         const XMLAttribute* b=other->FirstAttribute();

	mov	ecx, DWORD PTR _other$[ebp]
	call	?FirstAttribute@XMLElement@tinyxml2@@QBEPBVXMLAttribute@2@XZ ; tinyxml2::XMLElement::FirstAttribute
	mov	DWORD PTR _b$1[ebp], eax
$LN5@ShallowEqu:

; 1552 : 
; 1553 :         while ( a && b ) {

	cmp	DWORD PTR _a$2[ebp], 0
	je	SHORT $LN4@ShallowEqu
	cmp	DWORD PTR _b$1[ebp], 0
	je	SHORT $LN4@ShallowEqu

; 1554 :             if ( !XMLUtil::StringEqual( a->Value(), b->Value() ) ) {

	push	2147483647				; 7fffffffH
	mov	ecx, DWORD PTR _b$1[ebp]
	call	?Value@XMLAttribute@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLAttribute::Value
	push	eax
	mov	ecx, DWORD PTR _a$2[ebp]
	call	?Value@XMLAttribute@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLAttribute::Value
	push	eax
	call	?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
	add	esp, 12					; 0000000cH
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@ShallowEqu

; 1555 :                 return false;

	xor	al, al
	jmp	SHORT $LN7@ShallowEqu
$LN3@ShallowEqu:

; 1556 :             }
; 1557 :             a = a->Next();

	mov	ecx, DWORD PTR _a$2[ebp]
	call	?Next@XMLAttribute@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLAttribute::Next
	mov	DWORD PTR _a$2[ebp], eax

; 1558 :             b = b->Next();

	mov	ecx, DWORD PTR _b$1[ebp]
	call	?Next@XMLAttribute@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLAttribute::Next
	mov	DWORD PTR _b$1[ebp], eax

; 1559 :         }

	jmp	SHORT $LN5@ShallowEqu
$LN4@ShallowEqu:

; 1560 :         if ( a || b ) {

	cmp	DWORD PTR _a$2[ebp], 0
	jne	SHORT $LN1@ShallowEqu
	cmp	DWORD PTR _b$1[ebp], 0
	je	SHORT $LN2@ShallowEqu
$LN1@ShallowEqu:

; 1561 :             // different count
; 1562 :             return false;

	xor	al, al
	jmp	SHORT $LN7@ShallowEqu
$LN2@ShallowEqu:

; 1563 :         }
; 1564 :         return true;

	mov	al, 1
	jmp	SHORT $LN7@ShallowEqu
$LN6@ShallowEqu:

; 1565 :     }
; 1566 :     return false;

	xor	al, al
$LN7@ShallowEqu:

; 1567 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ShallowEqual@XMLElement@tinyxml2@@UBE_NPBVXMLNode@2@@Z ENDP ; tinyxml2::XMLElement::ShallowEqual
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ShallowClone@XMLElement@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z
_TEXT	SEGMENT
_a$1 = -32						; size = 4
_element$ = -20						; size = 4
_this$ = -8						; size = 4
_doc$ = 8						; size = 4
?ShallowClone@XMLElement@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z PROC ; tinyxml2::XMLElement::ShallowClone, COMDAT
; _this$ = ecx

; 1533 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1534 :     if ( !doc ) {

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN4@ShallowClo

; 1535 :         doc = _document;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _doc$[ebp], ecx
$LN4@ShallowClo:

; 1536 :     }
; 1537 :     XMLElement* element = doc->NewElement( Value() );					// fixme: this will always allocate memory. Intern?

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	call	?NewElement@XMLDocument@tinyxml2@@QAEPAVXMLElement@2@PBD@Z ; tinyxml2::XMLDocument::NewElement
	mov	DWORD PTR _element$[ebp], eax

; 1538 :     for( const XMLAttribute* a=FirstAttribute(); a; a=a->Next() ) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstAttribute@XMLElement@tinyxml2@@QBEPBVXMLAttribute@2@XZ ; tinyxml2::XMLElement::FirstAttribute
	mov	DWORD PTR _a$1[ebp], eax
	jmp	SHORT $LN3@ShallowClo
$LN2@ShallowClo:
	mov	ecx, DWORD PTR _a$1[ebp]
	call	?Next@XMLAttribute@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLAttribute::Next
	mov	DWORD PTR _a$1[ebp], eax
$LN3@ShallowClo:
	cmp	DWORD PTR _a$1[ebp], 0
	je	SHORT $LN1@ShallowClo

; 1539 :         element->SetAttribute( a->Name(), a->Value() );					// fixme: this will always allocate memory. Intern?

	mov	ecx, DWORD PTR _a$1[ebp]
	call	?Value@XMLAttribute@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLAttribute::Value
	push	eax
	mov	ecx, DWORD PTR _a$1[ebp]
	call	?Name@XMLAttribute@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLAttribute::Name
	push	eax
	mov	ecx, DWORD PTR _element$[ebp]
	call	?SetAttribute@XMLElement@tinyxml2@@QAEXPBD0@Z ; tinyxml2::XMLElement::SetAttribute

; 1540 :     }

	jmp	SHORT $LN2@ShallowClo
$LN1@ShallowClo:

; 1541 :     return element;

	mov	eax, DWORD PTR _element$[ebp]

; 1542 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ShallowClone@XMLElement@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z ENDP ; tinyxml2::XMLElement::ShallowClone
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ParseDeep@XMLElement@tinyxml2@@UAEPADPADPAVStrPair@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_p$ = 8							; size = 4
_strPair$ = 12						; size = 4
?ParseDeep@XMLElement@tinyxml2@@UAEPADPADPAVStrPair@2@@Z PROC ; tinyxml2::XMLElement::ParseDeep, COMDAT
; _this$ = ecx

; 1501 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1502 :     // Read the element name.
; 1503 :     p = XMLUtil::SkipWhiteSpace( p );

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPADPAD@Z ; tinyxml2::XMLUtil::SkipWhiteSpace
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax

; 1504 :     if ( !p ) {

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN5@ParseDeep

; 1505 :         return 0;

	xor	eax, eax
	jmp	$LN6@ParseDeep
$LN5@ParseDeep:

; 1506 :     }
; 1507 : 
; 1508 :     // The closing element is the </element> form. It is
; 1509 :     // parsed just like a regular element then deleted from
; 1510 :     // the DOM.
; 1511 :     if ( *p == '/' ) {

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 47					; 0000002fH
	jne	SHORT $LN4@ParseDeep

; 1512 :         _closingType = CLOSING;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 2

; 1513 :         ++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN4@ParseDeep:

; 1514 :     }
; 1515 : 
; 1516 :     p = _value.ParseName( p );

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?ParseName@StrPair@tinyxml2@@QAEPADPAD@Z ; tinyxml2::StrPair::ParseName
	mov	DWORD PTR _p$[ebp], eax

; 1517 :     if ( _value.Empty() ) {

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Empty@StrPair@tinyxml2@@QBE_NXZ	; tinyxml2::StrPair::Empty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@ParseDeep

; 1518 :         return 0;

	xor	eax, eax
	jmp	SHORT $LN6@ParseDeep
$LN3@ParseDeep:

; 1519 :     }
; 1520 : 
; 1521 :     p = ParseAttributes( p );

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ParseAttributes@XMLElement@tinyxml2@@AAEPADPAD@Z ; tinyxml2::XMLElement::ParseAttributes
	mov	DWORD PTR _p$[ebp], eax

; 1522 :     if ( !p || !*p || _closingType ) {

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN1@ParseDeep
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN1@ParseDeep
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN2@ParseDeep
$LN1@ParseDeep:

; 1523 :         return p;

	mov	eax, DWORD PTR _p$[ebp]
	jmp	SHORT $LN6@ParseDeep
$LN2@ParseDeep:

; 1524 :     }
; 1525 : 
; 1526 :     p = XMLNode::ParseDeep( p, strPair );

	mov	eax, DWORD PTR _strPair$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ParseDeep@XMLNode@tinyxml2@@UAEPADPADPAVStrPair@2@@Z ; tinyxml2::XMLNode::ParseDeep
	mov	DWORD PTR _p$[ebp], eax

; 1527 :     return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN6@ParseDeep:

; 1528 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ParseDeep@XMLElement@tinyxml2@@UAEPADPADPAVStrPair@2@@Z ENDP ; tinyxml2::XMLElement::ParseDeep
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ClosingType@XMLElement@tinyxml2@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ClosingType@XMLElement@tinyxml2@@QBEHXZ PROC		; tinyxml2::XMLElement::ClosingType, COMDAT
; _this$ = ecx

; 1476 :     int ClosingType() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1477 :         return _closingType;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+44]

; 1478 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ClosingType@XMLElement@tinyxml2@@QBEHXZ ENDP		; tinyxml2::XMLElement::ClosingType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?QueryFloatText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PAM@Z
_TEXT	SEGMENT
tv78 = -220						; size = 4
_t$1 = -20						; size = 4
_this$ = -8						; size = 4
_fval$ = 8						; size = 4
?QueryFloatText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PAM@Z PROC ; tinyxml2::XMLElement::QueryFloatText, COMDAT
; _this$ = ecx

; 1371 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1372 :     if ( FirstChild() && FirstChild()->ToText() ) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
	test	eax, eax
	je	SHORT $LN2@QueryFloat
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
	mov	DWORD PTR tv78[ebp], eax
	mov	eax, DWORD PTR tv78[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR tv78[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@QueryFloat

; 1373 :         const char* t = FirstChild()->Value();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
	mov	ecx, eax
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value
	mov	DWORD PTR _t$1[ebp], eax

; 1374 :         if ( XMLUtil::ToFloat( t, fval ) ) {

	mov	eax, DWORD PTR _fval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$1[ebp]
	push	ecx
	call	?ToFloat@XMLUtil@tinyxml2@@SA_NPBDPAM@Z	; tinyxml2::XMLUtil::ToFloat
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@QueryFloat

; 1375 :             return XML_SUCCESS;

	xor	eax, eax
	jmp	SHORT $LN3@QueryFloat
$LN1@QueryFloat:

; 1376 :         }
; 1377 :         return XML_CAN_NOT_CONVERT_TEXT;

	mov	eax, 18					; 00000012H
	jmp	SHORT $LN3@QueryFloat
$LN2@QueryFloat:

; 1378 :     }
; 1379 :     return XML_NO_TEXT_NODE;

	mov	eax, 19					; 00000013H
$LN3@QueryFloat:

; 1380 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?QueryFloatText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PAM@Z ENDP ; tinyxml2::XMLElement::QueryFloatText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?QueryDoubleText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PAN@Z
_TEXT	SEGMENT
tv78 = -220						; size = 4
_t$1 = -20						; size = 4
_this$ = -8						; size = 4
_dval$ = 8						; size = 4
?QueryDoubleText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PAN@Z PROC ; tinyxml2::XMLElement::QueryDoubleText, COMDAT
; _this$ = ecx

; 1358 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1359 :     if ( FirstChild() && FirstChild()->ToText() ) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
	test	eax, eax
	je	SHORT $LN2@QueryDoubl
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
	mov	DWORD PTR tv78[ebp], eax
	mov	eax, DWORD PTR tv78[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR tv78[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@QueryDoubl

; 1360 :         const char* t = FirstChild()->Value();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
	mov	ecx, eax
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value
	mov	DWORD PTR _t$1[ebp], eax

; 1361 :         if ( XMLUtil::ToDouble( t, dval ) ) {

	mov	eax, DWORD PTR _dval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$1[ebp]
	push	ecx
	call	?ToDouble@XMLUtil@tinyxml2@@SA_NPBDPAN@Z ; tinyxml2::XMLUtil::ToDouble
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@QueryDoubl

; 1362 :             return XML_SUCCESS;

	xor	eax, eax
	jmp	SHORT $LN3@QueryDoubl
$LN1@QueryDoubl:

; 1363 :         }
; 1364 :         return XML_CAN_NOT_CONVERT_TEXT;

	mov	eax, 18					; 00000012H
	jmp	SHORT $LN3@QueryDoubl
$LN2@QueryDoubl:

; 1365 :     }
; 1366 :     return XML_NO_TEXT_NODE;

	mov	eax, 19					; 00000013H
$LN3@QueryDoubl:

; 1367 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?QueryDoubleText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PAN@Z ENDP ; tinyxml2::XMLElement::QueryDoubleText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?QueryBoolText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PA_N@Z
_TEXT	SEGMENT
tv78 = -220						; size = 4
_t$1 = -20						; size = 4
_this$ = -8						; size = 4
_bval$ = 8						; size = 4
?QueryBoolText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PA_N@Z PROC ; tinyxml2::XMLElement::QueryBoolText, COMDAT
; _this$ = ecx

; 1345 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1346 :     if ( FirstChild() && FirstChild()->ToText() ) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
	test	eax, eax
	je	SHORT $LN2@QueryBoolT
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
	mov	DWORD PTR tv78[ebp], eax
	mov	eax, DWORD PTR tv78[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR tv78[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@QueryBoolT

; 1347 :         const char* t = FirstChild()->Value();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
	mov	ecx, eax
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value
	mov	DWORD PTR _t$1[ebp], eax

; 1348 :         if ( XMLUtil::ToBool( t, bval ) ) {

	mov	eax, DWORD PTR _bval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$1[ebp]
	push	ecx
	call	?ToBool@XMLUtil@tinyxml2@@SA_NPBDPA_N@Z	; tinyxml2::XMLUtil::ToBool
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@QueryBoolT

; 1349 :             return XML_SUCCESS;

	xor	eax, eax
	jmp	SHORT $LN3@QueryBoolT
$LN1@QueryBoolT:

; 1350 :         }
; 1351 :         return XML_CAN_NOT_CONVERT_TEXT;

	mov	eax, 18					; 00000012H
	jmp	SHORT $LN3@QueryBoolT
$LN2@QueryBoolT:

; 1352 :     }
; 1353 :     return XML_NO_TEXT_NODE;

	mov	eax, 19					; 00000013H
$LN3@QueryBoolT:

; 1354 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?QueryBoolText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PA_N@Z ENDP ; tinyxml2::XMLElement::QueryBoolText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?QueryUnsignedText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PAI@Z
_TEXT	SEGMENT
tv78 = -220						; size = 4
_t$1 = -20						; size = 4
_this$ = -8						; size = 4
_uval$ = 8						; size = 4
?QueryUnsignedText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PAI@Z PROC ; tinyxml2::XMLElement::QueryUnsignedText, COMDAT
; _this$ = ecx

; 1332 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1333 :     if ( FirstChild() && FirstChild()->ToText() ) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
	test	eax, eax
	je	SHORT $LN2@QueryUnsig
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
	mov	DWORD PTR tv78[ebp], eax
	mov	eax, DWORD PTR tv78[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR tv78[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@QueryUnsig

; 1334 :         const char* t = FirstChild()->Value();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
	mov	ecx, eax
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value
	mov	DWORD PTR _t$1[ebp], eax

; 1335 :         if ( XMLUtil::ToUnsigned( t, uval ) ) {

	mov	eax, DWORD PTR _uval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$1[ebp]
	push	ecx
	call	?ToUnsigned@XMLUtil@tinyxml2@@SA_NPBDPAI@Z ; tinyxml2::XMLUtil::ToUnsigned
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@QueryUnsig

; 1336 :             return XML_SUCCESS;

	xor	eax, eax
	jmp	SHORT $LN3@QueryUnsig
$LN1@QueryUnsig:

; 1337 :         }
; 1338 :         return XML_CAN_NOT_CONVERT_TEXT;

	mov	eax, 18					; 00000012H
	jmp	SHORT $LN3@QueryUnsig
$LN2@QueryUnsig:

; 1339 :     }
; 1340 :     return XML_NO_TEXT_NODE;

	mov	eax, 19					; 00000013H
$LN3@QueryUnsig:

; 1341 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?QueryUnsignedText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PAI@Z ENDP ; tinyxml2::XMLElement::QueryUnsignedText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?QueryIntText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PAH@Z
_TEXT	SEGMENT
tv78 = -220						; size = 4
_t$1 = -20						; size = 4
_this$ = -8						; size = 4
_ival$ = 8						; size = 4
?QueryIntText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PAH@Z PROC ; tinyxml2::XMLElement::QueryIntText, COMDAT
; _this$ = ecx

; 1319 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1320 :     if ( FirstChild() && FirstChild()->ToText() ) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
	test	eax, eax
	je	SHORT $LN2@QueryIntTe
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
	mov	DWORD PTR tv78[ebp], eax
	mov	eax, DWORD PTR tv78[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR tv78[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@QueryIntTe

; 1321 :         const char* t = FirstChild()->Value();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
	mov	ecx, eax
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value
	mov	DWORD PTR _t$1[ebp], eax

; 1322 :         if ( XMLUtil::ToInt( t, ival ) ) {

	mov	eax, DWORD PTR _ival$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$1[ebp]
	push	ecx
	call	?ToInt@XMLUtil@tinyxml2@@SA_NPBDPAH@Z	; tinyxml2::XMLUtil::ToInt
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@QueryIntTe

; 1323 :             return XML_SUCCESS;

	xor	eax, eax
	jmp	SHORT $LN3@QueryIntTe
$LN1@QueryIntTe:

; 1324 :         }
; 1325 :         return XML_CAN_NOT_CONVERT_TEXT;

	mov	eax, 18					; 00000012H
	jmp	SHORT $LN3@QueryIntTe
$LN2@QueryIntTe:

; 1326 :     }
; 1327 :     return XML_NO_TEXT_NODE;

	mov	eax, 19					; 00000013H
$LN3@QueryIntTe:

; 1328 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?QueryIntText@XMLElement@tinyxml2@@QBE?AW4XMLError@2@PAH@Z ENDP ; tinyxml2::XMLElement::QueryIntText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?SetText@XMLElement@tinyxml2@@QAEXM@Z
_TEXT	SEGMENT
_buf$ = -220						; size = 200
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_v$ = 8							; size = 4
?SetText@XMLElement@tinyxml2@@QAEXM@Z PROC		; tinyxml2::XMLElement::SetText, COMDAT
; _this$ = ecx

; 1303 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-416]
	mov	ecx, 104				; 00000068H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1304 :     char buf[BUF_SIZE];
; 1305 :     XMLUtil::ToStr( v, buf, BUF_SIZE );

	push	200					; 000000c8H
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?ToStr@XMLUtil@tinyxml2@@SAXMPADH@Z	; tinyxml2::XMLUtil::ToStr
	add	esp, 12					; 0000000cH

; 1306 :     SetText( buf );

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetText@XMLElement@tinyxml2@@QAEXPBD@Z	; tinyxml2::XMLElement::SetText

; 1307 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@SetText
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 416				; 000001a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN5@SetText:
	DD	1
	DD	$LN4@SetText
$LN4@SetText:
	DD	-220					; ffffff24H
	DD	200					; 000000c8H
	DD	$LN3@SetText
$LN3@SetText:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?SetText@XMLElement@tinyxml2@@QAEXM@Z ENDP		; tinyxml2::XMLElement::SetText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?SetText@XMLElement@tinyxml2@@QAEXN@Z
_TEXT	SEGMENT
_buf$ = -220						; size = 200
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_v$ = 8							; size = 8
?SetText@XMLElement@tinyxml2@@QAEXN@Z PROC		; tinyxml2::XMLElement::SetText, COMDAT
; _this$ = ecx

; 1311 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-416]
	mov	ecx, 104				; 00000068H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1312 :     char buf[BUF_SIZE];
; 1313 :     XMLUtil::ToStr( v, buf, BUF_SIZE );

	push	200					; 000000c8H
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	sub	esp, 8
	movsd	xmm0, QWORD PTR _v$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?ToStr@XMLUtil@tinyxml2@@SAXNPADH@Z	; tinyxml2::XMLUtil::ToStr
	add	esp, 16					; 00000010H

; 1314 :     SetText( buf );

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetText@XMLElement@tinyxml2@@QAEXPBD@Z	; tinyxml2::XMLElement::SetText

; 1315 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@SetText
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 416				; 000001a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN5@SetText:
	DD	1
	DD	$LN4@SetText
$LN4@SetText:
	DD	-220					; ffffff24H
	DD	200					; 000000c8H
	DD	$LN3@SetText
$LN3@SetText:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?SetText@XMLElement@tinyxml2@@QAEXN@Z ENDP		; tinyxml2::XMLElement::SetText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?SetText@XMLElement@tinyxml2@@QAEX_N@Z
_TEXT	SEGMENT
_buf$ = -220						; size = 200
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_v$ = 8							; size = 1
?SetText@XMLElement@tinyxml2@@QAEX_N@Z PROC		; tinyxml2::XMLElement::SetText, COMDAT
; _this$ = ecx

; 1295 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-416]
	mov	ecx, 104				; 00000068H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1296 :     char buf[BUF_SIZE];
; 1297 :     XMLUtil::ToStr( v, buf, BUF_SIZE );

	push	200					; 000000c8H
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _v$[ebp]
	push	ecx
	call	?ToStr@XMLUtil@tinyxml2@@SAX_NPADH@Z	; tinyxml2::XMLUtil::ToStr
	add	esp, 12					; 0000000cH

; 1298 :     SetText( buf );

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetText@XMLElement@tinyxml2@@QAEXPBD@Z	; tinyxml2::XMLElement::SetText

; 1299 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@SetText
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 416				; 000001a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN5@SetText:
	DD	1
	DD	$LN4@SetText
$LN4@SetText:
	DD	-220					; ffffff24H
	DD	200					; 000000c8H
	DD	$LN3@SetText
$LN3@SetText:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?SetText@XMLElement@tinyxml2@@QAEX_N@Z ENDP		; tinyxml2::XMLElement::SetText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?SetText@XMLElement@tinyxml2@@QAEXI@Z
_TEXT	SEGMENT
_buf$ = -220						; size = 200
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_v$ = 8							; size = 4
?SetText@XMLElement@tinyxml2@@QAEXI@Z PROC		; tinyxml2::XMLElement::SetText, COMDAT
; _this$ = ecx

; 1287 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-416]
	mov	ecx, 104				; 00000068H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1288 :     char buf[BUF_SIZE];
; 1289 :     XMLUtil::ToStr( v, buf, BUF_SIZE );

	push	200					; 000000c8H
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	?ToStr@XMLUtil@tinyxml2@@SAXIPADH@Z	; tinyxml2::XMLUtil::ToStr
	add	esp, 12					; 0000000cH

; 1290 :     SetText( buf );

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetText@XMLElement@tinyxml2@@QAEXPBD@Z	; tinyxml2::XMLElement::SetText

; 1291 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@SetText
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 416				; 000001a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN5@SetText:
	DD	1
	DD	$LN4@SetText
$LN4@SetText:
	DD	-220					; ffffff24H
	DD	200					; 000000c8H
	DD	$LN3@SetText
$LN3@SetText:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?SetText@XMLElement@tinyxml2@@QAEXI@Z ENDP		; tinyxml2::XMLElement::SetText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?SetText@XMLElement@tinyxml2@@QAEXH@Z
_TEXT	SEGMENT
_buf$ = -220						; size = 200
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_v$ = 8							; size = 4
?SetText@XMLElement@tinyxml2@@QAEXH@Z PROC		; tinyxml2::XMLElement::SetText, COMDAT
; _this$ = ecx

; 1279 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-416]
	mov	ecx, 104				; 00000068H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1280 :     char buf[BUF_SIZE];
; 1281 :     XMLUtil::ToStr( v, buf, BUF_SIZE );

	push	200					; 000000c8H
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	?ToStr@XMLUtil@tinyxml2@@SAXHPADH@Z	; tinyxml2::XMLUtil::ToStr
	add	esp, 12					; 0000000cH

; 1282 :     SetText( buf );

	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetText@XMLElement@tinyxml2@@QAEXPBD@Z	; tinyxml2::XMLElement::SetText

; 1283 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@SetText
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 416				; 000001a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN5@SetText:
	DD	1
	DD	$LN4@SetText
$LN4@SetText:
	DD	-220					; ffffff24H
	DD	200					; 000000c8H
	DD	$LN3@SetText
$LN3@SetText:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?SetText@XMLElement@tinyxml2@@QAEXH@Z ENDP		; tinyxml2::XMLElement::SetText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?SetText@XMLElement@tinyxml2@@QAEXPBD@Z
_TEXT	SEGMENT
tv78 = -220						; size = 4
_theText$1 = -20					; size = 4
_this$ = -8						; size = 4
_inText$ = 8						; size = 4
?SetText@XMLElement@tinyxml2@@QAEXPBD@Z PROC		; tinyxml2::XMLElement::SetText, COMDAT
; _this$ = ecx

; 1268 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1269 : 	if ( FirstChild() && FirstChild()->ToText() )

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@XMLNode@tinyxml2@@QAEPAV12@XZ ; tinyxml2::XMLNode::FirstChild
	test	eax, eax
	je	SHORT $LN2@SetText
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@XMLNode@tinyxml2@@QAEPAV12@XZ ; tinyxml2::XMLNode::FirstChild
	mov	DWORD PTR tv78[ebp], eax
	mov	eax, DWORD PTR tv78[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR tv78[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@SetText

; 1270 : 		FirstChild()->SetValue( inText );

	push	0
	mov	eax, DWORD PTR _inText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@XMLNode@tinyxml2@@QAEPAV12@XZ ; tinyxml2::XMLNode::FirstChild
	mov	ecx, eax
	call	?SetValue@XMLNode@tinyxml2@@QAEXPBD_N@Z	; tinyxml2::XMLNode::SetValue

; 1271 : 	else {

	jmp	SHORT $LN3@SetText
$LN2@SetText:

; 1272 : 		XMLText*	theText = GetDocument()->NewText( inText );

	mov	eax, DWORD PTR _inText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDocument@XMLNode@tinyxml2@@QAEPAVXMLDocument@2@XZ ; tinyxml2::XMLNode::GetDocument
	mov	ecx, eax
	call	?NewText@XMLDocument@tinyxml2@@QAEPAVXMLText@2@PBD@Z ; tinyxml2::XMLDocument::NewText
	mov	DWORD PTR _theText$1[ebp], eax

; 1273 : 		InsertFirstChild( theText );

	mov	eax, DWORD PTR _theText$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InsertFirstChild@XMLNode@tinyxml2@@QAEPAV12@PAV12@@Z ; tinyxml2::XMLNode::InsertFirstChild
$LN3@SetText:

; 1274 : 	}
; 1275 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetText@XMLElement@tinyxml2@@QAEXPBD@Z ENDP		; tinyxml2::XMLElement::SetText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?GetText@XMLElement@tinyxml2@@QBEPBDXZ
_TEXT	SEGMENT
tv78 = -208						; size = 4
_this$ = -8						; size = 4
?GetText@XMLElement@tinyxml2@@QBEPBDXZ PROC		; tinyxml2::XMLElement::GetText, COMDAT
; _this$ = ecx

; 1259 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1260 :     if ( FirstChild() && FirstChild()->ToText() ) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
	test	eax, eax
	je	SHORT $LN1@GetText
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
	mov	DWORD PTR tv78[ebp], eax
	mov	eax, DWORD PTR tv78[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR tv78[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN1@GetText

; 1261 :         return FirstChild()->Value();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
	mov	ecx, eax
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value
	jmp	SHORT $LN2@GetText
$LN1@GetText:

; 1262 :     }
; 1263 :     return 0;

	xor	eax, eax
$LN2@GetText:

; 1264 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetText@XMLElement@tinyxml2@@QBEPBDXZ ENDP		; tinyxml2::XMLElement::GetText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?FindAttribute@XMLElement@tinyxml2@@QBEPBVXMLAttribute@2@PBD@Z
_TEXT	SEGMENT
_a$1 = -20						; size = 4
_this$ = -8						; size = 4
_name$ = 8						; size = 4
?FindAttribute@XMLElement@tinyxml2@@QBEPBVXMLAttribute@2@PBD@Z PROC ; tinyxml2::XMLElement::FindAttribute, COMDAT
; _this$ = ecx

; 1235 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1236 :     for( XMLAttribute* a = _rootAttribute; a; a = a->_next ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _a$1[ebp], ecx
	jmp	SHORT $LN4@FindAttrib
$LN3@FindAttrib:
	mov	eax, DWORD PTR _a$1[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _a$1[ebp], ecx
$LN4@FindAttrib:
	cmp	DWORD PTR _a$1[ebp], 0
	je	SHORT $LN2@FindAttrib

; 1237 :         if ( XMLUtil::StringEqual( a->Name(), name ) ) {

	push	2147483647				; 7fffffffH
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$1[ebp]
	call	?Name@XMLAttribute@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLAttribute::Name
	push	eax
	call	?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
	add	esp, 12					; 0000000cH
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@FindAttrib

; 1238 :             return a;

	mov	eax, DWORD PTR _a$1[ebp]
	jmp	SHORT $LN5@FindAttrib
$LN1@FindAttrib:

; 1239 :         }
; 1240 :     }

	jmp	SHORT $LN3@FindAttrib
$LN2@FindAttrib:

; 1241 :     return 0;

	xor	eax, eax
$LN5@FindAttrib:

; 1242 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FindAttribute@XMLElement@tinyxml2@@QBEPBVXMLAttribute@2@PBD@Z ENDP ; tinyxml2::XMLElement::FindAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?FirstAttribute@XMLElement@tinyxml2@@QBEPBVXMLAttribute@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?FirstAttribute@XMLElement@tinyxml2@@QBEPBVXMLAttribute@2@XZ PROC ; tinyxml2::XMLElement::FirstAttribute, COMDAT
; _this$ = ecx

; 1352 :     const XMLAttribute* FirstAttribute() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1353 :         return _rootAttribute;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+48]

; 1354 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FirstAttribute@XMLElement@tinyxml2@@QBEPBVXMLAttribute@2@XZ ENDP ; tinyxml2::XMLElement::FirstAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?DeleteAttribute@XMLElement@tinyxml2@@QAEXPBD@Z
_TEXT	SEGMENT
_a$1 = -32						; size = 4
_prev$ = -20						; size = 4
_this$ = -8						; size = 4
_name$ = 8						; size = 4
?DeleteAttribute@XMLElement@tinyxml2@@QAEXPBD@Z PROC	; tinyxml2::XMLElement::DeleteAttribute, COMDAT
; _this$ = ecx

; 1412 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1413 :     XMLAttribute* prev = 0;

	mov	DWORD PTR _prev$[ebp], 0

; 1414 :     for( XMLAttribute* a=_rootAttribute; a; a=a->_next ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _a$1[ebp], ecx
	jmp	SHORT $LN6@DeleteAttr
$LN5@DeleteAttr:
	mov	eax, DWORD PTR _a$1[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _a$1[ebp], ecx
$LN6@DeleteAttr:
	cmp	DWORD PTR _a$1[ebp], 0
	je	SHORT $LN7@DeleteAttr

; 1415 :         if ( XMLUtil::StringEqual( name, a->Name() ) ) {

	push	2147483647				; 7fffffffH
	mov	ecx, DWORD PTR _a$1[ebp]
	call	?Name@XMLAttribute@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLAttribute::Name
	push	eax
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
	add	esp, 12					; 0000000cH
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@DeleteAttr

; 1416 :             if ( prev ) {

	cmp	DWORD PTR _prev$[ebp], 0
	je	SHORT $LN2@DeleteAttr

; 1417 :                 prev->_next = a->_next;

	mov	eax, DWORD PTR _prev$[ebp]
	mov	ecx, DWORD PTR _a$1[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx

; 1418 :             }
; 1419 :             else {

	jmp	SHORT $LN1@DeleteAttr
$LN2@DeleteAttr:

; 1420 :                 _rootAttribute = a->_next;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _a$1[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+48], edx
$LN1@DeleteAttr:

; 1421 :             }
; 1422 :             DeleteAttribute( a );

	mov	eax, DWORD PTR _a$1[ebp]
	push	eax
	call	?DeleteAttribute@XMLElement@tinyxml2@@CAXPAVXMLAttribute@2@@Z ; tinyxml2::XMLElement::DeleteAttribute
	add	esp, 4

; 1423 :             break;

	jmp	SHORT $LN7@DeleteAttr
$LN3@DeleteAttr:

; 1424 :         }
; 1425 :         prev = a;

	mov	eax, DWORD PTR _a$1[ebp]
	mov	DWORD PTR _prev$[ebp], eax

; 1426 :     }

	jmp	SHORT $LN5@DeleteAttr
$LN7@DeleteAttr:

; 1427 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?DeleteAttribute@XMLElement@tinyxml2@@QAEXPBD@Z ENDP	; tinyxml2::XMLElement::DeleteAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?SetAttribute@XMLElement@tinyxml2@@QAEXPBD0@Z
_TEXT	SEGMENT
_a$ = -20						; size = 4
_this$ = -8						; size = 4
_name$ = 8						; size = 4
_value$ = 12						; size = 4
?SetAttribute@XMLElement@tinyxml2@@QAEXPBD0@Z PROC	; tinyxml2::XMLElement::SetAttribute, COMDAT
; _this$ = ecx

; 1316 :     void SetAttribute( const char* name, const char* value )	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1317 :         XMLAttribute* a = FindOrCreateAttribute( name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindOrCreateAttribute@XMLElement@tinyxml2@@AAEPAVXMLAttribute@2@PBD@Z ; tinyxml2::XMLElement::FindOrCreateAttribute
	mov	DWORD PTR _a$[ebp], eax

; 1318 :         a->SetAttribute( value );

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	call	?SetAttribute@XMLAttribute@tinyxml2@@QAEXPBD@Z ; tinyxml2::XMLAttribute::SetAttribute

; 1319 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetAttribute@XMLElement@tinyxml2@@QAEXPBD0@Z ENDP	; tinyxml2::XMLElement::SetAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?Attribute@XMLElement@tinyxml2@@QBEPBDPBD0@Z
_TEXT	SEGMENT
_a$ = -20						; size = 4
_this$ = -8						; size = 4
_name$ = 8						; size = 4
_value$ = 12						; size = 4
?Attribute@XMLElement@tinyxml2@@QBEPBDPBD0@Z PROC	; tinyxml2::XMLElement::Attribute, COMDAT
; _this$ = ecx

; 1246 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1247 :     const XMLAttribute* a = FindAttribute( name );

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindAttribute@XMLElement@tinyxml2@@QBEPBVXMLAttribute@2@PBD@Z ; tinyxml2::XMLElement::FindAttribute
	mov	DWORD PTR _a$[ebp], eax

; 1248 :     if ( !a ) {

	cmp	DWORD PTR _a$[ebp], 0
	jne	SHORT $LN3@Attribute

; 1249 :         return 0;

	xor	eax, eax
	jmp	SHORT $LN4@Attribute
$LN3@Attribute:

; 1250 :     }
; 1251 :     if ( !value || XMLUtil::StringEqual( a->Value(), value )) {

	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN1@Attribute
	push	2147483647				; 7fffffffH
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebp]
	call	?Value@XMLAttribute@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLAttribute::Value
	push	eax
	call	?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
	add	esp, 12					; 0000000cH
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Attribute
$LN1@Attribute:

; 1252 :         return a->Value();

	mov	ecx, DWORD PTR _a$[ebp]
	call	?Value@XMLAttribute@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLAttribute::Value
	jmp	SHORT $LN4@Attribute
$LN2@Attribute:

; 1253 :     }
; 1254 :     return 0;

	xor	eax, eax
$LN4@Attribute:

; 1255 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Attribute@XMLElement@tinyxml2@@QBEPBDPBD0@Z ENDP	; tinyxml2::XMLElement::Attribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?Accept@XMLElement@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z
_TEXT	SEGMENT
_node$1 = -20						; size = 4
_this$ = -8						; size = 4
_visitor$ = 8						; size = 4
?Accept@XMLElement@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z PROC ; tinyxml2::XMLElement::Accept, COMDAT
; _this$ = ecx

; 1571 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1572 :     if ( visitor->VisitEnter( *this, _rootAttribute ) ) {

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _visitor$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _visitor$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@Accept

; 1573 :         for ( const XMLNode* node=FirstChild(); node; node=node->NextSibling() ) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::FirstChild
	mov	DWORD PTR _node$1[ebp], eax
	jmp	SHORT $LN4@Accept
$LN3@Accept:
	mov	ecx, DWORD PTR _node$1[ebp]
	call	?NextSibling@XMLNode@tinyxml2@@QBEPBV12@XZ ; tinyxml2::XMLNode::NextSibling
	mov	DWORD PTR _node$1[ebp], eax
$LN4@Accept:
	cmp	DWORD PTR _node$1[ebp], 0
	je	SHORT $LN5@Accept

; 1574 :             if ( !node->Accept( visitor ) ) {

	mov	esi, esp
	mov	eax, DWORD PTR _visitor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _node$1[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _node$1[ebp]
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@Accept

; 1575 :                 break;

	jmp	SHORT $LN5@Accept
$LN1@Accept:

; 1576 :             }
; 1577 :         }

	jmp	SHORT $LN3@Accept
$LN5@Accept:

; 1578 :     }
; 1579 :     return visitor->VisitExit( *this );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _visitor$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _visitor$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1580 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Accept@XMLElement@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z ENDP ; tinyxml2::XMLElement::Accept
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ToElement@XMLElement@tinyxml2@@UBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToElement@XMLElement@tinyxml2@@UBEPBV12@XZ PROC	; tinyxml2::XMLElement::ToElement, COMDAT
; _this$ = ecx

; 1159 :     virtual const XMLElement* ToElement() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1160 :         return this;

	mov	eax, DWORD PTR _this$[ebp]

; 1161 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToElement@XMLElement@tinyxml2@@UBEPBV12@XZ ENDP	; tinyxml2::XMLElement::ToElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ToElement@XMLElement@tinyxml2@@UAEPAV12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToElement@XMLElement@tinyxml2@@UAEPAV12@XZ PROC	; tinyxml2::XMLElement::ToElement, COMDAT
; _this$ = ecx

; 1156 :     virtual XMLElement* ToElement()				{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1157 :         return this;

	mov	eax, DWORD PTR _this$[ebp]

; 1158 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToElement@XMLElement@tinyxml2@@UAEPAV12@XZ ENDP	; tinyxml2::XMLElement::ToElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?SetName@XMLElement@tinyxml2@@QAEXPBD_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_str$ = 8						; size = 4
_staticMem$ = 12					; size = 1
?SetName@XMLElement@tinyxml2@@QAEXPBD_N@Z PROC		; tinyxml2::XMLElement::SetName, COMDAT
; _this$ = ecx

; 1152 :     void SetName( const char* str, bool staticMem=false )	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1153 :         SetValue( str, staticMem );

	movzx	eax, BYTE PTR _staticMem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetValue@XMLNode@tinyxml2@@QAEXPBD_N@Z	; tinyxml2::XMLNode::SetValue

; 1154 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetName@XMLElement@tinyxml2@@QAEXPBD_N@Z ENDP		; tinyxml2::XMLElement::SetName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Name@XMLElement@tinyxml2@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Name@XMLElement@tinyxml2@@QBEPBDXZ PROC		; tinyxml2::XMLElement::Name, COMDAT
; _this$ = ecx

; 1148 :     const char* Name() const		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1149 :         return Value();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value

; 1150 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Name@XMLElement@tinyxml2@@QBEPBDXZ ENDP		; tinyxml2::XMLElement::Name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GXMLAttribute@tinyxml2@@EAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GXMLAttribute@tinyxml2@@EAEPAXI@Z PROC		; tinyxml2::XMLAttribute::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1XMLAttribute@tinyxml2@@EAE@XZ	; tinyxml2::XMLAttribute::~XMLAttribute
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GXMLAttribute@tinyxml2@@EAEPAXI@Z ENDP		; tinyxml2::XMLAttribute::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ParseDeep@XMLAttribute@tinyxml2@@AAEPADPAD_N@Z
_TEXT	SEGMENT
tv89 = -220						; size = 4
_endTag$ = -20						; size = 2
_this$ = -8						; size = 4
_p$ = 8							; size = 4
_processEntities$ = 12					; size = 1
?ParseDeep@XMLAttribute@tinyxml2@@AAEPADPAD_N@Z PROC	; tinyxml2::XMLAttribute::ParseDeep, COMDAT
; _this$ = ecx

; 1083 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1084 :     // Parse using the name rules: bug fix, was using ParseText before
; 1085 :     p = _name.ParseName( p );

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?ParseName@StrPair@tinyxml2@@QAEPADPAD@Z ; tinyxml2::StrPair::ParseName
	mov	DWORD PTR _p$[ebp], eax

; 1086 :     if ( !p || !*p ) {

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN4@ParseDeep
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN5@ParseDeep
$LN4@ParseDeep:

; 1087 :         return 0;

	xor	eax, eax
	jmp	$LN6@ParseDeep
$LN5@ParseDeep:

; 1088 :     }
; 1089 : 
; 1090 :     // Skip white space before =
; 1091 :     p = XMLUtil::SkipWhiteSpace( p );

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPADPAD@Z ; tinyxml2::XMLUtil::SkipWhiteSpace
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax

; 1092 :     if ( !p || *p != '=' ) {

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@ParseDeep
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 61					; 0000003dH
	je	SHORT $LN3@ParseDeep
$LN2@ParseDeep:

; 1093 :         return 0;

	xor	eax, eax
	jmp	$LN6@ParseDeep
$LN3@ParseDeep:

; 1094 :     }
; 1095 : 
; 1096 :     ++p;	// move up to opening quote

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 1097 :     p = XMLUtil::SkipWhiteSpace( p );

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPADPAD@Z ; tinyxml2::XMLUtil::SkipWhiteSpace
	add	esp, 4
	mov	DWORD PTR _p$[ebp], eax

; 1098 :     if ( *p != '\"' && *p != '\'' ) {

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 34					; 00000022H
	je	SHORT $LN1@ParseDeep
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 39					; 00000027H
	je	SHORT $LN1@ParseDeep

; 1099 :         return 0;

	xor	eax, eax
	jmp	SHORT $LN6@ParseDeep
$LN1@ParseDeep:

; 1100 :     }
; 1101 : 
; 1102 :     char endTag[2] = { *p, 0 };

	mov	eax, DWORD PTR _p$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _endTag$[ebp], cl
	mov	BYTE PTR _endTag$[ebp+1], 0

; 1103 :     ++p;	// move past opening quote

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 1104 : 
; 1105 :     p = _value.ParseText( p, endTag, processEntities ? StrPair::ATTRIBUTE_VALUE : StrPair::ATTRIBUTE_VALUE_LEAVE_ENTITIES );

	movzx	eax, BYTE PTR _processEntities$[ebp]
	test	eax, eax
	je	SHORT $LN8@ParseDeep
	mov	DWORD PTR tv89[ebp], 3
	jmp	SHORT $LN9@ParseDeep
$LN8@ParseDeep:
	mov	DWORD PTR tv89[ebp], 2
$LN9@ParseDeep:
	mov	ecx, DWORD PTR tv89[ebp]
	push	ecx
	lea	edx, DWORD PTR _endTag$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?ParseText@StrPair@tinyxml2@@QAEPADPADPBDH@Z ; tinyxml2::StrPair::ParseText
	mov	DWORD PTR _p$[ebp], eax

; 1106 :     return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN6@ParseDeep:

; 1107 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@ParseDeep
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN12@ParseDeep:
	DD	1
	DD	$LN11@ParseDeep
$LN11@ParseDeep:
	DD	-20					; ffffffecH
	DD	2
	DD	$LN10@ParseDeep
$LN10@ParseDeep:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	84					; 00000054H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	0
?ParseDeep@XMLAttribute@tinyxml2@@AAEPADPAD_N@Z ENDP	; tinyxml2::XMLAttribute::ParseDeep
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?SetName@XMLAttribute@tinyxml2@@AAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_n$ = 8							; size = 4
?SetName@XMLAttribute@tinyxml2@@AAEXPBD@Z PROC		; tinyxml2::XMLAttribute::SetName, COMDAT
; _this$ = ecx

; 1111 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1112 :     _name.SetStr( n );

	push	0
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?SetStr@StrPair@tinyxml2@@QAEXPBDH@Z	; tinyxml2::StrPair::SetStr

; 1113 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetName@XMLAttribute@tinyxml2@@AAEXPBD@Z ENDP		; tinyxml2::XMLAttribute::SetName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ??1XMLAttribute@tinyxml2@@EAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1XMLAttribute@tinyxml2@@EAE@XZ PROC			; tinyxml2::XMLAttribute::~XMLAttribute, COMDAT
; _this$ = ecx

; 1123 :     virtual ~XMLAttribute()	{}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1XMLAttribute@tinyxml2@@EAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7XMLAttribute@tinyxml2@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1StrPair@tinyxml2@@QAE@XZ		; tinyxml2::StrPair::~StrPair
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1StrPair@tinyxml2@@QAE@XZ		; tinyxml2::StrPair::~StrPair
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1XMLAttribute@tinyxml2@@EAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1StrPair@tinyxml2@@QAE@XZ		; tinyxml2::StrPair::~StrPair
__ehhandler$??1XMLAttribute@tinyxml2@@EAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1XMLAttribute@tinyxml2@@EAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1XMLAttribute@tinyxml2@@EAE@XZ ENDP			; tinyxml2::XMLAttribute::~XMLAttribute
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ??0XMLAttribute@tinyxml2@@AAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0XMLAttribute@tinyxml2@@AAE@XZ PROC			; tinyxml2::XMLAttribute::XMLAttribute, COMDAT
; _this$ = ecx

; 1122 :     XMLAttribute() : _next( 0 ), _memPool( 0 ) {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0XMLAttribute@tinyxml2@@AAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7XMLAttribute@tinyxml2@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0StrPair@tinyxml2@@QAE@XZ		; tinyxml2::StrPair::StrPair
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0StrPair@tinyxml2@@QAE@XZ		; tinyxml2::StrPair::StrPair
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0XMLAttribute@tinyxml2@@AAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1StrPair@tinyxml2@@QAE@XZ		; tinyxml2::StrPair::~StrPair
__ehhandler$??0XMLAttribute@tinyxml2@@AAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0XMLAttribute@tinyxml2@@AAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0XMLAttribute@tinyxml2@@AAE@XZ ENDP			; tinyxml2::XMLAttribute::XMLAttribute
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?SetAttribute@XMLAttribute@tinyxml2@@QAEXM@Z
_TEXT	SEGMENT
_buf$ = -220						; size = 200
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_v$ = 8							; size = 4
?SetAttribute@XMLAttribute@tinyxml2@@QAEXM@Z PROC	; tinyxml2::XMLAttribute::SetAttribute, COMDAT
; _this$ = ecx

; 1198 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-416]
	mov	ecx, 104				; 00000068H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1199 :     char buf[BUF_SIZE];
; 1200 :     XMLUtil::ToStr( v, buf, BUF_SIZE );

	push	200					; 000000c8H
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?ToStr@XMLUtil@tinyxml2@@SAXMPADH@Z	; tinyxml2::XMLUtil::ToStr
	add	esp, 12					; 0000000cH

; 1201 :     _value.SetStr( buf );

	push	0
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?SetStr@StrPair@tinyxml2@@QAEXPBDH@Z	; tinyxml2::StrPair::SetStr

; 1202 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@SetAttribu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 416				; 000001a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN5@SetAttribu:
	DD	1
	DD	$LN4@SetAttribu
$LN4@SetAttribu:
	DD	-220					; ffffff24H
	DD	200					; 000000c8H
	DD	$LN3@SetAttribu
$LN3@SetAttribu:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?SetAttribute@XMLAttribute@tinyxml2@@QAEXM@Z ENDP	; tinyxml2::XMLAttribute::SetAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?SetAttribute@XMLAttribute@tinyxml2@@QAEXN@Z
_TEXT	SEGMENT
_buf$ = -220						; size = 200
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_v$ = 8							; size = 8
?SetAttribute@XMLAttribute@tinyxml2@@QAEXN@Z PROC	; tinyxml2::XMLAttribute::SetAttribute, COMDAT
; _this$ = ecx

; 1191 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-416]
	mov	ecx, 104				; 00000068H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1192 :     char buf[BUF_SIZE];
; 1193 :     XMLUtil::ToStr( v, buf, BUF_SIZE );

	push	200					; 000000c8H
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	sub	esp, 8
	movsd	xmm0, QWORD PTR _v$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?ToStr@XMLUtil@tinyxml2@@SAXNPADH@Z	; tinyxml2::XMLUtil::ToStr
	add	esp, 16					; 00000010H

; 1194 :     _value.SetStr( buf );

	push	0
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?SetStr@StrPair@tinyxml2@@QAEXPBDH@Z	; tinyxml2::StrPair::SetStr

; 1195 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@SetAttribu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 416				; 000001a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN5@SetAttribu:
	DD	1
	DD	$LN4@SetAttribu
$LN4@SetAttribu:
	DD	-220					; ffffff24H
	DD	200					; 000000c8H
	DD	$LN3@SetAttribu
$LN3@SetAttribu:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?SetAttribute@XMLAttribute@tinyxml2@@QAEXN@Z ENDP	; tinyxml2::XMLAttribute::SetAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?SetAttribute@XMLAttribute@tinyxml2@@QAEX_N@Z
_TEXT	SEGMENT
_buf$ = -220						; size = 200
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_v$ = 8							; size = 1
?SetAttribute@XMLAttribute@tinyxml2@@QAEX_N@Z PROC	; tinyxml2::XMLAttribute::SetAttribute, COMDAT
; _this$ = ecx

; 1184 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-416]
	mov	ecx, 104				; 00000068H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1185 :     char buf[BUF_SIZE];
; 1186 :     XMLUtil::ToStr( v, buf, BUF_SIZE );

	push	200					; 000000c8H
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _v$[ebp]
	push	ecx
	call	?ToStr@XMLUtil@tinyxml2@@SAX_NPADH@Z	; tinyxml2::XMLUtil::ToStr
	add	esp, 12					; 0000000cH

; 1187 :     _value.SetStr( buf );

	push	0
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?SetStr@StrPair@tinyxml2@@QAEXPBDH@Z	; tinyxml2::StrPair::SetStr

; 1188 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@SetAttribu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 416				; 000001a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN5@SetAttribu:
	DD	1
	DD	$LN4@SetAttribu
$LN4@SetAttribu:
	DD	-220					; ffffff24H
	DD	200					; 000000c8H
	DD	$LN3@SetAttribu
$LN3@SetAttribu:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?SetAttribute@XMLAttribute@tinyxml2@@QAEX_N@Z ENDP	; tinyxml2::XMLAttribute::SetAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?SetAttribute@XMLAttribute@tinyxml2@@QAEXI@Z
_TEXT	SEGMENT
_buf$ = -220						; size = 200
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_v$ = 8							; size = 4
?SetAttribute@XMLAttribute@tinyxml2@@QAEXI@Z PROC	; tinyxml2::XMLAttribute::SetAttribute, COMDAT
; _this$ = ecx

; 1176 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-416]
	mov	ecx, 104				; 00000068H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1177 :     char buf[BUF_SIZE];
; 1178 :     XMLUtil::ToStr( v, buf, BUF_SIZE );

	push	200					; 000000c8H
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	?ToStr@XMLUtil@tinyxml2@@SAXIPADH@Z	; tinyxml2::XMLUtil::ToStr
	add	esp, 12					; 0000000cH

; 1179 :     _value.SetStr( buf );

	push	0
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?SetStr@StrPair@tinyxml2@@QAEXPBDH@Z	; tinyxml2::StrPair::SetStr

; 1180 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@SetAttribu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 416				; 000001a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN5@SetAttribu:
	DD	1
	DD	$LN4@SetAttribu
$LN4@SetAttribu:
	DD	-220					; ffffff24H
	DD	200					; 000000c8H
	DD	$LN3@SetAttribu
$LN3@SetAttribu:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?SetAttribute@XMLAttribute@tinyxml2@@QAEXI@Z ENDP	; tinyxml2::XMLAttribute::SetAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?SetAttribute@XMLAttribute@tinyxml2@@QAEXH@Z
_TEXT	SEGMENT
_buf$ = -220						; size = 200
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_v$ = 8							; size = 4
?SetAttribute@XMLAttribute@tinyxml2@@QAEXH@Z PROC	; tinyxml2::XMLAttribute::SetAttribute, COMDAT
; _this$ = ecx

; 1168 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 416				; 000001a0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-416]
	mov	ecx, 104				; 00000068H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1169 :     char buf[BUF_SIZE];
; 1170 :     XMLUtil::ToStr( v, buf, BUF_SIZE );

	push	200					; 000000c8H
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	?ToStr@XMLUtil@tinyxml2@@SAXHPADH@Z	; tinyxml2::XMLUtil::ToStr
	add	esp, 12					; 0000000cH

; 1171 :     _value.SetStr( buf );

	push	0
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?SetStr@StrPair@tinyxml2@@QAEXPBDH@Z	; tinyxml2::StrPair::SetStr

; 1172 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@SetAttribu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 416				; 000001a0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN5@SetAttribu:
	DD	1
	DD	$LN4@SetAttribu
$LN4@SetAttribu:
	DD	-220					; ffffff24H
	DD	200					; 000000c8H
	DD	$LN3@SetAttribu
$LN3@SetAttribu:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?SetAttribute@XMLAttribute@tinyxml2@@QAEXH@Z ENDP	; tinyxml2::XMLAttribute::SetAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?SetAttribute@XMLAttribute@tinyxml2@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
?SetAttribute@XMLAttribute@tinyxml2@@QAEXPBD@Z PROC	; tinyxml2::XMLAttribute::SetAttribute, COMDAT
; _this$ = ecx

; 1162 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1163 :     _value.SetStr( v );

	push	0
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?SetStr@StrPair@tinyxml2@@QAEXPBDH@Z	; tinyxml2::StrPair::SetStr

; 1164 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAttribute@XMLAttribute@tinyxml2@@QAEXPBD@Z ENDP	; tinyxml2::XMLAttribute::SetAttribute
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?QueryFloatValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PAM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_value$ = 8						; size = 4
?QueryFloatValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PAM@Z PROC ; tinyxml2::XMLAttribute::QueryFloatValue, COMDAT
; _this$ = ecx

; 1144 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1145 :     if ( XMLUtil::ToFloat( Value(), value )) {

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Value@XMLAttribute@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLAttribute::Value
	push	eax
	call	?ToFloat@XMLUtil@tinyxml2@@SA_NPBDPAM@Z	; tinyxml2::XMLUtil::ToFloat
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@QueryFloat

; 1146 :         return XML_NO_ERROR;

	xor	eax, eax
	jmp	SHORT $LN2@QueryFloat
$LN1@QueryFloat:

; 1147 :     }
; 1148 :     return XML_WRONG_ATTRIBUTE_TYPE;

	mov	eax, 2
$LN2@QueryFloat:

; 1149 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?QueryFloatValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PAM@Z ENDP ; tinyxml2::XMLAttribute::QueryFloatValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?QueryDoubleValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PAN@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_value$ = 8						; size = 4
?QueryDoubleValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PAN@Z PROC ; tinyxml2::XMLAttribute::QueryDoubleValue, COMDAT
; _this$ = ecx

; 1153 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1154 :     if ( XMLUtil::ToDouble( Value(), value )) {

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Value@XMLAttribute@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLAttribute::Value
	push	eax
	call	?ToDouble@XMLUtil@tinyxml2@@SA_NPBDPAN@Z ; tinyxml2::XMLUtil::ToDouble
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@QueryDoubl

; 1155 :         return XML_NO_ERROR;

	xor	eax, eax
	jmp	SHORT $LN2@QueryDoubl
$LN1@QueryDoubl:

; 1156 :     }
; 1157 :     return XML_WRONG_ATTRIBUTE_TYPE;

	mov	eax, 2
$LN2@QueryDoubl:

; 1158 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?QueryDoubleValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PAN@Z ENDP ; tinyxml2::XMLAttribute::QueryDoubleValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?QueryBoolValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PA_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_value$ = 8						; size = 4
?QueryBoolValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PA_N@Z PROC ; tinyxml2::XMLAttribute::QueryBoolValue, COMDAT
; _this$ = ecx

; 1135 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1136 :     if ( XMLUtil::ToBool( Value(), value )) {

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Value@XMLAttribute@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLAttribute::Value
	push	eax
	call	?ToBool@XMLUtil@tinyxml2@@SA_NPBDPA_N@Z	; tinyxml2::XMLUtil::ToBool
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@QueryBoolV

; 1137 :         return XML_NO_ERROR;

	xor	eax, eax
	jmp	SHORT $LN2@QueryBoolV
$LN1@QueryBoolV:

; 1138 :     }
; 1139 :     return XML_WRONG_ATTRIBUTE_TYPE;

	mov	eax, 2
$LN2@QueryBoolV:

; 1140 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?QueryBoolValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PA_N@Z ENDP ; tinyxml2::XMLAttribute::QueryBoolValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?QueryUnsignedValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PAI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_value$ = 8						; size = 4
?QueryUnsignedValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PAI@Z PROC ; tinyxml2::XMLAttribute::QueryUnsignedValue, COMDAT
; _this$ = ecx

; 1126 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1127 :     if ( XMLUtil::ToUnsigned( Value(), value )) {

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Value@XMLAttribute@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLAttribute::Value
	push	eax
	call	?ToUnsigned@XMLUtil@tinyxml2@@SA_NPBDPAI@Z ; tinyxml2::XMLUtil::ToUnsigned
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@QueryUnsig

; 1128 :         return XML_NO_ERROR;

	xor	eax, eax
	jmp	SHORT $LN2@QueryUnsig
$LN1@QueryUnsig:

; 1129 :     }
; 1130 :     return XML_WRONG_ATTRIBUTE_TYPE;

	mov	eax, 2
$LN2@QueryUnsig:

; 1131 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?QueryUnsignedValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PAI@Z ENDP ; tinyxml2::XMLAttribute::QueryUnsignedValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?QueryIntValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PAH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_value$ = 8						; size = 4
?QueryIntValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PAH@Z PROC ; tinyxml2::XMLAttribute::QueryIntValue, COMDAT
; _this$ = ecx

; 1117 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1118 :     if ( XMLUtil::ToInt( Value(), value )) {

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Value@XMLAttribute@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLAttribute::Value
	push	eax
	call	?ToInt@XMLUtil@tinyxml2@@SA_NPBDPAH@Z	; tinyxml2::XMLUtil::ToInt
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@QueryIntVa

; 1119 :         return XML_NO_ERROR;

	xor	eax, eax
	jmp	SHORT $LN2@QueryIntVa
$LN1@QueryIntVa:

; 1120 :     }
; 1121 :     return XML_WRONG_ATTRIBUTE_TYPE;

	mov	eax, 2
$LN2@QueryIntVa:

; 1122 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?QueryIntValue@XMLAttribute@tinyxml2@@QBE?AW4XMLError@2@PAH@Z ENDP ; tinyxml2::XMLAttribute::QueryIntValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Next@XMLAttribute@tinyxml2@@QBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Next@XMLAttribute@tinyxml2@@QBEPBV12@XZ PROC		; tinyxml2::XMLAttribute::Next, COMDAT
; _this$ = ecx

; 1054 :     const XMLAttribute* Next() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1055 :         return _next;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+28]

; 1056 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Next@XMLAttribute@tinyxml2@@QBEPBV12@XZ ENDP		; tinyxml2::XMLAttribute::Next
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?Value@XMLAttribute@tinyxml2@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Value@XMLAttribute@tinyxml2@@QBEPBDXZ PROC		; tinyxml2::XMLAttribute::Value, COMDAT
; _this$ = ecx

; 1078 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1079 :     return _value.GetStr();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?GetStr@StrPair@tinyxml2@@QAEPBDXZ	; tinyxml2::StrPair::GetStr

; 1080 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Value@XMLAttribute@tinyxml2@@QBEPBDXZ ENDP		; tinyxml2::XMLAttribute::Value
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?Name@XMLAttribute@tinyxml2@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Name@XMLAttribute@tinyxml2@@QBEPBDXZ PROC		; tinyxml2::XMLAttribute::Name, COMDAT
; _this$ = ecx

; 1073 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1074 :     return _name.GetStr();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?GetStr@StrPair@tinyxml2@@QAEPBDXZ	; tinyxml2::StrPair::GetStr

; 1075 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Name@XMLAttribute@tinyxml2@@QBEPBDXZ ENDP		; tinyxml2::XMLAttribute::Name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GXMLUnknown@tinyxml2@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GXMLUnknown@tinyxml2@@MAEPAXI@Z PROC			; tinyxml2::XMLUnknown::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1XMLUnknown@tinyxml2@@MAE@XZ		; tinyxml2::XMLUnknown::~XMLUnknown
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GXMLUnknown@tinyxml2@@MAEPAXI@Z ENDP			; tinyxml2::XMLUnknown::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ??1XMLUnknown@tinyxml2@@MAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1XMLUnknown@tinyxml2@@MAE@XZ PROC			; tinyxml2::XMLUnknown::~XMLUnknown, COMDAT
; _this$ = ecx

; 1031 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7XMLUnknown@tinyxml2@@6B@

; 1032 : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1XMLNode@tinyxml2@@MAE@XZ		; tinyxml2::XMLNode::~XMLNode
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1XMLUnknown@tinyxml2@@MAE@XZ ENDP			; tinyxml2::XMLUnknown::~XMLUnknown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ??0XMLUnknown@tinyxml2@@IAE@PAVXMLDocument@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_doc$ = 8						; size = 4
??0XMLUnknown@tinyxml2@@IAE@PAVXMLDocument@1@@Z PROC	; tinyxml2::XMLUnknown::XMLUnknown, COMDAT
; _this$ = ecx

; 1026 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0XMLNode@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLNode::XMLNode
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7XMLUnknown@tinyxml2@@6B@

; 1027 : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0XMLUnknown@tinyxml2@@IAE@PAVXMLDocument@1@@Z ENDP	; tinyxml2::XMLUnknown::XMLUnknown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ShallowEqual@XMLUnknown@tinyxml2@@UBE_NPBVXMLNode@2@@Z
_TEXT	SEGMENT
tv87 = -220						; size = 4
_unknown$ = -20						; size = 4
_this$ = -8						; size = 4
_compare$ = 8						; size = 4
?ShallowEqual@XMLUnknown@tinyxml2@@UBE_NPBVXMLNode@2@@Z PROC ; tinyxml2::XMLUnknown::ShallowEqual, COMDAT
; _this$ = ecx

; 1059 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1060 :     const XMLUnknown* unknown = compare->ToUnknown();

	mov	eax, DWORD PTR _compare$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _compare$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _unknown$[ebp], eax

; 1061 :     return ( unknown && XMLUtil::StringEqual( unknown->Value(), Value() ));

	cmp	DWORD PTR _unknown$[ebp], 0
	je	SHORT $LN3@ShallowEqu
	push	2147483647				; 7fffffffH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value
	push	eax
	mov	ecx, DWORD PTR _unknown$[ebp]
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value
	push	eax
	call	?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
	add	esp, 12					; 0000000cH
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@ShallowEqu
	mov	DWORD PTR tv87[ebp], 1
	jmp	SHORT $LN4@ShallowEqu
$LN3@ShallowEqu:
	mov	DWORD PTR tv87[ebp], 0
$LN4@ShallowEqu:
	mov	al, BYTE PTR tv87[ebp]

; 1062 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ShallowEqual@XMLUnknown@tinyxml2@@UBE_NPBVXMLNode@2@@Z ENDP ; tinyxml2::XMLUnknown::ShallowEqual
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ShallowClone@XMLUnknown@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z
_TEXT	SEGMENT
_text$ = -20						; size = 4
_this$ = -8						; size = 4
_doc$ = 8						; size = 4
?ShallowClone@XMLUnknown@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z PROC ; tinyxml2::XMLUnknown::ShallowClone, COMDAT
; _this$ = ecx

; 1049 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1050 :     if ( !doc ) {

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN1@ShallowClo

; 1051 :         doc = _document;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _doc$[ebp], ecx
$LN1@ShallowClo:

; 1052 :     }
; 1053 :     XMLUnknown* text = doc->NewUnknown( Value() );	// fixme: this will always allocate memory. Intern?

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	call	?NewUnknown@XMLDocument@tinyxml2@@QAEPAVXMLUnknown@2@PBD@Z ; tinyxml2::XMLDocument::NewUnknown
	mov	DWORD PTR _text$[ebp], eax

; 1054 :     return text;

	mov	eax, DWORD PTR _text$[ebp]

; 1055 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ShallowClone@XMLUnknown@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z ENDP ; tinyxml2::XMLUnknown::ShallowClone
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ParseDeep@XMLUnknown@tinyxml2@@UAEPADPADPAVStrPair@2@@Z
_TEXT	SEGMENT
_start$ = -20						; size = 4
_this$ = -8						; size = 4
_p$ = 8							; size = 4
___formal$ = 12						; size = 4
?ParseDeep@XMLUnknown@tinyxml2@@UAEPADPADPAVStrPair@2@@Z PROC ; tinyxml2::XMLUnknown::ParseDeep, COMDAT
; _this$ = ecx

; 1036 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1037 :     // Unknown parses as text.
; 1038 :     const char* start = p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _start$[ebp], eax

; 1039 : 
; 1040 :     p = _value.ParseText( p, ">", StrPair::NEEDS_NEWLINE_NORMALIZATION );

	push	2
	push	OFFSET ??_C@_01PPODPGHN@?$DO?$AA@
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?ParseText@StrPair@tinyxml2@@QAEPADPADPBDH@Z ; tinyxml2::StrPair::ParseText
	mov	DWORD PTR _p$[ebp], eax

; 1041 :     if ( !p ) {

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN1@ParseDeep

; 1042 :         _document->SetError( XML_ERROR_PARSING_UNKNOWN, start, 0 );

	push	0
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	push	14					; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError
$LN1@ParseDeep:

; 1043 :     }
; 1044 :     return p;

	mov	eax, DWORD PTR _p$[ebp]

; 1045 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ParseDeep@XMLUnknown@tinyxml2@@UAEPADPADPAVStrPair@2@@Z ENDP ; tinyxml2::XMLUnknown::ParseDeep
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?Accept@XMLUnknown@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_visitor$ = 8						; size = 4
?Accept@XMLUnknown@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z PROC ; tinyxml2::XMLUnknown::Accept, COMDAT
; _this$ = ecx

; 1066 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1067 :     return visitor->Visit( *this );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _visitor$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _visitor$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1068 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Accept@XMLUnknown@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z ENDP ; tinyxml2::XMLUnknown::Accept
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ToUnknown@XMLUnknown@tinyxml2@@UBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToUnknown@XMLUnknown@tinyxml2@@UBEPBV12@XZ PROC	; tinyxml2::XMLUnknown::ToUnknown, COMDAT
; _this$ = ecx

; 1018 :     virtual const XMLUnknown* ToUnknown() const		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1019 :         return this;

	mov	eax, DWORD PTR _this$[ebp]

; 1020 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToUnknown@XMLUnknown@tinyxml2@@UBEPBV12@XZ ENDP	; tinyxml2::XMLUnknown::ToUnknown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ToUnknown@XMLUnknown@tinyxml2@@UAEPAV12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToUnknown@XMLUnknown@tinyxml2@@UAEPAV12@XZ PROC	; tinyxml2::XMLUnknown::ToUnknown, COMDAT
; _this$ = ecx

; 1015 :     virtual XMLUnknown*	ToUnknown()					{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1016 :         return this;

	mov	eax, DWORD PTR _this$[ebp]

; 1017 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToUnknown@XMLUnknown@tinyxml2@@UAEPAV12@XZ ENDP	; tinyxml2::XMLUnknown::ToUnknown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GXMLDeclaration@tinyxml2@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GXMLDeclaration@tinyxml2@@MAEPAXI@Z PROC		; tinyxml2::XMLDeclaration::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1XMLDeclaration@tinyxml2@@MAE@XZ	; tinyxml2::XMLDeclaration::~XMLDeclaration
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GXMLDeclaration@tinyxml2@@MAEPAXI@Z ENDP		; tinyxml2::XMLDeclaration::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ??1XMLDeclaration@tinyxml2@@MAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1XMLDeclaration@tinyxml2@@MAE@XZ PROC			; tinyxml2::XMLDeclaration::~XMLDeclaration, COMDAT
; _this$ = ecx

; 983  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7XMLDeclaration@tinyxml2@@6B@

; 984  :     //printf( "~XMLDeclaration\n" );
; 985  : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1XMLNode@tinyxml2@@MAE@XZ		; tinyxml2::XMLNode::~XMLNode
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1XMLDeclaration@tinyxml2@@MAE@XZ ENDP			; tinyxml2::XMLDeclaration::~XMLDeclaration
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ??0XMLDeclaration@tinyxml2@@IAE@PAVXMLDocument@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_doc$ = 8						; size = 4
??0XMLDeclaration@tinyxml2@@IAE@PAVXMLDocument@1@@Z PROC ; tinyxml2::XMLDeclaration::XMLDeclaration, COMDAT
; _this$ = ecx

; 978  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0XMLNode@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLNode::XMLNode
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7XMLDeclaration@tinyxml2@@6B@

; 979  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0XMLDeclaration@tinyxml2@@IAE@PAVXMLDocument@1@@Z ENDP ; tinyxml2::XMLDeclaration::XMLDeclaration
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ShallowEqual@XMLDeclaration@tinyxml2@@UBE_NPBVXMLNode@2@@Z
_TEXT	SEGMENT
tv87 = -220						; size = 4
_declaration$ = -20					; size = 4
_this$ = -8						; size = 4
_compare$ = 8						; size = 4
?ShallowEqual@XMLDeclaration@tinyxml2@@UBE_NPBVXMLNode@2@@Z PROC ; tinyxml2::XMLDeclaration::ShallowEqual, COMDAT
; _this$ = ecx

; 1011 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1012 :     const XMLDeclaration* declaration = compare->ToDeclaration();

	mov	eax, DWORD PTR _compare$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _compare$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _declaration$[ebp], eax

; 1013 :     return ( declaration && XMLUtil::StringEqual( declaration->Value(), Value() ));

	cmp	DWORD PTR _declaration$[ebp], 0
	je	SHORT $LN3@ShallowEqu
	push	2147483647				; 7fffffffH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value
	push	eax
	mov	ecx, DWORD PTR _declaration$[ebp]
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value
	push	eax
	call	?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
	add	esp, 12					; 0000000cH
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@ShallowEqu
	mov	DWORD PTR tv87[ebp], 1
	jmp	SHORT $LN4@ShallowEqu
$LN3@ShallowEqu:
	mov	DWORD PTR tv87[ebp], 0
$LN4@ShallowEqu:
	mov	al, BYTE PTR tv87[ebp]

; 1014 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ShallowEqual@XMLDeclaration@tinyxml2@@UBE_NPBVXMLNode@2@@Z ENDP ; tinyxml2::XMLDeclaration::ShallowEqual
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ShallowClone@XMLDeclaration@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z
_TEXT	SEGMENT
_dec$ = -20						; size = 4
_this$ = -8						; size = 4
_doc$ = 8						; size = 4
?ShallowClone@XMLDeclaration@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z PROC ; tinyxml2::XMLDeclaration::ShallowClone, COMDAT
; _this$ = ecx

; 1001 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1002 :     if ( !doc ) {

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN1@ShallowClo

; 1003 :         doc = _document;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _doc$[ebp], ecx
$LN1@ShallowClo:

; 1004 :     }
; 1005 :     XMLDeclaration* dec = doc->NewDeclaration( Value() );	// fixme: this will always allocate memory. Intern?

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	call	?NewDeclaration@XMLDocument@tinyxml2@@QAEPAVXMLDeclaration@2@PBD@Z ; tinyxml2::XMLDocument::NewDeclaration
	mov	DWORD PTR _dec$[ebp], eax

; 1006 :     return dec;

	mov	eax, DWORD PTR _dec$[ebp]

; 1007 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ShallowClone@XMLDeclaration@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z ENDP ; tinyxml2::XMLDeclaration::ShallowClone
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ParseDeep@XMLDeclaration@tinyxml2@@UAEPADPADPAVStrPair@2@@Z
_TEXT	SEGMENT
_start$ = -20						; size = 4
_this$ = -8						; size = 4
_p$ = 8							; size = 4
___formal$ = 12						; size = 4
?ParseDeep@XMLDeclaration@tinyxml2@@UAEPADPADPAVStrPair@2@@Z PROC ; tinyxml2::XMLDeclaration::ParseDeep, COMDAT
; _this$ = ecx

; 989  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 990  :     // Declaration parses as text.
; 991  :     const char* start = p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _start$[ebp], eax

; 992  :     p = _value.ParseText( p, "?>", StrPair::NEEDS_NEWLINE_NORMALIZATION );

	push	2
	push	OFFSET ??_C@_02GOEMJPDN@?$DP?$DO?$AA@
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?ParseText@StrPair@tinyxml2@@QAEPADPADPBDH@Z ; tinyxml2::StrPair::ParseText
	mov	DWORD PTR _p$[ebp], eax

; 993  :     if ( p == 0 ) {

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN1@ParseDeep

; 994  :         _document->SetError( XML_ERROR_PARSING_DECLARATION, start, 0 );

	push	0
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	push	13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError
$LN1@ParseDeep:

; 995  :     }
; 996  :     return p;

	mov	eax, DWORD PTR _p$[ebp]

; 997  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ParseDeep@XMLDeclaration@tinyxml2@@UAEPADPADPAVStrPair@2@@Z ENDP ; tinyxml2::XMLDeclaration::ParseDeep
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?Accept@XMLDeclaration@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_visitor$ = 8						; size = 4
?Accept@XMLDeclaration@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z PROC ; tinyxml2::XMLDeclaration::Accept, COMDAT
; _this$ = ecx

; 1019 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1020 :     return visitor->Visit( *this );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _visitor$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _visitor$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1021 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Accept@XMLDeclaration@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z ENDP ; tinyxml2::XMLDeclaration::Accept
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ToDeclaration@XMLDeclaration@tinyxml2@@UBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToDeclaration@XMLDeclaration@tinyxml2@@UBEPBV12@XZ PROC ; tinyxml2::XMLDeclaration::ToDeclaration, COMDAT
; _this$ = ecx

; 986  :     virtual const XMLDeclaration* ToDeclaration() const		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 987  :         return this;

	mov	eax, DWORD PTR _this$[ebp]

; 988  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDeclaration@XMLDeclaration@tinyxml2@@UBEPBV12@XZ ENDP ; tinyxml2::XMLDeclaration::ToDeclaration
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ToDeclaration@XMLDeclaration@tinyxml2@@UAEPAV12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToDeclaration@XMLDeclaration@tinyxml2@@UAEPAV12@XZ PROC ; tinyxml2::XMLDeclaration::ToDeclaration, COMDAT
; _this$ = ecx

; 983  :     virtual XMLDeclaration*	ToDeclaration()					{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 984  :         return this;

	mov	eax, DWORD PTR _this$[ebp]

; 985  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDeclaration@XMLDeclaration@tinyxml2@@UAEPAV12@XZ ENDP ; tinyxml2::XMLDeclaration::ToDeclaration
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GXMLComment@tinyxml2@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GXMLComment@tinyxml2@@MAEPAXI@Z PROC			; tinyxml2::XMLComment::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1XMLComment@tinyxml2@@MAE@XZ		; tinyxml2::XMLComment::~XMLComment
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GXMLComment@tinyxml2@@MAEPAXI@Z ENDP			; tinyxml2::XMLComment::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ??1XMLComment@tinyxml2@@MAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1XMLComment@tinyxml2@@MAE@XZ PROC			; tinyxml2::XMLComment::~XMLComment, COMDAT
; _this$ = ecx

; 936  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7XMLComment@tinyxml2@@6B@

; 937  : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1XMLNode@tinyxml2@@MAE@XZ		; tinyxml2::XMLNode::~XMLNode
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1XMLComment@tinyxml2@@MAE@XZ ENDP			; tinyxml2::XMLComment::~XMLComment
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ??0XMLComment@tinyxml2@@IAE@PAVXMLDocument@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_doc$ = 8						; size = 4
??0XMLComment@tinyxml2@@IAE@PAVXMLDocument@1@@Z PROC	; tinyxml2::XMLComment::XMLComment, COMDAT
; _this$ = ecx

; 931  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0XMLNode@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLNode::XMLNode
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7XMLComment@tinyxml2@@6B@

; 932  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0XMLComment@tinyxml2@@IAE@PAVXMLDocument@1@@Z ENDP	; tinyxml2::XMLComment::XMLComment
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ShallowEqual@XMLComment@tinyxml2@@UBE_NPBVXMLNode@2@@Z
_TEXT	SEGMENT
tv87 = -220						; size = 4
_comment$ = -20						; size = 4
_this$ = -8						; size = 4
_compare$ = 8						; size = 4
?ShallowEqual@XMLComment@tinyxml2@@UBE_NPBVXMLNode@2@@Z PROC ; tinyxml2::XMLComment::ShallowEqual, COMDAT
; _this$ = ecx

; 963  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 964  :     const XMLComment* comment = compare->ToComment();

	mov	eax, DWORD PTR _compare$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _compare$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _comment$[ebp], eax

; 965  :     return ( comment && XMLUtil::StringEqual( comment->Value(), Value() ));

	cmp	DWORD PTR _comment$[ebp], 0
	je	SHORT $LN3@ShallowEqu
	push	2147483647				; 7fffffffH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value
	push	eax
	mov	ecx, DWORD PTR _comment$[ebp]
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value
	push	eax
	call	?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
	add	esp, 12					; 0000000cH
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@ShallowEqu
	mov	DWORD PTR tv87[ebp], 1
	jmp	SHORT $LN4@ShallowEqu
$LN3@ShallowEqu:
	mov	DWORD PTR tv87[ebp], 0
$LN4@ShallowEqu:
	mov	al, BYTE PTR tv87[ebp]

; 966  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ShallowEqual@XMLComment@tinyxml2@@UBE_NPBVXMLNode@2@@Z ENDP ; tinyxml2::XMLComment::ShallowEqual
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ShallowClone@XMLComment@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z
_TEXT	SEGMENT
_comment$ = -20						; size = 4
_this$ = -8						; size = 4
_doc$ = 8						; size = 4
?ShallowClone@XMLComment@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z PROC ; tinyxml2::XMLComment::ShallowClone, COMDAT
; _this$ = ecx

; 953  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 954  :     if ( !doc ) {

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN1@ShallowClo

; 955  :         doc = _document;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _doc$[ebp], ecx
$LN1@ShallowClo:

; 956  :     }
; 957  :     XMLComment* comment = doc->NewComment( Value() );	// fixme: this will always allocate memory. Intern?

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	call	?NewComment@XMLDocument@tinyxml2@@QAEPAVXMLComment@2@PBD@Z ; tinyxml2::XMLDocument::NewComment
	mov	DWORD PTR _comment$[ebp], eax

; 958  :     return comment;

	mov	eax, DWORD PTR _comment$[ebp]

; 959  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ShallowClone@XMLComment@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z ENDP ; tinyxml2::XMLComment::ShallowClone
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ParseDeep@XMLComment@tinyxml2@@UAEPADPADPAVStrPair@2@@Z
_TEXT	SEGMENT
_start$ = -20						; size = 4
_this$ = -8						; size = 4
_p$ = 8							; size = 4
___formal$ = 12						; size = 4
?ParseDeep@XMLComment@tinyxml2@@UAEPADPADPAVStrPair@2@@Z PROC ; tinyxml2::XMLComment::ParseDeep, COMDAT
; _this$ = ecx

; 941  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 942  :     // Comment parses as text.
; 943  :     const char* start = p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _start$[ebp], eax

; 944  :     p = _value.ParseText( p, "-->", StrPair::COMMENT );

	push	2
	push	OFFSET ??_C@_03PNLDJJMO@?9?9?$DO?$AA@
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?ParseText@StrPair@tinyxml2@@QAEPADPADPBDH@Z ; tinyxml2::StrPair::ParseText
	mov	DWORD PTR _p$[ebp], eax

; 945  :     if ( p == 0 ) {

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN1@ParseDeep

; 946  :         _document->SetError( XML_ERROR_PARSING_COMMENT, start, 0 );

	push	0
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError
$LN1@ParseDeep:

; 947  :     }
; 948  :     return p;

	mov	eax, DWORD PTR _p$[ebp]

; 949  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ParseDeep@XMLComment@tinyxml2@@UAEPADPADPAVStrPair@2@@Z ENDP ; tinyxml2::XMLComment::ParseDeep
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?Accept@XMLComment@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_visitor$ = 8						; size = 4
?Accept@XMLComment@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z PROC ; tinyxml2::XMLComment::Accept, COMDAT
; _this$ = ecx

; 970  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 971  :     return visitor->Visit( *this );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _visitor$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _visitor$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 972  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Accept@XMLComment@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z ENDP ; tinyxml2::XMLComment::Accept
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ToComment@XMLComment@tinyxml2@@UBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToComment@XMLComment@tinyxml2@@UBEPBV12@XZ PROC	; tinyxml2::XMLComment::ToComment, COMDAT
; _this$ = ecx

; 948  :     virtual const XMLComment* ToComment() const		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 949  :         return this;

	mov	eax, DWORD PTR _this$[ebp]

; 950  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToComment@XMLComment@tinyxml2@@UBEPBV12@XZ ENDP	; tinyxml2::XMLComment::ToComment
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ToComment@XMLComment@tinyxml2@@UAEPAV12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToComment@XMLComment@tinyxml2@@UAEPAV12@XZ PROC	; tinyxml2::XMLComment::ToComment, COMDAT
; _this$ = ecx

; 945  :     virtual XMLComment*	ToComment()					{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 946  :         return this;

	mov	eax, DWORD PTR _this$[ebp]

; 947  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToComment@XMLComment@tinyxml2@@UAEPAV12@XZ ENDP	; tinyxml2::XMLComment::ToComment
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GXMLText@tinyxml2@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GXMLText@tinyxml2@@MAEPAXI@Z PROC			; tinyxml2::XMLText::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1XMLText@tinyxml2@@MAE@XZ		; tinyxml2::XMLText::~XMLText
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GXMLText@tinyxml2@@MAEPAXI@Z ENDP			; tinyxml2::XMLText::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ??1XMLText@tinyxml2@@MAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1XMLText@tinyxml2@@MAE@XZ PROC			; tinyxml2::XMLText::~XMLText, COMDAT
; _this$ = ecx

; 931  :     virtual ~XMLText()												{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7XMLText@tinyxml2@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1XMLNode@tinyxml2@@MAE@XZ		; tinyxml2::XMLNode::~XMLNode
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1XMLText@tinyxml2@@MAE@XZ ENDP			; tinyxml2::XMLText::~XMLText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ??0XMLText@tinyxml2@@IAE@PAVXMLDocument@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_doc$ = 8						; size = 4
??0XMLText@tinyxml2@@IAE@PAVXMLDocument@1@@Z PROC	; tinyxml2::XMLText::XMLText, COMDAT
; _this$ = ecx

; 930  :     XMLText( XMLDocument* doc )	: XMLNode( doc ), _isCData( false )	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0XMLNode@tinyxml2@@IAE@PAVXMLDocument@1@@Z ; tinyxml2::XMLNode::XMLNode
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7XMLText@tinyxml2@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+44], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0XMLText@tinyxml2@@IAE@PAVXMLDocument@1@@Z ENDP	; tinyxml2::XMLText::XMLText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ShallowEqual@XMLText@tinyxml2@@UBE_NPBVXMLNode@2@@Z
_TEXT	SEGMENT
tv87 = -220						; size = 4
_text$ = -20						; size = 4
_this$ = -8						; size = 4
_compare$ = 8						; size = 4
?ShallowEqual@XMLText@tinyxml2@@UBE_NPBVXMLNode@2@@Z PROC ; tinyxml2::XMLText::ShallowEqual, COMDAT
; _this$ = ecx

; 916  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 917  :     const XMLText* text = compare->ToText();

	mov	eax, DWORD PTR _compare$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _compare$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _text$[ebp], eax

; 918  :     return ( text && XMLUtil::StringEqual( text->Value(), Value() ) );

	cmp	DWORD PTR _text$[ebp], 0
	je	SHORT $LN3@ShallowEqu
	push	2147483647				; 7fffffffH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value
	push	eax
	call	?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
	add	esp, 12					; 0000000cH
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@ShallowEqu
	mov	DWORD PTR tv87[ebp], 1
	jmp	SHORT $LN4@ShallowEqu
$LN3@ShallowEqu:
	mov	DWORD PTR tv87[ebp], 0
$LN4@ShallowEqu:
	mov	al, BYTE PTR tv87[ebp]

; 919  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ShallowEqual@XMLText@tinyxml2@@UBE_NPBVXMLNode@2@@Z ENDP ; tinyxml2::XMLText::ShallowEqual
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ShallowClone@XMLText@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z
_TEXT	SEGMENT
_text$ = -20						; size = 4
_this$ = -8						; size = 4
_doc$ = 8						; size = 4
?ShallowClone@XMLText@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z PROC ; tinyxml2::XMLText::ShallowClone, COMDAT
; _this$ = ecx

; 905  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 906  :     if ( !doc ) {

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN1@ShallowClo

; 907  :         doc = _document;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _doc$[ebp], ecx
$LN1@ShallowClo:

; 908  :     }
; 909  :     XMLText* text = doc->NewText( Value() );	// fixme: this will always allocate memory. Intern?

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	call	?NewText@XMLDocument@tinyxml2@@QAEPAVXMLText@2@PBD@Z ; tinyxml2::XMLDocument::NewText
	mov	DWORD PTR _text$[ebp], eax

; 910  :     text->SetCData( this->CData() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CData@XMLText@tinyxml2@@QBE_NXZ	; tinyxml2::XMLText::CData
	movzx	eax, al
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	call	?SetCData@XMLText@tinyxml2@@QAEX_N@Z	; tinyxml2::XMLText::SetCData

; 911  :     return text;

	mov	eax, DWORD PTR _text$[ebp]

; 912  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ShallowClone@XMLText@tinyxml2@@UBEPAVXMLNode@2@PAVXMLDocument@2@@Z ENDP ; tinyxml2::XMLText::ShallowClone
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ParseDeep@XMLText@tinyxml2@@UAEPADPADPAVStrPair@2@@Z
_TEXT	SEGMENT
tv129 = -232						; size = 4
_flags$1 = -32						; size = 4
_start$ = -20						; size = 4
_this$ = -8						; size = 4
_p$ = 8							; size = 4
___formal$ = 12						; size = 4
?ParseDeep@XMLText@tinyxml2@@UAEPADPADPAVStrPair@2@@Z PROC ; tinyxml2::XMLText::ParseDeep, COMDAT
; _this$ = ecx

; 877  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 878  :     const char* start = p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _start$[ebp], eax

; 879  :     if ( this->CData() ) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CData@XMLText@tinyxml2@@QBE_NXZ	; tinyxml2::XMLText::CData
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@ParseDeep

; 880  :         p = _value.ParseText( p, "]]>", StrPair::NEEDS_NEWLINE_NORMALIZATION );

	push	2
	push	OFFSET ??_C@_03MCHNFBAC@?$FN?$FN?$DO?$AA@
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?ParseText@StrPair@tinyxml2@@QAEPADPADPBDH@Z ; tinyxml2::StrPair::ParseText
	mov	DWORD PTR _p$[ebp], eax

; 881  :         if ( !p ) {

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN5@ParseDeep

; 882  :             _document->SetError( XML_ERROR_PARSING_CDATA, start, 0 );

	push	0
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	push	11					; 0000000bH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError
$LN5@ParseDeep:

; 883  :         }
; 884  :         return p;

	mov	eax, DWORD PTR _p$[ebp]
	jmp	$LN7@ParseDeep

; 885  :     }
; 886  :     else {

	jmp	$LN4@ParseDeep
$LN6@ParseDeep:

; 887  :         int flags = _document->ProcessEntities() ? StrPair::TEXT_ELEMENT : StrPair::TEXT_ELEMENT_LEAVE_ENTITIES;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?ProcessEntities@XMLDocument@tinyxml2@@QBE_NXZ ; tinyxml2::XMLDocument::ProcessEntities
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN9@ParseDeep
	mov	DWORD PTR tv129[ebp], 3
	jmp	SHORT $LN10@ParseDeep
$LN9@ParseDeep:
	mov	DWORD PTR tv129[ebp], 2
$LN10@ParseDeep:
	mov	edx, DWORD PTR tv129[ebp]
	mov	DWORD PTR _flags$1[ebp], edx

; 888  :         if ( _document->WhitespaceMode() == COLLAPSE_WHITESPACE ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?WhitespaceMode@XMLDocument@tinyxml2@@QBE?AW4Whitespace@2@XZ ; tinyxml2::XMLDocument::WhitespaceMode
	cmp	eax, 1
	jne	SHORT $LN3@ParseDeep

; 889  :             flags |= StrPair::COLLAPSE_WHITESPACE;

	mov	eax, DWORD PTR _flags$1[ebp]
	or	eax, 4
	mov	DWORD PTR _flags$1[ebp], eax
$LN3@ParseDeep:

; 890  :         }
; 891  : 
; 892  :         p = _value.ParseText( p, "<", flags );

	mov	eax, DWORD PTR _flags$1[ebp]
	push	eax
	push	OFFSET ??_C@_01MNNFJEPP@?$DM?$AA@
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?ParseText@StrPair@tinyxml2@@QAEPADPADPBDH@Z ; tinyxml2::StrPair::ParseText
	mov	DWORD PTR _p$[ebp], eax

; 893  :         if ( !p ) {

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN2@ParseDeep

; 894  :             _document->SetError( XML_ERROR_PARSING_TEXT, start, 0 );

	push	0
	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError
$LN2@ParseDeep:

; 895  :         }
; 896  :         if ( p && *p ) {

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN4@ParseDeep
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN4@ParseDeep

; 897  :             return p-1;

	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, 1
	jmp	SHORT $LN7@ParseDeep
$LN4@ParseDeep:

; 898  :         }
; 899  :     }
; 900  :     return 0;

	xor	eax, eax
$LN7@ParseDeep:

; 901  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ParseDeep@XMLText@tinyxml2@@UAEPADPADPAVStrPair@2@@Z ENDP ; tinyxml2::XMLText::ParseDeep
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?CData@XMLText@tinyxml2@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?CData@XMLText@tinyxml2@@QBE_NXZ PROC			; tinyxml2::XMLText::CData, COMDAT
; _this$ = ecx

; 921  :     bool CData() const						{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 922  :         return _isCData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+44]

; 923  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CData@XMLText@tinyxml2@@QBE_NXZ ENDP			; tinyxml2::XMLText::CData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?SetCData@XMLText@tinyxml2@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_isCData$ = 8						; size = 1
?SetCData@XMLText@tinyxml2@@QAEX_N@Z PROC		; tinyxml2::XMLText::SetCData, COMDAT
; _this$ = ecx

; 917  :     void SetCData( bool isCData )			{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 918  :         _isCData = isCData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _isCData$[ebp]
	mov	BYTE PTR [eax+44], cl

; 919  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCData@XMLText@tinyxml2@@QAEX_N@Z ENDP		; tinyxml2::XMLText::SetCData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ToText@XMLText@tinyxml2@@UBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToText@XMLText@tinyxml2@@UBEPBV12@XZ PROC		; tinyxml2::XMLText::ToText, COMDAT
; _this$ = ecx

; 912  :     virtual const XMLText* ToText() const	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 913  :         return this;

	mov	eax, DWORD PTR _this$[ebp]

; 914  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToText@XMLText@tinyxml2@@UBEPBV12@XZ ENDP		; tinyxml2::XMLText::ToText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ToText@XMLText@tinyxml2@@UAEPAV12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToText@XMLText@tinyxml2@@UAEPAV12@XZ PROC		; tinyxml2::XMLText::ToText, COMDAT
; _this$ = ecx

; 909  :     virtual XMLText* ToText()			{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 910  :         return this;

	mov	eax, DWORD PTR _this$[ebp]

; 911  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToText@XMLText@tinyxml2@@UAEPAV12@XZ ENDP		; tinyxml2::XMLText::ToText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?Accept@XMLText@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_visitor$ = 8						; size = 4
?Accept@XMLText@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z PROC	; tinyxml2::XMLText::Accept, COMDAT
; _this$ = ecx

; 923  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 924  :     return visitor->Visit( *this );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _visitor$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _visitor$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 925  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Accept@XMLText@tinyxml2@@UBE_NPAVXMLVisitor@2@@Z ENDP	; tinyxml2::XMLText::Accept
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GXMLNode@tinyxml2@@MAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GXMLNode@tinyxml2@@MAEPAXI@Z PROC			; tinyxml2::XMLNode::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1XMLNode@tinyxml2@@MAE@XZ		; tinyxml2::XMLNode::~XMLNode
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GXMLNode@tinyxml2@@MAEPAXI@Z ENDP			; tinyxml2::XMLNode::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?DeleteNode@XMLNode@tinyxml2@@CAXPAV12@@Z
_TEXT	SEGMENT
_pool$ = -8						; size = 4
_node$ = 8						; size = 4
?DeleteNode@XMLNode@tinyxml2@@CAXPAV12@@Z PROC		; tinyxml2::XMLNode::DeleteNode, COMDAT

; 866  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 867  :     if ( node == 0 ) {

	cmp	DWORD PTR _node$[ebp], 0
	jne	SHORT $LN1@DeleteNode

; 868  :         return;

	jmp	SHORT $LN2@DeleteNode
$LN1@DeleteNode:

; 869  :     }
; 870  :     MemPool* pool = node->_memPool;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _pool$[ebp], ecx

; 871  :     node->~XMLNode();

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+64]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 872  :     pool->Free( node );

	mov	esi, esp
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pool$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _pool$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@DeleteNode:

; 873  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteNode@XMLNode@tinyxml2@@CAXPAV12@@Z ENDP		; tinyxml2::XMLNode::DeleteNode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?Unlink@XMLNode@tinyxml2@@AAEXPAV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_child$ = 8						; size = 4
?Unlink@XMLNode@tinyxml2@@AAEXPAV12@@Z PROC		; tinyxml2::XMLNode::Unlink, COMDAT
; _this$ = ecx

; 613  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 614  :     if ( child == _firstChild ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _child$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jne	SHORT $LN4@Unlink

; 615  :         _firstChild = _firstChild->_next;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR [edx+24], eax
$LN4@Unlink:

; 616  :     }
; 617  :     if ( child == _lastChild ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _child$[ebp]
	cmp	ecx, DWORD PTR [eax+28]
	jne	SHORT $LN3@Unlink

; 618  :         _lastChild = _lastChild->_prev;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+32]
	mov	DWORD PTR [edx+28], eax
$LN3@Unlink:

; 619  :     }
; 620  : 
; 621  :     if ( child->_prev ) {

	mov	eax, DWORD PTR _child$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN2@Unlink

; 622  :         child->_prev->_next = child->_next;

	mov	eax, DWORD PTR _child$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _child$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
$LN2@Unlink:

; 623  :     }
; 624  :     if ( child->_next ) {

	mov	eax, DWORD PTR _child$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN1@Unlink

; 625  :         child->_next->_prev = child->_prev;

	mov	eax, DWORD PTR _child$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _child$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+32], eax
$LN1@Unlink:

; 626  :     }
; 627  : 	child->_parent = 0;

	mov	eax, DWORD PTR _child$[ebp]
	mov	DWORD PTR [eax+8], 0

; 628  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Unlink@XMLNode@tinyxml2@@AAEXPAV12@@Z ENDP		; tinyxml2::XMLNode::Unlink
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ??1XMLNode@tinyxml2@@MAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1XMLNode@tinyxml2@@MAE@XZ PROC			; tinyxml2::XMLNode::~XMLNode, COMDAT
; _this$ = ecx

; 577  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1XMLNode@tinyxml2@@MAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7XMLNode@tinyxml2@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 578  :     DeleteChildren();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteChildren@XMLNode@tinyxml2@@QAEXXZ ; tinyxml2::XMLNode::DeleteChildren

; 579  :     if ( _parent ) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@XMLNode

; 580  :         _parent->Unlink( this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Unlink@XMLNode@tinyxml2@@AAEXPAV12@@Z	; tinyxml2::XMLNode::Unlink
$LN2@XMLNode:

; 581  :     }
; 582  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1StrPair@tinyxml2@@QAE@XZ		; tinyxml2::StrPair::~StrPair
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1XMLNode@tinyxml2@@MAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1StrPair@tinyxml2@@QAE@XZ		; tinyxml2::StrPair::~StrPair
__ehhandler$??1XMLNode@tinyxml2@@MAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1XMLNode@tinyxml2@@MAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1XMLNode@tinyxml2@@MAE@XZ ENDP			; tinyxml2::XMLNode::~XMLNode
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ??0XMLNode@tinyxml2@@IAE@PAVXMLDocument@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_doc$ = 8						; size = 4
??0XMLNode@tinyxml2@@IAE@PAVXMLDocument@1@@Z PROC	; tinyxml2::XMLNode::XMLNode, COMDAT
; _this$ = ecx

; 572  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7XMLNode@tinyxml2@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _doc$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0StrPair@tinyxml2@@QAE@XZ		; tinyxml2::StrPair::StrPair
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0

; 573  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0XMLNode@tinyxml2@@IAE@PAVXMLDocument@1@@Z ENDP	; tinyxml2::XMLNode::XMLNode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ParseDeep@XMLNode@tinyxml2@@UAEPADPADPAVStrPair@2@@Z
_TEXT	SEGMENT
$T2 = -280						; size = 4
_mismatch$3 = -73					; size = 1
_ele$4 = -64						; size = 4
_endTag$5 = -52						; size = 12
_node$6 = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
_parentEnd$ = 12					; size = 4
?ParseDeep@XMLNode@tinyxml2@@UAEPADPADPAVStrPair@2@@Z PROC ; tinyxml2::XMLNode::ParseDeep, COMDAT
; _this$ = ecx

; 786  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ParseDeep@XMLNode@tinyxml2@@UAEPADPADPAVStrPair@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-284]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
$LN18@ParseDeep:

; 787  :     // This is a recursive method, but thinking about it "at the current level"
; 788  :     // it is a pretty simple flat list:
; 789  :     //		<foo/>
; 790  :     //		<!-- comment -->
; 791  :     //
; 792  :     // With a special case:
; 793  :     //		<foo>
; 794  :     //		</foo>
; 795  :     //		<!-- comment -->
; 796  :     //
; 797  :     // Where the closing element (/foo) *must* be the next thing after the opening
; 798  :     // element, and the names must match. BUT the tricky bit is that the closing
; 799  :     // element will be read by the child.
; 800  :     //
; 801  :     // 'endTag' is the end tag for this node, it is returned by a call to a child.
; 802  :     // 'parentEnd' is the end tag for the parent, which is filled in and returned.
; 803  : 
; 804  :     while( p && *p ) {

	cmp	DWORD PTR _p$[ebp], 0
	je	$LN17@ParseDeep
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN17@ParseDeep

; 805  :         XMLNode* node = 0;

	mov	DWORD PTR _node$6[ebp], 0

; 806  : 
; 807  :         p = _document->Identify( p, &node );

	lea	eax, DWORD PTR _node$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?Identify@XMLDocument@tinyxml2@@QAEPADPADPAPAVXMLNode@2@@Z ; tinyxml2::XMLDocument::Identify
	mov	DWORD PTR _p$[ebp], eax

; 808  :         if ( p == 0 || node == 0 ) {

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN15@ParseDeep
	cmp	DWORD PTR _node$6[ebp], 0
	jne	SHORT $LN16@ParseDeep
$LN15@ParseDeep:

; 809  :             break;

	jmp	$LN17@ParseDeep
$LN16@ParseDeep:

; 810  :         }
; 811  : 
; 812  :         StrPair endTag;

	lea	ecx, DWORD PTR _endTag$5[ebp]
	call	??0StrPair@tinyxml2@@QAE@XZ		; tinyxml2::StrPair::StrPair
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 813  :         p = node->ParseDeep( p, &endTag );

	mov	esi, esp
	lea	eax, DWORD PTR _endTag$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _node$6[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _node$6[ebp]
	mov	edx, DWORD PTR [eax+60]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _p$[ebp], eax

; 814  :         if ( !p ) {

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN14@ParseDeep

; 815  :             DeleteNode( node );

	mov	eax, DWORD PTR _node$6[ebp]
	push	eax
	call	?DeleteNode@XMLNode@tinyxml2@@CAXPAV12@@Z ; tinyxml2::XMLNode::DeleteNode
	add	esp, 4

; 816  :             node = 0;

	mov	DWORD PTR _node$6[ebp], 0

; 817  :             if ( !_document->Error() ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?Error@XMLDocument@tinyxml2@@QBE_NXZ	; tinyxml2::XMLDocument::Error
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN13@ParseDeep

; 818  :                 _document->SetError( XML_ERROR_PARSING, 0, 0 );

	push	0
	push	0
	push	17					; 00000011H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError
$LN13@ParseDeep:

; 819  :             }
; 820  :             break;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _endTag$5[ebp]
	call	??1StrPair@tinyxml2@@QAE@XZ		; tinyxml2::StrPair::~StrPair
	jmp	$LN17@ParseDeep
$LN14@ParseDeep:

; 821  :         }
; 822  : 
; 823  :         XMLElement* ele = node->ToElement();

	mov	eax, DWORD PTR _node$6[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _node$6[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ele$4[ebp], eax

; 824  :         // We read the end tag. Return it to the parent.
; 825  :         if ( ele && ele->ClosingType() == XMLElement::CLOSING ) {

	cmp	DWORD PTR _ele$4[ebp], 0
	je	SHORT $LN12@ParseDeep
	mov	ecx, DWORD PTR _ele$4[ebp]
	call	?ClosingType@XMLElement@tinyxml2@@QBEHXZ ; tinyxml2::XMLElement::ClosingType
	cmp	eax, 2
	jne	SHORT $LN12@ParseDeep

; 826  :             if ( parentEnd ) {

	cmp	DWORD PTR _parentEnd$[ebp], 0
	je	SHORT $LN11@ParseDeep

; 827  :                 *parentEnd = ele->_value;

	mov	eax, DWORD PTR _ele$4[ebp]
	add	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _parentEnd$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
$LN11@ParseDeep:

; 828  :             }
; 829  : 			node->_memPool->SetTracked();	// created and then immediately deleted.

	mov	eax, DWORD PTR _node$6[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _node$6[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 830  :             DeleteNode( node );

	mov	eax, DWORD PTR _node$6[ebp]
	push	eax
	call	?DeleteNode@XMLNode@tinyxml2@@CAXPAV12@@Z ; tinyxml2::XMLNode::DeleteNode
	add	esp, 4

; 831  :             return p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _endTag$5[ebp]
	call	??1StrPair@tinyxml2@@QAE@XZ		; tinyxml2::StrPair::~StrPair
	mov	eax, DWORD PTR $T2[ebp]
	jmp	$LN19@ParseDeep
$LN12@ParseDeep:

; 832  :         }
; 833  : 
; 834  :         // Handle an end tag returned to this level.
; 835  :         // And handle a bunch of annoying errors.
; 836  :         if ( ele ) {

	cmp	DWORD PTR _ele$4[ebp], 0
	je	$LN10@ParseDeep

; 837  :             bool mismatch = false;

	mov	BYTE PTR _mismatch$3[ebp], 0

; 838  :             if ( endTag.Empty() && ele->ClosingType() == XMLElement::OPEN ) {

	lea	ecx, DWORD PTR _endTag$5[ebp]
	call	?Empty@StrPair@tinyxml2@@QBE_NXZ	; tinyxml2::StrPair::Empty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@ParseDeep
	mov	ecx, DWORD PTR _ele$4[ebp]
	call	?ClosingType@XMLElement@tinyxml2@@QBEHXZ ; tinyxml2::XMLElement::ClosingType
	test	eax, eax
	jne	SHORT $LN9@ParseDeep

; 839  :                 mismatch = true;

	mov	BYTE PTR _mismatch$3[ebp], 1
	jmp	SHORT $LN8@ParseDeep
$LN9@ParseDeep:

; 840  :             }
; 841  :             else if ( !endTag.Empty() && ele->ClosingType() != XMLElement::OPEN ) {

	lea	ecx, DWORD PTR _endTag$5[ebp]
	call	?Empty@StrPair@tinyxml2@@QBE_NXZ	; tinyxml2::StrPair::Empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN7@ParseDeep
	mov	ecx, DWORD PTR _ele$4[ebp]
	call	?ClosingType@XMLElement@tinyxml2@@QBEHXZ ; tinyxml2::XMLElement::ClosingType
	test	eax, eax
	je	SHORT $LN7@ParseDeep

; 842  :                 mismatch = true;

	mov	BYTE PTR _mismatch$3[ebp], 1
	jmp	SHORT $LN8@ParseDeep
$LN7@ParseDeep:

; 843  :             }
; 844  :             else if ( !endTag.Empty() ) {

	lea	ecx, DWORD PTR _endTag$5[ebp]
	call	?Empty@StrPair@tinyxml2@@QBE_NXZ	; tinyxml2::StrPair::Empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN8@ParseDeep

; 845  :                 if ( !XMLUtil::StringEqual( endTag.GetStr(), node->Value() )) {

	push	2147483647				; 7fffffffH
	mov	ecx, DWORD PTR _node$6[ebp]
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value
	push	eax
	lea	ecx, DWORD PTR _endTag$5[ebp]
	call	?GetStr@StrPair@tinyxml2@@QAEPBDXZ	; tinyxml2::StrPair::GetStr
	push	eax
	call	?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
	add	esp, 12					; 0000000cH
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN8@ParseDeep

; 846  :                     mismatch = true;

	mov	BYTE PTR _mismatch$3[ebp], 1
$LN8@ParseDeep:

; 847  :                 }
; 848  :             }
; 849  :             if ( mismatch ) {

	movzx	eax, BYTE PTR _mismatch$3[ebp]
	test	eax, eax
	je	SHORT $LN10@ParseDeep

; 850  :                 _document->SetError( XML_ERROR_MISMATCHED_ELEMENT, node->Value(), 0 );

	push	0
	mov	ecx, DWORD PTR _node$6[ebp]
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value
	push	eax
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?SetError@XMLDocument@tinyxml2@@QAEXW4XMLError@2@PBD1@Z ; tinyxml2::XMLDocument::SetError

; 851  :                 p = 0;

	mov	DWORD PTR _p$[ebp], 0
$LN10@ParseDeep:

; 852  :             }
; 853  :         }
; 854  :         if ( p == 0 ) {

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN2@ParseDeep

; 855  :             DeleteNode( node );

	mov	eax, DWORD PTR _node$6[ebp]
	push	eax
	call	?DeleteNode@XMLNode@tinyxml2@@CAXPAV12@@Z ; tinyxml2::XMLNode::DeleteNode
	add	esp, 4

; 856  :             node = 0;

	mov	DWORD PTR _node$6[ebp], 0
$LN2@ParseDeep:

; 857  :         }
; 858  :         if ( node ) {

	cmp	DWORD PTR _node$6[ebp], 0
	je	SHORT $LN1@ParseDeep

; 859  :             this->InsertEndChild( node );

	mov	eax, DWORD PTR _node$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InsertEndChild@XMLNode@tinyxml2@@QAEPAV12@PAV12@@Z ; tinyxml2::XMLNode::InsertEndChild
$LN1@ParseDeep:

; 860  :         }
; 861  :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _endTag$5[ebp]
	call	??1StrPair@tinyxml2@@QAE@XZ		; tinyxml2::StrPair::~StrPair
	jmp	$LN18@ParseDeep
$LN17@ParseDeep:

; 862  :     return 0;

	xor	eax, eax
$LN19@ParseDeep:

; 863  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@ParseDeep
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 284				; 0000011cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN26@ParseDeep:
	DD	2
	DD	$LN25@ParseDeep
$LN25@ParseDeep:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN22@ParseDeep
	DD	-52					; ffffffccH
	DD	12					; 0000000cH
	DD	$LN23@ParseDeep
$LN23@ParseDeep:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	84					; 00000054H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	0
$LN22@ParseDeep:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ParseDeep@XMLNode@tinyxml2@@UAEPADPADPAVStrPair@2@@Z$0:
	lea	ecx, DWORD PTR _endTag$5[ebp]
	jmp	??1StrPair@tinyxml2@@QAE@XZ		; tinyxml2::StrPair::~StrPair
__ehhandler$?ParseDeep@XMLNode@tinyxml2@@UAEPADPADPAVStrPair@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-288]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ParseDeep@XMLNode@tinyxml2@@UAEPADPADPAVStrPair@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ParseDeep@XMLNode@tinyxml2@@UAEPADPADPAVStrPair@2@@Z ENDP ; tinyxml2::XMLNode::ParseDeep
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?DeleteChild@XMLNode@tinyxml2@@QAEXPAV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_node$ = 8						; size = 4
?DeleteChild@XMLNode@tinyxml2@@QAEXPAV12@@Z PROC	; tinyxml2::XMLNode::DeleteChild, COMDAT
; _this$ = ecx

; 632  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 633  :     TIXMLASSERT( node->_parent == this );

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _this$[ebp]
	je	SHORT $LN1@DeleteChil
	int	3
$LN1@DeleteChil:

; 634  :     DeleteNode( node );

	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	call	?DeleteNode@XMLNode@tinyxml2@@CAXPAV12@@Z ; tinyxml2::XMLNode::DeleteNode
	add	esp, 4

; 635  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?DeleteChild@XMLNode@tinyxml2@@QAEXPAV12@@Z ENDP	; tinyxml2::XMLNode::DeleteChild
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?DeleteChildren@XMLNode@tinyxml2@@QAEXXZ
_TEXT	SEGMENT
_node$1 = -20						; size = 4
_this$ = -8						; size = 4
?DeleteChildren@XMLNode@tinyxml2@@QAEXXZ PROC		; tinyxml2::XMLNode::DeleteChildren, COMDAT
; _this$ = ecx

; 601  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN2@DeleteChil:

; 602  :     while( _firstChild ) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN1@DeleteChil

; 603  :         XMLNode* node = _firstChild;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _node$1[ebp], ecx

; 604  :         Unlink( node );

	mov	eax, DWORD PTR _node$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Unlink@XMLNode@tinyxml2@@AAEXPAV12@@Z	; tinyxml2::XMLNode::Unlink

; 605  : 
; 606  :         DeleteNode( node );

	mov	eax, DWORD PTR _node$1[ebp]
	push	eax
	call	?DeleteNode@XMLNode@tinyxml2@@CAXPAV12@@Z ; tinyxml2::XMLNode::DeleteNode
	add	esp, 4

; 607  :     }

	jmp	SHORT $LN2@DeleteChil
$LN1@DeleteChil:

; 608  :     _firstChild = _lastChild = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], 0

; 609  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteChildren@XMLNode@tinyxml2@@QAEXXZ ENDP		; tinyxml2::XMLNode::DeleteChildren
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?InsertAfterChild@XMLNode@tinyxml2@@QAEPAV12@PAV12@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_afterThis$ = 8						; size = 4
_addThis$ = 12						; size = 4
?InsertAfterChild@XMLNode@tinyxml2@@QAEPAV12@PAV12@0@Z PROC ; tinyxml2::XMLNode::InsertAfterChild, COMDAT
; _this$ = ecx

; 702  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 703  : 	if (addThis->_document != _document)

	mov	eax, DWORD PTR _addThis$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	je	SHORT $LN6@InsertAfte

; 704  : 		return 0;

	xor	eax, eax
	jmp	$LN7@InsertAfte
$LN6@InsertAfte:

; 705  : 
; 706  :     TIXMLASSERT( afterThis->_parent == this );

	mov	eax, DWORD PTR _afterThis$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _this$[ebp]
	je	SHORT $LN5@InsertAfte
	int	3
$LN5@InsertAfte:

; 707  : 
; 708  :     if ( afterThis->_parent != this ) {

	mov	eax, DWORD PTR _afterThis$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _this$[ebp]
	je	SHORT $LN4@InsertAfte

; 709  :         return 0;

	xor	eax, eax
	jmp	$LN7@InsertAfte
$LN4@InsertAfte:

; 710  :     }
; 711  : 
; 712  :     if ( afterThis->_next == 0 ) {

	mov	eax, DWORD PTR _afterThis$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN3@InsertAfte

; 713  :         // The last node or the only node.
; 714  :         return InsertEndChild( addThis );

	mov	eax, DWORD PTR _addThis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InsertEndChild@XMLNode@tinyxml2@@QAEPAV12@PAV12@@Z ; tinyxml2::XMLNode::InsertEndChild
	jmp	SHORT $LN7@InsertAfte
$LN3@InsertAfte:

; 715  :     }
; 716  : 	if (addThis->_parent)

	mov	eax, DWORD PTR _addThis$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@InsertAfte

; 717  : 		addThis->_parent->Unlink( addThis );

	mov	eax, DWORD PTR _addThis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _addThis$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Unlink@XMLNode@tinyxml2@@AAEXPAV12@@Z	; tinyxml2::XMLNode::Unlink

; 718  : 	else

	jmp	SHORT $LN1@InsertAfte
$LN2@InsertAfte:

; 719  : 	   addThis->_memPool->SetTracked();

	mov	eax, DWORD PTR _addThis$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _addThis$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@InsertAfte:

; 720  :     addThis->_prev = afterThis;

	mov	eax, DWORD PTR _addThis$[ebp]
	mov	ecx, DWORD PTR _afterThis$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 721  :     addThis->_next = afterThis->_next;

	mov	eax, DWORD PTR _addThis$[ebp]
	mov	ecx, DWORD PTR _afterThis$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx

; 722  :     afterThis->_next->_prev = addThis;

	mov	eax, DWORD PTR _afterThis$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _addThis$[ebp]
	mov	DWORD PTR [ecx+32], edx

; 723  :     afterThis->_next = addThis;

	mov	eax, DWORD PTR _afterThis$[ebp]
	mov	ecx, DWORD PTR _addThis$[ebp]
	mov	DWORD PTR [eax+36], ecx

; 724  :     addThis->_parent = this;

	mov	eax, DWORD PTR _addThis$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 725  :     return addThis;

	mov	eax, DWORD PTR _addThis$[ebp]
$LN7@InsertAfte:

; 726  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?InsertAfterChild@XMLNode@tinyxml2@@QAEPAV12@PAV12@0@Z ENDP ; tinyxml2::XMLNode::InsertAfterChild
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?InsertFirstChild@XMLNode@tinyxml2@@QAEPAV12@PAV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_addThis$ = 8						; size = 4
?InsertFirstChild@XMLNode@tinyxml2@@QAEPAV12@PAV12@@Z PROC ; tinyxml2::XMLNode::InsertFirstChild, COMDAT
; _this$ = ecx

; 670  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 671  : 	if (addThis->_document != _document)

	mov	eax, DWORD PTR _addThis$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	je	SHORT $LN8@InsertFirs

; 672  : 		return 0;

	xor	eax, eax
	jmp	$LN9@InsertFirs
$LN8@InsertFirs:

; 673  : 
; 674  : 	if (addThis->_parent)

	mov	eax, DWORD PTR _addThis$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN7@InsertFirs

; 675  : 		addThis->_parent->Unlink( addThis );

	mov	eax, DWORD PTR _addThis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _addThis$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Unlink@XMLNode@tinyxml2@@AAEXPAV12@@Z	; tinyxml2::XMLNode::Unlink

; 676  : 	else

	jmp	SHORT $LN6@InsertFirs
$LN7@InsertFirs:

; 677  : 	   addThis->_memPool->SetTracked();

	mov	eax, DWORD PTR _addThis$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _addThis$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@InsertFirs:

; 678  : 
; 679  :     if ( _firstChild ) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN5@InsertFirs

; 680  :         TIXMLASSERT( _lastChild );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN4@InsertFirs
	int	3
$LN4@InsertFirs:

; 681  :         TIXMLASSERT( _firstChild->_prev == 0 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN3@InsertFirs
	int	3
$LN3@InsertFirs:

; 682  : 
; 683  :         _firstChild->_prev = addThis;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _addThis$[ebp]
	mov	DWORD PTR [ecx+32], edx

; 684  :         addThis->_next = _firstChild;

	mov	eax, DWORD PTR _addThis$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+36], edx

; 685  :         _firstChild = addThis;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _addThis$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 686  : 
; 687  :         addThis->_prev = 0;

	mov	eax, DWORD PTR _addThis$[ebp]
	mov	DWORD PTR [eax+32], 0

; 688  :     }
; 689  :     else {

	jmp	SHORT $LN2@InsertFirs
$LN5@InsertFirs:

; 690  :         TIXMLASSERT( _lastChild == 0 );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN1@InsertFirs
	int	3
$LN1@InsertFirs:

; 691  :         _firstChild = _lastChild = addThis;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _addThis$[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _addThis$[ebp]
	mov	DWORD PTR [edx+24], eax

; 692  : 
; 693  :         addThis->_prev = 0;

	mov	eax, DWORD PTR _addThis$[ebp]
	mov	DWORD PTR [eax+32], 0

; 694  :         addThis->_next = 0;

	mov	eax, DWORD PTR _addThis$[ebp]
	mov	DWORD PTR [eax+36], 0
$LN2@InsertFirs:

; 695  :     }
; 696  :     addThis->_parent = this;

	mov	eax, DWORD PTR _addThis$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 697  :     return addThis;

	mov	eax, DWORD PTR _addThis$[ebp]
$LN9@InsertFirs:

; 698  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?InsertFirstChild@XMLNode@tinyxml2@@QAEPAV12@PAV12@@Z ENDP ; tinyxml2::XMLNode::InsertFirstChild
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?InsertEndChild@XMLNode@tinyxml2@@QAEPAV12@PAV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_addThis$ = 8						; size = 4
?InsertEndChild@XMLNode@tinyxml2@@QAEPAV12@PAV12@@Z PROC ; tinyxml2::XMLNode::InsertEndChild, COMDAT
; _this$ = ecx

; 639  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 640  : 	if (addThis->_document != _document)

	mov	eax, DWORD PTR _addThis$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+4]
	je	SHORT $LN8@InsertEndC

; 641  : 		return 0;

	xor	eax, eax
	jmp	$LN9@InsertEndC
$LN8@InsertEndC:

; 642  : 
; 643  : 	if (addThis->_parent)

	mov	eax, DWORD PTR _addThis$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN7@InsertEndC

; 644  : 		addThis->_parent->Unlink( addThis );

	mov	eax, DWORD PTR _addThis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _addThis$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?Unlink@XMLNode@tinyxml2@@AAEXPAV12@@Z	; tinyxml2::XMLNode::Unlink

; 645  : 	else

	jmp	SHORT $LN6@InsertEndC
$LN7@InsertEndC:

; 646  : 	   addThis->_memPool->SetTracked();

	mov	eax, DWORD PTR _addThis$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _addThis$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR [edx+40]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@InsertEndC:

; 647  : 
; 648  :     if ( _lastChild ) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN5@InsertEndC

; 649  :         TIXMLASSERT( _firstChild );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN4@InsertEndC
	int	3
$LN4@InsertEndC:

; 650  :         TIXMLASSERT( _lastChild->_next == 0 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN3@InsertEndC
	int	3
$LN3@InsertEndC:

; 651  :         _lastChild->_next = addThis;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _addThis$[ebp]
	mov	DWORD PTR [ecx+36], edx

; 652  :         addThis->_prev = _lastChild;

	mov	eax, DWORD PTR _addThis$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+32], edx

; 653  :         _lastChild = addThis;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _addThis$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 654  : 
; 655  :         addThis->_next = 0;

	mov	eax, DWORD PTR _addThis$[ebp]
	mov	DWORD PTR [eax+36], 0

; 656  :     }
; 657  :     else {

	jmp	SHORT $LN2@InsertEndC
$LN5@InsertEndC:

; 658  :         TIXMLASSERT( _firstChild == 0 );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN1@InsertEndC
	int	3
$LN1@InsertEndC:

; 659  :         _firstChild = _lastChild = addThis;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _addThis$[ebp]
	mov	DWORD PTR [eax+28], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _addThis$[ebp]
	mov	DWORD PTR [edx+24], eax

; 660  : 
; 661  :         addThis->_prev = 0;

	mov	eax, DWORD PTR _addThis$[ebp]
	mov	DWORD PTR [eax+32], 0

; 662  :         addThis->_next = 0;

	mov	eax, DWORD PTR _addThis$[ebp]
	mov	DWORD PTR [eax+36], 0
$LN2@InsertEndC:

; 663  :     }
; 664  :     addThis->_parent = this;

	mov	eax, DWORD PTR _addThis$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 665  :     return addThis;

	mov	eax, DWORD PTR _addThis$[ebp]
$LN9@InsertEndC:

; 666  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?InsertEndChild@XMLNode@tinyxml2@@QAEPAV12@PAV12@@Z ENDP ; tinyxml2::XMLNode::InsertEndChild
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?NextSiblingElement@XMLNode@tinyxml2@@QBEPBVXMLElement@2@PBD@Z
_TEXT	SEGMENT
_element$1 = -32					; size = 4
_node$2 = -20						; size = 4
_this$ = -8						; size = 4
_value$ = 8						; size = 4
?NextSiblingElement@XMLNode@tinyxml2@@QBEPBVXMLElement@2@PBD@Z PROC ; tinyxml2::XMLNode::NextSiblingElement, COMDAT
; _this$ = ecx

; 760  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 761  :     for( XMLNode* node=this->_next; node; node = node->_next ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _node$2[ebp], ecx
	jmp	SHORT $LN5@NextSiblin
$LN4@NextSiblin:
	mov	eax, DWORD PTR _node$2[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _node$2[ebp], ecx
$LN5@NextSiblin:
	cmp	DWORD PTR _node$2[ebp], 0
	je	SHORT $LN3@NextSiblin

; 762  :         const XMLElement* element = node->ToElement();

	mov	eax, DWORD PTR _node$2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _node$2[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _element$1[ebp], eax

; 763  :         if ( element
; 764  :                 && (!value || XMLUtil::StringEqual( value, node->Value() ))) {

	cmp	DWORD PTR _element$1[ebp], 0
	je	SHORT $LN2@NextSiblin
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN1@NextSiblin
	push	2147483647				; 7fffffffH
	mov	ecx, DWORD PTR _node$2[ebp]
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value
	push	eax
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	call	?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
	add	esp, 12					; 0000000cH
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@NextSiblin
$LN1@NextSiblin:

; 765  :             return element;

	mov	eax, DWORD PTR _element$1[ebp]
	jmp	SHORT $LN6@NextSiblin
$LN2@NextSiblin:

; 766  :         }
; 767  :     }

	jmp	SHORT $LN4@NextSiblin
$LN3@NextSiblin:

; 768  :     return 0;

	xor	eax, eax
$LN6@NextSiblin:

; 769  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?NextSiblingElement@XMLNode@tinyxml2@@QBEPBVXMLElement@2@PBD@Z ENDP ; tinyxml2::XMLNode::NextSiblingElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?NextSibling@XMLNode@tinyxml2@@QBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?NextSibling@XMLNode@tinyxml2@@QBEPBV12@XZ PROC		; tinyxml2::XMLNode::NextSibling, COMDAT
; _this$ = ecx

; 766  :     const XMLNode*	NextSibling() const						{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 767  :         return _next;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]

; 768  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?NextSibling@XMLNode@tinyxml2@@QBEPBV12@XZ ENDP		; tinyxml2::XMLNode::NextSibling
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?PreviousSiblingElement@XMLNode@tinyxml2@@QBEPBVXMLElement@2@PBD@Z
_TEXT	SEGMENT
_element$1 = -32					; size = 4
_node$2 = -20						; size = 4
_this$ = -8						; size = 4
_value$ = 8						; size = 4
?PreviousSiblingElement@XMLNode@tinyxml2@@QBEPBVXMLElement@2@PBD@Z PROC ; tinyxml2::XMLNode::PreviousSiblingElement, COMDAT
; _this$ = ecx

; 773  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 774  :     for( XMLNode* node=_prev; node; node = node->_prev ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _node$2[ebp], ecx
	jmp	SHORT $LN5@PreviousSi
$LN4@PreviousSi:
	mov	eax, DWORD PTR _node$2[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _node$2[ebp], ecx
$LN5@PreviousSi:
	cmp	DWORD PTR _node$2[ebp], 0
	je	SHORT $LN3@PreviousSi

; 775  :         const XMLElement* element = node->ToElement();

	mov	eax, DWORD PTR _node$2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _node$2[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _element$1[ebp], eax

; 776  :         if ( element
; 777  :                 && (!value || XMLUtil::StringEqual( value, node->Value() ))) {

	cmp	DWORD PTR _element$1[ebp], 0
	je	SHORT $LN2@PreviousSi
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN1@PreviousSi
	push	2147483647				; 7fffffffH
	mov	ecx, DWORD PTR _node$2[ebp]
	call	?Value@XMLNode@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLNode::Value
	push	eax
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	call	?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
	add	esp, 12					; 0000000cH
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@PreviousSi
$LN1@PreviousSi:

; 778  :             return element;

	mov	eax, DWORD PTR _element$1[ebp]
	jmp	SHORT $LN6@PreviousSi
$LN2@PreviousSi:

; 779  :         }
; 780  :     }

	jmp	SHORT $LN4@PreviousSi
$LN3@PreviousSi:

; 781  :     return 0;

	xor	eax, eax
$LN6@PreviousSi:

; 782  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?PreviousSiblingElement@XMLNode@tinyxml2@@QBEPBVXMLElement@2@PBD@Z ENDP ; tinyxml2::XMLNode::PreviousSiblingElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?LastChildElement@XMLNode@tinyxml2@@QBEPBVXMLElement@2@PBD@Z
_TEXT	SEGMENT
_element$1 = -32					; size = 4
_node$2 = -20						; size = 4
_this$ = -8						; size = 4
_value$ = 8						; size = 4
?LastChildElement@XMLNode@tinyxml2@@QBEPBVXMLElement@2@PBD@Z PROC ; tinyxml2::XMLNode::LastChildElement, COMDAT
; _this$ = ecx

; 746  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 747  :     for( XMLNode* node=_lastChild; node; node=node->_prev ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _node$2[ebp], ecx
	jmp	SHORT $LN6@LastChildE
$LN5@LastChildE:
	mov	eax, DWORD PTR _node$2[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _node$2[ebp], ecx
$LN6@LastChildE:
	cmp	DWORD PTR _node$2[ebp], 0
	je	SHORT $LN4@LastChildE

; 748  :         XMLElement* element = node->ToElement();

	mov	eax, DWORD PTR _node$2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _node$2[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _element$1[ebp], eax

; 749  :         if ( element ) {

	cmp	DWORD PTR _element$1[ebp], 0
	je	SHORT $LN3@LastChildE

; 750  :             if ( !value || XMLUtil::StringEqual( element->Name(), value ) ) {

	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN1@LastChildE
	push	2147483647				; 7fffffffH
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _element$1[ebp]
	call	?Name@XMLElement@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLElement::Name
	push	eax
	call	?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
	add	esp, 12					; 0000000cH
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@LastChildE
$LN1@LastChildE:

; 751  :                 return element;

	mov	eax, DWORD PTR _element$1[ebp]
	jmp	SHORT $LN7@LastChildE
$LN3@LastChildE:

; 752  :             }
; 753  :         }
; 754  :     }

	jmp	SHORT $LN5@LastChildE
$LN4@LastChildE:

; 755  :     return 0;

	xor	eax, eax
$LN7@LastChildE:

; 756  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?LastChildElement@XMLNode@tinyxml2@@QBEPBVXMLElement@2@PBD@Z ENDP ; tinyxml2::XMLNode::LastChildElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?FirstChildElement@XMLNode@tinyxml2@@QBEPBVXMLElement@2@PBD@Z
_TEXT	SEGMENT
_element$1 = -32					; size = 4
_node$2 = -20						; size = 4
_this$ = -8						; size = 4
_value$ = 8						; size = 4
?FirstChildElement@XMLNode@tinyxml2@@QBEPBVXMLElement@2@PBD@Z PROC ; tinyxml2::XMLNode::FirstChildElement, COMDAT
; _this$ = ecx

; 732  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 733  :     for( XMLNode* node=_firstChild; node; node=node->_next ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _node$2[ebp], ecx
	jmp	SHORT $LN6@FirstChild
$LN5@FirstChild:
	mov	eax, DWORD PTR _node$2[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _node$2[ebp], ecx
$LN6@FirstChild:
	cmp	DWORD PTR _node$2[ebp], 0
	je	SHORT $LN4@FirstChild

; 734  :         XMLElement* element = node->ToElement();

	mov	eax, DWORD PTR _node$2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _node$2[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _element$1[ebp], eax

; 735  :         if ( element ) {

	cmp	DWORD PTR _element$1[ebp], 0
	je	SHORT $LN3@FirstChild

; 736  :             if ( !value || XMLUtil::StringEqual( element->Name(), value ) ) {

	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN1@FirstChild
	push	2147483647				; 7fffffffH
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _element$1[ebp]
	call	?Name@XMLElement@tinyxml2@@QBEPBDXZ	; tinyxml2::XMLElement::Name
	push	eax
	call	?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
	add	esp, 12					; 0000000cH
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@FirstChild
$LN1@FirstChild:

; 737  :                 return element;

	mov	eax, DWORD PTR _element$1[ebp]
	jmp	SHORT $LN7@FirstChild
$LN3@FirstChild:

; 738  :             }
; 739  :         }
; 740  :     }

	jmp	SHORT $LN5@FirstChild
$LN4@FirstChild:

; 741  :     return 0;

	xor	eax, eax
$LN7@FirstChild:

; 742  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FirstChildElement@XMLNode@tinyxml2@@QBEPBVXMLElement@2@PBD@Z ENDP ; tinyxml2::XMLNode::FirstChildElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?FirstChild@XMLNode@tinyxml2@@QAEPAV12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?FirstChild@XMLNode@tinyxml2@@QAEPAV12@XZ PROC		; tinyxml2::XMLNode::FirstChild, COMDAT
; _this$ = ecx

; 718  :     XMLNode*		FirstChild()			{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 719  :         return _firstChild;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]

; 720  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FirstChild@XMLNode@tinyxml2@@QAEPAV12@XZ ENDP		; tinyxml2::XMLNode::FirstChild
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ PROC		; tinyxml2::XMLNode::FirstChild, COMDAT
; _this$ = ecx

; 714  :     const XMLNode*  FirstChild() const		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 715  :         return _firstChild;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]

; 716  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FirstChild@XMLNode@tinyxml2@@QBEPBV12@XZ ENDP		; tinyxml2::XMLNode::FirstChild
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Parent@XMLNode@tinyxml2@@QBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Parent@XMLNode@tinyxml2@@QBEPBV12@XZ PROC		; tinyxml2::XMLNode::Parent, COMDAT
; _this$ = ecx

; 700  :     const XMLNode*	Parent() const			{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 701  :         return _parent;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 702  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Parent@XMLNode@tinyxml2@@QBEPBV12@XZ ENDP		; tinyxml2::XMLNode::Parent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?SetValue@XMLNode@tinyxml2@@QAEXPBD_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_str$ = 8						; size = 4
_staticMem$ = 12					; size = 1
?SetValue@XMLNode@tinyxml2@@QAEXPBD_N@Z PROC		; tinyxml2::XMLNode::SetValue, COMDAT
; _this$ = ecx

; 590  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  :     if ( staticMem ) {

	movzx	eax, BYTE PTR _staticMem$[ebp]
	test	eax, eax
	je	SHORT $LN2@SetValue

; 592  :         _value.SetInternedStr( str );

	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?SetInternedStr@StrPair@tinyxml2@@QAEXPBD@Z ; tinyxml2::StrPair::SetInternedStr

; 593  :     }
; 594  :     else {

	jmp	SHORT $LN3@SetValue
$LN2@SetValue:

; 595  :         _value.SetStr( str );

	push	0
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?SetStr@StrPair@tinyxml2@@QAEXPBDH@Z	; tinyxml2::StrPair::SetStr
$LN3@SetValue:

; 596  :     }
; 597  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetValue@XMLNode@tinyxml2@@QAEXPBD_N@Z ENDP		; tinyxml2::XMLNode::SetValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?Value@XMLNode@tinyxml2@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Value@XMLNode@tinyxml2@@QBEPBDXZ PROC			; tinyxml2::XMLNode::Value, COMDAT
; _this$ = ecx

; 585  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  :     return _value.GetStr();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?GetStr@StrPair@tinyxml2@@QAEPBDXZ	; tinyxml2::StrPair::GetStr

; 587  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Value@XMLNode@tinyxml2@@QBEPBDXZ ENDP			; tinyxml2::XMLNode::Value
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ToUnknown@XMLNode@tinyxml2@@UBEPBVXMLUnknown@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToUnknown@XMLNode@tinyxml2@@UBEPBVXMLUnknown@2@XZ PROC	; tinyxml2::XMLNode::ToUnknown, COMDAT
; _this$ = ecx

; 679  :     virtual const XMLUnknown*		ToUnknown() const		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 680  :         return 0;

	xor	eax, eax

; 681  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToUnknown@XMLNode@tinyxml2@@UBEPBVXMLUnknown@2@XZ ENDP	; tinyxml2::XMLNode::ToUnknown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ToDeclaration@XMLNode@tinyxml2@@UBEPBVXMLDeclaration@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToDeclaration@XMLNode@tinyxml2@@UBEPBVXMLDeclaration@2@XZ PROC ; tinyxml2::XMLNode::ToDeclaration, COMDAT
; _this$ = ecx

; 676  :     virtual const XMLDeclaration*	ToDeclaration() const	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 677  :         return 0;

	xor	eax, eax

; 678  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDeclaration@XMLNode@tinyxml2@@UBEPBVXMLDeclaration@2@XZ ENDP ; tinyxml2::XMLNode::ToDeclaration
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ToDocument@XMLNode@tinyxml2@@UBEPBVXMLDocument@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToDocument@XMLNode@tinyxml2@@UBEPBVXMLDocument@2@XZ PROC ; tinyxml2::XMLNode::ToDocument, COMDAT
; _this$ = ecx

; 673  :     virtual const XMLDocument*		ToDocument() const		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 674  :         return 0;

	xor	eax, eax

; 675  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDocument@XMLNode@tinyxml2@@UBEPBVXMLDocument@2@XZ ENDP ; tinyxml2::XMLNode::ToDocument
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ToComment@XMLNode@tinyxml2@@UBEPBVXMLComment@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToComment@XMLNode@tinyxml2@@UBEPBVXMLComment@2@XZ PROC	; tinyxml2::XMLNode::ToComment, COMDAT
; _this$ = ecx

; 670  :     virtual const XMLComment*		ToComment() const		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 671  :         return 0;

	xor	eax, eax

; 672  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToComment@XMLNode@tinyxml2@@UBEPBVXMLComment@2@XZ ENDP	; tinyxml2::XMLNode::ToComment
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ToText@XMLNode@tinyxml2@@UBEPBVXMLText@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToText@XMLNode@tinyxml2@@UBEPBVXMLText@2@XZ PROC	; tinyxml2::XMLNode::ToText, COMDAT
; _this$ = ecx

; 667  :     virtual const XMLText*			ToText() const			{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 668  :         return 0;

	xor	eax, eax

; 669  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToText@XMLNode@tinyxml2@@UBEPBVXMLText@2@XZ ENDP	; tinyxml2::XMLNode::ToText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ToElement@XMLNode@tinyxml2@@UBEPBVXMLElement@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToElement@XMLNode@tinyxml2@@UBEPBVXMLElement@2@XZ PROC	; tinyxml2::XMLNode::ToElement, COMDAT
; _this$ = ecx

; 664  :     virtual const XMLElement*		ToElement() const		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 665  :         return 0;

	xor	eax, eax

; 666  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToElement@XMLNode@tinyxml2@@UBEPBVXMLElement@2@XZ ENDP	; tinyxml2::XMLNode::ToElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ToUnknown@XMLNode@tinyxml2@@UAEPAVXMLUnknown@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToUnknown@XMLNode@tinyxml2@@UAEPAVXMLUnknown@2@XZ PROC	; tinyxml2::XMLNode::ToUnknown, COMDAT
; _this$ = ecx

; 660  :     virtual XMLUnknown*		ToUnknown()		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 661  :         return 0;

	xor	eax, eax

; 662  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToUnknown@XMLNode@tinyxml2@@UAEPAVXMLUnknown@2@XZ ENDP	; tinyxml2::XMLNode::ToUnknown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ToDeclaration@XMLNode@tinyxml2@@UAEPAVXMLDeclaration@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToDeclaration@XMLNode@tinyxml2@@UAEPAVXMLDeclaration@2@XZ PROC ; tinyxml2::XMLNode::ToDeclaration, COMDAT
; _this$ = ecx

; 656  :     virtual XMLDeclaration*	ToDeclaration()	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 657  :         return 0;

	xor	eax, eax

; 658  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDeclaration@XMLNode@tinyxml2@@UAEPAVXMLDeclaration@2@XZ ENDP ; tinyxml2::XMLNode::ToDeclaration
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ToDocument@XMLNode@tinyxml2@@UAEPAVXMLDocument@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToDocument@XMLNode@tinyxml2@@UAEPAVXMLDocument@2@XZ PROC ; tinyxml2::XMLNode::ToDocument, COMDAT
; _this$ = ecx

; 652  :     virtual XMLDocument*	ToDocument()	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 653  :         return 0;

	xor	eax, eax

; 654  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDocument@XMLNode@tinyxml2@@UAEPAVXMLDocument@2@XZ ENDP ; tinyxml2::XMLNode::ToDocument
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ToComment@XMLNode@tinyxml2@@UAEPAVXMLComment@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToComment@XMLNode@tinyxml2@@UAEPAVXMLComment@2@XZ PROC	; tinyxml2::XMLNode::ToComment, COMDAT
; _this$ = ecx

; 648  :     virtual XMLComment*		ToComment()		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 649  :         return 0;

	xor	eax, eax

; 650  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToComment@XMLNode@tinyxml2@@UAEPAVXMLComment@2@XZ ENDP	; tinyxml2::XMLNode::ToComment
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ToText@XMLNode@tinyxml2@@UAEPAVXMLText@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToText@XMLNode@tinyxml2@@UAEPAVXMLText@2@XZ PROC	; tinyxml2::XMLNode::ToText, COMDAT
; _this$ = ecx

; 644  :     virtual XMLText*		ToText()		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 645  :         return 0;

	xor	eax, eax

; 646  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToText@XMLNode@tinyxml2@@UAEPAVXMLText@2@XZ ENDP	; tinyxml2::XMLNode::ToText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?ToElement@XMLNode@tinyxml2@@UAEPAVXMLElement@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToElement@XMLNode@tinyxml2@@UAEPAVXMLElement@2@XZ PROC	; tinyxml2::XMLNode::ToElement, COMDAT
; _this$ = ecx

; 640  :     virtual XMLElement*		ToElement()		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 641  :         return 0;

	xor	eax, eax

; 642  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToElement@XMLNode@tinyxml2@@UAEPAVXMLElement@2@XZ ENDP	; tinyxml2::XMLNode::ToElement
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?GetDocument@XMLNode@tinyxml2@@QAEPAVXMLDocument@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetDocument@XMLNode@tinyxml2@@QAEPAVXMLDocument@2@XZ PROC ; tinyxml2::XMLNode::GetDocument, COMDAT
; _this$ = ecx

; 635  :     XMLDocument* GetDocument()				{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 636  :         return _document;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 637  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDocument@XMLNode@tinyxml2@@QAEPAVXMLDocument@2@XZ ENDP ; tinyxml2::XMLNode::GetDocument
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ToDouble@XMLUtil@tinyxml2@@SA_NPBDPAN@Z
_TEXT	SEGMENT
_str$ = 8						; size = 4
_value$ = 12						; size = 4
?ToDouble@XMLUtil@tinyxml2@@SA_NPBDPAN@Z PROC		; tinyxml2::XMLUtil::ToDouble, COMDAT

; 473  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 474  :     if ( TIXML_SSCANF( str, "%lf", value ) == 1 ) {

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	push	OFFSET ??_C@_03DLDNIBIK@?$CFlf?$AA@
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_sscanf_s
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	jne	SHORT $LN1@ToDouble

; 475  :         return true;

	mov	al, 1
	jmp	SHORT $LN2@ToDouble
$LN1@ToDouble:

; 476  :     }
; 477  :     return false;

	xor	al, al
$LN2@ToDouble:

; 478  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDouble@XMLUtil@tinyxml2@@SA_NPBDPAN@Z ENDP		; tinyxml2::XMLUtil::ToDouble
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ToFloat@XMLUtil@tinyxml2@@SA_NPBDPAM@Z
_TEXT	SEGMENT
_str$ = 8						; size = 4
_value$ = 12						; size = 4
?ToFloat@XMLUtil@tinyxml2@@SA_NPBDPAM@Z PROC		; tinyxml2::XMLUtil::ToFloat, COMDAT

; 465  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 466  :     if ( TIXML_SSCANF( str, "%f", value ) == 1 ) {

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	push	OFFSET ??_C@_02NJPGOMH@?$CFf?$AA@
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_sscanf_s
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	jne	SHORT $LN1@ToFloat

; 467  :         return true;

	mov	al, 1
	jmp	SHORT $LN2@ToFloat
$LN1@ToFloat:

; 468  :     }
; 469  :     return false;

	xor	al, al
$LN2@ToFloat:

; 470  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ToFloat@XMLUtil@tinyxml2@@SA_NPBDPAM@Z ENDP		; tinyxml2::XMLUtil::ToFloat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ToBool@XMLUtil@tinyxml2@@SA_NPBDPA_N@Z
_TEXT	SEGMENT
tv70 = -205						; size = 1
_ival$ = -8						; size = 4
_str$ = 8						; size = 4
_value$ = 12						; size = 4
?ToBool@XMLUtil@tinyxml2@@SA_NPBDPA_N@Z PROC		; tinyxml2::XMLUtil::ToBool, COMDAT

; 446  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 447  :     int ival = 0;

	mov	DWORD PTR _ival$[ebp], 0

; 448  :     if ( ToInt( str, &ival )) {

	lea	eax, DWORD PTR _ival$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	?ToInt@XMLUtil@tinyxml2@@SA_NPBDPAH@Z	; tinyxml2::XMLUtil::ToInt
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@ToBool

; 449  :         *value = (ival==0) ? false : true;

	cmp	DWORD PTR _ival$[ebp], 0
	jne	SHORT $LN7@ToBool
	mov	BYTE PTR tv70[ebp], 0
	jmp	SHORT $LN8@ToBool
$LN7@ToBool:
	mov	BYTE PTR tv70[ebp], 1
$LN8@ToBool:
	mov	eax, DWORD PTR _value$[ebp]
	mov	cl, BYTE PTR tv70[ebp]
	mov	BYTE PTR [eax], cl

; 450  :         return true;

	mov	al, 1
	jmp	SHORT $LN5@ToBool
$LN4@ToBool:

; 451  :     }
; 452  :     if ( StringEqual( str, "true" ) ) {

	push	2147483647				; 7fffffffH
	push	OFFSET ??_C@_04LOAJBDKD@true?$AA@
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
	add	esp, 12					; 0000000cH
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@ToBool

; 453  :         *value = true;

	mov	eax, DWORD PTR _value$[ebp]
	mov	BYTE PTR [eax], 1

; 454  :         return true;

	mov	al, 1
	jmp	SHORT $LN5@ToBool
	jmp	SHORT $LN2@ToBool
$LN3@ToBool:

; 455  :     }
; 456  :     else if ( StringEqual( str, "false" ) ) {

	push	2147483647				; 7fffffffH
	push	OFFSET ??_C@_05LAPONLG@false?$AA@
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ; tinyxml2::XMLUtil::StringEqual
	add	esp, 12					; 0000000cH
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@ToBool

; 457  :         *value = false;

	mov	eax, DWORD PTR _value$[ebp]
	mov	BYTE PTR [eax], 0

; 458  :         return true;

	mov	al, 1
	jmp	SHORT $LN5@ToBool
$LN2@ToBool:

; 459  :     }
; 460  :     return false;

	xor	al, al
$LN5@ToBool:

; 461  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@ToBool
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@ToBool:
	DD	1
	DD	$LN10@ToBool
$LN10@ToBool:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN9@ToBool
$LN9@ToBool:
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
?ToBool@XMLUtil@tinyxml2@@SA_NPBDPA_N@Z ENDP		; tinyxml2::XMLUtil::ToBool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ToUnsigned@XMLUtil@tinyxml2@@SA_NPBDPAI@Z
_TEXT	SEGMENT
_str$ = 8						; size = 4
_value$ = 12						; size = 4
?ToUnsigned@XMLUtil@tinyxml2@@SA_NPBDPAI@Z PROC		; tinyxml2::XMLUtil::ToUnsigned, COMDAT

; 438  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 439  :     if ( TIXML_SSCANF( str, "%u", value ) == 1 ) {

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	push	OFFSET ??_C@_02GMHACPFF@?$CFu?$AA@
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_sscanf_s
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	jne	SHORT $LN1@ToUnsigned

; 440  :         return true;

	mov	al, 1
	jmp	SHORT $LN2@ToUnsigned
$LN1@ToUnsigned:

; 441  :     }
; 442  :     return false;

	xor	al, al
$LN2@ToUnsigned:

; 443  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ToUnsigned@XMLUtil@tinyxml2@@SA_NPBDPAI@Z ENDP		; tinyxml2::XMLUtil::ToUnsigned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ToInt@XMLUtil@tinyxml2@@SA_NPBDPAH@Z
_TEXT	SEGMENT
_str$ = 8						; size = 4
_value$ = 12						; size = 4
?ToInt@XMLUtil@tinyxml2@@SA_NPBDPAH@Z PROC		; tinyxml2::XMLUtil::ToInt, COMDAT

; 430  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 431  :     if ( TIXML_SSCANF( str, "%d", value ) == 1 ) {

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_sscanf_s
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	jne	SHORT $LN1@ToInt

; 432  :         return true;

	mov	al, 1
	jmp	SHORT $LN2@ToInt
$LN1@ToInt:

; 433  :     }
; 434  :     return false;

	xor	al, al
$LN2@ToInt:

; 435  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ToInt@XMLUtil@tinyxml2@@SA_NPBDPAH@Z ENDP		; tinyxml2::XMLUtil::ToInt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ToStr@XMLUtil@tinyxml2@@SAXNPADH@Z
_TEXT	SEGMENT
_v$ = 8							; size = 8
_buffer$ = 16						; size = 4
_bufferSize$ = 20					; size = 4
?ToStr@XMLUtil@tinyxml2@@SAXNPADH@Z PROC		; tinyxml2::XMLUtil::ToStr, COMDAT

; 424  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 425  :     TIXML_SNPRINTF( buffer, bufferSize, "%.17g", v );

	sub	esp, 8
	movsd	xmm0, QWORD PTR _v$[ebp]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_05CEKCMKAN@?$CF?417g?$AA@
	mov	eax, DWORD PTR _bufferSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	?TIXML_SNPRINTF@@YAHPADIPBDZZ		; TIXML_SNPRINTF
	add	esp, 20					; 00000014H

; 426  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ToStr@XMLUtil@tinyxml2@@SAXNPADH@Z ENDP		; tinyxml2::XMLUtil::ToStr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ToStr@XMLUtil@tinyxml2@@SAXMPADH@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
_buffer$ = 12						; size = 4
_bufferSize$ = 16					; size = 4
?ToStr@XMLUtil@tinyxml2@@SAXMPADH@Z PROC		; tinyxml2::XMLUtil::ToStr, COMDAT

; 418  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 419  :     TIXML_SNPRINTF( buffer, bufferSize, "%.8g", v );

	cvtss2sd xmm0, DWORD PTR _v$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_04HANFDJND@?$CF?48g?$AA@
	mov	eax, DWORD PTR _bufferSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	?TIXML_SNPRINTF@@YAHPADIPBDZZ		; TIXML_SNPRINTF
	add	esp, 20					; 00000014H

; 420  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ToStr@XMLUtil@tinyxml2@@SAXMPADH@Z ENDP		; tinyxml2::XMLUtil::ToStr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ToStr@XMLUtil@tinyxml2@@SAX_NPADH@Z
_TEXT	SEGMENT
tv67 = -196						; size = 4
_v$ = 8							; size = 1
_buffer$ = 12						; size = 4
_bufferSize$ = 16					; size = 4
?ToStr@XMLUtil@tinyxml2@@SAX_NPADH@Z PROC		; tinyxml2::XMLUtil::ToStr, COMDAT

; 409  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 410  :     TIXML_SNPRINTF( buffer, bufferSize, "%d", v ? 1 : 0 );

	movzx	eax, BYTE PTR _v$[ebp]
	test	eax, eax
	je	SHORT $LN3@ToStr
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@ToStr
$LN3@ToStr:
	mov	DWORD PTR tv67[ebp], 0
$LN4@ToStr:
	mov	ecx, DWORD PTR tv67[ebp]
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	edx, DWORD PTR _bufferSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	?TIXML_SNPRINTF@@YAHPADIPBDZZ		; TIXML_SNPRINTF
	add	esp, 16					; 00000010H

; 411  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ToStr@XMLUtil@tinyxml2@@SAX_NPADH@Z ENDP		; tinyxml2::XMLUtil::ToStr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ToStr@XMLUtil@tinyxml2@@SAXIPADH@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
_buffer$ = 12						; size = 4
_bufferSize$ = 16					; size = 4
?ToStr@XMLUtil@tinyxml2@@SAXIPADH@Z PROC		; tinyxml2::XMLUtil::ToStr, COMDAT

; 403  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 404  :     TIXML_SNPRINTF( buffer, bufferSize, "%u", v );

	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	push	OFFSET ??_C@_02GMHACPFF@?$CFu?$AA@
	mov	ecx, DWORD PTR _bufferSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	?TIXML_SNPRINTF@@YAHPADIPBDZZ		; TIXML_SNPRINTF
	add	esp, 16					; 00000010H

; 405  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ToStr@XMLUtil@tinyxml2@@SAXIPADH@Z ENDP		; tinyxml2::XMLUtil::ToStr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ToStr@XMLUtil@tinyxml2@@SAXHPADH@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
_buffer$ = 12						; size = 4
_bufferSize$ = 16					; size = 4
?ToStr@XMLUtil@tinyxml2@@SAXHPADH@Z PROC		; tinyxml2::XMLUtil::ToStr, COMDAT

; 397  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 398  :     TIXML_SNPRINTF( buffer, bufferSize, "%d", v );

	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd?$AA@
	mov	ecx, DWORD PTR _bufferSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	?TIXML_SNPRINTF@@YAHPADIPBDZZ		; TIXML_SNPRINTF
	add	esp, 16					; 00000010H

; 399  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ToStr@XMLUtil@tinyxml2@@SAXHPADH@Z ENDP		; tinyxml2::XMLUtil::ToStr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ConvertUTF32ToUTF8@XMLUtil@tinyxml2@@SAXKPADPAH@Z
_TEXT	SEGMENT
tv69 = -260						; size = 4
_FIRST_BYTE_MARK$ = -60					; size = 28
_BYTE_MARK$ = -24					; size = 4
_BYTE_MASK$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_input$ = 8						; size = 4
_output$ = 12						; size = 4
_length$ = 16						; size = 4
?ConvertUTF32ToUTF8@XMLUtil@tinyxml2@@SAXKPADPAH@Z PROC	; tinyxml2::XMLUtil::ConvertUTF32ToUTF8, COMDAT

; 271  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 272  :     const unsigned long BYTE_MASK = 0xBF;

	mov	DWORD PTR _BYTE_MASK$[ebp], 191		; 000000bfH

; 273  :     const unsigned long BYTE_MARK = 0x80;

	mov	DWORD PTR _BYTE_MARK$[ebp], 128		; 00000080H

; 274  :     const unsigned long FIRST_BYTE_MARK[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };

	mov	DWORD PTR _FIRST_BYTE_MARK$[ebp], 0
	mov	DWORD PTR _FIRST_BYTE_MARK$[ebp+4], 0
	mov	DWORD PTR _FIRST_BYTE_MARK$[ebp+8], 192	; 000000c0H
	mov	DWORD PTR _FIRST_BYTE_MARK$[ebp+12], 224 ; 000000e0H
	mov	DWORD PTR _FIRST_BYTE_MARK$[ebp+16], 240 ; 000000f0H
	mov	DWORD PTR _FIRST_BYTE_MARK$[ebp+20], 248 ; 000000f8H
	mov	DWORD PTR _FIRST_BYTE_MARK$[ebp+24], 252 ; 000000fcH

; 275  : 
; 276  :     if (input < 0x80) {

	cmp	DWORD PTR _input$[ebp], 128		; 00000080H
	jae	SHORT $LN15@ConvertUTF

; 277  :         *length = 1;

	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax], 1
	jmp	SHORT $LN14@ConvertUTF
$LN15@ConvertUTF:

; 278  :     }
; 279  :     else if ( input < 0x800 ) {

	cmp	DWORD PTR _input$[ebp], 2048		; 00000800H
	jae	SHORT $LN13@ConvertUTF

; 280  :         *length = 2;

	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax], 2
	jmp	SHORT $LN14@ConvertUTF
$LN13@ConvertUTF:

; 281  :     }
; 282  :     else if ( input < 0x10000 ) {

	cmp	DWORD PTR _input$[ebp], 65536		; 00010000H
	jae	SHORT $LN11@ConvertUTF

; 283  :         *length = 3;

	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax], 3
	jmp	SHORT $LN14@ConvertUTF
$LN11@ConvertUTF:

; 284  :     }
; 285  :     else if ( input < 0x200000 ) {

	cmp	DWORD PTR _input$[ebp], 2097152		; 00200000H
	jae	SHORT $LN9@ConvertUTF

; 286  :         *length = 4;

	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax], 4

; 287  :     }
; 288  :     else {

	jmp	SHORT $LN14@ConvertUTF
$LN9@ConvertUTF:

; 289  :         *length = 0;    // This code won't covert this correctly anyway.

	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax], 0

; 290  :         return;

	jmp	$LN16@ConvertUTF
$LN14@ConvertUTF:

; 291  :     }
; 292  : 
; 293  :     output += *length;

	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _output$[ebp]
	add	ecx, DWORD PTR [eax]
	mov	DWORD PTR _output$[ebp], ecx

; 294  : 
; 295  :     // Scary scary fall throughs.
; 296  :     switch (*length) {

	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv69[ebp], ecx
	mov	edx, DWORD PTR tv69[ebp]
	sub	edx, 1
	mov	DWORD PTR tv69[ebp], edx
	cmp	DWORD PTR tv69[ebp], 3
	ja	$LN16@ConvertUTF
	mov	eax, DWORD PTR tv69[ebp]
	jmp	DWORD PTR $LN21@ConvertUTF[eax*4]
$LN5@ConvertUTF:

; 297  :         case 4:
; 298  :             --output;

	mov	eax, DWORD PTR _output$[ebp]
	sub	eax, 1
	mov	DWORD PTR _output$[ebp], eax

; 299  :             *output = (char)((input | BYTE_MARK) & BYTE_MASK);

	mov	eax, DWORD PTR _input$[ebp]
	or	eax, 128				; 00000080H
	and	eax, 191				; 000000bfH
	mov	ecx, DWORD PTR _output$[ebp]
	mov	BYTE PTR [ecx], al

; 300  :             input >>= 6;

	mov	eax, DWORD PTR _input$[ebp]
	shr	eax, 6
	mov	DWORD PTR _input$[ebp], eax
$LN4@ConvertUTF:

; 301  :         case 3:
; 302  :             --output;

	mov	eax, DWORD PTR _output$[ebp]
	sub	eax, 1
	mov	DWORD PTR _output$[ebp], eax

; 303  :             *output = (char)((input | BYTE_MARK) & BYTE_MASK);

	mov	eax, DWORD PTR _input$[ebp]
	or	eax, 128				; 00000080H
	and	eax, 191				; 000000bfH
	mov	ecx, DWORD PTR _output$[ebp]
	mov	BYTE PTR [ecx], al

; 304  :             input >>= 6;

	mov	eax, DWORD PTR _input$[ebp]
	shr	eax, 6
	mov	DWORD PTR _input$[ebp], eax
$LN3@ConvertUTF:

; 305  :         case 2:
; 306  :             --output;

	mov	eax, DWORD PTR _output$[ebp]
	sub	eax, 1
	mov	DWORD PTR _output$[ebp], eax

; 307  :             *output = (char)((input | BYTE_MARK) & BYTE_MASK);

	mov	eax, DWORD PTR _input$[ebp]
	or	eax, 128				; 00000080H
	and	eax, 191				; 000000bfH
	mov	ecx, DWORD PTR _output$[ebp]
	mov	BYTE PTR [ecx], al

; 308  :             input >>= 6;

	mov	eax, DWORD PTR _input$[ebp]
	shr	eax, 6
	mov	DWORD PTR _input$[ebp], eax
$LN2@ConvertUTF:

; 309  :         case 1:
; 310  :             --output;

	mov	eax, DWORD PTR _output$[ebp]
	sub	eax, 1
	mov	DWORD PTR _output$[ebp], eax

; 311  :             *output = (char)(input | FIRST_BYTE_MARK[*length]);

	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _input$[ebp]
	or	edx, DWORD PTR _FIRST_BYTE_MARK$[ebp+ecx*4]
	mov	eax, DWORD PTR _output$[ebp]
	mov	BYTE PTR [eax], dl
$LN16@ConvertUTF:

; 312  :         default:
; 313  :             break;
; 314  :     }
; 315  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@ConvertUTF
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN20@ConvertUTF:
	DD	1
	DD	$LN19@ConvertUTF
$LN19@ConvertUTF:
	DD	-60					; ffffffc4H
	DD	28					; 0000001cH
	DD	$LN18@ConvertUTF
$LN18@ConvertUTF:
	DB	70					; 00000046H
	DB	73					; 00000049H
	DB	82					; 00000052H
	DB	83					; 00000053H
	DB	84					; 00000054H
	DB	95					; 0000005fH
	DB	66					; 00000042H
	DB	89					; 00000059H
	DB	84					; 00000054H
	DB	69					; 00000045H
	DB	95					; 0000005fH
	DB	77					; 0000004dH
	DB	65					; 00000041H
	DB	82					; 00000052H
	DB	75					; 0000004bH
	DB	0
$LN21@ConvertUTF:
	DD	$LN2@ConvertUTF
	DD	$LN3@ConvertUTF
	DD	$LN4@ConvertUTF
	DD	$LN5@ConvertUTF
?ConvertUTF32ToUTF8@XMLUtil@tinyxml2@@SAXKPADPAH@Z ENDP	; tinyxml2::XMLUtil::ConvertUTF32ToUTF8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?GetCharacterRef@XMLUtil@tinyxml2@@SAPBDPBDPADPAH@Z
_TEXT	SEGMENT
_q$1 = -56						; size = 4
_q$2 = -44						; size = 4
_mult$3 = -32						; size = 4
_delta$4 = -20						; size = 4
_ucs$5 = -8						; size = 4
_p$ = 8							; size = 4
_value$ = 12						; size = 4
_length$ = 16						; size = 4
?GetCharacterRef@XMLUtil@tinyxml2@@SAPBDPBDPADPAH@Z PROC ; tinyxml2::XMLUtil::GetCharacterRef, COMDAT

; 319  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 320  :     // Presume an entity, and pull it out.
; 321  :     *length = 0;

	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax], 0

; 322  : 
; 323  :     if ( *(p+1) == '#' && *(p+2) ) {

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	cmp	ecx, 35					; 00000023H
	jne	$LN21@GetCharact
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	$LN21@GetCharact

; 324  :         unsigned long ucs = 0;

	mov	DWORD PTR _ucs$5[ebp], 0

; 325  :         ptrdiff_t delta = 0;

	mov	DWORD PTR _delta$4[ebp], 0

; 326  :         unsigned mult = 1;

	mov	DWORD PTR _mult$3[ebp], 1

; 327  : 
; 328  :         if ( *(p+2) == 'x' ) {

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	cmp	ecx, 120				; 00000078H
	jne	$LN20@GetCharact

; 329  :             // Hexadecimal.
; 330  :             if ( !*(p+3) ) {

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax+3]
	test	ecx, ecx
	jne	SHORT $LN19@GetCharact

; 331  :                 return 0;

	xor	eax, eax
	jmp	$LN22@GetCharact
$LN19@GetCharact:

; 332  :             }
; 333  : 
; 334  :             const char* q = p+3;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 3
	mov	DWORD PTR _q$2[ebp], eax

; 335  :             q = strchr( q, ';' );

	push	59					; 0000003bH
	mov	eax, DWORD PTR _q$2[ebp]
	push	eax
	call	_strchr
	add	esp, 8
	mov	DWORD PTR _q$2[ebp], eax

; 336  : 
; 337  :             if ( !q || !*q ) {

	cmp	DWORD PTR _q$2[ebp], 0
	je	SHORT $LN17@GetCharact
	mov	eax, DWORD PTR _q$2[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN18@GetCharact
$LN17@GetCharact:

; 338  :                 return 0;

	xor	eax, eax
	jmp	$LN22@GetCharact
$LN18@GetCharact:

; 339  :             }
; 340  : 
; 341  :             delta = q-p;

	mov	eax, DWORD PTR _q$2[ebp]
	sub	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _delta$4[ebp], eax

; 342  :             --q;

	mov	eax, DWORD PTR _q$2[ebp]
	sub	eax, 1
	mov	DWORD PTR _q$2[ebp], eax
$LN16@GetCharact:

; 343  : 
; 344  :             while ( *q != 'x' ) {

	mov	eax, DWORD PTR _q$2[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 120				; 00000078H
	je	$LN15@GetCharact

; 345  :                 if ( *q >= '0' && *q <= '9' ) {

	mov	eax, DWORD PTR _q$2[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN14@GetCharact
	mov	eax, DWORD PTR _q$2[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 57					; 00000039H
	jg	SHORT $LN14@GetCharact

; 346  :                     ucs += mult * (*q - '0');

	mov	eax, DWORD PTR _q$2[ebp]
	movsx	ecx, BYTE PTR [eax]
	sub	ecx, 48					; 00000030H
	imul	ecx, DWORD PTR _mult$3[ebp]
	add	ecx, DWORD PTR _ucs$5[ebp]
	mov	DWORD PTR _ucs$5[ebp], ecx
	jmp	SHORT $LN13@GetCharact
$LN14@GetCharact:

; 347  :                 }
; 348  :                 else if ( *q >= 'a' && *q <= 'f' ) {

	mov	eax, DWORD PTR _q$2[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 97					; 00000061H
	jl	SHORT $LN12@GetCharact
	mov	eax, DWORD PTR _q$2[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 102				; 00000066H
	jg	SHORT $LN12@GetCharact

; 349  :                     ucs += mult * (*q - 'a' + 10);

	mov	eax, DWORD PTR _q$2[ebp]
	movsx	ecx, BYTE PTR [eax]
	sub	ecx, 87					; 00000057H
	imul	ecx, DWORD PTR _mult$3[ebp]
	add	ecx, DWORD PTR _ucs$5[ebp]
	mov	DWORD PTR _ucs$5[ebp], ecx
	jmp	SHORT $LN13@GetCharact
$LN12@GetCharact:

; 350  :                 }
; 351  :                 else if ( *q >= 'A' && *q <= 'F' ) {

	mov	eax, DWORD PTR _q$2[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 65					; 00000041H
	jl	SHORT $LN10@GetCharact
	mov	eax, DWORD PTR _q$2[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 70					; 00000046H
	jg	SHORT $LN10@GetCharact

; 352  :                     ucs += mult * (*q - 'A' + 10 );

	mov	eax, DWORD PTR _q$2[ebp]
	movsx	ecx, BYTE PTR [eax]
	sub	ecx, 55					; 00000037H
	imul	ecx, DWORD PTR _mult$3[ebp]
	add	ecx, DWORD PTR _ucs$5[ebp]
	mov	DWORD PTR _ucs$5[ebp], ecx

; 353  :                 }
; 354  :                 else {

	jmp	SHORT $LN13@GetCharact
$LN10@GetCharact:

; 355  :                     return 0;

	xor	eax, eax
	jmp	$LN22@GetCharact
$LN13@GetCharact:

; 356  :                 }
; 357  :                 mult *= 16;

	mov	eax, DWORD PTR _mult$3[ebp]
	shl	eax, 4
	mov	DWORD PTR _mult$3[ebp], eax

; 358  :                 --q;

	mov	eax, DWORD PTR _q$2[ebp]
	sub	eax, 1
	mov	DWORD PTR _q$2[ebp], eax

; 359  :             }

	jmp	$LN16@GetCharact
$LN15@GetCharact:

; 360  :         }
; 361  :         else {

	jmp	$LN8@GetCharact
$LN20@GetCharact:

; 362  :             // Decimal.
; 363  :             if ( !*(p+2) ) {

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	jne	SHORT $LN7@GetCharact

; 364  :                 return 0;

	xor	eax, eax
	jmp	$LN22@GetCharact
$LN7@GetCharact:

; 365  :             }
; 366  : 
; 367  :             const char* q = p+2;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _q$1[ebp], eax

; 368  :             q = strchr( q, ';' );

	push	59					; 0000003bH
	mov	eax, DWORD PTR _q$1[ebp]
	push	eax
	call	_strchr
	add	esp, 8
	mov	DWORD PTR _q$1[ebp], eax

; 369  : 
; 370  :             if ( !q || !*q ) {

	cmp	DWORD PTR _q$1[ebp], 0
	je	SHORT $LN5@GetCharact
	mov	eax, DWORD PTR _q$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN6@GetCharact
$LN5@GetCharact:

; 371  :                 return 0;

	xor	eax, eax
	jmp	$LN22@GetCharact
$LN6@GetCharact:

; 372  :             }
; 373  : 
; 374  :             delta = q-p;

	mov	eax, DWORD PTR _q$1[ebp]
	sub	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _delta$4[ebp], eax

; 375  :             --q;

	mov	eax, DWORD PTR _q$1[ebp]
	sub	eax, 1
	mov	DWORD PTR _q$1[ebp], eax
$LN4@GetCharact:

; 376  : 
; 377  :             while ( *q != '#' ) {

	mov	eax, DWORD PTR _q$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 35					; 00000023H
	je	SHORT $LN8@GetCharact

; 378  :                 if ( *q >= '0' && *q <= '9' ) {

	mov	eax, DWORD PTR _q$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN2@GetCharact
	mov	eax, DWORD PTR _q$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 57					; 00000039H
	jg	SHORT $LN2@GetCharact

; 379  :                     ucs += mult * (*q - '0');

	mov	eax, DWORD PTR _q$1[ebp]
	movsx	ecx, BYTE PTR [eax]
	sub	ecx, 48					; 00000030H
	imul	ecx, DWORD PTR _mult$3[ebp]
	add	ecx, DWORD PTR _ucs$5[ebp]
	mov	DWORD PTR _ucs$5[ebp], ecx

; 380  :                 }
; 381  :                 else {

	jmp	SHORT $LN1@GetCharact
$LN2@GetCharact:

; 382  :                     return 0;

	xor	eax, eax
	jmp	SHORT $LN22@GetCharact
$LN1@GetCharact:

; 383  :                 }
; 384  :                 mult *= 10;

	imul	eax, DWORD PTR _mult$3[ebp], 10
	mov	DWORD PTR _mult$3[ebp], eax

; 385  :                 --q;

	mov	eax, DWORD PTR _q$1[ebp]
	sub	eax, 1
	mov	DWORD PTR _q$1[ebp], eax

; 386  :             }

	jmp	SHORT $LN4@GetCharact
$LN8@GetCharact:

; 387  :         }
; 388  :         // convert the UCS to UTF-8
; 389  :         ConvertUTF32ToUTF8( ucs, value, length );

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ucs$5[ebp]
	push	edx
	call	?ConvertUTF32ToUTF8@XMLUtil@tinyxml2@@SAXKPADPAH@Z ; tinyxml2::XMLUtil::ConvertUTF32ToUTF8
	add	esp, 12					; 0000000cH

; 390  :         return p + delta + 1;

	mov	eax, DWORD PTR _delta$4[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [ecx+eax+1]
	jmp	SHORT $LN22@GetCharact
$LN21@GetCharact:

; 391  :     }
; 392  :     return p+1;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
$LN22@GetCharact:

; 393  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCharacterRef@XMLUtil@tinyxml2@@SAPBDPBDPADPAH@Z ENDP ; tinyxml2::XMLUtil::GetCharacterRef
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ReadBOM@XMLUtil@tinyxml2@@SAPBDPBDPA_N@Z
_TEXT	SEGMENT
_pu$ = -8						; size = 4
_p$ = 8							; size = 4
_bom$ = 12						; size = 4
?ReadBOM@XMLUtil@tinyxml2@@SAPBDPBDPA_N@Z PROC		; tinyxml2::XMLUtil::ReadBOM, COMDAT

; 256  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 257  :     *bom = false;

	mov	eax, DWORD PTR _bom$[ebp]
	mov	BYTE PTR [eax], 0

; 258  :     const unsigned char* pu = reinterpret_cast<const unsigned char*>(p);

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pu$[ebp], eax

; 259  :     // Check for BOM:
; 260  :     if (    *(pu+0) == TIXML_UTF_LEAD_0
; 261  :             && *(pu+1) == TIXML_UTF_LEAD_1
; 262  :             && *(pu+2) == TIXML_UTF_LEAD_2 ) {

	mov	eax, DWORD PTR _pu$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 239				; 000000efH
	jne	SHORT $LN1@ReadBOM
	mov	eax, DWORD PTR _pu$[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	cmp	ecx, 187				; 000000bbH
	jne	SHORT $LN1@ReadBOM
	mov	eax, DWORD PTR _pu$[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	cmp	ecx, 191				; 000000bfH
	jne	SHORT $LN1@ReadBOM

; 263  :         *bom = true;

	mov	eax, DWORD PTR _bom$[ebp]
	mov	BYTE PTR [eax], 1

; 264  :         p += 3;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 3
	mov	DWORD PTR _p$[ebp], eax
$LN1@ReadBOM:

; 265  :     }
; 266  :     return p;

	mov	eax, DWORD PTR _p$[ebp]

; 267  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ReadBOM@XMLUtil@tinyxml2@@SAPBDPBDPA_N@Z ENDP		; tinyxml2::XMLUtil::ReadBOM
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?IsUTF8Continuation@XMLUtil@tinyxml2@@SA_ND@Z
_TEXT	SEGMENT
tv67 = -196						; size = 4
_p$ = 8							; size = 1
?IsUTF8Continuation@XMLUtil@tinyxml2@@SA_ND@Z PROC	; tinyxml2::XMLUtil::IsUTF8Continuation, COMDAT

; 573  :     inline static bool IsUTF8Continuation( const char p ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 574  :         return ( p & 0x80 ) != 0;

	movsx	eax, BYTE PTR _p$[ebp]
	and	eax, 128				; 00000080H
	je	SHORT $LN3@IsUTF8Cont
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsUTF8Cont
$LN3@IsUTF8Cont:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsUTF8Cont:
	mov	al, BYTE PTR tv67[ebp]

; 575  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsUTF8Continuation@XMLUtil@tinyxml2@@SA_ND@Z ENDP	; tinyxml2::XMLUtil::IsUTF8Continuation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z
_TEXT	SEGMENT
_n$ = -8						; size = 4
_p$ = 8							; size = 4
_q$ = 12						; size = 4
_nChar$ = 16						; size = 4
?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z PROC		; tinyxml2::XMLUtil::StringEqual, COMDAT

; 557  :     inline static bool StringEqual( const char* p, const char* q, int nChar=INT_MAX )  {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 558  :         int n = 0;

	mov	DWORD PTR _n$[ebp], 0

; 559  :         if ( p == q ) {

	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR _q$[ebp]
	jne	SHORT $LN4@StringEqua

; 560  :             return true;

	mov	al, 1
	jmp	SHORT $LN6@StringEqua
$LN4@StringEqua:

; 561  :         }
; 562  :         while( *p && *q && *p == *q && n<nChar ) {

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@StringEqua
	mov	eax, DWORD PTR _q$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@StringEqua
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _q$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	jne	SHORT $LN3@StringEqua
	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR _nChar$[ebp]
	jge	SHORT $LN3@StringEqua

; 563  :             ++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 564  :             ++q;

	mov	eax, DWORD PTR _q$[ebp]
	add	eax, 1
	mov	DWORD PTR _q$[ebp], eax

; 565  :             ++n;

	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax

; 566  :         }

	jmp	SHORT $LN4@StringEqua
$LN3@StringEqua:

; 567  :         if ( (n == nChar) || ( *p == 0 && *q == 0 ) ) {

	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR _nChar$[ebp]
	je	SHORT $LN1@StringEqua
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN2@StringEqua
	mov	eax, DWORD PTR _q$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN2@StringEqua
$LN1@StringEqua:

; 568  :             return true;

	mov	al, 1
	jmp	SHORT $LN6@StringEqua
$LN2@StringEqua:

; 569  :         }
; 570  :         return false;

	xor	al, al
$LN6@StringEqua:

; 571  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?StringEqual@XMLUtil@tinyxml2@@SA_NPBD0H@Z ENDP		; tinyxml2::XMLUtil::StringEqual
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?IsNameChar@XMLUtil@tinyxml2@@SA_NE@Z
_TEXT	SEGMENT
tv76 = -196						; size = 4
_ch$ = 8						; size = 1
?IsNameChar@XMLUtil@tinyxml2@@SA_NE@Z PROC		; tinyxml2::XMLUtil::IsNameChar, COMDAT

; 550  :     inline static bool IsNameChar( unsigned char ch ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 551  :         return IsNameStartChar( ch )
; 552  :                || isdigit( ch )
; 553  :                || ch == '.'
; 554  :                || ch == '-';

	movzx	eax, BYTE PTR _ch$[ebp]
	push	eax
	call	?IsNameStartChar@XMLUtil@tinyxml2@@SA_NE@Z ; tinyxml2::XMLUtil::IsNameStartChar
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@IsNameChar
	movzx	edx, BYTE PTR _ch$[ebp]
	push	edx
	call	_isdigit
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN3@IsNameChar
	movzx	eax, BYTE PTR _ch$[ebp]
	cmp	eax, 46					; 0000002eH
	je	SHORT $LN3@IsNameChar
	movzx	ecx, BYTE PTR _ch$[ebp]
	cmp	ecx, 45					; 0000002dH
	je	SHORT $LN3@IsNameChar
	mov	DWORD PTR tv76[ebp], 0
	jmp	SHORT $LN4@IsNameChar
$LN3@IsNameChar:
	mov	DWORD PTR tv76[ebp], 1
$LN4@IsNameChar:
	mov	al, BYTE PTR tv76[ebp]

; 555  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsNameChar@XMLUtil@tinyxml2@@SA_NE@Z ENDP		; tinyxml2::XMLUtil::IsNameChar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?IsNameStartChar@XMLUtil@tinyxml2@@SA_NE@Z
_TEXT	SEGMENT
tv75 = -200						; size = 4
tv69 = -196						; size = 4
_ch$ = 8						; size = 1
?IsNameStartChar@XMLUtil@tinyxml2@@SA_NE@Z PROC		; tinyxml2::XMLUtil::IsNameStartChar, COMDAT

; 544  :     inline static bool IsNameStartChar( unsigned char ch ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 545  :         return ( ( ch < 128 ) ? isalpha( ch ) : 1 )
; 546  :                || ch == ':'
; 547  :                || ch == '_';

	movzx	eax, BYTE PTR _ch$[ebp]
	cmp	eax, 128				; 00000080H
	jge	SHORT $LN3@IsNameStar
	movzx	ecx, BYTE PTR _ch$[ebp]
	push	ecx
	call	_isalpha
	add	esp, 4
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@IsNameStar
$LN3@IsNameStar:
	mov	DWORD PTR tv69[ebp], 1
$LN4@IsNameStar:
	cmp	DWORD PTR tv69[ebp], 0
	jne	SHORT $LN5@IsNameStar
	movzx	edx, BYTE PTR _ch$[ebp]
	cmp	edx, 58					; 0000003aH
	je	SHORT $LN5@IsNameStar
	movzx	eax, BYTE PTR _ch$[ebp]
	cmp	eax, 95					; 0000005fH
	je	SHORT $LN5@IsNameStar
	mov	DWORD PTR tv75[ebp], 0
	jmp	SHORT $LN6@IsNameStar
$LN5@IsNameStar:
	mov	DWORD PTR tv75[ebp], 1
$LN6@IsNameStar:
	mov	al, BYTE PTR tv75[ebp]

; 548  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 200				; 000000c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsNameStartChar@XMLUtil@tinyxml2@@SA_NE@Z ENDP		; tinyxml2::XMLUtil::IsNameStartChar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?IsWhiteSpace@XMLUtil@tinyxml2@@SA_ND@Z
_TEXT	SEGMENT
tv72 = -196						; size = 4
_p$ = 8							; size = 1
?IsWhiteSpace@XMLUtil@tinyxml2@@SA_ND@Z PROC		; tinyxml2::XMLUtil::IsWhiteSpace, COMDAT

; 540  :     static bool IsWhiteSpace( char p )					{

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 541  :         return !IsUTF8Continuation(p) && isspace( static_cast<unsigned char>(p) );

	movzx	eax, BYTE PTR _p$[ebp]
	push	eax
	call	?IsUTF8Continuation@XMLUtil@tinyxml2@@SA_ND@Z ; tinyxml2::XMLUtil::IsUTF8Continuation
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@IsWhiteSpa
	movzx	edx, BYTE PTR _p$[ebp]
	push	edx
	call	_isspace
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@IsWhiteSpa
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@IsWhiteSpa
$LN3@IsWhiteSpa:
	mov	DWORD PTR tv72[ebp], 0
$LN4@IsWhiteSpa:
	mov	al, BYTE PTR tv72[ebp]

; 542  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsWhiteSpace@XMLUtil@tinyxml2@@SA_ND@Z ENDP		; tinyxml2::XMLUtil::IsWhiteSpace
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPADPAD@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPADPAD@Z PROC	; tinyxml2::XMLUtil::SkipWhiteSpace, COMDAT

; 534  :     static char* SkipWhiteSpace( char* p )				{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 535  :         return const_cast<char*>( SkipWhiteSpace( const_cast<const char*>(p) ) );

	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPBDPBD@Z ; tinyxml2::XMLUtil::SkipWhiteSpace
	add	esp, 4

; 536  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPADPAD@Z ENDP	; tinyxml2::XMLUtil::SkipWhiteSpace
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPBDPBD@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPBDPBD@Z PROC	; tinyxml2::XMLUtil::SkipWhiteSpace, COMDAT

; 528  :     static const char* SkipWhiteSpace( const char* p )	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN2@SkipWhiteS:

; 529  :         while( IsWhiteSpace(*p) ) {

	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	?IsWhiteSpace@XMLUtil@tinyxml2@@SA_ND@Z	; tinyxml2::XMLUtil::IsWhiteSpace
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@SkipWhiteS

; 530  :             ++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 531  :         }

	jmp	SHORT $LN2@SkipWhiteS
$LN1@SkipWhiteS:

; 532  :         return p;

	mov	eax, DWORD PTR _p$[ebp]

; 533  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPBDPBD@Z ENDP	; tinyxml2::XMLUtil::SkipWhiteSpace
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GXMLVisitor@tinyxml2@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GXMLVisitor@tinyxml2@@UAEPAXI@Z PROC			; tinyxml2::XMLVisitor::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1XMLVisitor@tinyxml2@@UAE@XZ		; tinyxml2::XMLVisitor::~XMLVisitor
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GXMLVisitor@tinyxml2@@UAEPAXI@Z ENDP			; tinyxml2::XMLVisitor::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0XMLVisitor@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0XMLVisitor@tinyxml2@@QAE@XZ PROC			; tinyxml2::XMLVisitor::XMLVisitor, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7XMLVisitor@tinyxml2@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0XMLVisitor@tinyxml2@@QAE@XZ ENDP			; tinyxml2::XMLVisitor::XMLVisitor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLUnknown@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLUnknown@2@@Z PROC ; tinyxml2::XMLVisitor::Visit, COMDAT
; _this$ = ecx

; 489  :     virtual bool Visit( const XMLUnknown& /*unknown*/ )				{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 490  :         return true;

	mov	al, 1

; 491  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLUnknown@2@@Z ENDP ; tinyxml2::XMLVisitor::Visit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLComment@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLComment@2@@Z PROC ; tinyxml2::XMLVisitor::Visit, COMDAT
; _this$ = ecx

; 485  :     virtual bool Visit( const XMLComment& /*comment*/ )				{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 486  :         return true;

	mov	al, 1

; 487  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLComment@2@@Z ENDP ; tinyxml2::XMLVisitor::Visit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLText@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLText@2@@Z PROC	; tinyxml2::XMLVisitor::Visit, COMDAT
; _this$ = ecx

; 481  :     virtual bool Visit( const XMLText& /*text*/ )					{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 482  :         return true;

	mov	al, 1

; 483  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLText@2@@Z ENDP	; tinyxml2::XMLVisitor::Visit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLDeclaration@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLDeclaration@2@@Z PROC ; tinyxml2::XMLVisitor::Visit, COMDAT
; _this$ = ecx

; 477  :     virtual bool Visit( const XMLDeclaration& /*declaration*/ )		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 478  :         return true;

	mov	al, 1

; 479  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Visit@XMLVisitor@tinyxml2@@UAE_NABVXMLDeclaration@2@@Z ENDP ; tinyxml2::XMLVisitor::Visit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?VisitExit@XMLVisitor@tinyxml2@@UAE_NABVXMLElement@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
?VisitExit@XMLVisitor@tinyxml2@@UAE_NABVXMLElement@2@@Z PROC ; tinyxml2::XMLVisitor::VisitExit, COMDAT
; _this$ = ecx

; 472  :     virtual bool VisitExit( const XMLElement& /*element*/ )			{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 473  :         return true;

	mov	al, 1

; 474  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?VisitExit@XMLVisitor@tinyxml2@@UAE_NABVXMLElement@2@@Z ENDP ; tinyxml2::XMLVisitor::VisitExit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?VisitEnter@XMLVisitor@tinyxml2@@UAE_NABVXMLElement@2@PBVXMLAttribute@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?VisitEnter@XMLVisitor@tinyxml2@@UAE_NABVXMLElement@2@PBVXMLAttribute@2@@Z PROC ; tinyxml2::XMLVisitor::VisitEnter, COMDAT
; _this$ = ecx

; 468  :     virtual bool VisitEnter( const XMLElement& /*element*/, const XMLAttribute* /*firstAttribute*/ )	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 469  :         return true;

	mov	al, 1

; 470  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?VisitEnter@XMLVisitor@tinyxml2@@UAE_NABVXMLElement@2@PBVXMLAttribute@2@@Z ENDP ; tinyxml2::XMLVisitor::VisitEnter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?VisitExit@XMLVisitor@tinyxml2@@UAE_NABVXMLDocument@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
?VisitExit@XMLVisitor@tinyxml2@@UAE_NABVXMLDocument@2@@Z PROC ; tinyxml2::XMLVisitor::VisitExit, COMDAT
; _this$ = ecx

; 463  :     virtual bool VisitExit( const XMLDocument& /*doc*/ )			{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 464  :         return true;

	mov	al, 1

; 465  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?VisitExit@XMLVisitor@tinyxml2@@UAE_NABVXMLDocument@2@@Z ENDP ; tinyxml2::XMLVisitor::VisitExit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?VisitEnter@XMLVisitor@tinyxml2@@UAE_NABVXMLDocument@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
?VisitEnter@XMLVisitor@tinyxml2@@UAE_NABVXMLDocument@2@@Z PROC ; tinyxml2::XMLVisitor::VisitEnter, COMDAT
; _this$ = ecx

; 459  :     virtual bool VisitEnter( const XMLDocument& /*doc*/ )			{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 460  :         return true;

	mov	al, 1

; 461  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?VisitEnter@XMLVisitor@tinyxml2@@UAE_NABVXMLDocument@2@@Z ENDP ; tinyxml2::XMLVisitor::VisitEnter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ??1XMLVisitor@tinyxml2@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1XMLVisitor@tinyxml2@@UAE@XZ PROC			; tinyxml2::XMLVisitor::~XMLVisitor, COMDAT
; _this$ = ecx

; 456  :     virtual ~XMLVisitor() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7XMLVisitor@tinyxml2@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1XMLVisitor@tinyxml2@@UAE@XZ ENDP			; tinyxml2::XMLVisitor::~XMLVisitor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GMemPool@tinyxml2@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GMemPool@tinyxml2@@UAEPAXI@Z PROC			; tinyxml2::MemPool::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MemPool@tinyxml2@@UAE@XZ		; tinyxml2::MemPool::~MemPool
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GMemPool@tinyxml2@@UAEPAXI@Z ENDP			; tinyxml2::MemPool::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ??1MemPool@tinyxml2@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1MemPool@tinyxml2@@UAE@XZ PROC			; tinyxml2::MemPool::~MemPool, COMDAT
; _this$ = ecx

; 313  :     virtual ~MemPool() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7MemPool@tinyxml2@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1MemPool@tinyxml2@@UAE@XZ ENDP			; tinyxml2::MemPool::~MemPool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ??0MemPool@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0MemPool@tinyxml2@@QAE@XZ PROC			; tinyxml2::MemPool::MemPool, COMDAT
; _this$ = ecx

; 312  :     MemPool() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7MemPool@tinyxml2@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0MemPool@tinyxml2@@QAE@XZ ENDP			; tinyxml2::MemPool::MemPool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?CollapseWhitespace@StrPair@tinyxml2@@AAEXXZ
_TEXT	SEGMENT
_q$1 = -32						; size = 4
_p$2 = -20						; size = 4
_this$ = -8						; size = 4
?CollapseWhitespace@StrPair@tinyxml2@@AAEXXZ PROC	; tinyxml2::StrPair::CollapseWhitespace, COMDAT
; _this$ = ecx

; 136  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 137  :     // Adjusting _start would cause undefined behavior on delete[]
; 138  :     TIXMLASSERT( ( _flags & NEEDS_DELETE ) == 0 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 512				; 00000200H
	je	SHORT $LN6@CollapseWh
	int	3
$LN6@CollapseWh:

; 139  :     // Trim leading space.
; 140  :     _start = XMLUtil::SkipWhiteSpace( _start );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPADPAD@Z ; tinyxml2::XMLUtil::SkipWhiteSpace
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 141  : 
; 142  :     if ( _start && *_start ) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN7@CollapseWh
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	$LN7@CollapseWh

; 143  :         char* p = _start;	// the read pointer

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _p$2[ebp], ecx

; 144  :         char* q = _start;	// the write pointer

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _q$1[ebp], ecx
$LN4@CollapseWh:

; 145  : 
; 146  :         while( *p ) {

	mov	eax, DWORD PTR _p$2[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@CollapseWh

; 147  :             if ( XMLUtil::IsWhiteSpace( *p )) {

	mov	eax, DWORD PTR _p$2[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	?IsWhiteSpace@XMLUtil@tinyxml2@@SA_ND@Z	; tinyxml2::XMLUtil::IsWhiteSpace
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@CollapseWh

; 148  :                 p = XMLUtil::SkipWhiteSpace( p );

	mov	eax, DWORD PTR _p$2[ebp]
	push	eax
	call	?SkipWhiteSpace@XMLUtil@tinyxml2@@SAPADPAD@Z ; tinyxml2::XMLUtil::SkipWhiteSpace
	add	esp, 4
	mov	DWORD PTR _p$2[ebp], eax

; 149  :                 if ( *p == 0 ) {

	mov	eax, DWORD PTR _p$2[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN1@CollapseWh

; 150  :                     break;    // don't write to q; this trims the trailing space.

	jmp	SHORT $LN3@CollapseWh
$LN1@CollapseWh:

; 151  :                 }
; 152  :                 *q = ' ';

	mov	eax, DWORD PTR _q$1[ebp]
	mov	BYTE PTR [eax], 32			; 00000020H

; 153  :                 ++q;

	mov	eax, DWORD PTR _q$1[ebp]
	add	eax, 1
	mov	DWORD PTR _q$1[ebp], eax
$LN2@CollapseWh:

; 154  :             }
; 155  :             *q = *p;

	mov	eax, DWORD PTR _q$1[ebp]
	mov	ecx, DWORD PTR _p$2[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 156  :             ++q;

	mov	eax, DWORD PTR _q$1[ebp]
	add	eax, 1
	mov	DWORD PTR _q$1[ebp], eax

; 157  :             ++p;

	mov	eax, DWORD PTR _p$2[ebp]
	add	eax, 1
	mov	DWORD PTR _p$2[ebp], eax

; 158  :         }

	jmp	SHORT $LN4@CollapseWh
$LN3@CollapseWh:

; 159  :         *q = 0;

	mov	eax, DWORD PTR _q$1[ebp]
	mov	BYTE PTR [eax], 0
$LN7@CollapseWh:

; 160  :     }
; 161  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CollapseWhitespace@StrPair@tinyxml2@@AAEXXZ ENDP	; tinyxml2::StrPair::CollapseWhitespace
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?Reset@StrPair@tinyxml2@@AAEXXZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
?Reset@StrPair@tinyxml2@@AAEXXZ PROC			; tinyxml2::StrPair::Reset, COMDAT
; _this$ = ecx

; 74   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 75   :     if ( _flags & NEEDS_DELETE ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 512				; 00000200H
	je	SHORT $LN1@Reset

; 76   :         delete [] _start;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Reset:

; 77   :     }
; 78   :     _flags = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 79   :     _start = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 80   :     _end = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 81   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@StrPair@tinyxml2@@AAEXXZ ENDP			; tinyxml2::StrPair::Reset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ParseName@StrPair@tinyxml2@@QAEPADPAD@Z
_TEXT	SEGMENT
tv74 = -217						; size = 1
_start$ = -20						; size = 4
_this$ = -8						; size = 4
_p$ = 8							; size = 4
?ParseName@StrPair@tinyxml2@@QAEPADPAD@Z PROC		; tinyxml2::StrPair::ParseName, COMDAT
; _this$ = ecx

; 116  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 117  :     if ( !p || !(*p) ) {

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN4@ParseName
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN5@ParseName
$LN4@ParseName:

; 118  :         return 0;

	xor	eax, eax
	jmp	SHORT $LN6@ParseName
$LN5@ParseName:

; 119  :     }
; 120  : 
; 121  :     char* const start = p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _start$[ebp], eax
$LN3@ParseName:

; 122  : 
; 123  :     while( *p && ( p == start ? XMLUtil::IsNameStartChar( *p ) : XMLUtil::IsNameChar( *p ) )) {

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@ParseName
	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR _start$[ebp]
	jne	SHORT $LN8@ParseName
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	call	?IsNameStartChar@XMLUtil@tinyxml2@@SA_NE@Z ; tinyxml2::XMLUtil::IsNameStartChar
	add	esp, 4
	mov	BYTE PTR tv74[ebp], al
	jmp	SHORT $LN9@ParseName
$LN8@ParseName:
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	?IsNameChar@XMLUtil@tinyxml2@@SA_NE@Z	; tinyxml2::XMLUtil::IsNameChar
	add	esp, 4
	mov	BYTE PTR tv74[ebp], al
$LN9@ParseName:
	movzx	edx, BYTE PTR tv74[ebp]
	test	edx, edx
	je	SHORT $LN2@ParseName

; 124  :         ++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 125  :     }

	jmp	SHORT $LN3@ParseName
$LN2@ParseName:

; 126  : 
; 127  :     if ( p > start ) {

	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR _start$[ebp]
	jbe	SHORT $LN1@ParseName

; 128  :         Set( start, p, 0 );

	push	0
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@StrPair@tinyxml2@@QAEXPAD0H@Z	; tinyxml2::StrPair::Set

; 129  :         return p;

	mov	eax, DWORD PTR _p$[ebp]
	jmp	SHORT $LN6@ParseName
$LN1@ParseName:

; 130  :     }
; 131  :     return 0;

	xor	eax, eax
$LN6@ParseName:

; 132  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ParseName@StrPair@tinyxml2@@QAEPADPAD@Z ENDP		; tinyxml2::StrPair::ParseName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?ParseText@StrPair@tinyxml2@@QAEPADPADPBDH@Z
_TEXT	SEGMENT
_length$ = -44						; size = 4
_endChar$ = -29						; size = 1
_start$ = -20						; size = 4
_this$ = -8						; size = 4
_p$ = 8							; size = 4
_endTag$ = 12						; size = 4
_strFlags$ = 16						; size = 4
?ParseText@StrPair@tinyxml2@@QAEPADPADPBDH@Z PROC	; tinyxml2::StrPair::ParseText, COMDAT
; _this$ = ecx

; 96   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 97   :     TIXMLASSERT( endTag && *endTag );

	cmp	DWORD PTR _endTag$[ebp], 0
	je	SHORT $LN4@ParseText
	mov	eax, DWORD PTR _endTag$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN5@ParseText
$LN4@ParseText:
	int	3
$LN5@ParseText:

; 98   : 
; 99   :     char* start = p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _start$[ebp], eax

; 100  :     char  endChar = *endTag;

	mov	eax, DWORD PTR _endTag$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _endChar$[ebp], cl

; 101  :     size_t length = strlen( endTag );

	mov	eax, DWORD PTR _endTag$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _length$[ebp], eax
$LN3@ParseText:

; 102  : 
; 103  :     // Inner loop of text parsing.
; 104  :     while ( *p ) {

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@ParseText

; 105  :         if ( *p == endChar && strncmp( p, endTag, length ) == 0 ) {

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	movsx	edx, BYTE PTR _endChar$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN1@ParseText
	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _endTag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN1@ParseText

; 106  :             Set( start, p, strFlags );

	mov	eax, DWORD PTR _strFlags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _start$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@StrPair@tinyxml2@@QAEXPAD0H@Z	; tinyxml2::StrPair::Set

; 107  :             return p + length;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _length$[ebp]
	jmp	SHORT $LN6@ParseText
$LN1@ParseText:

; 108  :         }
; 109  :         ++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 110  :     }

	jmp	SHORT $LN3@ParseText
$LN2@ParseText:

; 111  :     return 0;

	xor	eax, eax
$LN6@ParseText:

; 112  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ParseText@StrPair@tinyxml2@@QAEPADPADPBDH@Z ENDP	; tinyxml2::StrPair::ParseText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?SetStr@StrPair@tinyxml2@@QAEXPBDH@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
_len$ = -20						; size = 4
_this$ = -8						; size = 4
_str$ = 8						; size = 4
_flags$ = 12						; size = 4
?SetStr@StrPair@tinyxml2@@QAEXPBDH@Z PROC		; tinyxml2::StrPair::SetStr, COMDAT
; _this$ = ecx

; 85   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 86   :     Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@StrPair@tinyxml2@@AAEXXZ		; tinyxml2::StrPair::Reset

; 87   :     size_t len = strlen( str );

	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax

; 88   :     _start = new char[ len+1 ];

	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx+4], edx

; 89   :     memcpy( _start, str, len+1 );

	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 90   :     _end = _start + len;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 91   :     _flags = flags | NEEDS_DELETE;

	mov	eax, DWORD PTR _flags$[ebp]
	or	eax, 512				; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 92   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetStr@StrPair@tinyxml2@@QAEXPBDH@Z ENDP		; tinyxml2::StrPair::SetStr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?SetInternedStr@StrPair@tinyxml2@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_str$ = 8						; size = 4
?SetInternedStr@StrPair@tinyxml2@@QAEXPBD@Z PROC	; tinyxml2::StrPair::SetInternedStr, COMDAT
; _this$ = ecx

; 177  :     void SetInternedStr( const char* str ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 178  :         Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@StrPair@tinyxml2@@AAEXXZ		; tinyxml2::StrPair::Reset

; 179  :         _start = const_cast<char*>(str);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _str$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 180  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetInternedStr@StrPair@tinyxml2@@QAEXPBD@Z ENDP	; tinyxml2::StrPair::SetInternedStr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Empty@StrPair@tinyxml2@@QBE_NXZ
_TEXT	SEGMENT
tv67 = -208						; size = 4
_this$ = -8						; size = 4
?Empty@StrPair@tinyxml2@@QBE_NXZ PROC			; tinyxml2::StrPair::Empty, COMDAT
; _this$ = ecx

; 173  :     bool Empty() const {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 174  :         return _start == _end;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN3@Empty
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@Empty
$LN3@Empty:
	mov	DWORD PTR tv67[ebp], 0
$LN4@Empty:
	mov	al, BYTE PTR tv67[ebp]

; 175  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@StrPair@tinyxml2@@QBE_NXZ ENDP			; tinyxml2::StrPair::Empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ?GetStr@StrPair@tinyxml2@@QAEPBDXZ
_TEXT	SEGMENT
_entity$1 = -104					; size = 4
_i$2 = -92						; size = 4
_len$3 = -80						; size = 4
_buf$4 = -68						; size = 10
_buflen$5 = -48						; size = 4
_q$6 = -36						; size = 4
_p$7 = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?GetStr@StrPair@tinyxml2@@QAEPBDXZ PROC			; tinyxml2::StrPair::GetStr, COMDAT
; _this$ = ecx

; 165  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 166  :     if ( _flags & NEEDS_FLUSH ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 256				; 00000100H
	je	$LN25@GetStr

; 167  :         *_end = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	BYTE PTR [ecx], 0

; 168  :         _flags ^= NEEDS_FLUSH;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	xor	ecx, 256				; 00000100H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx

; 169  : 
; 170  :         if ( _flags ) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$LN24@GetStr

; 171  :             char* p = _start;	// the read pointer

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _p$7[ebp], ecx

; 172  :             char* q = _start;	// the write pointer

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _q$6[ebp], ecx
$LN23@GetStr:

; 173  : 
; 174  :             while( p < _end ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$7[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	$LN22@GetStr

; 175  :                 if ( (_flags & NEEDS_NEWLINE_NORMALIZATION) && *p == CR ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 2
	je	SHORT $LN21@GetStr
	mov	eax, DWORD PTR _p$7[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN21@GetStr

; 176  :                     // CR-LF pair becomes LF
; 177  :                     // CR alone becomes LF
; 178  :                     // LF-CR becomes LF
; 179  :                     if ( *(p+1) == LF ) {

	mov	eax, DWORD PTR _p$7[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	cmp	ecx, 10					; 0000000aH
	jne	SHORT $LN20@GetStr

; 180  :                         p += 2;

	mov	eax, DWORD PTR _p$7[ebp]
	add	eax, 2
	mov	DWORD PTR _p$7[ebp], eax

; 181  :                     }
; 182  :                     else {

	jmp	SHORT $LN19@GetStr
$LN20@GetStr:

; 183  :                         ++p;

	mov	eax, DWORD PTR _p$7[ebp]
	add	eax, 1
	mov	DWORD PTR _p$7[ebp], eax
$LN19@GetStr:

; 184  :                     }
; 185  :                     *q++ = LF;

	mov	eax, DWORD PTR _q$6[ebp]
	mov	BYTE PTR [eax], 10			; 0000000aH
	mov	ecx, DWORD PTR _q$6[ebp]
	add	ecx, 1
	mov	DWORD PTR _q$6[ebp], ecx
	jmp	$LN18@GetStr
$LN21@GetStr:

; 186  :                 }
; 187  :                 else if ( (_flags & NEEDS_NEWLINE_NORMALIZATION) && *p == LF ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 2
	je	SHORT $LN17@GetStr
	mov	eax, DWORD PTR _p$7[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jne	SHORT $LN17@GetStr

; 188  :                     if ( *(p+1) == CR ) {

	mov	eax, DWORD PTR _p$7[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN16@GetStr

; 189  :                         p += 2;

	mov	eax, DWORD PTR _p$7[ebp]
	add	eax, 2
	mov	DWORD PTR _p$7[ebp], eax

; 190  :                     }
; 191  :                     else {

	jmp	SHORT $LN15@GetStr
$LN16@GetStr:

; 192  :                         ++p;

	mov	eax, DWORD PTR _p$7[ebp]
	add	eax, 1
	mov	DWORD PTR _p$7[ebp], eax
$LN15@GetStr:

; 193  :                     }
; 194  :                     *q++ = LF;

	mov	eax, DWORD PTR _q$6[ebp]
	mov	BYTE PTR [eax], 10			; 0000000aH
	mov	ecx, DWORD PTR _q$6[ebp]
	add	ecx, 1
	mov	DWORD PTR _q$6[ebp], ecx
	jmp	$LN18@GetStr
$LN17@GetStr:

; 195  :                 }
; 196  :                 else if ( (_flags & NEEDS_ENTITY_PROCESSING) && *p == '&' ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 1
	je	$LN13@GetStr
	mov	eax, DWORD PTR _p$7[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 38					; 00000026H
	jne	$LN13@GetStr

; 197  :                     // Entities handled by tinyXML2:
; 198  :                     // - special entities in the entity table [in/out]
; 199  :                     // - numeric character reference [in]
; 200  :                     //   &#20013; or &#x4e2d;
; 201  : 
; 202  :                     if ( *(p+1) == '#' ) {

	mov	eax, DWORD PTR _p$7[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	cmp	ecx, 35					; 00000023H
	jne	SHORT $LN12@GetStr

; 203  :                         const int buflen = 10;

	mov	DWORD PTR _buflen$5[ebp], 10		; 0000000aH

; 204  :                         char buf[buflen] = { 0 };

	mov	BYTE PTR _buf$4[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _buf$4[ebp+1], eax
	mov	DWORD PTR _buf$4[ebp+5], eax
	mov	BYTE PTR _buf$4[ebp+9], al

; 205  :                         int len = 0;

	mov	DWORD PTR _len$3[ebp], 0

; 206  :                         p = const_cast<char*>( XMLUtil::GetCharacterRef( p, buf, &len ) );

	lea	eax, DWORD PTR _len$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _buf$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$7[ebp]
	push	edx
	call	?GetCharacterRef@XMLUtil@tinyxml2@@SAPBDPBDPADPAH@Z ; tinyxml2::XMLUtil::GetCharacterRef
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _p$7[ebp], eax

; 207  :                         TIXMLASSERT( 0 <= len && len <= buflen );

	cmp	DWORD PTR _len$3[ebp], 0
	jl	SHORT $LN10@GetStr
	cmp	DWORD PTR _len$3[ebp], 10		; 0000000aH
	jle	SHORT $LN11@GetStr
$LN10@GetStr:
	int	3
$LN11@GetStr:

; 208  :                         TIXMLASSERT( q + len <= p );

	mov	eax, DWORD PTR _q$6[ebp]
	add	eax, DWORD PTR _len$3[ebp]
	cmp	eax, DWORD PTR _p$7[ebp]
	jbe	SHORT $LN9@GetStr
	int	3
$LN9@GetStr:

; 209  :                         memcpy( q, buf, len );

	mov	eax, DWORD PTR _len$3[ebp]
	push	eax
	lea	ecx, DWORD PTR _buf$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _q$6[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 210  :                         q += len;

	mov	eax, DWORD PTR _q$6[ebp]
	add	eax, DWORD PTR _len$3[ebp]
	mov	DWORD PTR _q$6[ebp], eax

; 211  :                     }
; 212  :                     else {

	jmp	$LN8@GetStr
$LN12@GetStr:

; 213  :                         int i=0;

	mov	DWORD PTR _i$2[ebp], 0

; 214  :                         for(; i<NUM_ENTITIES; ++i ) {

	jmp	SHORT $LN7@GetStr
$LN6@GetStr:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN7@GetStr:
	cmp	DWORD PTR _i$2[ebp], 5
	jge	SHORT $LN5@GetStr

; 215  :                             const Entity& entity = entities[i];

	imul	eax, DWORD PTR _i$2[ebp], 12
	add	eax, OFFSET _entities
	mov	DWORD PTR _entity$1[ebp], eax

; 216  :                             if ( strncmp( p + 1, entity.pattern, entity.length ) == 0
; 217  :                                     && *( p + entity.length + 1 ) == ';' ) {

	mov	eax, DWORD PTR _entity$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _entity$1[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _p$7[ebp]
	add	ecx, 1
	push	ecx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN4@GetStr
	mov	eax, DWORD PTR _entity$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _p$7[ebp]
	movsx	eax, BYTE PTR [edx+ecx+1]
	cmp	eax, 59					; 0000003bH
	jne	SHORT $LN4@GetStr

; 218  :                                 // Found an entity - convert.
; 219  :                                 *q = entity.value;

	mov	eax, DWORD PTR _q$6[ebp]
	mov	ecx, DWORD PTR _entity$1[ebp]
	mov	dl, BYTE PTR [ecx+8]
	mov	BYTE PTR [eax], dl

; 220  :                                 ++q;

	mov	eax, DWORD PTR _q$6[ebp]
	add	eax, 1
	mov	DWORD PTR _q$6[ebp], eax

; 221  :                                 p += entity.length + 2;

	mov	eax, DWORD PTR _entity$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _p$7[ebp]
	lea	eax, DWORD PTR [edx+ecx+2]
	mov	DWORD PTR _p$7[ebp], eax

; 222  :                                 break;

	jmp	SHORT $LN5@GetStr
$LN4@GetStr:

; 223  :                             }
; 224  :                         }

	jmp	SHORT $LN6@GetStr
$LN5@GetStr:

; 225  :                         if ( i == NUM_ENTITIES ) {

	cmp	DWORD PTR _i$2[ebp], 5
	jne	SHORT $LN8@GetStr

; 226  :                             // fixme: treat as error?
; 227  :                             ++p;

	mov	eax, DWORD PTR _p$7[ebp]
	add	eax, 1
	mov	DWORD PTR _p$7[ebp], eax

; 228  :                             ++q;

	mov	eax, DWORD PTR _q$6[ebp]
	add	eax, 1
	mov	DWORD PTR _q$6[ebp], eax
$LN8@GetStr:

; 229  :                         }
; 230  :                     }
; 231  :                 }
; 232  :                 else {

	jmp	SHORT $LN18@GetStr
$LN13@GetStr:

; 233  :                     *q = *p;

	mov	eax, DWORD PTR _q$6[ebp]
	mov	ecx, DWORD PTR _p$7[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 234  :                     ++p;

	mov	eax, DWORD PTR _p$7[ebp]
	add	eax, 1
	mov	DWORD PTR _p$7[ebp], eax

; 235  :                     ++q;

	mov	eax, DWORD PTR _q$6[ebp]
	add	eax, 1
	mov	DWORD PTR _q$6[ebp], eax
$LN18@GetStr:

; 236  :                 }
; 237  :             }

	jmp	$LN23@GetStr
$LN22@GetStr:

; 238  :             *q = 0;

	mov	eax, DWORD PTR _q$6[ebp]
	mov	BYTE PTR [eax], 0
$LN24@GetStr:

; 239  :         }
; 240  :         // The loop below has plenty going on, and this
; 241  :         // is a less useful mode. Break it out.
; 242  :         if ( _flags & COLLAPSE_WHITESPACE ) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 4
	je	SHORT $LN1@GetStr

; 243  :             CollapseWhitespace();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CollapseWhitespace@StrPair@tinyxml2@@AAEXXZ ; tinyxml2::StrPair::CollapseWhitespace
$LN1@GetStr:

; 244  :         }
; 245  :         _flags = (_flags & NEEDS_DELETE);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 512				; 00000200H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx
$LN25@GetStr:

; 246  :     }
; 247  :     return _start;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 248  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@GetStr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN31@GetStr:
	DD	2
	DD	$LN30@GetStr
$LN30@GetStr:
	DD	-68					; ffffffbcH
	DD	10					; 0000000aH
	DD	$LN28@GetStr
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN29@GetStr
$LN29@GetStr:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN28@GetStr:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?GetStr@StrPair@tinyxml2@@QAEPBDXZ ENDP			; tinyxml2::StrPair::GetStr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?Set@StrPair@tinyxml2@@QAEXPAD0H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_flags$ = 16						; size = 4
?Set@StrPair@tinyxml2@@QAEXPAD0H@Z PROC			; tinyxml2::StrPair::Set, COMDAT
; _this$ = ecx

; 164  :     void Set( char* start, char* end, int flags ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 165  :         Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@StrPair@tinyxml2@@AAEXXZ		; tinyxml2::StrPair::Reset

; 166  :         _start  = start;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 167  :         _end    = end;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _end$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 168  :         _flags  = flags | NEEDS_FLUSH;

	mov	eax, DWORD PTR _flags$[ebp]
	or	eax, 256				; 00000100H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 169  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Set@StrPair@tinyxml2@@QAEXPAD0H@Z ENDP			; tinyxml2::StrPair::Set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.cpp
;	COMDAT ??1StrPair@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1StrPair@tinyxml2@@QAE@XZ PROC			; tinyxml2::StrPair::~StrPair, COMDAT
; _this$ = ecx

; 68   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 69   :     Reset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@StrPair@tinyxml2@@AAEXXZ		; tinyxml2::StrPair::Reset

; 70   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1StrPair@tinyxml2@@QAE@XZ ENDP			; tinyxml2::StrPair::~StrPair
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ??0StrPair@tinyxml2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0StrPair@tinyxml2@@QAE@XZ PROC			; tinyxml2::StrPair::StrPair, COMDAT
; _this$ = ecx

; 161  :     StrPair() : _flags( 0 ), _start( 0 ), _end( 0 ) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0StrPair@tinyxml2@@QAE@XZ ENDP			; tinyxml2::StrPair::StrPair
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\import\tinyxml\tinyxml2.h
;	COMDAT ?TIXML_SNPRINTF@@YAHPADIPBDZZ
_TEXT	SEGMENT
_result$ = -20						; size = 4
_va$ = -8						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
_format$ = 16						; size = 4
?TIXML_SNPRINTF@@YAHPADIPBDZZ PROC			; TIXML_SNPRINTF, COMDAT

; 103  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 104  :     va_list va;
; 105  :     va_start( va, format );

	lea	eax, DWORD PTR _format$[ebp+4]
	mov	DWORD PTR _va$[ebp], eax

; 106  :     int result = vsnprintf_s( buffer, size, _TRUNCATE, format, va );

	mov	eax, DWORD PTR _va$[ebp]
	push	eax
	mov	ecx, DWORD PTR _format$[ebp]
	push	ecx
	push	-1
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_vsnprintf_s
	add	esp, 20					; 00000014H
	mov	DWORD PTR _result$[ebp], eax

; 107  :     va_end( va );

	mov	DWORD PTR _va$[ebp], 0

; 108  :     return result;

	mov	eax, DWORD PTR _result$[ebp]

; 109  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?TIXML_SNPRINTF@@YAHPADIPBDZZ ENDP			; TIXML_SNPRINTF
_TEXT	ENDS
END
