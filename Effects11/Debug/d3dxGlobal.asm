; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

	TITLE	C:\Users\Simon\Documents\GitHub\UCLAN-sparta\Effects11\d3dxGlobal.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_IID_ID3DX11EffectBlendVariable
PUBLIC	_IID_ID3DX11EffectDepthStencilVariable
PUBLIC	_IID_ID3DX11EffectVectorVariable
PUBLIC	_IID_ID3DX11EffectRasterizerVariable
PUBLIC	_IID_ID3DX11EffectMatrixVariable
PUBLIC	?c_InvalidIndex@SType@D3DX11Effects@@2IB	; D3DX11Effects::SType::c_InvalidIndex
PUBLIC	?c_ScalarSize@SType@D3DX11Effects@@2IB		; D3DX11Effects::SType::c_ScalarSize
PUBLIC	?c_ScalarsPerRegister@SType@D3DX11Effects@@2IB	; D3DX11Effects::SType::c_ScalarsPerRegister
PUBLIC	?c_RegisterSize@SType@D3DX11Effects@@2IB	; D3DX11Effects::SType::c_RegisterSize
PUBLIC	_IID_ID3DX11EffectSamplerVariable
PUBLIC	_IID_ID3DX11EffectStringVariable
PUBLIC	_IID_ID3DX11EffectPass
PUBLIC	?D3D11_DEFAULT@@3UCD3D11_DEFAULT@@B		; D3D11_DEFAULT
PUBLIC	_IID_ID3DX11EffectClassInstanceVariable
PUBLIC	_IID_ID3DX11EffectTechnique
PUBLIC	_IID_ID3DX11EffectInterfaceVariable
PUBLIC	_IID_ID3DX11EffectGroup
PUBLIC	_IID_ID3D11ShaderReflectionType
PUBLIC	_IID_ID3DX11Effect
PUBLIC	_IID_ID3D11ShaderReflectionVariable
PUBLIC	_IID_ID3D11ShaderReflectionConstantBuffer
PUBLIC	_IID_ID3DX11EffectShaderResourceVariable
PUBLIC	_IID_ID3D11ShaderReflection
PUBLIC	_IID_ID3D11LibraryReflection
PUBLIC	_IID_ID3DX11EffectUnorderedAccessViewVariable
PUBLIC	_IID_ID3D11FunctionReflection
PUBLIC	_IID_ID3D11FunctionParameterReflection
PUBLIC	_IID_ID3D11Module
PUBLIC	_IID_ID3D11ModuleInstance
PUBLIC	_IID_ID3DX11EffectRenderTargetViewVariable
PUBLIC	_IID_ID3D11Linker
PUBLIC	_IID_ID3D11LinkingNode
PUBLIC	_IID_ID3DX11EffectDepthStencilViewVariable
PUBLIC	_IID_ID3D11FunctionLinkingGraph
PUBLIC	_IID_ID3DX11EffectConstantBuffer
PUBLIC	_IID_ID3DX11EffectType
PUBLIC	?c_IsTBuffer@SBinaryConstantBuffer@D3DX11Effects@@2IB ; D3DX11Effects::SBinaryConstantBuffer::c_IsTBuffer
PUBLIC	?c_IsSingle@SBinaryConstantBuffer@D3DX11Effects@@2IB ; D3DX11Effects::SBinaryConstantBuffer::c_IsSingle
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	_IID_ID3DX11EffectVariable
PUBLIC	_IID_ID3DX11EffectShaderVariable
PUBLIC	_IID_ID3DX11EffectScalarVariable
;	COMDAT _IID_ID3DX11EffectScalarVariable
CONST	SEGMENT
_IID_ID3DX11EffectScalarVariable DD 0921ef2e5H
	DW	0a65dH
	DW	04e92H
	DB	09fH
	DB	0c6H
	DB	04eH
	DB	09cH
	DB	0c0H
	DB	09aH
	DB	04aH
	DB	0deH
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectShaderVariable
CONST	SEGMENT
_IID_ID3DX11EffectShaderVariable DD 07508b344H
	DW	020aH
	DW	04ec7H
	DB	091H
	DB	018H
	DB	062H
	DB	0cdH
	DB	0d3H
	DB	06cH
	DB	088H
	DB	0d7H
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectVariable
CONST	SEGMENT
_IID_ID3DX11EffectVariable DD 036a777dH
	DW	0b56eH
	DW	04b25H
	DB	0b3H
	DB	013H
	DB	0ccH
	DB	03dH
	DB	0daH
	DB	0b7H
	DB	018H
	DB	073H
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?c_IsSingle@SBinaryConstantBuffer@D3DX11Effects@@2IB
CONST	SEGMENT
?c_IsSingle@SBinaryConstantBuffer@D3DX11Effects@@2IB DD 02H ; D3DX11Effects::SBinaryConstantBuffer::c_IsSingle
CONST	ENDS
;	COMDAT ?c_IsTBuffer@SBinaryConstantBuffer@D3DX11Effects@@2IB
CONST	SEGMENT
?c_IsTBuffer@SBinaryConstantBuffer@D3DX11Effects@@2IB DD 01H ; D3DX11Effects::SBinaryConstantBuffer::c_IsTBuffer
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectType
CONST	SEGMENT
_IID_ID3DX11EffectType DD 04250d721H
	DW	0d5e5H
	DW	0491fH
	DB	0b6H
	DB	02bH
	DB	058H
	DB	07cH
	DB	043H
	DB	018H
	DB	062H
	DB	085H
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectConstantBuffer
CONST	SEGMENT
_IID_ID3DX11EffectConstantBuffer DD 02cb6c733H
	DW	082d2H
	DW	04000H
	DB	0b3H
	DB	0daH
	DB	062H
	DB	019H
	DB	0d9H
	DB	0a9H
	DB	09bH
	DB	0f2H
CONST	ENDS
;	COMDAT _IID_ID3D11FunctionLinkingGraph
CONST	SEGMENT
_IID_ID3D11FunctionLinkingGraph DD 054133220H
	DW	01ce8H
	DW	043d3H
	DB	082H
	DB	036H
	DB	098H
	DB	055H
	DB	0c5H
	DB	0ceH
	DB	0ecH
	DB	0ffH
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectDepthStencilViewVariable
CONST	SEGMENT
_IID_ID3DX11EffectDepthStencilViewVariable DD 033c648acH
	DW	02e9eH
	DW	04a2eH
	DB	09cH
	DB	0d6H
	DB	0deH
	DB	031H
	DB	0acH
	DB	0c5H
	DB	0b3H
	DB	047H
CONST	ENDS
;	COMDAT _IID_ID3D11LinkingNode
CONST	SEGMENT
_IID_ID3D11LinkingNode DD 0d80dd70cH
	DW	08d2fH
	DW	04751H
	DB	094H
	DB	0a1H
	DB	03H
	DB	0c7H
	DB	09bH
	DB	035H
	DB	056H
	DB	0dbH
CONST	ENDS
;	COMDAT _IID_ID3D11Linker
CONST	SEGMENT
_IID_ID3D11Linker DD 059a6cd0eH
	DW	0e10dH
	DW	04c1fH
	DB	088H
	DB	0c0H
	DB	063H
	DB	0abH
	DB	0a1H
	DB	0daH
	DB	0f3H
	DB	0eH
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectRenderTargetViewVariable
CONST	SEGMENT
_IID_ID3DX11EffectRenderTargetViewVariable DD 0d5066909H
	DW	0f40cH
	DW	043f8H
	DB	09dH
	DB	0b5H
	DB	05H
	DB	07cH
	DB	02aH
	DB	020H
	DB	085H
	DB	052H
CONST	ENDS
;	COMDAT _IID_ID3D11ModuleInstance
CONST	SEGMENT
_IID_ID3D11ModuleInstance DD 0469e07f7H
	DW	045aH
	DW	048d5H
	DB	0aaH
	DB	012H
	DB	068H
	DB	0a4H
	DB	078H
	DB	0cdH
	DB	0f7H
	DB	05dH
CONST	ENDS
;	COMDAT _IID_ID3D11Module
CONST	SEGMENT
_IID_ID3D11Module DD 0cac701eeH
	DW	080fcH
	DW	04122H
	DB	082H
	DB	042H
	DB	010H
	DB	0b3H
	DB	09cH
	DB	08cH
	DB	0ecH
	DB	034H
CONST	ENDS
;	COMDAT _IID_ID3D11FunctionParameterReflection
CONST	SEGMENT
_IID_ID3D11FunctionParameterReflection DD 042757488H
	DW	0334fH
	DW	047feH
	DB	098H
	DB	02eH
	DB	01aH
	DB	065H
	DB	0d0H
	DB	08cH
	DB	0c4H
	DB	062H
CONST	ENDS
;	COMDAT _IID_ID3D11FunctionReflection
CONST	SEGMENT
_IID_ID3D11FunctionReflection DD 0207bcecbH
	DW	0d683H
	DW	04a06H
	DB	0a8H
	DB	0a3H
	DB	09bH
	DB	014H
	DB	09bH
	DB	09fH
	DB	073H
	DB	0a4H
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectUnorderedAccessViewVariable
CONST	SEGMENT
_IID_ID3DX11EffectUnorderedAccessViewVariable DD 079b4ac8cH
	DW	0870aH
	DW	047d2H
	DB	0b0H
	DB	05aH
	DB	08bH
	DB	0d5H
	DB	0ccH
	DB	03eH
	DB	0e6H
	DB	0c9H
CONST	ENDS
;	COMDAT _IID_ID3D11LibraryReflection
CONST	SEGMENT
_IID_ID3D11LibraryReflection DD 054384f1bH
	DW	05b3eH
	DW	04bb7H
	DB	0aeH
	DB	01H
	DB	060H
	DB	0baH
	DB	030H
	DB	097H
	DB	0cbH
	DB	0b6H
CONST	ENDS
;	COMDAT _IID_ID3D11ShaderReflection
CONST	SEGMENT
_IID_ID3D11ShaderReflection DD 08d536ca1H
	DW	0ccaH
	DW	04956H
	DB	0a8H
	DB	037H
	DB	078H
	DB	069H
	DB	063H
	DB	075H
	DB	055H
	DB	084H
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectShaderResourceVariable
CONST	SEGMENT
_IID_ID3DX11EffectShaderResourceVariable DD 0350db233H
	DW	0bbe0H
	DW	0485cH
	DB	09bH
	DB	0feH
	DB	0c0H
	DB	02H
	DB	06bH
	DB	084H
	DB	04fH
	DB	089H
CONST	ENDS
;	COMDAT _IID_ID3D11ShaderReflectionConstantBuffer
CONST	SEGMENT
_IID_ID3D11ShaderReflectionConstantBuffer DD 0eb62d63dH
	DW	093ddH
	DW	04318H
	DB	08aH
	DB	0e8H
	DB	0c6H
	DB	0f8H
	DB	03aH
	DB	0d3H
	DB	071H
	DB	0b8H
CONST	ENDS
;	COMDAT _IID_ID3D11ShaderReflectionVariable
CONST	SEGMENT
_IID_ID3D11ShaderReflectionVariable DD 051f23923H
	DW	0f3e5H
	DW	04bd1H
	DB	091H
	DB	0cbH
	DB	060H
	DB	061H
	DB	077H
	DB	0d8H
	DB	0dbH
	DB	04cH
CONST	ENDS
;	COMDAT _IID_ID3DX11Effect
CONST	SEGMENT
_IID_ID3DX11Effect DD 0fa61ca24H
	DW	0e4baH
	DW	04262H
	DB	09dH
	DB	0b8H
	DB	0b1H
	DB	032H
	DB	0e8H
	DB	0caH
	DB	0e3H
	DB	019H
CONST	ENDS
;	COMDAT _IID_ID3D11ShaderReflectionType
CONST	SEGMENT
_IID_ID3D11ShaderReflectionType DD 06e6ffa6aH
	DW	09baeH
	DW	04613H
	DB	0a5H
	DB	01eH
	DB	091H
	DB	065H
	DB	02dH
	DB	050H
	DB	08cH
	DB	021H
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectGroup
CONST	SEGMENT
_IID_ID3DX11EffectGroup DD 03074acfH
	DW	097deH
	DW	0485fH
	DB	0b2H
	DB	01H
	DB	0cbH
	DB	077H
	DB	052H
	DB	064H
	DB	0afH
	DB	0d6H
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectInterfaceVariable
CONST	SEGMENT
_IID_ID3DX11EffectInterfaceVariable DD 0516c8cd8H
	DW	01c80H
	DW	040a4H
	DB	0b1H
	DB	09bH
	DB	06H
	DB	088H
	DB	079H
	DB	02fH
	DB	011H
	DB	0a5H
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectTechnique
CONST	SEGMENT
_IID_ID3DX11EffectTechnique DD 051198831H
	DW	01f1dH
	DW	04f47H
	DB	0bdH
	DB	076H
	DB	041H
	DB	0cbH
	DB	08H
	DB	035H
	DB	0b1H
	DB	0deH
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectClassInstanceVariable
CONST	SEGMENT
_IID_ID3DX11EffectClassInstanceVariable DD 0926a8053H
	DW	02a39H
	DW	04db4H
	DB	09bH
	DB	0deH
	DB	0cfH
	DB	064H
	DB	09aH
	DB	0deH
	DB	0bdH
	DB	0c1H
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectPass
CONST	SEGMENT
_IID_ID3DX11EffectPass DD 03437cec4H
	DW	04ac1H
	DW	04d87H
	DB	089H
	DB	016H
	DB	0f4H
	DB	0bdH
	DB	05aH
	DB	041H
	DB	038H
	DB	0cH
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectStringVariable
CONST	SEGMENT
_IID_ID3DX11EffectStringVariable DD 0f355c818H
	DW	01beH
	DW	04653H
	DB	0a7H
	DB	0ccH
	DB	060H
	DB	0ffH
	DB	0feH
	DB	0ddH
	DB	0c7H
	DB	06dH
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectSamplerVariable
CONST	SEGMENT
_IID_ID3DX11EffectSamplerVariable DD 0c6402e55H
	DW	01095H
	DW	04d95H
	DB	089H
	DB	031H
	DB	0f9H
	DB	026H
	DB	060H
	DB	051H
	DB	03dH
	DB	0d9H
CONST	ENDS
;	COMDAT ?c_RegisterSize@SType@D3DX11Effects@@2IB
CONST	SEGMENT
?c_RegisterSize@SType@D3DX11Effects@@2IB DD 010H	; D3DX11Effects::SType::c_RegisterSize
CONST	ENDS
;	COMDAT ?c_ScalarsPerRegister@SType@D3DX11Effects@@2IB
CONST	SEGMENT
?c_ScalarsPerRegister@SType@D3DX11Effects@@2IB DD 04H	; D3DX11Effects::SType::c_ScalarsPerRegister
CONST	ENDS
;	COMDAT ?c_ScalarSize@SType@D3DX11Effects@@2IB
CONST	SEGMENT
?c_ScalarSize@SType@D3DX11Effects@@2IB DD 04H		; D3DX11Effects::SType::c_ScalarSize
CONST	ENDS
;	COMDAT ?c_InvalidIndex@SType@D3DX11Effects@@2IB
CONST	SEGMENT
?c_InvalidIndex@SType@D3DX11Effects@@2IB DD 0ffffffffH	; D3DX11Effects::SType::c_InvalidIndex
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectMatrixVariable
CONST	SEGMENT
_IID_ID3DX11EffectMatrixVariable DD 0e1096cf4H
	DW	0c027H
	DW	0419aH
	DB	08dH
	DB	086H
	DB	0d2H
	DB	091H
	DB	073H
	DB	0dcH
	DB	080H
	DB	03eH
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectRasterizerVariable
CONST	SEGMENT
_IID_ID3DX11EffectRasterizerVariable DD 053a262f6H
	DW	05f74H
	DW	04151H
	DB	0a1H
	DB	032H
	DB	0e3H
	DB	0ddH
	DB	019H
	DB	0a6H
	DB	02cH
	DB	09dH
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectVectorVariable
CONST	SEGMENT
_IID_ID3DX11EffectVectorVariable DD 05e785d4aH
	DW	0d87bH
	DW	048d8H
	DB	0b6H
	DB	0e6H
	DB	0fH
	DB	08cH
	DB	0a7H
	DB	0e7H
	DB	046H
	DB	07aH
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectDepthStencilVariable
CONST	SEGMENT
_IID_ID3DX11EffectDepthStencilVariable DD 069b5751bH
	DW	061a5H
	DW	048e5H
	DB	0bdH
	DB	041H
	DB	0d9H
	DB	039H
	DB	088H
	DB	011H
	DB	015H
	DB	063H
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectBlendVariable
CONST	SEGMENT
_IID_ID3DX11EffectBlendVariable DD 0d664f4d7H
	DW	03b81H
	DW	04805H
	DB	0b2H
	DB	077H
	DB	0c1H
	DB	0dfH
	DB	058H
	DB	0c3H
	DB	09fH
	DB	053H
CONST	ENDS
PUBLIC	?AlignToPowerOf2@@YAIII@Z			; AlignToPowerOf2
PUBLIC	?AlignToPowerOf2@@YAPAXPAXI@Z			; AlignToPowerOf2
PUBLIC	?SetData@CMemoryStream@D3DX11Core@@QAEJPBXK@Z	; D3DX11Core::CMemoryStream::SetData
PUBLIC	?Read@CMemoryStream@D3DX11Core@@QAEJPAI@Z	; D3DX11Core::CMemoryStream::Read
PUBLIC	?Read@CMemoryStream@D3DX11Core@@QAEJPAPAXK@Z	; D3DX11Core::CMemoryStream::Read
PUBLIC	?Read@CMemoryStream@D3DX11Core@@QAEJPAPBD@Z	; D3DX11Core::CMemoryStream::Read
PUBLIC	?ReadAtOffset@CMemoryStream@D3DX11Core@@QAEJKKPAPAX@Z ; D3DX11Core::CMemoryStream::ReadAtOffset
PUBLIC	?ReadAtOffset@CMemoryStream@D3DX11Core@@QAEJKPAPBD@Z ; D3DX11Core::CMemoryStream::ReadAtOffset
PUBLIC	?GetPosition@CMemoryStream@D3DX11Core@@QAEKXZ	; D3DX11Core::CMemoryStream::GetPosition
PUBLIC	?Seek@CMemoryStream@D3DX11Core@@QAEJK@Z		; D3DX11Core::CMemoryStream::Seek
PUBLIC	??0CMemoryStream@D3DX11Core@@QAE@XZ		; D3DX11Core::CMemoryStream::CMemoryStream
PUBLIC	??1CMemoryStream@D3DX11Core@@QAE@XZ		; D3DX11Core::CMemoryStream::~CMemoryStream
PUBLIC	?AddData@CDataBlock@@QAEJPBXIPAPAV1@@Z		; CDataBlock::AddData
PUBLIC	?Allocate@CDataBlock@@QAEPAXIPAPAV1@@Z		; CDataBlock::Allocate
PUBLIC	?EnableAlignment@CDataBlock@@QAEXXZ		; CDataBlock::EnableAlignment
PUBLIC	??0CDataBlock@@QAE@XZ				; CDataBlock::CDataBlock
PUBLIC	??1CDataBlock@@QAE@XZ				; CDataBlock::~CDataBlock
PUBLIC	??_GCDataBlock@@QAEPAXI@Z			; CDataBlock::`scalar deleting destructor'
PUBLIC	?AddString@CDataBlockStore@@QAEJPBDPAI@Z	; CDataBlockStore::AddString
PUBLIC	?AddData@CDataBlockStore@@QAEJPBXIPAI@Z		; CDataBlockStore::AddData
PUBLIC	?Allocate@CDataBlockStore@@QAEPAXI@Z		; CDataBlockStore::Allocate
PUBLIC	?GetSize@CDataBlockStore@@QAEIXZ		; CDataBlockStore::GetSize
PUBLIC	?EnableAlignment@CDataBlockStore@@QAEXXZ	; CDataBlockStore::EnableAlignment
PUBLIC	??0CDataBlockStore@@QAE@XZ			; CDataBlockStore::CDataBlockStore
PUBLIC	??1CDataBlockStore@@QAE@XZ			; CDataBlockStore::~CDataBlockStore
PUBLIC	?UIntAdd@@YAJIIPAI@Z				; UIntAdd
PUBLIC	?__LINE__Var@?1??AlignToPowerOf2@@YAIII@Z@4JA	; `AlignToPowerOf2'::`2'::__LINE__Var
PUBLIC	??_C@_0CD@GECBLADO@?$CIAlignment?5?$CG?5?$CIAlignment?5?9?51?$CJ?$CJ?5?$DN?$DN@ ; `string'
PUBLIC	??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@ ; `string'
PUBLIC	??_C@_0DA@FKFDAOLL@Alignment?5?$DO?50?5?$CG?$CG?5Value?5?$DM?50xfffff@ ; `string'
PUBLIC	?__LINE__Var@?1??AlignToPowerOf2@@YAPAXPAXI@Z@4JA ; `AlignToPowerOf2'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??AddData@CDataBlock@@QAEJPBXIPAPAV2@@Z@4JA ; `CDataBlock::AddData'::`2'::__LINE__Var
PUBLIC	??_C@_0DF@IDKFFGGG@m_pData?5?$DN?$DN?5AlignToPowerOf2?$CIm_pDa@ ; `string'
PUBLIC	??_C@_0EG@BLGPAMMG@c?3?2users?2simon?2documents?2github?2@ ; `string'
PUBLIC	??_C@_0DD@NDPMEJJB@m_size?5?$DN?$DN?5AlignToPowerOf2?$CIm_size@ ; `string'
PUBLIC	??_C@_0BA@GHDFLDPA@NULL?5?$DN?$DN?5m_pNext?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??Allocate@CDataBlock@@QAEPAXIPAPAV2@@Z@4JA ; `CDataBlock::Allocate'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??AddString@CDataBlockStore@@QAEJPBDPAI@Z@4JA ; `CDataBlockStore::AddString'::`2'::__LINE__Var
PUBLIC	??_C@_0BG@KJGGCNII@strSize?5?$DM?$DN?50xffffffff?$AA@ ; `string'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??2@YAPAXIABUnothrow_t@std@@@Z:PROC		; operator new
EXTRN	??_U@YAPAXIABUnothrow_t@std@@@Z:PROC		; operator new[]
EXTRN	??3@YAXPAXABUnothrow_t@std@@@Z:PROC		; operator delete
EXTRN	?D3DXDebugAssert@@YGHPBDH0@Z:PROC		; D3DXDebugAssert
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	?nothrow@std@@3Unothrow_t@1@B:BYTE		; std::nothrow
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BG@KJGGCNII@strSize?5?$DM?$DN?50xffffffff?$AA@
CONST	SEGMENT
??_C@_0BG@KJGGCNII@strSize?5?$DM?$DN?50xffffffff?$AA@ DB 'strSize <= 0xff'
	DB	'ffffff', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??AddString@CDataBlockStore@@QAEJPBDPAI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??AddString@CDataBlockStore@@QAEJPBDPAI@Z@4JA DD 0116H ; `CDataBlockStore::AddString'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??Allocate@CDataBlock@@QAEPAXIPAPAV2@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Allocate@CDataBlock@@QAEPAXIPAPAV2@@Z@4JA DD 0beH ; `CDataBlock::Allocate'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BA@GHDFLDPA@NULL?5?$DN?$DN?5m_pNext?$AA@
CONST	SEGMENT
??_C@_0BA@GHDFLDPA@NULL?5?$DN?$DN?5m_pNext?$AA@ DB 'NULL == m_pNext', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@NDPMEJJB@m_size?5?$DN?$DN?5AlignToPowerOf2?$CIm_size@
CONST	SEGMENT
??_C@_0DD@NDPMEJJB@m_size?5?$DN?$DN?5AlignToPowerOf2?$CIm_size@ DB 'm_siz'
	DB	'e == AlignToPowerOf2(m_size, c_DataAlignment)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@BLGPAMMG@c?3?2users?2simon?2documents?2github?2@
CONST	SEGMENT
??_C@_0EG@BLGPAMMG@c?3?2users?2simon?2documents?2github?2@ DB 'c:\users\s'
	DB	'imon\documents\github\uclan-sparta\effects11\d3dxglobal.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@IDKFFGGG@m_pData?5?$DN?$DN?5AlignToPowerOf2?$CIm_pDa@
CONST	SEGMENT
??_C@_0DF@IDKFFGGG@m_pData?5?$DN?$DN?5AlignToPowerOf2?$CIm_pDa@ DB 'm_pDa'
	DB	'ta == AlignToPowerOf2(m_pData, c_DataAlignment)', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??AddData@CDataBlock@@QAEJPBXIPAPAV2@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??AddData@CDataBlock@@QAEJPBXIPAPAV2@@Z@4JA DD 08cH ; `CDataBlock::AddData'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??AlignToPowerOf2@@YAPAXPAXI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??AlignToPowerOf2@@YAPAXPAXI@Z@4JA DD 042H ; `AlignToPowerOf2'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DA@FKFDAOLL@Alignment?5?$DO?50?5?$CG?$CG?5Value?5?$DM?50xfffff@
CONST	SEGMENT
??_C@_0DA@FKFDAOLL@Alignment?5?$DO?50?5?$CG?$CG?5Value?5?$DM?50xfffff@ DB 'A'
	DB	'lignment > 0 && Value < 0xffffffff - Alignment', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
CONST	SEGMENT
??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@ DB 'c:\users\s'
	DB	'imon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@GECBLADO@?$CIAlignment?5?$CG?5?$CIAlignment?5?9?51?$CJ?$CJ?5?$DN?$DN@
CONST	SEGMENT
??_C@_0CD@GECBLADO@?$CIAlignment?5?$CG?5?$CIAlignment?5?9?51?$CJ?$CJ?5?$DN?$DN@ DB '('
	DB	'Alignment & (Alignment - 1)) == 0', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??AlignToPowerOf2@@YAIII@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??AlignToPowerOf2@@YAIII@Z@4JA DD 03aH	; `AlignToPowerOf2'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Allocate@CDataBlockStore@@QAEPAXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Allocate@CDataBlockStore@@QAEPAXI@Z$0
__ehfuncinfo$?Allocate@CDataBlockStore@@QAEPAXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Allocate@CDataBlockStore@@QAEPAXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddData@CDataBlockStore@@QAEJPBXIPAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddData@CDataBlockStore@@QAEJPBXIPAI@Z$3
__ehfuncinfo$?AddData@CDataBlockStore@@QAEJPBXIPAI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddData@CDataBlockStore@@QAEJPBXIPAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Allocate@CDataBlock@@QAEPAXIPAPAV1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Allocate@CDataBlock@@QAEPAXIPAPAV1@@Z$0
__ehfuncinfo$?Allocate@CDataBlock@@QAEPAXIPAPAV1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Allocate@CDataBlock@@QAEPAXIPAPAV1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddData@CDataBlock@@QAEJPBXIPAPAV1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddData@CDataBlock@@QAEJPBXIPAPAV1@@Z$3
__ehfuncinfo$?AddData@CDataBlock@@QAEJPBXIPAPAV1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddData@CDataBlock@@QAEJPBXIPAPAV1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\windows kits\8.1\include\shared\intsafe.h
;	COMDAT ?UIntAdd@@YAJIIPAI@Z
_TEXT	SEGMENT
_hr$ = -8						; size = 4
_uAugend$ = 8						; size = 4
_uAddend$ = 12						; size = 4
_puResult$ = 16						; size = 4
?UIntAdd@@YAJIIPAI@Z PROC				; UIntAdd, COMDAT

; 6902 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 6903 :     HRESULT hr;
; 6904 : 
; 6905 :     if ((uAugend + uAddend) >= uAugend)

	mov	eax, DWORD PTR _uAugend$[ebp]
	add	eax, DWORD PTR _uAddend$[ebp]
	cmp	eax, DWORD PTR _uAugend$[ebp]
	jb	SHORT $LN2@UIntAdd

; 6906 :     {
; 6907 :         *puResult = (uAugend + uAddend);

	mov	eax, DWORD PTR _uAugend$[ebp]
	add	eax, DWORD PTR _uAddend$[ebp]
	mov	ecx, DWORD PTR _puResult$[ebp]
	mov	DWORD PTR [ecx], eax

; 6908 :         hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 6909 :     }
; 6910 :     else

	jmp	SHORT $LN1@UIntAdd
$LN2@UIntAdd:

; 6911 :     {
; 6912 :         *puResult = UINT_ERROR;

	mov	eax, DWORD PTR _puResult$[ebp]
	mov	DWORD PTR [eax], -1

; 6913 :         hr = INTSAFE_E_ARITHMETIC_OVERFLOW;

	mov	DWORD PTR _hr$[ebp], -2147024362	; 80070216H
$LN1@UIntAdd:

; 6914 :     }
; 6915 :     
; 6916 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 6917 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?UIntAdd@@YAJIIPAI@Z ENDP				; UIntAdd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\d3dxglobal.cpp
;	COMDAT ??1CDataBlockStore@@QAE@XZ
_TEXT	SEGMENT
tv72 = -256						; size = 4
$T1 = -248						; size = 4
$T2 = -236						; size = 4
_pCurrent$3 = -32					; size = 4
_pData$ = -20						; size = 4
_this$ = -8						; size = 4
??1CDataBlockStore@@QAE@XZ PROC				; CDataBlockStore::~CDataBlockStore, COMDAT
; _this$ = ecx

; 258  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 259  :     // Can't just do SAFE_DELETE(m_pFirst) since it blows the stack when deleting long chains of data
; 260  :     CDataBlock* pData = m_pFirst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pData$[ebp], ecx
$LN2@CDataBlock:

; 261  :     while(pData)

	cmp	DWORD PTR _pData$[ebp], 0
	je	SHORT $LN3@CDataBlock

; 262  :     {
; 263  :         CDataBlock* pCurrent = pData;

	mov	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR _pCurrent$3[ebp], eax

; 264  :         pData = pData->m_pNext;

	mov	eax, DWORD PTR _pData$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _pData$[ebp], ecx

; 265  :         pCurrent->m_pNext = NULL;

	mov	eax, DWORD PTR _pCurrent$3[ebp]
	mov	DWORD PTR [eax+12], 0

; 266  :         delete pCurrent;

	mov	eax, DWORD PTR _pCurrent$3[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN5@CDataBlock
	push	1
	mov	ecx, DWORD PTR $T1[ebp]
	call	??_GCDataBlock@@QAEPAXI@Z
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN6@CDataBlock
$LN5@CDataBlock:
	mov	DWORD PTR tv72[ebp], 0
$LN6@CDataBlock:

; 267  :     }

	jmp	SHORT $LN2@CDataBlock
$LN3@CDataBlock:

; 268  : 
; 269  :     // m_pLast will be deleted automatically
; 270  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CDataBlockStore@@QAE@XZ ENDP				; CDataBlockStore::~CDataBlockStore
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\d3dxglobal.cpp
;	COMDAT ??0CDataBlockStore@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CDataBlockStore@@QAE@XZ PROC				; CDataBlockStore::CDataBlockStore, COMDAT
; _this$ = ecx

; 245  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 246  :     m_pFirst = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 247  :     m_pLast = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 248  :     m_Size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 249  :     m_Offset = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 250  :     m_IsAligned = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 251  : 
; 252  : #if _DEBUG
; 253  :     m_cAllocations = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 254  : #endif
; 255  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0CDataBlockStore@@QAE@XZ ENDP				; CDataBlockStore::CDataBlockStore
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\d3dxglobal.cpp
;	COMDAT ?EnableAlignment@CDataBlockStore@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?EnableAlignment@CDataBlockStore@@QAEXXZ PROC		; CDataBlockStore::EnableAlignment, COMDAT
; _this$ = ecx

; 273  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 274  :     m_IsAligned = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 1

; 275  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?EnableAlignment@CDataBlockStore@@QAEXXZ ENDP		; CDataBlockStore::EnableAlignment
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\d3dxglobal.cpp
;	COMDAT ?GetSize@CDataBlockStore@@QAEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetSize@CDataBlockStore@@QAEIXZ PROC			; CDataBlockStore::GetSize, COMDAT
; _this$ = ecx

; 349  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  :     return m_Size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 351  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@CDataBlockStore@@QAEIXZ ENDP			; CDataBlockStore::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\d3dxglobal.cpp
;	COMDAT ?Allocate@CDataBlockStore@@QAEPAXI@Z
_TEXT	SEGMENT
tv80 = -256						; size = 4
$T2 = -248						; size = 4
$T3 = -236						; size = 4
_pRetValue$ = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_bufferSize$ = 8					; size = 4
?Allocate@CDataBlockStore@@QAEPAXI@Z PROC		; CDataBlockStore::Allocate, COMDAT
; _this$ = ecx

; 318  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Allocate@CDataBlockStore@@QAEPAXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 319  :     void *pRetValue = NULL;

	mov	DWORD PTR _pRetValue$[ebp], 0

; 320  : 
; 321  : #if _DEBUG
; 322  :     m_cAllocations++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], ecx

; 323  : #endif
; 324  : 
; 325  :     if (!m_pFirst)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	$LN5@Allocate

; 326  :     {
; 327  :         m_pFirst = NEW CDataBlock();

	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	push	20					; 00000014H
	call	??2@YAPAXIABUnothrow_t@std@@@Z		; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN8@Allocate
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CDataBlock@@QAE@XZ			; CDataBlock::CDataBlock
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN9@Allocate
$LN8@Allocate:
	mov	DWORD PTR tv80[ebp], 0
$LN9@Allocate:
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], edx

; 328  :         if (!m_pFirst)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN4@Allocate

; 329  :             return NULL;

	xor	eax, eax
	jmp	SHORT $LN6@Allocate
$LN4@Allocate:

; 330  : 
; 331  :         if (m_IsAligned)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN3@Allocate

; 332  :         {
; 333  :             m_pFirst->EnableAlignment();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?EnableAlignment@CDataBlock@@QAEXXZ	; CDataBlock::EnableAlignment
$LN3@Allocate:

; 334  :         }
; 335  :         m_pLast = m_pFirst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx
$LN5@Allocate:

; 336  :     }
; 337  : 
; 338  :     if (FAILED(UIntAdd(m_Size, bufferSize, &m_Size)))

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _bufferSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	?UIntAdd@@YAJIIPAI@Z			; UIntAdd
	add	esp, 12					; 0000000cH
	test	eax, eax
	jge	SHORT $LN2@Allocate

; 339  :         return NULL;

	xor	eax, eax
	jmp	SHORT $LN6@Allocate
$LN2@Allocate:

; 340  : 
; 341  :     pRetValue = m_pLast->Allocate(bufferSize, &m_pLast);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _bufferSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?Allocate@CDataBlock@@QAEPAXIPAPAV1@@Z	; CDataBlock::Allocate
	mov	DWORD PTR _pRetValue$[ebp], eax

; 342  :     if (!pRetValue)

	cmp	DWORD PTR _pRetValue$[ebp], 0
	jne	SHORT $LN1@Allocate

; 343  :         return NULL;

	xor	eax, eax
	jmp	SHORT $LN6@Allocate
$LN1@Allocate:

; 344  : 
; 345  :     return pRetValue;

	mov	eax, DWORD PTR _pRetValue$[ebp]
$LN6@Allocate:

; 346  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Allocate@CDataBlockStore@@QAEPAXI@Z$0:
	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAXABUnothrow_t@std@@@Z		; operator delete
	add	esp, 8
	ret	0
__ehhandler$?Allocate@CDataBlockStore@@QAEPAXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-260]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Allocate@CDataBlockStore@@QAEPAXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Allocate@CDataBlockStore@@QAEPAXI@Z ENDP		; CDataBlockStore::Allocate
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\d3dxglobal.cpp
;	COMDAT ?AddData@CDataBlockStore@@QAEJPBXIPAI@Z
_TEXT	SEGMENT
tv78 = -256						; size = 4
$T2 = -248						; size = 4
$T3 = -236						; size = 4
_hr$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pNewData$ = 8						; size = 4
_bufferSize$ = 12					; size = 4
_pCurOffset$ = 16					; size = 4
?AddData@CDataBlockStore@@QAEJPBXIPAI@Z PROC		; CDataBlockStore::AddData, COMDAT
; _this$ = ecx

; 285  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddData@CDataBlockStore@@QAEJPBXIPAI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 286  :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 287  : 
; 288  :     if (bufferSize == 0)

	cmp	DWORD PTR _bufferSize$[ebp], 0
	jne	SHORT $LN10@AddData

; 289  :     {        
; 290  :         if (pCurOffset)

	cmp	DWORD PTR _pCurOffset$[ebp], 0
	je	SHORT __unwind$?AddData@CDataBlockStore@@QAEJPBXIPAI@Z$0

; 291  :         {
; 292  :             *pCurOffset = 0;

	mov	eax, DWORD PTR _pCurOffset$[ebp]
	mov	DWORD PTR [eax], 0
__unwind$?AddData@CDataBlockStore@@QAEJPBXIPAI@Z$0:

; 293  :         }
; 294  :         goto lExit;

	jmp	$lExit$17
$LN10@AddData:

; 295  :     }
; 296  : 
; 297  :     if (!m_pFirst)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	$LN7@AddData

; 298  :     {
; 299  :         VN( m_pFirst = NEW CDataBlock() );

	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	push	20					; 00000014H
	call	??2@YAPAXIABUnothrow_t@std@@@Z		; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN13@AddData
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0CDataBlock@@QAE@XZ			; CDataBlock::CDataBlock
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN14@AddData
$LN13@AddData:
	mov	DWORD PTR tv78[ebp], 0
$LN14@AddData:
	mov	eax, DWORD PTR tv78[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T2[ebp]
	mov	DWORD PTR [ecx], edx
	cmp	DWORD PTR $T2[ebp], 0
	jne	SHORT $LN6@AddData
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	SHORT $lExit$17
$LN6@AddData:

; 300  :         if (m_IsAligned)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN4@AddData

; 301  :         {
; 302  :             m_pFirst->EnableAlignment();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?EnableAlignment@CDataBlock@@QAEXXZ	; CDataBlock::EnableAlignment
$LN4@AddData:

; 303  :         }
; 304  :         m_pLast = m_pFirst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx
$LN7@AddData:

; 305  :     }
; 306  : 
; 307  :     if (pCurOffset)

	cmp	DWORD PTR _pCurOffset$[ebp], 0
	je	SHORT $LN3@AddData

; 308  :         *pCurOffset = m_Size + m_Offset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _pCurOffset$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@AddData:

; 309  : 
; 310  :     VH( m_pLast->AddData(pNewData, bufferSize, &m_pLast) );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _bufferSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pNewData$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?AddData@CDataBlock@@QAEJPBXIPAPAV1@@Z	; CDataBlock::AddData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@AddData
	jmp	SHORT $lExit$17
$LN2@AddData:

; 311  :     m_Size += bufferSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _bufferSize$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$lExit$17:

; 312  : 
; 313  : lExit:
; 314  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 315  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddData@CDataBlockStore@@QAEJPBXIPAI@Z$3:
	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAXABUnothrow_t@std@@@Z		; operator delete
	add	esp, 8
	ret	0
__ehhandler$?AddData@CDataBlockStore@@QAEJPBXIPAI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-260]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddData@CDataBlockStore@@QAEJPBXIPAI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddData@CDataBlockStore@@QAEJPBXIPAI@Z ENDP		; CDataBlockStore::AddData
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\d3dxglobal.cpp
;	COMDAT ?AddString@CDataBlockStore@@QAEJPBDPAI@Z
_TEXT	SEGMENT
tv66 = -232						; size = 4
tv86 = -225						; size = 1
tv83 = -224						; size = 4
tv80 = -220						; size = 4
_strSize$ = -20						; size = 4
_this$ = -8						; size = 4
_pString$ = 8						; size = 4
_pOffset$ = 12						; size = 4
?AddString@CDataBlockStore@@QAEJPBDPAI@Z PROC		; CDataBlockStore::AddString, COMDAT
; _this$ = ecx

; 278  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 279  :     size_t strSize = strlen(pString) + 1;

	mov	eax, DWORD PTR _pString$[ebp]
	mov	DWORD PTR tv80[ebp], eax
	mov	ecx, DWORD PTR tv80[ebp]
	add	ecx, 1
	mov	DWORD PTR tv83[ebp], ecx
$LL7@AddString:
	mov	edx, DWORD PTR tv80[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv86[ebp], al
	add	DWORD PTR tv80[ebp], 1
	cmp	BYTE PTR tv86[ebp], 0
	jne	SHORT $LL7@AddString
	mov	ecx, DWORD PTR tv80[ebp]
	sub	ecx, DWORD PTR tv83[ebp]
	mov	DWORD PTR tv66[ebp], ecx
	mov	edx, DWORD PTR tv66[ebp]
	add	edx, 1
	mov	DWORD PTR _strSize$[ebp], edx
$LN4@AddString:

; 280  :     D3DXASSERT( strSize <= 0xffffffff );

	cmp	DWORD PTR _strSize$[ebp], -1
	jbe	SHORT $LN3@AddString
	push	OFFSET ??_C@_0BG@KJGGCNII@strSize?5?$DM?$DN?50xffffffff?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??AddString@CDataBlockStore@@QAEJPBDPAI@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0EG@BLGPAMMG@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@AddString:
	xor	eax, eax
	jne	SHORT $LN4@AddString

; 281  :     return AddData(pString, (UINT)strSize, pOffset);

	mov	eax, DWORD PTR _pOffset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pString$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddData@CDataBlockStore@@QAEJPBXIPAI@Z	; CDataBlockStore::AddData

; 282  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?AddString@CDataBlockStore@@QAEJPBDPAI@Z ENDP		; CDataBlockStore::AddString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCDataBlock@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCDataBlock@@QAEPAXI@Z PROC				; CDataBlock::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDataBlock@@QAE@XZ			; CDataBlock::~CDataBlock
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCDataBlock@@QAEPAXI@Z ENDP				; CDataBlock::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\d3dxglobal.cpp
;	COMDAT ??1CDataBlock@@QAE@XZ
_TEXT	SEGMENT
tv72 = -244						; size = 4
$T1 = -236						; size = 4
$T2 = -224						; size = 4
$T3 = -212						; size = 4
_this$ = -8						; size = 4
??1CDataBlock@@QAE@XZ PROC				; CDataBlock::~CDataBlock, COMDAT
; _this$ = ecx

; 129  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 130  :     SAFE_DELETE_ARRAY(m_pData);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 131  :     SAFE_DELETE(m_pNext);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T2[ebp], edx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN3@CDataBlock
	push	1
	mov	ecx, DWORD PTR $T2[ebp]
	call	??_GCDataBlock@@QAEPAXI@Z
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@CDataBlock
$LN3@CDataBlock:
	mov	DWORD PTR tv72[ebp], 0
$LN4@CDataBlock:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 132  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CDataBlock@@QAE@XZ ENDP				; CDataBlock::~CDataBlock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\d3dxglobal.cpp
;	COMDAT ??0CDataBlock@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CDataBlock@@QAE@XZ PROC				; CDataBlock::CDataBlock, COMDAT
; _this$ = ecx

; 120  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 121  :     m_size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 122  :     m_maxSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 123  :     m_pData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 124  :     m_pNext = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 125  :     m_IsAligned = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 126  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0CDataBlock@@QAE@XZ ENDP				; CDataBlock::CDataBlock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\d3dxglobal.cpp
;	COMDAT ?EnableAlignment@CDataBlock@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?EnableAlignment@CDataBlock@@QAEXXZ PROC		; CDataBlock::EnableAlignment, COMDAT
; _this$ = ecx

; 135  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 136  :     m_IsAligned = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 1

; 137  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?EnableAlignment@CDataBlock@@QAEXXZ ENDP		; CDataBlock::EnableAlignment
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\d3dxglobal.cpp
;	COMDAT ?Allocate@CDataBlock@@QAEPAXIPAPAV1@@Z
_TEXT	SEGMENT
tv136 = -280						; size = 4
tv72 = -280						; size = 4
$T2 = -272						; size = 4
$T3 = -260						; size = 4
$T4 = -248						; size = 4
_temp$ = -44						; size = 4
_pRetValue$ = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_bufferSize$ = 8					; size = 4
_ppBlock$ = 12						; size = 4
?Allocate@CDataBlock@@QAEPAXIPAPAV1@@Z PROC		; CDataBlock::Allocate, COMDAT
; _this$ = ecx

; 190  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Allocate@CDataBlock@@QAEPAXIPAPAV1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 191  :     void *pRetValue;
; 192  :     UINT temp = m_size + bufferSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _bufferSize$[ebp]
	mov	DWORD PTR _temp$[ebp], ecx

; 193  : 
; 194  :     if (temp < m_size)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN21@Allocate

; 195  :         return NULL;

	xor	eax, eax
	jmp	$LN22@Allocate
$LN21@Allocate:

; 196  : 
; 197  :     *ppBlock = this;

	mov	eax, DWORD PTR _ppBlock$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx

; 198  : 
; 199  :     if (m_maxSize == 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	$LN20@Allocate

; 200  :     {
; 201  :         // This is a brand new DataBlock, fill it up
; 202  :         m_maxSize = max(8192, bufferSize);

	cmp	DWORD PTR _bufferSize$[ebp], 8192	; 00002000H
	jae	SHORT $LN24@Allocate
	mov	DWORD PTR tv72[ebp], 8192		; 00002000H
	jmp	SHORT $LN25@Allocate
$LN24@Allocate:
	mov	eax, DWORD PTR _bufferSize$[ebp]
	mov	DWORD PTR tv72[ebp], eax
$LN25@Allocate:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv72[ebp]
	mov	DWORD PTR [ecx+4], edx

; 203  : 
; 204  :         m_pData = NEW BYTE[m_maxSize];

	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	??_U@YAPAXIABUnothrow_t@std@@@Z		; operator new[]
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax

; 205  :         if (!m_pData)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN19@Allocate

; 206  :             return NULL;

	xor	eax, eax
	jmp	$LN22@Allocate
$LN19@Allocate:

; 207  :         memset(m_pData, 0xDD, m_maxSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	221					; 000000ddH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
	jmp	$LN10@Allocate
$LN20@Allocate:

; 208  :     }
; 209  :     else if (temp > m_maxSize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jbe	$LN10@Allocate
$LN16@Allocate:

; 210  :     {
; 211  :         D3DXASSERT(NULL == m_pNext); // make sure we're not overwriting anything

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN15@Allocate
	push	OFFSET ??_C@_0BA@GHDFLDPA@NULL?5?$DN?$DN?5m_pNext?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Allocate@CDataBlock@@QAEPAXIPAPAV2@@Z@4JA
	add	eax, 21					; 00000015H
	push	eax
	push	OFFSET ??_C@_0EG@BLGPAMMG@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN15@Allocate:
	xor	eax, eax
	jne	SHORT $LN16@Allocate

; 212  : 
; 213  :         // Couldn't fit data into this block, spill over into next
; 214  :         m_pNext = NEW CDataBlock();

	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	push	20					; 00000014H
	call	??2@YAPAXIABUnothrow_t@std@@@Z		; operator new
	add	esp, 8
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN26@Allocate
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0CDataBlock@@QAE@XZ			; CDataBlock::CDataBlock
	mov	DWORD PTR tv136[ebp], eax
	jmp	SHORT $LN27@Allocate
$LN26@Allocate:
	mov	DWORD PTR tv136[ebp], 0
$LN27@Allocate:
	mov	eax, DWORD PTR tv136[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx+12], edx

; 215  :         if (!m_pNext)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN12@Allocate

; 216  :             return NULL;

	xor	eax, eax
	jmp	$LN22@Allocate
$LN12@Allocate:

; 217  :         if (m_IsAligned)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN11@Allocate

; 218  :         {
; 219  :             m_pNext->EnableAlignment();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?EnableAlignment@CDataBlock@@QAEXXZ	; CDataBlock::EnableAlignment
$LN11@Allocate:

; 220  :         }
; 221  : 
; 222  :         return m_pNext->Allocate(bufferSize, ppBlock);

	mov	eax, DWORD PTR _ppBlock$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bufferSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?Allocate@CDataBlock@@QAEPAXIPAPAV1@@Z	; CDataBlock::Allocate
	jmp	$LN22@Allocate
$LN10@Allocate:

; 223  :     }
; 224  : 
; 225  :     D3DXASSERT(m_pData == AlignToPowerOf2(m_pData, c_DataAlignment));

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?AlignToPowerOf2@@YAPAXPAXI@Z		; AlignToPowerOf2
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], eax
	je	SHORT $LN9@Allocate
	push	OFFSET ??_C@_0DF@IDKFFGGG@m_pData?5?$DN?$DN?5AlignToPowerOf2?$CIm_pDa@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Allocate@CDataBlock@@QAEPAXIPAPAV2@@Z@4JA
	add	eax, 35					; 00000023H
	push	eax
	push	OFFSET ??_C@_0EG@BLGPAMMG@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN9@Allocate:
	xor	eax, eax
	jne	SHORT $LN10@Allocate

; 226  : 
; 227  :     pRetValue = m_pData + m_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	DWORD PTR _pRetValue$[ebp], ecx

; 228  :     if (m_IsAligned)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN6@Allocate
$LN5@Allocate:

; 229  :     {
; 230  :         D3DXASSERT(m_size == AlignToPowerOf2(m_size, c_DataAlignment));

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], eax
	je	SHORT $LN4@Allocate
	push	OFFSET ??_C@_0DD@NDPMEJJB@m_size?5?$DN?$DN?5AlignToPowerOf2?$CIm_size@
	mov	eax, DWORD PTR ?__LINE__Var@?1??Allocate@CDataBlock@@QAEPAXIPAPAV2@@Z@4JA
	add	eax, 40					; 00000028H
	push	eax
	push	OFFSET ??_C@_0EG@BLGPAMMG@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN4@Allocate:
	xor	eax, eax
	jne	SHORT $LN5@Allocate

; 231  :         m_size = AlignToPowerOf2(temp, c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _temp$[ebp]
	push	eax
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 232  :     }
; 233  :     else

	jmp	SHORT $LN1@Allocate
$LN6@Allocate:

; 234  :     {
; 235  :         m_size = temp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@Allocate:

; 236  :     }
; 237  : 
; 238  :     return pRetValue;

	mov	eax, DWORD PTR _pRetValue$[ebp]
$LN22@Allocate:

; 239  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Allocate@CDataBlock@@QAEPAXIPAPAV1@@Z$0:
	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAXABUnothrow_t@std@@@Z		; operator delete
	add	esp, 8
	ret	0
__ehhandler$?Allocate@CDataBlock@@QAEPAXIPAPAV1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-284]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Allocate@CDataBlock@@QAEPAXIPAPAV1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Allocate@CDataBlock@@QAEPAXIPAPAV1@@Z ENDP		; CDataBlock::Allocate
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\d3dxglobal.cpp
;	COMDAT ?AddData@CDataBlock@@QAEJPBXIPAPAV1@@Z
_TEXT	SEGMENT
tv174 = -292						; size = 4
tv93 = -292						; size = 4
tv68 = -292						; size = 4
$T2 = -284						; size = 4
$T3 = -272						; size = 4
$T4 = -260						; size = 4
_pNewData$ = -56					; size = 4
_bytesToCopy$ = -44					; size = 4
_hr$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pvNewData$ = 8						; size = 4
_bufferSize$ = 12					; size = 4
_ppBlock$ = 16						; size = 4
?AddData@CDataBlock@@QAEJPBXIPAPAV1@@Z PROC		; CDataBlock::AddData, COMDAT
; _this$ = ecx

; 140  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddData@CDataBlock@@QAEJPBXIPAPAV1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 141  :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 142  :     UINT bytesToCopy;
; 143  :     const BYTE *pNewData = (const BYTE*) pvNewData;

	mov	eax, DWORD PTR _pvNewData$[ebp]
	mov	DWORD PTR _pNewData$[ebp], eax

; 144  : 
; 145  :     if (m_maxSize == 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN20@AddData

; 146  :     {
; 147  :         // This is a brand new DataBlock, fill it up
; 148  :         m_maxSize = max(8192, bufferSize);

	cmp	DWORD PTR _bufferSize$[ebp], 8192	; 00002000H
	jae	SHORT $LN26@AddData
	mov	DWORD PTR tv68[ebp], 8192		; 00002000H
	jmp	SHORT $LN27@AddData
$LN26@AddData:
	mov	eax, DWORD PTR _bufferSize$[ebp]
	mov	DWORD PTR tv68[ebp], eax
$LN27@AddData:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv68[ebp]
	mov	DWORD PTR [ecx+4], edx

; 149  : 
; 150  :         VN( m_pData = NEW BYTE[m_maxSize] );

	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	??_U@YAPAXIABUnothrow_t@std@@@Z		; operator new[]
	add	esp, 8
	mov	DWORD PTR $T2[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR [edx+8], eax
	cmp	DWORD PTR $T2[ebp], 0
	jne	SHORT $LN20@AddData
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$34
$LN20@AddData:

; 151  :     }
; 152  : 
; 153  :     D3DXASSERT(m_pData == AlignToPowerOf2(m_pData, c_DataAlignment));

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?AlignToPowerOf2@@YAPAXPAXI@Z		; AlignToPowerOf2
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], eax
	je	SHORT $LN19@AddData
	push	OFFSET ??_C@_0DF@IDKFFGGG@m_pData?5?$DN?$DN?5AlignToPowerOf2?$CIm_pDa@
	mov	eax, DWORD PTR ?__LINE__Var@?1??AddData@CDataBlock@@QAEJPBXIPAPAV2@@Z@4JA
	add	eax, 13					; 0000000dH
	push	eax
	push	OFFSET ??_C@_0EG@BLGPAMMG@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN19@AddData:
	xor	eax, eax
	jne	SHORT $LN20@AddData

; 154  : 
; 155  :     bytesToCopy = min(m_maxSize - m_size, bufferSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _bufferSize$[ebp]
	jae	SHORT $LN28@AddData
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv93[ebp], edx
	jmp	SHORT $LN29@AddData
$LN28@AddData:
	mov	eax, DWORD PTR _bufferSize$[ebp]
	mov	DWORD PTR tv93[ebp], eax
$LN29@AddData:
	mov	ecx, DWORD PTR tv93[ebp]
	mov	DWORD PTR _bytesToCopy$[ebp], ecx

; 156  :     memcpy(m_pData + m_size, pNewData, bytesToCopy);

	mov	eax, DWORD PTR _bytesToCopy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pNewData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 157  :     pNewData += bytesToCopy;

	mov	eax, DWORD PTR _pNewData$[ebp]
	add	eax, DWORD PTR _bytesToCopy$[ebp]
	mov	DWORD PTR _pNewData$[ebp], eax

; 158  :     
; 159  :     if (m_IsAligned)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN16@AddData
$LN15@AddData:

; 160  :     {
; 161  :         D3DXASSERT(m_size == AlignToPowerOf2(m_size, c_DataAlignment));

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], eax
	je	SHORT $LN14@AddData
	push	OFFSET ??_C@_0DD@NDPMEJJB@m_size?5?$DN?$DN?5AlignToPowerOf2?$CIm_size@
	mov	eax, DWORD PTR ?__LINE__Var@?1??AddData@CDataBlock@@QAEJPBXIPAPAV2@@Z@4JA
	add	eax, 21					; 00000015H
	push	eax
	push	OFFSET ??_C@_0EG@BLGPAMMG@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN14@AddData:
	xor	eax, eax
	jne	SHORT $LN15@AddData

; 162  :         m_size += AlignToPowerOf2(bytesToCopy, c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _bytesToCopy$[ebp]
	push	eax
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 163  :     }
; 164  :     else

	jmp	SHORT $LN11@AddData
$LN16@AddData:

; 165  :     {
; 166  :         m_size += bytesToCopy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _bytesToCopy$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx
$LN11@AddData:

; 167  :     }
; 168  :     
; 169  :     bufferSize -= bytesToCopy;

	mov	eax, DWORD PTR _bufferSize$[ebp]
	sub	eax, DWORD PTR _bytesToCopy$[ebp]
	mov	DWORD PTR _bufferSize$[ebp], eax

; 170  :     *ppBlock = this;

	mov	eax, DWORD PTR _ppBlock$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx

; 171  : 
; 172  :     if (bufferSize != 0)

	cmp	DWORD PTR _bufferSize$[ebp], 0
	je	$lExit$34
$LN9@AddData:

; 173  :     {
; 174  :         D3DXASSERT(NULL == m_pNext); // make sure we're not overwriting anything

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN8@AddData
	push	OFFSET ??_C@_0BA@GHDFLDPA@NULL?5?$DN?$DN?5m_pNext?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??AddData@CDataBlock@@QAEJPBXIPAPAV2@@Z@4JA
	add	eax, 34					; 00000022H
	push	eax
	push	OFFSET ??_C@_0EG@BLGPAMMG@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN8@AddData:
	xor	eax, eax
	jne	SHORT $LN9@AddData

; 175  : 
; 176  :         // Couldn't fit all data into this block, spill over into next
; 177  :         VN( m_pNext = NEW CDataBlock() );

	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	push	20					; 00000014H
	call	??2@YAPAXIABUnothrow_t@std@@@Z		; operator new
	add	esp, 8
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN30@AddData
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0CDataBlock@@QAE@XZ			; CDataBlock::CDataBlock
	mov	DWORD PTR tv174[ebp], eax
	jmp	SHORT $LN31@AddData
$LN30@AddData:
	mov	DWORD PTR tv174[ebp], 0
$LN31@AddData:
	mov	eax, DWORD PTR tv174[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx+12], edx
	cmp	DWORD PTR $T3[ebp], 0
	jne	SHORT $LN5@AddData
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	SHORT $lExit$34
$LN5@AddData:

; 178  :         if (m_IsAligned)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN3@AddData

; 179  :         {
; 180  :             m_pNext->EnableAlignment();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?EnableAlignment@CDataBlock@@QAEXXZ	; CDataBlock::EnableAlignment
$LN3@AddData:

; 181  :         }
; 182  :         VH( m_pNext->AddData(pNewData, bufferSize, ppBlock) );

	mov	eax, DWORD PTR _ppBlock$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bufferSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pNewData$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?AddData@CDataBlock@@QAEJPBXIPAPAV1@@Z	; CDataBlock::AddData
	mov	DWORD PTR _hr$[ebp], eax
$lExit$34:

; 183  :     }
; 184  : 
; 185  : lExit:
; 186  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 187  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddData@CDataBlock@@QAEJPBXIPAPAV1@@Z$3:
	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAXABUnothrow_t@std@@@Z		; operator delete
	add	esp, 8
	ret	0
__ehhandler$?AddData@CDataBlock@@QAEJPBXIPAPAV1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-296]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddData@CDataBlock@@QAEJPBXIPAPAV1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddData@CDataBlock@@QAEJPBXIPAPAV1@@Z ENDP		; CDataBlock::AddData
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\d3dxglobal.cpp
;	COMDAT ??1CMemoryStream@D3DX11Core@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CMemoryStream@D3DX11Core@@QAE@XZ PROC		; D3DX11Core::CMemoryStream::~CMemoryStream, COMDAT
; _this$ = ecx

; 28   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 29   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMemoryStream@D3DX11Core@@QAE@XZ ENDP		; D3DX11Core::CMemoryStream::~CMemoryStream
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\d3dxglobal.cpp
;	COMDAT ??0CMemoryStream@D3DX11Core@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CMemoryStream@D3DX11Core@@QAE@XZ PROC		; D3DX11Core::CMemoryStream::CMemoryStream, COMDAT
; _this$ = ecx

; 21   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 22   :     m_pData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 23   :     m_cbData = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 24   :     m_readPtr = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 25   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMemoryStream@D3DX11Core@@QAE@XZ ENDP		; D3DX11Core::CMemoryStream::CMemoryStream
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\d3dxglobal.cpp
;	COMDAT ?Seek@CMemoryStream@D3DX11Core@@QAEJK@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_offset$ = 8						; size = 4
?Seek@CMemoryStream@D3DX11Core@@QAEJK@Z PROC		; D3DX11Core::CMemoryStream::Seek, COMDAT
; _this$ = ecx

; 105  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 106  :     if (offset > m_cbData)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _offset$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jbe	SHORT $LN1@Seek

; 107  :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN2@Seek
$LN1@Seek:

; 108  : 
; 109  :     m_readPtr = offset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 110  :     return S_OK;

	xor	eax, eax
$LN2@Seek:

; 111  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Seek@CMemoryStream@D3DX11Core@@QAEJK@Z ENDP		; D3DX11Core::CMemoryStream::Seek
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\d3dxglobal.cpp
;	COMDAT ?GetPosition@CMemoryStream@D3DX11Core@@QAEKXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPosition@CMemoryStream@D3DX11Core@@QAEKXZ PROC	; D3DX11Core::CMemoryStream::GetPosition, COMDAT
; _this$ = ecx

; 100  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 101  :     return m_readPtr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 102  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPosition@CMemoryStream@D3DX11Core@@QAEKXZ ENDP	; D3DX11Core::CMemoryStream::GetPosition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\d3dxglobal.cpp
;	COMDAT ?ReadAtOffset@CMemoryStream@D3DX11Core@@QAEJKPAPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_offset$ = 8						; size = 4
_ppString$ = 12						; size = 4
?ReadAtOffset@CMemoryStream@D3DX11Core@@QAEJKPAPBD@Z PROC ; D3DX11Core::CMemoryStream::ReadAtOffset, COMDAT
; _this$ = ecx

; 50   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   :     if (offset >= m_cbData)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _offset$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN1@ReadAtOffs

; 52   :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN2@ReadAtOffs
$LN1@ReadAtOffs:

; 53   : 
; 54   :     m_readPtr = offset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 55   :     return Read(ppString);

	mov	eax, DWORD PTR _ppString$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAPBD@Z ; D3DX11Core::CMemoryStream::Read
$LN2@ReadAtOffs:

; 56   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ReadAtOffset@CMemoryStream@D3DX11Core@@QAEJKPAPBD@Z ENDP ; D3DX11Core::CMemoryStream::ReadAtOffset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\d3dxglobal.cpp
;	COMDAT ?ReadAtOffset@CMemoryStream@D3DX11Core@@QAEJKKPAPAX@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_offset$ = 8						; size = 4
_size$ = 12						; size = 4
_ppData$ = 16						; size = 4
?ReadAtOffset@CMemoryStream@D3DX11Core@@QAEJKKPAPAX@Z PROC ; D3DX11Core::CMemoryStream::ReadAtOffset, COMDAT
; _this$ = ecx

; 41   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 42   :     if (offset >= m_cbData)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _offset$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN1@ReadAtOffs

; 43   :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN2@ReadAtOffs
$LN1@ReadAtOffs:

; 44   : 
; 45   :     m_readPtr = offset;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 46   :     return Read(ppData, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ppData$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAPAXK@Z ; D3DX11Core::CMemoryStream::Read
$LN2@ReadAtOffs:

; 47   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ReadAtOffset@CMemoryStream@D3DX11Core@@QAEJKKPAPAX@Z ENDP ; D3DX11Core::CMemoryStream::ReadAtOffset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\d3dxglobal.cpp
;	COMDAT ?Read@CMemoryStream@D3DX11Core@@QAEJPAPBD@Z
_TEXT	SEGMENT
_iChar$ = -20						; size = 4
_this$ = -8						; size = 4
_ppString$ = 8						; size = 4
?Read@CMemoryStream@D3DX11Core@@QAEJPAPBD@Z PROC	; D3DX11Core::CMemoryStream::Read, COMDAT
; _this$ = ecx

; 84   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 85   :     SIZE_T iChar;
; 86   : 
; 87   :     for(iChar=m_readPtr; m_pData[iChar]; iChar++)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _iChar$[ebp], ecx
	jmp	SHORT $LN4@Read
$LN3@Read:
	mov	eax, DWORD PTR _iChar$[ebp]
	add	eax, 1
	mov	DWORD PTR _iChar$[ebp], eax
$LN4@Read:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _iChar$[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
	test	eax, eax
	je	SHORT $LN2@Read

; 88   :     {
; 89   :         if (iChar > m_cbData)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iChar$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jbe	SHORT $LN1@Read

; 90   :             return E_FAIL;      

	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN5@Read
$LN1@Read:

; 91   :     }

	jmp	SHORT $LN3@Read
$LN2@Read:

; 92   : 
; 93   :     *ppString = (LPCSTR) (m_pData + m_readPtr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _ppString$[ebp]
	mov	DWORD PTR [eax], ecx

; 94   :     m_readPtr = iChar;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iChar$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 95   : 
; 96   :     return S_OK;

	xor	eax, eax
$LN5@Read:

; 97   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Read@CMemoryStream@D3DX11Core@@QAEJPAPBD@Z ENDP	; D3DX11Core::CMemoryStream::Read
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\d3dxglobal.cpp
;	COMDAT ?Read@CMemoryStream@D3DX11Core@@QAEJPAPAXK@Z
_TEXT	SEGMENT
_temp$ = -20						; size = 4
_this$ = -8						; size = 4
_ppData$ = 8						; size = 4
_size$ = 12						; size = 4
?Read@CMemoryStream@D3DX11Core@@QAEJPAPAXK@Z PROC	; D3DX11Core::CMemoryStream::Read, COMDAT
; _this$ = ecx

; 59   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 60   :     SIZE_T temp = m_readPtr + size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR _temp$[ebp], ecx

; 61   : 
; 62   :     if (temp < m_readPtr || temp > m_cbData)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jb	SHORT $LN1@Read
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jbe	SHORT $LN2@Read
$LN1@Read:

; 63   :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN3@Read
$LN2@Read:

; 64   : 
; 65   :     *ppData = m_pData + m_readPtr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _ppData$[ebp]
	mov	DWORD PTR [eax], ecx

; 66   :     m_readPtr = temp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 67   :     return S_OK;

	xor	eax, eax
$LN3@Read:

; 68   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?Read@CMemoryStream@D3DX11Core@@QAEJPAPAXK@Z ENDP	; D3DX11Core::CMemoryStream::Read
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\d3dxglobal.cpp
;	COMDAT ?Read@CMemoryStream@D3DX11Core@@QAEJPAI@Z
_TEXT	SEGMENT
_hr$ = -32						; size = 4
_pTempDword$ = -20					; size = 4
_this$ = -8						; size = 4
_pDword$ = 8						; size = 4
?Read@CMemoryStream@D3DX11Core@@QAEJPAI@Z PROC		; D3DX11Core::CMemoryStream::Read, COMDAT
; _this$ = ecx

; 71   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 72   :     UINT *pTempDword;
; 73   :     HRESULT hr;
; 74   : 
; 75   :     hr = Read((void**) &pTempDword, sizeof(UINT));

	push	4
	lea	eax, DWORD PTR _pTempDword$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAPAXK@Z ; D3DX11Core::CMemoryStream::Read
	mov	DWORD PTR _hr$[ebp], eax

; 76   :     if (FAILED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@Read

; 77   :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN2@Read
$LN1@Read:

; 78   : 
; 79   :     *pDword = *pTempDword;

	mov	eax, DWORD PTR _pDword$[ebp]
	mov	ecx, DWORD PTR _pTempDword$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 80   :     return S_OK;

	xor	eax, eax
$LN2@Read:

; 81   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@Read
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN6@Read:
	DD	1
	DD	$LN5@Read
$LN5@Read:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@Read
$LN4@Read:
	DB	112					; 00000070H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	68					; 00000044H
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	100					; 00000064H
	DB	0
?Read@CMemoryStream@D3DX11Core@@QAEJPAI@Z ENDP		; D3DX11Core::CMemoryStream::Read
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\d3dxglobal.cpp
;	COMDAT ?SetData@CMemoryStream@D3DX11Core@@QAEJPBXK@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pData$ = 8						; size = 4
_size$ = 12						; size = 4
?SetData@CMemoryStream@D3DX11Core@@QAEJPBXK@Z PROC	; D3DX11Core::CMemoryStream::SetData, COMDAT
; _this$ = ecx

; 32   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 33   :     m_pData = (BYTE*) pData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	mov	DWORD PTR [eax], ecx

; 34   :     m_cbData = size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 35   :     m_readPtr = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 36   : 
; 37   :     return S_OK;

	xor	eax, eax

; 38   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetData@CMemoryStream@D3DX11Core@@QAEJPBXK@Z ENDP	; D3DX11Core::CMemoryStream::SetData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?AlignToPowerOf2@@YAPAXPAXI@Z
_TEXT	SEGMENT
_pValue$ = 8						; size = 4
_Alignment$ = 12					; size = 4
?AlignToPowerOf2@@YAPAXPAXI@Z PROC			; AlignToPowerOf2, COMDAT

; 66   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN4@AlignToPow:

; 67   :     D3DXASSERT((Alignment & (Alignment - 1)) == 0);

	mov	eax, DWORD PTR _Alignment$[ebp]
	sub	eax, 1
	and	eax, DWORD PTR _Alignment$[ebp]
	je	SHORT $LN3@AlignToPow
	push	OFFSET ??_C@_0CD@GECBLADO@?$CIAlignment?5?$CG?5?$CIAlignment?5?9?51?$CJ?$CJ?5?$DN?$DN@
	mov	eax, DWORD PTR ?__LINE__Var@?1??AlignToPowerOf2@@YAPAXPAXI@Z@4JA
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@AlignToPow:
	xor	eax, eax
	jne	SHORT $LN4@AlignToPow

; 68   :     // to align to 2^N, add 2^N - 1 and AND with all but lowest N bits set
; 69   :     return (void *)(((UINT_PTR)pValue + Alignment - 1) & (~((UINT_PTR)Alignment - 1)));

	mov	eax, DWORD PTR _Alignment$[ebp]
	mov	ecx, DWORD PTR _pValue$[ebp]
	lea	eax, DWORD PTR [ecx+eax-1]
	mov	edx, DWORD PTR _Alignment$[ebp]
	sub	edx, 1
	not	edx
	and	eax, edx

; 70   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AlignToPowerOf2@@YAPAXPAXI@Z ENDP			; AlignToPowerOf2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?AlignToPowerOf2@@YAIII@Z
_TEXT	SEGMENT
_Value$ = 8						; size = 4
_Alignment$ = 12					; size = 4
?AlignToPowerOf2@@YAIII@Z PROC				; AlignToPowerOf2, COMDAT

; 58   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN12@AlignToPow:

; 59   :     D3DXASSERT((Alignment & (Alignment - 1)) == 0);

	mov	eax, DWORD PTR _Alignment$[ebp]
	sub	eax, 1
	and	eax, DWORD PTR _Alignment$[ebp]
	je	SHORT $LN11@AlignToPow
	push	OFFSET ??_C@_0CD@GECBLADO@?$CIAlignment?5?$CG?5?$CIAlignment?5?9?51?$CJ?$CJ?5?$DN?$DN@
	mov	eax, DWORD PTR ?__LINE__Var@?1??AlignToPowerOf2@@YAIII@Z@4JA
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN11@AlignToPow:
	xor	eax, eax
	jne	SHORT $LN12@AlignToPow
$LN8@AlignToPow:

; 60   :     // to align to 2^N, add 2^N - 1 and AND with all but lowest N bits set
; 61   :     ANALYSIS_ASSUME(Alignment > 0 && Value < MAXDWORD - Alignment);

	cmp	DWORD PTR _Alignment$[ebp], 0
	jbe	SHORT $LN4@AlignToPow
	or	eax, -1
	sub	eax, DWORD PTR _Alignment$[ebp]
	cmp	DWORD PTR _Value$[ebp], eax
	jb	SHORT $LN7@AlignToPow
$LN4@AlignToPow:
	push	OFFSET ??_C@_0DA@FKFDAOLL@Alignment?5?$DO?50?5?$CG?$CG?5Value?5?$DM?50xfffff@
	mov	eax, DWORD PTR ?__LINE__Var@?1??AlignToPowerOf2@@YAIII@Z@4JA
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN7@AlignToPow:
	xor	eax, eax
	jne	SHORT $LN8@AlignToPow
$LN2@AlignToPow:
	xor	eax, eax
	jne	SHORT $LN2@AlignToPow

; 62   :     return (Value + Alignment - 1) & (~(Alignment - 1));

	mov	eax, DWORD PTR _Alignment$[ebp]
	mov	ecx, DWORD PTR _Value$[ebp]
	lea	eax, DWORD PTR [ecx+eax-1]
	mov	edx, DWORD PTR _Alignment$[ebp]
	sub	edx, 1
	not	edx
	and	eax, edx

; 63   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AlignToPowerOf2@@YAIII@Z ENDP				; AlignToPowerOf2
_TEXT	ENDS
END
