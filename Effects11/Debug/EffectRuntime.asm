; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

	TITLE	C:\Users\Simon\Documents\GitHub\Sparta2.0\UCLAN-sparta\Effects11\EffectRuntime.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	_IID_ID3DX11EffectBlendVariable
PUBLIC	_IID_ID3DX11EffectDepthStencilVariable
PUBLIC	_IID_ID3DX11EffectVectorVariable
PUBLIC	_IID_ID3DX11EffectRasterizerVariable
PUBLIC	_IID_ID3DX11EffectMatrixVariable
PUBLIC	?c_InvalidIndex@SType@D3DX11Effects@@2IB	; D3DX11Effects::SType::c_InvalidIndex
PUBLIC	?c_ScalarSize@SType@D3DX11Effects@@2IB		; D3DX11Effects::SType::c_ScalarSize
PUBLIC	?c_ScalarsPerRegister@SType@D3DX11Effects@@2IB	; D3DX11Effects::SType::c_ScalarsPerRegister
PUBLIC	?c_RegisterSize@SType@D3DX11Effects@@2IB	; D3DX11Effects::SType::c_RegisterSize
PUBLIC	_IID_ID3DX11EffectSamplerVariable
PUBLIC	_IID_ID3DX11EffectStringVariable
PUBLIC	_IID_ID3DX11EffectPass
PUBLIC	?D3D11_DEFAULT@@3UCD3D11_DEFAULT@@B		; D3D11_DEFAULT
PUBLIC	_IID_ID3DX11EffectClassInstanceVariable
PUBLIC	_IID_ID3DX11EffectTechnique
PUBLIC	_IID_ID3DX11EffectInterfaceVariable
PUBLIC	_IID_ID3DX11EffectGroup
PUBLIC	_IID_ID3D11ShaderReflectionType
PUBLIC	_IID_ID3DX11Effect
PUBLIC	_IID_ID3D11ShaderReflectionVariable
PUBLIC	_IID_ID3D11ShaderReflectionConstantBuffer
PUBLIC	_IID_ID3DX11EffectShaderResourceVariable
PUBLIC	_IID_ID3D11ShaderReflection
PUBLIC	_IID_ID3D11LibraryReflection
PUBLIC	_IID_ID3DX11EffectUnorderedAccessViewVariable
PUBLIC	_IID_ID3D11FunctionReflection
PUBLIC	_IID_ID3D11FunctionParameterReflection
PUBLIC	_IID_ID3D11Module
PUBLIC	_IID_ID3D11ModuleInstance
PUBLIC	_IID_ID3DX11EffectRenderTargetViewVariable
PUBLIC	_IID_ID3D11Linker
PUBLIC	_IID_ID3D11LinkingNode
PUBLIC	_IID_ID3DX11EffectDepthStencilViewVariable
PUBLIC	_IID_ID3D11FunctionLinkingGraph
PUBLIC	_IID_ID3DX11EffectConstantBuffer
PUBLIC	_IID_ID3DX11EffectType
PUBLIC	?c_IsTBuffer@SBinaryConstantBuffer@D3DX11Effects@@2IB ; D3DX11Effects::SBinaryConstantBuffer::c_IsTBuffer
PUBLIC	?c_IsSingle@SBinaryConstantBuffer@D3DX11Effects@@2IB ; D3DX11Effects::SBinaryConstantBuffer::c_IsSingle
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	_IID_ID3DX11EffectVariable
PUBLIC	_IID_ID3DX11EffectShaderVariable
PUBLIC	?g_pNegativeOnes@D3DX11Effects@@3PAIA		; D3DX11Effects::g_pNegativeOnes
PUBLIC	_IID_ID3DX11EffectScalarVariable
;	COMDAT _IID_ID3DX11EffectScalarVariable
CONST	SEGMENT
_IID_ID3DX11EffectScalarVariable DD 0921ef2e5H
	DW	0a65dH
	DW	04e92H
	DB	09fH
	DB	0c6H
	DB	04eH
	DB	09cH
	DB	0c0H
	DB	09aH
	DB	04aH
	DB	0deH
CONST	ENDS
_DATA	SEGMENT
?g_pNegativeOnes@D3DX11Effects@@3PAIA DD 0ffffffffH	; D3DX11Effects::g_pNegativeOnes
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
_DATA	ENDS
;	COMDAT _IID_ID3DX11EffectShaderVariable
CONST	SEGMENT
_IID_ID3DX11EffectShaderVariable DD 07508b344H
	DW	020aH
	DW	04ec7H
	DB	091H
	DB	018H
	DB	062H
	DB	0cdH
	DB	0d3H
	DB	06cH
	DB	088H
	DB	0d7H
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectVariable
CONST	SEGMENT
_IID_ID3DX11EffectVariable DD 036a777dH
	DW	0b56eH
	DW	04b25H
	DB	0b3H
	DB	013H
	DB	0ccH
	DB	03dH
	DB	0daH
	DB	0b7H
	DB	018H
	DB	073H
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?c_IsSingle@SBinaryConstantBuffer@D3DX11Effects@@2IB
CONST	SEGMENT
?c_IsSingle@SBinaryConstantBuffer@D3DX11Effects@@2IB DD 02H ; D3DX11Effects::SBinaryConstantBuffer::c_IsSingle
CONST	ENDS
;	COMDAT ?c_IsTBuffer@SBinaryConstantBuffer@D3DX11Effects@@2IB
CONST	SEGMENT
?c_IsTBuffer@SBinaryConstantBuffer@D3DX11Effects@@2IB DD 01H ; D3DX11Effects::SBinaryConstantBuffer::c_IsTBuffer
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectType
CONST	SEGMENT
_IID_ID3DX11EffectType DD 04250d721H
	DW	0d5e5H
	DW	0491fH
	DB	0b6H
	DB	02bH
	DB	058H
	DB	07cH
	DB	043H
	DB	018H
	DB	062H
	DB	085H
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectConstantBuffer
CONST	SEGMENT
_IID_ID3DX11EffectConstantBuffer DD 02cb6c733H
	DW	082d2H
	DW	04000H
	DB	0b3H
	DB	0daH
	DB	062H
	DB	019H
	DB	0d9H
	DB	0a9H
	DB	09bH
	DB	0f2H
CONST	ENDS
;	COMDAT _IID_ID3D11FunctionLinkingGraph
CONST	SEGMENT
_IID_ID3D11FunctionLinkingGraph DD 054133220H
	DW	01ce8H
	DW	043d3H
	DB	082H
	DB	036H
	DB	098H
	DB	055H
	DB	0c5H
	DB	0ceH
	DB	0ecH
	DB	0ffH
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectDepthStencilViewVariable
CONST	SEGMENT
_IID_ID3DX11EffectDepthStencilViewVariable DD 033c648acH
	DW	02e9eH
	DW	04a2eH
	DB	09cH
	DB	0d6H
	DB	0deH
	DB	031H
	DB	0acH
	DB	0c5H
	DB	0b3H
	DB	047H
CONST	ENDS
;	COMDAT _IID_ID3D11LinkingNode
CONST	SEGMENT
_IID_ID3D11LinkingNode DD 0d80dd70cH
	DW	08d2fH
	DW	04751H
	DB	094H
	DB	0a1H
	DB	03H
	DB	0c7H
	DB	09bH
	DB	035H
	DB	056H
	DB	0dbH
CONST	ENDS
;	COMDAT _IID_ID3D11Linker
CONST	SEGMENT
_IID_ID3D11Linker DD 059a6cd0eH
	DW	0e10dH
	DW	04c1fH
	DB	088H
	DB	0c0H
	DB	063H
	DB	0abH
	DB	0a1H
	DB	0daH
	DB	0f3H
	DB	0eH
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectRenderTargetViewVariable
CONST	SEGMENT
_IID_ID3DX11EffectRenderTargetViewVariable DD 0d5066909H
	DW	0f40cH
	DW	043f8H
	DB	09dH
	DB	0b5H
	DB	05H
	DB	07cH
	DB	02aH
	DB	020H
	DB	085H
	DB	052H
CONST	ENDS
;	COMDAT _IID_ID3D11ModuleInstance
CONST	SEGMENT
_IID_ID3D11ModuleInstance DD 0469e07f7H
	DW	045aH
	DW	048d5H
	DB	0aaH
	DB	012H
	DB	068H
	DB	0a4H
	DB	078H
	DB	0cdH
	DB	0f7H
	DB	05dH
CONST	ENDS
;	COMDAT _IID_ID3D11Module
CONST	SEGMENT
_IID_ID3D11Module DD 0cac701eeH
	DW	080fcH
	DW	04122H
	DB	082H
	DB	042H
	DB	010H
	DB	0b3H
	DB	09cH
	DB	08cH
	DB	0ecH
	DB	034H
CONST	ENDS
;	COMDAT _IID_ID3D11FunctionParameterReflection
CONST	SEGMENT
_IID_ID3D11FunctionParameterReflection DD 042757488H
	DW	0334fH
	DW	047feH
	DB	098H
	DB	02eH
	DB	01aH
	DB	065H
	DB	0d0H
	DB	08cH
	DB	0c4H
	DB	062H
CONST	ENDS
;	COMDAT _IID_ID3D11FunctionReflection
CONST	SEGMENT
_IID_ID3D11FunctionReflection DD 0207bcecbH
	DW	0d683H
	DW	04a06H
	DB	0a8H
	DB	0a3H
	DB	09bH
	DB	014H
	DB	09bH
	DB	09fH
	DB	073H
	DB	0a4H
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectUnorderedAccessViewVariable
CONST	SEGMENT
_IID_ID3DX11EffectUnorderedAccessViewVariable DD 079b4ac8cH
	DW	0870aH
	DW	047d2H
	DB	0b0H
	DB	05aH
	DB	08bH
	DB	0d5H
	DB	0ccH
	DB	03eH
	DB	0e6H
	DB	0c9H
CONST	ENDS
;	COMDAT _IID_ID3D11LibraryReflection
CONST	SEGMENT
_IID_ID3D11LibraryReflection DD 054384f1bH
	DW	05b3eH
	DW	04bb7H
	DB	0aeH
	DB	01H
	DB	060H
	DB	0baH
	DB	030H
	DB	097H
	DB	0cbH
	DB	0b6H
CONST	ENDS
;	COMDAT _IID_ID3D11ShaderReflection
CONST	SEGMENT
_IID_ID3D11ShaderReflection DD 08d536ca1H
	DW	0ccaH
	DW	04956H
	DB	0a8H
	DB	037H
	DB	078H
	DB	069H
	DB	063H
	DB	075H
	DB	055H
	DB	084H
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectShaderResourceVariable
CONST	SEGMENT
_IID_ID3DX11EffectShaderResourceVariable DD 0350db233H
	DW	0bbe0H
	DW	0485cH
	DB	09bH
	DB	0feH
	DB	0c0H
	DB	02H
	DB	06bH
	DB	084H
	DB	04fH
	DB	089H
CONST	ENDS
;	COMDAT _IID_ID3D11ShaderReflectionConstantBuffer
CONST	SEGMENT
_IID_ID3D11ShaderReflectionConstantBuffer DD 0eb62d63dH
	DW	093ddH
	DW	04318H
	DB	08aH
	DB	0e8H
	DB	0c6H
	DB	0f8H
	DB	03aH
	DB	0d3H
	DB	071H
	DB	0b8H
CONST	ENDS
;	COMDAT _IID_ID3D11ShaderReflectionVariable
CONST	SEGMENT
_IID_ID3D11ShaderReflectionVariable DD 051f23923H
	DW	0f3e5H
	DW	04bd1H
	DB	091H
	DB	0cbH
	DB	060H
	DB	061H
	DB	077H
	DB	0d8H
	DB	0dbH
	DB	04cH
CONST	ENDS
;	COMDAT _IID_ID3DX11Effect
CONST	SEGMENT
_IID_ID3DX11Effect DD 0fa61ca24H
	DW	0e4baH
	DW	04262H
	DB	09dH
	DB	0b8H
	DB	0b1H
	DB	032H
	DB	0e8H
	DB	0caH
	DB	0e3H
	DB	019H
CONST	ENDS
;	COMDAT _IID_ID3D11ShaderReflectionType
CONST	SEGMENT
_IID_ID3D11ShaderReflectionType DD 06e6ffa6aH
	DW	09baeH
	DW	04613H
	DB	0a5H
	DB	01eH
	DB	091H
	DB	065H
	DB	02dH
	DB	050H
	DB	08cH
	DB	021H
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectGroup
CONST	SEGMENT
_IID_ID3DX11EffectGroup DD 03074acfH
	DW	097deH
	DW	0485fH
	DB	0b2H
	DB	01H
	DB	0cbH
	DB	077H
	DB	052H
	DB	064H
	DB	0afH
	DB	0d6H
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectInterfaceVariable
CONST	SEGMENT
_IID_ID3DX11EffectInterfaceVariable DD 0516c8cd8H
	DW	01c80H
	DW	040a4H
	DB	0b1H
	DB	09bH
	DB	06H
	DB	088H
	DB	079H
	DB	02fH
	DB	011H
	DB	0a5H
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectTechnique
CONST	SEGMENT
_IID_ID3DX11EffectTechnique DD 051198831H
	DW	01f1dH
	DW	04f47H
	DB	0bdH
	DB	076H
	DB	041H
	DB	0cbH
	DB	08H
	DB	035H
	DB	0b1H
	DB	0deH
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectClassInstanceVariable
CONST	SEGMENT
_IID_ID3DX11EffectClassInstanceVariable DD 0926a8053H
	DW	02a39H
	DW	04db4H
	DB	09bH
	DB	0deH
	DB	0cfH
	DB	064H
	DB	09aH
	DB	0deH
	DB	0bdH
	DB	0c1H
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectPass
CONST	SEGMENT
_IID_ID3DX11EffectPass DD 03437cec4H
	DW	04ac1H
	DW	04d87H
	DB	089H
	DB	016H
	DB	0f4H
	DB	0bdH
	DB	05aH
	DB	041H
	DB	038H
	DB	0cH
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectStringVariable
CONST	SEGMENT
_IID_ID3DX11EffectStringVariable DD 0f355c818H
	DW	01beH
	DW	04653H
	DB	0a7H
	DB	0ccH
	DB	060H
	DB	0ffH
	DB	0feH
	DB	0ddH
	DB	0c7H
	DB	06dH
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectSamplerVariable
CONST	SEGMENT
_IID_ID3DX11EffectSamplerVariable DD 0c6402e55H
	DW	01095H
	DW	04d95H
	DB	089H
	DB	031H
	DB	0f9H
	DB	026H
	DB	060H
	DB	051H
	DB	03dH
	DB	0d9H
CONST	ENDS
;	COMDAT ?c_RegisterSize@SType@D3DX11Effects@@2IB
CONST	SEGMENT
?c_RegisterSize@SType@D3DX11Effects@@2IB DD 010H	; D3DX11Effects::SType::c_RegisterSize
CONST	ENDS
;	COMDAT ?c_ScalarsPerRegister@SType@D3DX11Effects@@2IB
CONST	SEGMENT
?c_ScalarsPerRegister@SType@D3DX11Effects@@2IB DD 04H	; D3DX11Effects::SType::c_ScalarsPerRegister
CONST	ENDS
;	COMDAT ?c_ScalarSize@SType@D3DX11Effects@@2IB
CONST	SEGMENT
?c_ScalarSize@SType@D3DX11Effects@@2IB DD 04H		; D3DX11Effects::SType::c_ScalarSize
CONST	ENDS
;	COMDAT ?c_InvalidIndex@SType@D3DX11Effects@@2IB
CONST	SEGMENT
?c_InvalidIndex@SType@D3DX11Effects@@2IB DD 0ffffffffH	; D3DX11Effects::SType::c_InvalidIndex
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectMatrixVariable
CONST	SEGMENT
_IID_ID3DX11EffectMatrixVariable DD 0e1096cf4H
	DW	0c027H
	DW	0419aH
	DB	08dH
	DB	086H
	DB	0d2H
	DB	091H
	DB	073H
	DB	0dcH
	DB	080H
	DB	03eH
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectRasterizerVariable
CONST	SEGMENT
_IID_ID3DX11EffectRasterizerVariable DD 053a262f6H
	DW	05f74H
	DW	04151H
	DB	0a1H
	DB	032H
	DB	0e3H
	DB	0ddH
	DB	019H
	DB	0a6H
	DB	02cH
	DB	09dH
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectVectorVariable
CONST	SEGMENT
_IID_ID3DX11EffectVectorVariable DD 05e785d4aH
	DW	0d87bH
	DW	048d8H
	DB	0b6H
	DB	0e6H
	DB	0fH
	DB	08cH
	DB	0a7H
	DB	0e7H
	DB	046H
	DB	07aH
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectDepthStencilVariable
CONST	SEGMENT
_IID_ID3DX11EffectDepthStencilVariable DD 069b5751bH
	DW	061a5H
	DW	048e5H
	DB	0bdH
	DB	041H
	DB	0d9H
	DB	039H
	DB	088H
	DB	011H
	DB	015H
	DB	063H
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectBlendVariable
CONST	SEGMENT
_IID_ID3DX11EffectBlendVariable DD 0d664f4d7H
	DW	03b81H
	DW	04805H
	DB	0b2H
	DB	077H
	DB	0c1H
	DB	0dfH
	DB	058H
	DB	0c3H
	DB	09fH
	DB	053H
CONST	ENDS
PUBLIC	?dwordMemcpy@@YAXPIAXPIBXI@Z			; dwordMemcpy
PUBLIC	?ApplyAssignments@SBaseBlock@D3DX11Effects@@QAEHPAVCEffect@2@@Z ; D3DX11Effects::SBaseBlock::ApplyAssignments
PUBLIC	?AsSampler@SBaseBlock@D3DX11Effects@@QBEPAUSSamplerBlock@2@XZ ; D3DX11Effects::SBaseBlock::AsSampler
PUBLIC	?AsDepthStencil@SBaseBlock@D3DX11Effects@@QBEPAUSDepthStencilBlock@2@XZ ; D3DX11Effects::SBaseBlock::AsDepthStencil
PUBLIC	?AsBlend@SBaseBlock@D3DX11Effects@@QBEPAUSBlendBlock@2@XZ ; D3DX11Effects::SBaseBlock::AsBlend
PUBLIC	?AsRasterizer@SBaseBlock@D3DX11Effects@@QBEPAUSRasterizerBlock@2@XZ ; D3DX11Effects::SBaseBlock::AsRasterizer
PUBLIC	?ApplyPassAssignments@SPassBlock@D3DX11Effects@@QAEXXZ ; D3DX11Effects::SPassBlock::ApplyPassAssignments
PUBLIC	?CheckShaderDependencies@SPassBlock@D3DX11Effects@@QAEHPAUSShaderBlock@2@@Z ; D3DX11Effects::SPassBlock::CheckShaderDependencies
PUBLIC	?CheckDependencies@SPassBlock@D3DX11Effects@@QAEHXZ ; D3DX11Effects::SPassBlock::CheckDependencies
PUBLIC	?ApplyShaderBlock@CEffect@D3DX11Effects@@IAEXPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffect::ApplyShaderBlock
PUBLIC	?ApplyRenderStateBlock@CEffect@D3DX11Effects@@IAEHPAUSBaseBlock@2@@Z ; D3DX11Effects::CEffect::ApplyRenderStateBlock
PUBLIC	?ApplyPassBlock@CEffect@D3DX11Effects@@IAEXPAUSPassBlock@2@@Z ; D3DX11Effects::CEffect::ApplyPassBlock
PUBLIC	?EvaluateAssignment@CEffect@D3DX11Effects@@IAEHPAUSAssignment@2@@Z ; D3DX11Effects::CEffect::EvaluateAssignment
PUBLIC	?ValidateShaderBlock@CEffect@D3DX11Effects@@IAEHPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffect::ValidateShaderBlock
PUBLIC	?ValidatePassBlock@CEffect@D3DX11Effects@@IAEHPAUSPassBlock@2@@Z ; D3DX11Effects::CEffect::ValidatePassBlock
PUBLIC	?ValidateIndex@CEffect@D3DX11Effects@@IAEXI@Z	; D3DX11Effects::CEffect::ValidateIndex
PUBLIC	?IncrementTimer@CEffect@D3DX11Effects@@IAEXXZ	; D3DX11Effects::CEffect::IncrementTimer
PUBLIC	?HandleLocalTimerRollover@CEffect@D3DX11Effects@@IAEXXZ ; D3DX11Effects::CEffect::HandleLocalTimerRollover
PUBLIC	?CheckAndUpdateCB_FX@D3DX11Effects@@YAXPAUID3D11DeviceContext@@PAUSConstantBuffer@1@@Z ; D3DX11Effects::CheckAndUpdateCB_FX
PUBLIC	??_C@_0FC@PAPMLGFN@c?3?2users?2simon?2documents?2github?2@ ; `string'
PUBLIC	?__LINE__Var@?1??dwordMemcpy@@YAXPIAXPIBXI@Z@4JA ; `dwordMemcpy'::`2'::__LINE__Var
PUBLIC	??_C@_0BE@PIKLEFGK@uByteCount?5?$CF?54?5?$DN?$DN?50?$AA@ ; `string'
PUBLIC	??_C@_0BJ@DAEFCCLD@BlockType?5?$DN?$DN?5EBT_Sampler?$AA@ ; `string'
PUBLIC	??_C@_0EK@PNDNONEE@c?3?2users?2simon?2documents?2github?2@ ; `string'
PUBLIC	??_C@_0BO@PGMIDLAC@BlockType?5?$DN?$DN?5EBT_DepthStencil?$AA@ ; `string'
PUBLIC	??_C@_0BH@MENOAHCH@BlockType?5?$DN?$DN?5EBT_Blend?$AA@ ; `string'
PUBLIC	??_C@_0BM@IMDGHILL@BlockType?5?$DN?$DN?5EBT_Rasterizer?$AA@ ; `string'
PUBLIC	??_C@_01GBGANLPD@0?$AA@				; `string'
PUBLIC	?__LINE__Var@?1??CheckShaderDependencies@SPassBlock@D3DX11Effects@@QAEHPAUSShaderBlock@3@@Z@4JA ; `D3DX11Effects::SPassBlock::CheckShaderDependencies'::`2'::__LINE__Var
PUBLIC	??_C@_0BP@OHDEFJLA@pBlock?9?$DOInterfaceDepCount?5?$DN?$DN?51?$AA@ ; `string'
PUBLIC	??_C@_0FD@JEDBEEMH@c?3?2users?2simon?2documents?2github?2@ ; `string'
PUBLIC	?__LINE__Var@?1??ApplyShaderBlock@CEffect@D3DX11Effects@@IAEXPAUSShaderBlock@3@@Z@4JA ; `D3DX11Effects::CEffect::ApplyShaderBlock'::`2'::__LINE__Var
PUBLIC	??_C@_0BF@MGFBBOMH@pCBDep?9?$DOppFXPointers?$AA@ ; `string'
PUBLIC	??_C@_0BH@DPCBGJNL@pSampDep?9?$DOppFXPointers?$AA@ ; `string'
PUBLIC	??_C@_0BI@NGBDBHCB@pBlock?9?$DOUAVDepCount?5?$DM?52?$AA@ ; `string'
PUBLIC	??_C@_0BG@OOFFHDHA@pUAVDep?9?$DOppFXPointers?$AA@ ; `string'
PUBLIC	??_C@_0BL@EPJLBLKH@pResourceDep?9?$DOppFXPointers?$AA@ ; `string'
PUBLIC	??_C@_0BO@JBMJAKB@pBlock?9?$DOInterfaceDepCount?5?$DM?52?$AA@ ; `string'
PUBLIC	??_C@_0BM@IJPMAIHM@pInterfaceDep?9?$DOppFXPointers?$AA@ ; `string'
PUBLIC	??_C@_0BJ@DKPGBPLM@pCI?9?$DOpMemberData?5?$CB?$DN?5NULL?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??ApplyRenderStateBlock@CEffect@D3DX11Effects@@IAEHPAUSBaseBlock@3@@Z@4JA ; `D3DX11Effects::CEffect::ApplyRenderStateBlock'::`2'::__LINE__Var
PUBLIC	??_C@_0BM@KCMNKNCP@NULL?5?$CB?$DN?5pSBlock?9?$DOpD3DObject?$AA@ ; `string'
PUBLIC	??_C@_0BM@GLNHMJCE@NULL?5?$CB?$DN?5pDSBlock?9?$DOpDSObject?$AA@ ; `string'
PUBLIC	??_C@_0BO@PNLDBCIP@NULL?5?$CB?$DN?5pBBlock?9?$DOpBlendObject?$AA@ ; `string'
PUBLIC	??_C@_0CD@BLJGGNCB@NULL?5?$CB?$DN?5pRBlock?9?$DOpRasterizerObje@ ; `string'
PUBLIC	?__LINE__Var@?1??EvaluateAssignment@CEffect@D3DX11Effects@@IAEHPAUSAssignment@3@@Z@4JA ; `D3DX11Effects::CEffect::EvaluateAssignment'::`2'::__LINE__Var
PUBLIC	??_C@_0CC@EHBDIPDM@pAssignment?9?$DODependencyCount?5?$DN?$DN?5@ ; `string'
PUBLIC	??_C@_0CC@GMDONMPP@pAssignment?9?$DODependencyCount?5?$DN?$DN?5@ ; `string'
PUBLIC	?__LINE__Var@?1??ValidateShaderBlock@CEffect@D3DX11Effects@@IAEHPAUSShaderBlock@3@@Z@4JA ; `D3DX11Effects::CEffect::ValidateShaderBlock'::`2'::__LINE__Var
PUBLIC	??_C@_0BG@DHGJFEIO@pInterfaceDep?5?$CB?$DN?5NULL?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??ApplyPassBlock@CEffect@D3DX11Effects@@IAEXPAUSPassBlock@3@@Z@4JA ; `D3DX11Effects::CEffect::ApplyPassBlock'::`2'::__LINE__Var
PUBLIC	??_C@_0FF@CGHNDDKB@pBlock?9?$DOBackingStore?4RenderTarge@ ; `string'
EXTRN	?D3DXDebugAssert@@YGHPBDH0@Z:PROC		; D3DXDebugAssert
EXTRN	?GetShaderType@SShaderBlock@D3DX11Effects@@QAE?AW4EObjectType@2@XZ:PROC ; D3DX11Effects::SShaderBlock::GetShaderType
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0FF@CGHNDDKB@pBlock?9?$DOBackingStore?4RenderTarge@
CONST	SEGMENT
??_C@_0FF@CGHNDDKB@pBlock?9?$DOBackingStore?4RenderTarge@ DB 'pBlock->Bac'
	DB	'kingStore.RenderTargetViewCount <= D3D11_SIMULTANEOUS_RENDER_'
	DB	'TARGET_COUNT', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??ApplyPassBlock@CEffect@D3DX11Effects@@IAEXPAUSPassBlock@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??ApplyPassBlock@CEffect@D3DX11Effects@@IAEXPAUSPassBlock@3@@Z@4JA DD 01f8H ; `D3DX11Effects::CEffect::ApplyPassBlock'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BG@DHGJFEIO@pInterfaceDep?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0BG@DHGJFEIO@pInterfaceDep?5?$CB?$DN?5NULL?$AA@ DB 'pInterfaceDep !'
	DB	'= NULL', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??ValidateShaderBlock@CEffect@D3DX11Effects@@IAEHPAUSShaderBlock@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??ValidateShaderBlock@CEffect@D3DX11Effects@@IAEHPAUSShaderBlock@3@@Z@4JA DD 01aaH ; `D3DX11Effects::CEffect::ValidateShaderBlock'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CC@GMDONMPP@pAssignment?9?$DODependencyCount?5?$DN?$DN?5@
CONST	SEGMENT
??_C@_0CC@GMDONMPP@pAssignment?9?$DODependencyCount?5?$DN?$DN?5@ DB 'pAss'
	DB	'ignment->DependencyCount == 2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@EHBDIPDM@pAssignment?9?$DODependencyCount?5?$DN?$DN?5@
CONST	SEGMENT
??_C@_0CC@EHBDIPDM@pAssignment?9?$DODependencyCount?5?$DN?$DN?5@ DB 'pAss'
	DB	'ignment->DependencyCount == 1', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??EvaluateAssignment@CEffect@D3DX11Effects@@IAEHPAUSAssignment@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??EvaluateAssignment@CEffect@D3DX11Effects@@IAEHPAUSAssignment@3@@Z@4JA DD 0160H ; `D3DX11Effects::CEffect::EvaluateAssignment'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CD@BLJGGNCB@NULL?5?$CB?$DN?5pRBlock?9?$DOpRasterizerObje@
CONST	SEGMENT
??_C@_0CD@BLJGGNCB@NULL?5?$CB?$DN?5pRBlock?9?$DOpRasterizerObje@ DB 'NULL'
	DB	' != pRBlock->pRasterizerObject', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PNLDBCIP@NULL?5?$CB?$DN?5pBBlock?9?$DOpBlendObject?$AA@
CONST	SEGMENT
??_C@_0BO@PNLDBCIP@NULL?5?$CB?$DN?5pBBlock?9?$DOpBlendObject?$AA@ DB 'NUL'
	DB	'L != pBBlock->pBlendObject', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@GLNHMJCE@NULL?5?$CB?$DN?5pDSBlock?9?$DOpDSObject?$AA@
CONST	SEGMENT
??_C@_0BM@GLNHMJCE@NULL?5?$CB?$DN?5pDSBlock?9?$DOpDSObject?$AA@ DB 'NULL '
	DB	'!= pDSBlock->pDSObject', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KCMNKNCP@NULL?5?$CB?$DN?5pSBlock?9?$DOpD3DObject?$AA@
CONST	SEGMENT
??_C@_0BM@KCMNKNCP@NULL?5?$CB?$DN?5pSBlock?9?$DOpD3DObject?$AA@ DB 'NULL '
	DB	'!= pSBlock->pD3DObject', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??ApplyRenderStateBlock@CEffect@D3DX11Effects@@IAEHPAUSBaseBlock@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??ApplyRenderStateBlock@CEffect@D3DX11Effects@@IAEHPAUSBaseBlock@3@@Z@4JA DD 010dH ; `D3DX11Effects::CEffect::ApplyRenderStateBlock'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BJ@DKPGBPLM@pCI?9?$DOpMemberData?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0BJ@DKPGBPLM@pCI?9?$DOpMemberData?5?$CB?$DN?5NULL?$AA@ DB 'pCI->pMe'
	DB	'mberData != NULL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IJPMAIHM@pInterfaceDep?9?$DOppFXPointers?$AA@
CONST	SEGMENT
??_C@_0BM@IJPMAIHM@pInterfaceDep?9?$DOppFXPointers?$AA@ DB 'pInterfaceDep'
	DB	'->ppFXPointers', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JBMJAKB@pBlock?9?$DOInterfaceDepCount?5?$DM?52?$AA@
CONST	SEGMENT
??_C@_0BO@JBMJAKB@pBlock?9?$DOInterfaceDepCount?5?$DM?52?$AA@ DB 'pBlock-'
	DB	'>InterfaceDepCount < 2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EPJLBLKH@pResourceDep?9?$DOppFXPointers?$AA@
CONST	SEGMENT
??_C@_0BL@EPJLBLKH@pResourceDep?9?$DOppFXPointers?$AA@ DB 'pResourceDep->'
	DB	'ppFXPointers', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OOFFHDHA@pUAVDep?9?$DOppFXPointers?$AA@
CONST	SEGMENT
??_C@_0BG@OOFFHDHA@pUAVDep?9?$DOppFXPointers?$AA@ DB 'pUAVDep->ppFXPointe'
	DB	'rs', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NGBDBHCB@pBlock?9?$DOUAVDepCount?5?$DM?52?$AA@
CONST	SEGMENT
??_C@_0BI@NGBDBHCB@pBlock?9?$DOUAVDepCount?5?$DM?52?$AA@ DB 'pBlock->UAVD'
	DB	'epCount < 2', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DPCBGJNL@pSampDep?9?$DOppFXPointers?$AA@
CONST	SEGMENT
??_C@_0BH@DPCBGJNL@pSampDep?9?$DOppFXPointers?$AA@ DB 'pSampDep->ppFXPoin'
	DB	'ters', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MGFBBOMH@pCBDep?9?$DOppFXPointers?$AA@
CONST	SEGMENT
??_C@_0BF@MGFBBOMH@pCBDep?9?$DOppFXPointers?$AA@ DB 'pCBDep->ppFXPointers'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??ApplyShaderBlock@CEffect@D3DX11Effects@@IAEXPAUSShaderBlock@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??ApplyShaderBlock@CEffect@D3DX11Effects@@IAEXPAUSShaderBlock@3@@Z@4JA DD 091H ; `D3DX11Effects::CEffect::ApplyShaderBlock'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0FD@JEDBEEMH@c?3?2users?2simon?2documents?2github?2@
CONST	SEGMENT
??_C@_0FD@JEDBEEMH@c?3?2users?2simon?2documents?2github?2@ DB 'c:\users\s'
	DB	'imon\documents\github\sparta2.0\uclan-sparta\effects11\effect'
	DB	'runtime.cpp', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OHDEFJLA@pBlock?9?$DOInterfaceDepCount?5?$DN?$DN?51?$AA@
CONST	SEGMENT
??_C@_0BP@OHDEFJLA@pBlock?9?$DOInterfaceDepCount?5?$DN?$DN?51?$AA@ DB 'pB'
	DB	'lock->InterfaceDepCount == 1', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??CheckShaderDependencies@SPassBlock@D3DX11Effects@@QAEHPAUSShaderBlock@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??CheckShaderDependencies@SPassBlock@D3DX11Effects@@QAEHPAUSShaderBlock@3@@Z@4JA DD 032H ; `D3DX11Effects::SPassBlock::CheckShaderDependencies'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
CONST	SEGMENT
??_C@_01GBGANLPD@0?$AA@ DB '0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IMDGHILL@BlockType?5?$DN?$DN?5EBT_Rasterizer?$AA@
CONST	SEGMENT
??_C@_0BM@IMDGHILL@BlockType?5?$DN?$DN?5EBT_Rasterizer?$AA@ DB 'BlockType'
	DB	' == EBT_Rasterizer', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MENOAHCH@BlockType?5?$DN?$DN?5EBT_Blend?$AA@
CONST	SEGMENT
??_C@_0BH@MENOAHCH@BlockType?5?$DN?$DN?5EBT_Blend?$AA@ DB 'BlockType == E'
	DB	'BT_Blend', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PGMIDLAC@BlockType?5?$DN?$DN?5EBT_DepthStencil?$AA@
CONST	SEGMENT
??_C@_0BO@PGMIDLAC@BlockType?5?$DN?$DN?5EBT_DepthStencil?$AA@ DB 'BlockTy'
	DB	'pe == EBT_DepthStencil', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@PNDNONEE@c?3?2users?2simon?2documents?2github?2@
CONST	SEGMENT
??_C@_0EK@PNDNONEE@c?3?2users?2simon?2documents?2github?2@ DB 'c:\users\s'
	DB	'imon\documents\github\sparta2.0\uclan-sparta\effects11\effect'
	DB	'.h', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DAEFCCLD@BlockType?5?$DN?$DN?5EBT_Sampler?$AA@
CONST	SEGMENT
??_C@_0BJ@DAEFCCLD@BlockType?5?$DN?$DN?5EBT_Sampler?$AA@ DB 'BlockType =='
	DB	' EBT_Sampler', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PIKLEFGK@uByteCount?5?$CF?54?5?$DN?$DN?50?$AA@
CONST	SEGMENT
??_C@_0BE@PIKLEFGK@uByteCount?5?$CF?54?5?$DN?$DN?50?$AA@ DB 'uByteCount %'
	DB	' 4 == 0', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??dwordMemcpy@@YAXPIAXPIBXI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??dwordMemcpy@@YAXPIAXPIBXI@Z@4JA DD 04bH ; `dwordMemcpy'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0FC@PAPMLGFN@c?3?2users?2simon?2documents?2github?2@
CONST	SEGMENT
??_C@_0FC@PAPMLGFN@c?3?2users?2simon?2documents?2github?2@ DB 'c:\users\s'
	DB	'imon\documents\github\sparta2.0\uclan-sparta\effects11\inc\d3'
	DB	'dxglobal.h', 00H				; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\sparta2.0\uclan-sparta\effects11\effectruntime.cpp
;	COMDAT ?CheckAndUpdateCB_FX@D3DX11Effects@@YAXPAUID3D11DeviceContext@@PAUSConstantBuffer@1@@Z
_TEXT	SEGMENT
_pContext$ = 8						; size = 4
_pCB$ = 12						; size = 4
?CheckAndUpdateCB_FX@D3DX11Effects@@YAXPAUID3D11DeviceContext@@PAUSConstantBuffer@1@@Z PROC ; D3DX11Effects::CheckAndUpdateCB_FX, COMDAT

; 133  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 134  :     if (pCB->IsDirty && !pCB->IsNonUpdatable)

	mov	eax, DWORD PTR _pCB$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	shl	ecx, 31					; 0000001fH
	sar	ecx, 31					; 0000001fH
	test	ecx, ecx
	je	SHORT $LN2@CheckAndUp
	mov	eax, DWORD PTR _pCB$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	shl	ecx, 24					; 00000018H
	sar	ecx, 31					; 0000001fH
	test	ecx, ecx
	jne	SHORT $LN2@CheckAndUp

; 135  :     {
; 136  :         // CB out of date; rebuild it
; 137  :         pContext->UpdateSubresource(pCB->pD3DObject, 0, NULL, pCB->pBackingStore, pCB->Size, pCB->Size);

	mov	esi, esp
	mov	eax, DWORD PTR _pCB$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _pCB$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _pCB$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _pCB$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _pContext$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pContext$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+192]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 138  :         pCB->IsDirty = FALSE;

	mov	eax, DWORD PTR _pCB$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _pCB$[ebp]
	mov	DWORD PTR [edx+48], ecx
$LN2@CheckAndUp:

; 139  :     }
; 140  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CheckAndUpdateCB_FX@D3DX11Effects@@YAXPAUID3D11DeviceContext@@PAUSConstantBuffer@1@@Z ENDP ; D3DX11Effects::CheckAndUpdateCB_FX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\sparta2.0\uclan-sparta\effects11\effectruntime.cpp
;	COMDAT ?HandleLocalTimerRollover@CEffect@D3DX11Effects@@IAEXXZ
_TEXT	SEGMENT
_iGroup$1 = -56						; size = 4
_k$ = -44						; size = 4
_j$ = -32						; size = 4
_i$ = -20						; size = 4
_this$ = -8						; size = 4
?HandleLocalTimerRollover@CEffect@D3DX11Effects@@IAEXXZ PROC ; D3DX11Effects::CEffect::HandleLocalTimerRollover, COMDAT
; _this$ = ecx

; 637  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 638  :     UINT  i, j, k;
; 639  :     
; 640  :     // step 1: update variables
; 641  :     for (i = 0; i < m_VariableCount; ++ i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN39@HandleLoca
$LN38@HandleLoca:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN39@HandleLoca:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+28]
	jae	SHORT $LN37@HandleLoca

; 642  :     {
; 643  :         m_pVariables[i].LastModifiedTime = 0;

	imul	eax, DWORD PTR _i$[ebp], 48
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [edx+eax+32], 0

; 644  :     }

	jmp	SHORT $LN38@HandleLoca
$LN37@HandleLoca:

; 645  : 
; 646  :     // step 2: update assignments on all blocks (pass, depth stencil, rasterizer, blend, sampler)
; 647  :     for (UINT iGroup = 0; iGroup < m_GroupCount; ++ iGroup)

	mov	DWORD PTR _iGroup$1[ebp], 0
	jmp	SHORT $LN36@HandleLoca
$LN35@HandleLoca:
	mov	eax, DWORD PTR _iGroup$1[ebp]
	add	eax, 1
	mov	DWORD PTR _iGroup$1[ebp], eax
$LN36@HandleLoca:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iGroup$1[ebp]
	cmp	ecx, DWORD PTR [eax+48]
	jae	$LN34@HandleLoca

; 648  :     {
; 649  :         for (i = 0; i < m_pGroups[iGroup].TechniqueCount; ++ i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN33@HandleLoca
$LN32@HandleLoca:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN33@HandleLoca:
	mov	eax, DWORD PTR _iGroup$1[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [edx+eax+8]
	jae	$LN31@HandleLoca

; 650  :         {
; 651  :             for (j = 0; j < m_pGroups[iGroup].pTechniques[i].PassCount; ++ j)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN30@HandleLoca
$LN29@HandleLoca:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN30@HandleLoca:
	mov	eax, DWORD PTR _iGroup$1[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [edx+eax+12]
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR [edx+ecx+8]
	jae	SHORT $LN28@HandleLoca

; 652  :             {
; 653  :                 for (k = 0; k < m_pGroups[iGroup].pTechniques[i].pPasses[j].AssignmentCount; ++ k)

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN27@HandleLoca
$LN26@HandleLoca:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN27@HandleLoca:
	mov	eax, DWORD PTR _iGroup$1[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [edx+eax+12]
	imul	eax, DWORD PTR _j$[ebp], 156
	mov	ecx, DWORD PTR [edx+ecx+12]
	mov	edx, DWORD PTR _k$[ebp]
	cmp	edx, DWORD PTR [ecx+eax+12]
	jae	SHORT $LN25@HandleLoca

; 654  :                 {
; 655  :                     m_pGroups[iGroup].pTechniques[i].pPasses[j].pAssignments[k].LastRecomputedTime = 0;

	mov	eax, DWORD PTR _iGroup$1[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [edx+eax+12]
	imul	eax, DWORD PTR _j$[ebp], 156
	mov	ecx, DWORD PTR [edx+ecx+12]
	mov	edx, DWORD PTR _k$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+eax+16]
	mov	DWORD PTR [eax+edx+8], 0

; 656  :                 }

	jmp	SHORT $LN26@HandleLoca
$LN25@HandleLoca:

; 657  :             }

	jmp	$LN29@HandleLoca
$LN28@HandleLoca:

; 658  :         }

	jmp	$LN32@HandleLoca
$LN31@HandleLoca:

; 659  :     }

	jmp	$LN35@HandleLoca
$LN34@HandleLoca:

; 660  : 
; 661  :     for (i = 0; i < m_DepthStencilBlockCount; ++ i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN24@HandleLoca
$LN23@HandleLoca:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN24@HandleLoca:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+68]
	jae	SHORT $LN22@HandleLoca

; 662  :     {
; 663  :         for (j = 0; j < m_pDepthStencilBlocks[i].AssignmentCount; ++ j)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN21@HandleLoca
$LN20@HandleLoca:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN21@HandleLoca:
	imul	eax, DWORD PTR _i$[ebp], 76
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [edx+eax+8]
	jae	SHORT $LN19@HandleLoca

; 664  :         {
; 665  :             m_pDepthStencilBlocks[i].pAssignments[j].LastRecomputedTime = 0;

	imul	eax, DWORD PTR _i$[ebp], 76
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [edx+eax+12]
	mov	DWORD PTR [edx+ecx+8], 0

; 666  :         }

	jmp	SHORT $LN20@HandleLoca
$LN19@HandleLoca:

; 667  :     }

	jmp	SHORT $LN23@HandleLoca
$LN22@HandleLoca:

; 668  : 
; 669  :     for (i = 0; i < m_RasterizerBlockCount; ++ i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN18@HandleLoca
$LN17@HandleLoca:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN18@HandleLoca:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+84]
	jae	SHORT $LN16@HandleLoca

; 670  :     {
; 671  :         for (j = 0; j < m_pRasterizerBlocks[i].AssignmentCount; ++ j)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN15@HandleLoca
$LN14@HandleLoca:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN15@HandleLoca:
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [edx+eax+8]
	jae	SHORT $LN13@HandleLoca

; 672  :         {
; 673  :             m_pRasterizerBlocks[i].pAssignments[j].LastRecomputedTime = 0;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [edx+eax+12]
	mov	DWORD PTR [edx+ecx+8], 0

; 674  :         }

	jmp	SHORT $LN14@HandleLoca
$LN13@HandleLoca:

; 675  :     }

	jmp	SHORT $LN17@HandleLoca
$LN16@HandleLoca:

; 676  : 
; 677  :     for (i = 0; i < m_BlendBlockCount; ++ i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN12@HandleLoca
$LN11@HandleLoca:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN12@HandleLoca:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+76]
	jae	SHORT $LN10@HandleLoca

; 678  :     {
; 679  :         for (j = 0; j < m_pBlendBlocks[i].AssignmentCount; ++ j)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN9@HandleLoca
$LN8@HandleLoca:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN9@HandleLoca:
	imul	eax, DWORD PTR _i$[ebp], 288
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [edx+eax+8]
	jae	SHORT $LN7@HandleLoca

; 680  :         {
; 681  :             m_pBlendBlocks[i].pAssignments[j].LastRecomputedTime = 0;

	imul	eax, DWORD PTR _i$[ebp], 288
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [edx+eax+12]
	mov	DWORD PTR [edx+ecx+8], 0

; 682  :         }

	jmp	SHORT $LN8@HandleLoca
$LN7@HandleLoca:

; 683  :     }

	jmp	SHORT $LN11@HandleLoca
$LN10@HandleLoca:

; 684  : 
; 685  :     for (i = 0; i < m_SamplerBlockCount; ++ i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@HandleLoca
$LN5@HandleLoca:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@HandleLoca:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+92]
	jae	SHORT $LN40@HandleLoca

; 686  :     {
; 687  :         for (j = 0; j < m_pSamplerBlocks[i].AssignmentCount; ++ j)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@HandleLoca
$LN2@HandleLoca:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN3@HandleLoca:
	imul	eax, DWORD PTR _i$[ebp], 76
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [edx+eax+8]
	jae	SHORT $LN1@HandleLoca

; 688  :         {
; 689  :             m_pSamplerBlocks[i].pAssignments[j].LastRecomputedTime = 0;

	imul	eax, DWORD PTR _i$[ebp], 76
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [edx+eax+12]
	mov	DWORD PTR [edx+ecx+8], 0

; 690  :         }

	jmp	SHORT $LN2@HandleLoca
$LN1@HandleLoca:

; 691  :     }

	jmp	SHORT $LN5@HandleLoca
$LN40@HandleLoca:

; 692  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?HandleLocalTimerRollover@CEffect@D3DX11Effects@@IAEXXZ ENDP ; D3DX11Effects::CEffect::HandleLocalTimerRollover
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\sparta2.0\uclan-sparta\effects11\effectruntime.cpp
;	COMDAT ?IncrementTimer@CEffect@D3DX11Effects@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IncrementTimer@CEffect@D3DX11Effects@@IAEXXZ PROC	; D3DX11Effects::CEffect::IncrementTimer, COMDAT
; _this$ = ecx

; 615  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 616  :     m_LocalTimer++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+164], ecx

; 617  : 
; 618  : #ifndef _WIN64
; 619  : #if _DEBUG && FXDEBUG
; 620  :     if (m_LocalTimer > g_TimerRolloverCount)
; 621  :     {
; 622  :         DPF(0, "Rolling over timer (current time: %d, rollover cap: %d).", m_LocalTimer, g_TimerRolloverCount);
; 623  : #else // else !(_DEBUG && FXDEBUG)
; 624  :     if (m_LocalTimer >= 0x80000000) // check to see if we've exceeded ~2 billion

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+164], -2147483648	; 80000000H
	jb	SHORT $LN2@IncrementT

; 625  :     {
; 626  : #endif // _DEBUG && FXDEBUG
; 627  :         HandleLocalTimerRollover();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HandleLocalTimerRollover@CEffect@D3DX11Effects@@IAEXXZ ; D3DX11Effects::CEffect::HandleLocalTimerRollover

; 628  : 
; 629  :         m_LocalTimer = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+164], 1
$LN2@IncrementT:

; 630  :     }
; 631  : #endif // _WIN64
; 632  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IncrementTimer@CEffect@D3DX11Effects@@IAEXXZ ENDP	; D3DX11Effects::CEffect::IncrementTimer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\sparta2.0\uclan-sparta\effects11\effectruntime.cpp
;	COMDAT ?ValidateIndex@CEffect@D3DX11Effects@@IAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Elements$ = 8						; size = 4
?ValidateIndex@CEffect@D3DX11Effects@@IAEXI@Z PROC	; D3DX11Effects::CEffect::ValidateIndex, COMDAT
; _this$ = ecx

; 342  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 343  :     if (m_FXLIndex >= Elements)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+168]
	cmp	ecx, DWORD PTR _Elements$[ebp]
	jb	SHORT $LN2@ValidateIn

; 344  :     {
; 345  :         DPF(0, "ID3DX11Effect: Overindexing variable array (size: %d, index: %d), using index = 0 instead", Elements, m_FXLIndex);
; 346  :         m_FXLIndex = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+168], 0
$LN2@ValidateIn:

; 347  :     }
; 348  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ValidateIndex@CEffect@D3DX11Effects@@IAEXI@Z ENDP	; D3DX11Effects::CEffect::ValidateIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\sparta2.0\uclan-sparta\effects11\effectruntime.cpp
;	COMDAT ?ValidatePassBlock@CEffect@D3DX11Effects@@IAEHPAUSPassBlock@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pBlock$ = 8						; size = 4
?ValidatePassBlock@CEffect@D3DX11Effects@@IAEHPAUSPassBlock@2@@Z PROC ; D3DX11Effects::CEffect::ValidatePassBlock, COMDAT
; _this$ = ecx

; 447  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 448  :     pBlock->ApplyPassAssignments();

	mov	ecx, DWORD PTR _pBlock$[ebp]
	call	?ApplyPassAssignments@SPassBlock@D3DX11Effects@@QAEXXZ ; D3DX11Effects::SPassBlock::ApplyPassAssignments

; 449  : 
; 450  :     if (NULL != pBlock->BackingStore.pBlendBlock)

	mov	eax, DWORD PTR _pBlock$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN15@ValidatePa

; 451  :     {
; 452  :         ApplyRenderStateBlock(pBlock->BackingStore.pBlendBlock);

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyRenderStateBlock@CEffect@D3DX11Effects@@IAEHPAUSBaseBlock@2@@Z ; D3DX11Effects::CEffect::ApplyRenderStateBlock

; 453  :         pBlock->BackingStore.pBlendState = pBlock->BackingStore.pBlendBlock->pBlendObject;

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _pBlock$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+20], eax

; 454  :         if( !pBlock->BackingStore.pBlendBlock->IsValid )

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	cmp	DWORD PTR [ecx+284], 0
	jne	SHORT $LN15@ValidatePa

; 455  :             return FALSE;

	xor	eax, eax
	jmp	$LN16@ValidatePa
$LN15@ValidatePa:

; 456  :     }
; 457  : 
; 458  :     if( NULL != pBlock->BackingStore.pDepthStencilBlock )

	mov	eax, DWORD PTR _pBlock$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN13@ValidatePa

; 459  :     {
; 460  :         ApplyRenderStateBlock( pBlock->BackingStore.pDepthStencilBlock );

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyRenderStateBlock@CEffect@D3DX11Effects@@IAEHPAUSBaseBlock@2@@Z ; D3DX11Effects::CEffect::ApplyRenderStateBlock

; 461  :         pBlock->BackingStore.pDepthStencilState = pBlock->BackingStore.pDepthStencilBlock->pDSObject;

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	edx, DWORD PTR _pBlock$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+44], eax

; 462  :         if( !pBlock->BackingStore.pDepthStencilBlock->IsValid )

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	cmp	DWORD PTR [ecx+72], 0
	jne	SHORT $LN13@ValidatePa

; 463  :             return FALSE;

	xor	eax, eax
	jmp	$LN16@ValidatePa
$LN13@ValidatePa:

; 464  :     }
; 465  : 
; 466  :     if( NULL != pBlock->BackingStore.pRasterizerBlock )

	mov	eax, DWORD PTR _pBlock$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN11@ValidatePa

; 467  :     {
; 468  :         ApplyRenderStateBlock( pBlock->BackingStore.pRasterizerBlock );

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyRenderStateBlock@CEffect@D3DX11Effects@@IAEHPAUSBaseBlock@2@@Z ; D3DX11Effects::CEffect::ApplyRenderStateBlock

; 469  :         if( !pBlock->BackingStore.pRasterizerBlock->IsValid )

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	cmp	DWORD PTR [ecx+60], 0
	jne	SHORT $LN11@ValidatePa

; 470  :             return FALSE;

	xor	eax, eax
	jmp	$LN16@ValidatePa
$LN11@ValidatePa:

; 471  :     }
; 472  : 
; 473  :     if( NULL != pBlock->BackingStore.pVertexShaderBlock && !ValidateShaderBlock(pBlock->BackingStore.pVertexShaderBlock) )

	mov	eax, DWORD PTR _pBlock$[ebp]
	cmp	DWORD PTR [eax+108], 0
	je	SHORT $LN9@ValidatePa
	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ValidateShaderBlock@CEffect@D3DX11Effects@@IAEHPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffect::ValidateShaderBlock
	test	eax, eax
	jne	SHORT $LN9@ValidatePa

; 474  :         return FALSE;

	xor	eax, eax
	jmp	$LN16@ValidatePa
$LN9@ValidatePa:

; 475  : 
; 476  :     if( NULL != pBlock->BackingStore.pGeometryShaderBlock && !ValidateShaderBlock(pBlock->BackingStore.pGeometryShaderBlock) )

	mov	eax, DWORD PTR _pBlock$[ebp]
	cmp	DWORD PTR [eax+116], 0
	je	SHORT $LN8@ValidatePa
	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ValidateShaderBlock@CEffect@D3DX11Effects@@IAEHPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffect::ValidateShaderBlock
	test	eax, eax
	jne	SHORT $LN8@ValidatePa

; 477  :         return FALSE;

	xor	eax, eax
	jmp	$LN16@ValidatePa
$LN8@ValidatePa:

; 478  : 
; 479  :     if( NULL != pBlock->BackingStore.pPixelShaderBlock )

	mov	eax, DWORD PTR _pBlock$[ebp]
	cmp	DWORD PTR [eax+112], 0
	je	SHORT $LN7@ValidatePa

; 480  :     {
; 481  :         if( !ValidateShaderBlock(pBlock->BackingStore.pPixelShaderBlock) )

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ValidateShaderBlock@CEffect@D3DX11Effects@@IAEHPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffect::ValidateShaderBlock
	test	eax, eax
	jne	SHORT $LN6@ValidatePa

; 482  :             return FALSE;

	xor	eax, eax
	jmp	$LN16@ValidatePa

; 483  :         else if( pBlock->BackingStore.pPixelShaderBlock->UAVDepCount > 0 && 

	jmp	SHORT $LN7@ValidatePa
$LN6@ValidatePa:

; 484  :                  pBlock->BackingStore.RenderTargetViewCount > pBlock->BackingStore.pPixelShaderBlock->pUAVDeps[0].StartIndex )

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	cmp	DWORD PTR [ecx+48], 0
	jbe	SHORT $LN7@ValidatePa
	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	edx, 16					; 00000010H
	imul	eax, edx, 0
	mov	ecx, DWORD PTR [ecx+52]
	mov	edx, DWORD PTR _pBlock$[ebp]
	mov	edx, DWORD PTR [edx+68]
	cmp	edx, DWORD PTR [ecx+eax]
	jbe	SHORT $LN7@ValidatePa

; 485  :         {
; 486  :             return FALSE;

	xor	eax, eax
	jmp	SHORT $LN16@ValidatePa
$LN7@ValidatePa:

; 487  :         }
; 488  :     }
; 489  : 
; 490  :     if( NULL != pBlock->BackingStore.pHullShaderBlock && !ValidateShaderBlock(pBlock->BackingStore.pHullShaderBlock) )

	mov	eax, DWORD PTR _pBlock$[ebp]
	cmp	DWORD PTR [eax+128], 0
	je	SHORT $LN3@ValidatePa
	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ValidateShaderBlock@CEffect@D3DX11Effects@@IAEHPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffect::ValidateShaderBlock
	test	eax, eax
	jne	SHORT $LN3@ValidatePa

; 491  :         return FALSE;

	xor	eax, eax
	jmp	SHORT $LN16@ValidatePa
$LN3@ValidatePa:

; 492  : 
; 493  :     if( NULL != pBlock->BackingStore.pDomainShaderBlock && !ValidateShaderBlock(pBlock->BackingStore.pDomainShaderBlock) )

	mov	eax, DWORD PTR _pBlock$[ebp]
	cmp	DWORD PTR [eax+124], 0
	je	SHORT $LN2@ValidatePa
	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ValidateShaderBlock@CEffect@D3DX11Effects@@IAEHPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffect::ValidateShaderBlock
	test	eax, eax
	jne	SHORT $LN2@ValidatePa

; 494  :         return FALSE;

	xor	eax, eax
	jmp	SHORT $LN16@ValidatePa
$LN2@ValidatePa:

; 495  : 
; 496  :     if( NULL != pBlock->BackingStore.pComputeShaderBlock && !ValidateShaderBlock(pBlock->BackingStore.pComputeShaderBlock) )

	mov	eax, DWORD PTR _pBlock$[ebp]
	cmp	DWORD PTR [eax+120], 0
	je	SHORT $LN1@ValidatePa
	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ValidateShaderBlock@CEffect@D3DX11Effects@@IAEHPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffect::ValidateShaderBlock
	test	eax, eax
	jne	SHORT $LN1@ValidatePa

; 497  :         return FALSE;

	xor	eax, eax
	jmp	SHORT $LN16@ValidatePa
$LN1@ValidatePa:

; 498  : 
; 499  :     return TRUE;

	mov	eax, 1
$LN16@ValidatePa:

; 500  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ValidatePassBlock@CEffect@D3DX11Effects@@IAEHPAUSPassBlock@2@@Z ENDP ; D3DX11Effects::CEffect::ValidatePassBlock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\sparta2.0\uclan-sparta\effects11\effectruntime.cpp
;	COMDAT ?ValidateShaderBlock@CEffect@D3DX11Effects@@IAEHPAUSShaderBlock@2@@Z
_TEXT	SEGMENT
_pInterfaceDep$1 = -32					; size = 4
_i$2 = -20						; size = 4
_this$ = -8						; size = 4
_pBlock$ = 8						; size = 4
?ValidateShaderBlock@CEffect@D3DX11Effects@@IAEHPAUSShaderBlock@2@@Z PROC ; D3DX11Effects::CEffect::ValidateShaderBlock, COMDAT
; _this$ = ecx

; 426  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 427  :     if( !pBlock->IsValid )

	mov	eax, DWORD PTR _pBlock$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN14@ValidateSh

; 428  :         return FALSE;

	xor	eax, eax
	jmp	$LN15@ValidateSh
$LN14@ValidateSh:

; 429  :     if( pBlock->InterfaceDepCount > 0 )

	mov	eax, DWORD PTR _pBlock$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jbe	$LN13@ValidateSh
$LN12@ValidateSh:

; 430  :     {
; 431  :         D3DXASSERT( pBlock->InterfaceDepCount == 1 );

	mov	eax, DWORD PTR _pBlock$[ebp]
	cmp	DWORD PTR [eax+32], 1
	je	SHORT $LN11@ValidateSh
	push	OFFSET ??_C@_0BP@OHDEFJLA@pBlock?9?$DOInterfaceDepCount?5?$DN?$DN?51?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??ValidateShaderBlock@CEffect@D3DX11Effects@@IAEHPAUSShaderBlock@3@@Z@4JA
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_0FD@JEDBEEMH@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN11@ValidateSh:
	xor	eax, eax
	jne	SHORT $LN12@ValidateSh

; 432  :         for( UINT i=0; i < pBlock->pInterfaceDeps[0].Count; i++ )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN8@ValidateSh
$LN7@ValidateSh:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN8@ValidateSh:
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pBlock$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	edx, DWORD PTR _i$2[ebp]
	cmp	edx, DWORD PTR [eax+ecx+4]
	jae	SHORT $LN13@ValidateSh

; 433  :         {
; 434  :             SInterface* pInterfaceDep = pBlock->pInterfaceDeps[0].ppFXPointers[i];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pBlock$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+ecx+8]
	mov	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _pInterfaceDep$1[ebp], eax
$LN5@ValidateSh:

; 435  :             D3DXASSERT( pInterfaceDep != NULL );

	cmp	DWORD PTR _pInterfaceDep$1[ebp], 0
	jne	SHORT $LN4@ValidateSh
	push	OFFSET ??_C@_0BG@DHGJFEIO@pInterfaceDep?5?$CB?$DN?5NULL?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??ValidateShaderBlock@CEffect@D3DX11Effects@@IAEHPAUSShaderBlock@3@@Z@4JA
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_0FD@JEDBEEMH@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN4@ValidateSh:
	xor	eax, eax
	jne	SHORT $LN5@ValidateSh

; 436  :             if( pInterfaceDep->pClassInstance == NULL )

	mov	eax, DWORD PTR _pInterfaceDep$1[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@ValidateSh

; 437  :             {
; 438  :                 return FALSE;

	xor	eax, eax
	jmp	SHORT $LN15@ValidateSh
$LN1@ValidateSh:

; 439  :             }
; 440  :         }

	jmp	SHORT $LN7@ValidateSh
$LN13@ValidateSh:

; 441  :     }
; 442  :     return TRUE;

	mov	eax, 1
$LN15@ValidateSh:

; 443  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ValidateShaderBlock@CEffect@D3DX11Effects@@IAEHPAUSShaderBlock@2@@Z ENDP ; D3DX11Effects::CEffect::ValidateShaderBlock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\sparta2.0\uclan-sparta\effects11\effectruntime.cpp
;	COMDAT ?EvaluateAssignment@CEffect@D3DX11Effects@@IAEHPAUSAssignment@2@@Z
_TEXT	SEGMENT
tv65 = -244						; size = 4
_pVarDep1$ = -44					; size = 4
_pVarDep0$ = -32					; size = 4
_bNeedUpdate$ = -20					; size = 4
_this$ = -8						; size = 4
_pAssignment$ = 8					; size = 4
?EvaluateAssignment@CEffect@D3DX11Effects@@IAEHPAUSAssignment@2@@Z PROC ; D3DX11Effects::CEffect::EvaluateAssignment, COMDAT
; _this$ = ecx

; 352  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 353  :     BOOL bNeedUpdate = FALSE;

	mov	DWORD PTR _bNeedUpdate$[ebp], 0

; 354  :     SGlobalVariable *pVarDep0, *pVarDep1;
; 355  :     
; 356  :     switch (pAssignment->AssignmentType)

	mov	eax, DWORD PTR _pAssignment$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 2
	je	SHORT $LN24@EvaluateAs
	cmp	DWORD PTR tv65[ebp], 4
	je	$LN18@EvaluateAs
	cmp	DWORD PTR tv65[ebp], 8
	je	$LN10@EvaluateAs
	jmp	$LN4@EvaluateAs
$LN24@EvaluateAs:

; 357  :     {
; 358  :     case ERAT_NumericVariable:
; 359  :         D3DXASSERT(pAssignment->DependencyCount == 1);

	mov	eax, DWORD PTR _pAssignment$[ebp]
	cmp	DWORD PTR [eax+12], 1
	je	SHORT $LN23@EvaluateAs
	push	OFFSET ??_C@_0CC@EHBDIPDM@pAssignment?9?$DODependencyCount?5?$DN?$DN?5@
	mov	eax, DWORD PTR ?__LINE__Var@?1??EvaluateAssignment@CEffect@D3DX11Effects@@IAEHPAUSAssignment@3@@Z@4JA
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_0FD@JEDBEEMH@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN23@EvaluateAs:
	xor	eax, eax
	jne	SHORT $LN24@EvaluateAs

; 360  :         if (pAssignment->pDependencies[0].pVariable->LastModifiedTime >= pAssignment->LastRecomputedTime)

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pAssignment$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	edx, DWORD PTR _pAssignment$[ebp]
	mov	eax, DWORD PTR [ecx+32]
	cmp	eax, DWORD PTR [edx+8]
	jb	SHORT $LN20@EvaluateAs

; 361  :         {
; 362  :             dwordMemcpy(pAssignment->Destination.pNumeric, pAssignment->Source.pNumeric, pAssignment->DataSize);

	mov	eax, DWORD PTR _pAssignment$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 65535				; 0000ffffH
	push	ecx
	mov	edx, DWORD PTR _pAssignment$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _pAssignment$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	?dwordMemcpy@@YAXPIAXPIBXI@Z		; dwordMemcpy
	add	esp, 12					; 0000000cH

; 363  :             bNeedUpdate = TRUE;

	mov	DWORD PTR _bNeedUpdate$[ebp], 1
$LN20@EvaluateAs:

; 364  :         }
; 365  :         break;

	jmp	$LN26@EvaluateAs
$LN18@EvaluateAs:

; 366  : 
; 367  :     case ERAT_NumericVariableIndex:
; 368  :         D3DXASSERT(pAssignment->DependencyCount == 2);

	mov	eax, DWORD PTR _pAssignment$[ebp]
	cmp	DWORD PTR [eax+12], 2
	je	SHORT $LN17@EvaluateAs
	push	OFFSET ??_C@_0CC@GMDONMPP@pAssignment?9?$DODependencyCount?5?$DN?$DN?5@
	mov	eax, DWORD PTR ?__LINE__Var@?1??EvaluateAssignment@CEffect@D3DX11Effects@@IAEHPAUSAssignment@3@@Z@4JA
	add	eax, 16					; 00000010H
	push	eax
	push	OFFSET ??_C@_0FD@JEDBEEMH@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN17@EvaluateAs:
	xor	eax, eax
	jne	SHORT $LN18@EvaluateAs

; 369  :         pVarDep0 = pAssignment->pDependencies[0].pVariable;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pAssignment$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR _pVarDep0$[ebp], ecx

; 370  :         pVarDep1 = pAssignment->pDependencies[1].pVariable;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pAssignment$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR _pVarDep1$[ebp], eax

; 371  : 
; 372  :         if (pVarDep0->LastModifiedTime >= pAssignment->LastRecomputedTime)

	mov	eax, DWORD PTR _pVarDep0$[ebp]
	mov	ecx, DWORD PTR _pAssignment$[ebp]
	mov	edx, DWORD PTR [eax+32]
	cmp	edx, DWORD PTR [ecx+8]
	jb	SHORT $LN14@EvaluateAs

; 373  :         {
; 374  :             m_FXLIndex = *pVarDep0->Data.pNumericDword;

	mov	eax, DWORD PTR _pVarDep0$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+168], eax

; 375  : 
; 376  :             ValidateIndex(pVarDep1->pType->Elements);

	mov	eax, DWORD PTR _pVarDep1$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ValidateIndex@CEffect@D3DX11Effects@@IAEXI@Z ; D3DX11Effects::CEffect::ValidateIndex

; 377  : 
; 378  :             // Array index variable is dirty, update the pointer
; 379  :             pAssignment->Source.pNumeric = pVarDep1->Data.pNumeric + pVarDep1->pType->Stride * m_FXLIndex;

	mov	eax, DWORD PTR _pVarDep1$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	imul	eax, DWORD PTR [edx+168]
	mov	ecx, DWORD PTR _pVarDep1$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _pAssignment$[ebp]
	mov	DWORD PTR [edx+24], eax

; 380  :             
; 381  :             // Copy the new data
; 382  :             dwordMemcpy(pAssignment->Destination.pNumeric, pAssignment->Source.pNumeric, pAssignment->DataSize);

	mov	eax, DWORD PTR _pAssignment$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 65535				; 0000ffffH
	push	ecx
	mov	edx, DWORD PTR _pAssignment$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _pAssignment$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	?dwordMemcpy@@YAXPIAXPIBXI@Z		; dwordMemcpy
	add	esp, 12					; 0000000cH

; 383  :             bNeedUpdate = TRUE;

	mov	DWORD PTR _bNeedUpdate$[ebp], 1
	jmp	SHORT $LN13@EvaluateAs
$LN14@EvaluateAs:

; 384  :         }
; 385  :         else if (pVarDep1->LastModifiedTime >= pAssignment->LastRecomputedTime)

	mov	eax, DWORD PTR _pVarDep1$[ebp]
	mov	ecx, DWORD PTR _pAssignment$[ebp]
	mov	edx, DWORD PTR [eax+32]
	cmp	edx, DWORD PTR [ecx+8]
	jb	SHORT $LN13@EvaluateAs

; 386  :         {
; 387  :             // Only the array variable is dirty, copy the new data
; 388  :             dwordMemcpy(pAssignment->Destination.pNumeric, pAssignment->Source.pNumeric, pAssignment->DataSize);

	mov	eax, DWORD PTR _pAssignment$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 65535				; 0000ffffH
	push	ecx
	mov	edx, DWORD PTR _pAssignment$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _pAssignment$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	?dwordMemcpy@@YAXPIAXPIBXI@Z		; dwordMemcpy
	add	esp, 12					; 0000000cH

; 389  :             bNeedUpdate = TRUE;

	mov	DWORD PTR _bNeedUpdate$[ebp], 1
$LN13@EvaluateAs:

; 390  :         }
; 391  :         break;

	jmp	$LN26@EvaluateAs
$LN10@EvaluateAs:

; 392  : 
; 393  :     case ERAT_ObjectVariableIndex:
; 394  :         D3DXASSERT(pAssignment->DependencyCount == 1);

	mov	eax, DWORD PTR _pAssignment$[ebp]
	cmp	DWORD PTR [eax+12], 1
	je	SHORT $LN9@EvaluateAs
	push	OFFSET ??_C@_0CC@EHBDIPDM@pAssignment?9?$DODependencyCount?5?$DN?$DN?5@
	mov	eax, DWORD PTR ?__LINE__Var@?1??EvaluateAssignment@CEffect@D3DX11Effects@@IAEHPAUSAssignment@3@@Z@4JA
	add	eax, 42					; 0000002aH
	push	eax
	push	OFFSET ??_C@_0FD@JEDBEEMH@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN9@EvaluateAs:
	xor	eax, eax
	jne	SHORT $LN10@EvaluateAs

; 395  :         pVarDep0 = pAssignment->pDependencies[0].pVariable;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pAssignment$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+ecx]
	mov	DWORD PTR _pVarDep0$[ebp], ecx

; 396  :         if (pVarDep0->LastModifiedTime >= pAssignment->LastRecomputedTime)

	mov	eax, DWORD PTR _pVarDep0$[ebp]
	mov	ecx, DWORD PTR _pAssignment$[ebp]
	mov	edx, DWORD PTR [eax+32]
	cmp	edx, DWORD PTR [ecx+8]
	jb	SHORT $LN6@EvaluateAs

; 397  :         {
; 398  :             m_FXLIndex = *pVarDep0->Data.pNumericDword;

	mov	eax, DWORD PTR _pVarDep0$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+168], eax

; 399  :             ValidateIndex(pAssignment->MaxElements);

	mov	eax, DWORD PTR _pAssignment$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	shr	ecx, 16					; 00000010H
	and	ecx, 65535				; 0000ffffH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ValidateIndex@CEffect@D3DX11Effects@@IAEXI@Z ; D3DX11Effects::CEffect::ValidateIndex

; 400  : 
; 401  :             // Array index variable is dirty, update the destination pointer
; 402  :             *((void **)pAssignment->Destination.pGeneric) = pAssignment->Source.pNumeric +
; 403  :                 pAssignment->DataSize * m_FXLIndex;

	mov	eax, DWORD PTR _pAssignment$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 65535				; 0000ffffH
	mov	edx, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [edx+168]
	mov	eax, DWORD PTR _pAssignment$[ebp]
	add	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _pAssignment$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [eax], ecx

; 404  :             bNeedUpdate = TRUE;

	mov	DWORD PTR _bNeedUpdate$[ebp], 1
$LN6@EvaluateAs:

; 405  :         }
; 406  :         break;

	jmp	SHORT $LN26@EvaluateAs
$LN4@EvaluateAs:

; 407  : 
; 408  :     default:
; 409  :     //case ERAT_Constant:           -- These are consumed and discarded
; 410  :     //case ERAT_ObjectVariable:     -- These are consumed and discarded
; 411  :     //case ERAT_ObjectConstIndex:   -- These are consumed and discarded
; 412  :     //case ERAT_ObjectInlineShader: -- These are consumed and discarded
; 413  :     //case ERAT_NumericConstIndex:  -- ERAT_NumericVariable should be generated instead
; 414  :         D3DXASSERT(0);

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@EvaluateAs
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??EvaluateAssignment@CEffect@D3DX11Effects@@IAEHPAUSAssignment@3@@Z@4JA
	add	eax, 62					; 0000003eH
	push	eax
	push	OFFSET ??_C@_0FD@JEDBEEMH@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@EvaluateAs:
	xor	eax, eax
	jne	SHORT $LN4@EvaluateAs
$LN26@EvaluateAs:

; 415  :         break;
; 416  :     }
; 417  :     
; 418  :     // Mark the assignment as not dirty
; 419  :     pAssignment->LastRecomputedTime = m_LocalTimer;

	mov	eax, DWORD PTR _pAssignment$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	mov	DWORD PTR [eax+8], edx

; 420  : 
; 421  :     return bNeedUpdate;

	mov	eax, DWORD PTR _bNeedUpdate$[ebp]

; 422  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?EvaluateAssignment@CEffect@D3DX11Effects@@IAEHPAUSAssignment@2@@Z ENDP ; D3DX11Effects::CEffect::EvaluateAssignment
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\sparta2.0\uclan-sparta\effects11\effectruntime.cpp
;	COMDAT ?ApplyPassBlock@CEffect@D3DX11Effects@@IAEXPAUSPassBlock@2@@Z
_TEXT	SEGMENT
_i$1 = -64						; size = 4
_pRTV$2 = -52						; size = 32
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pBlock$ = 8						; size = 4
?ApplyPassBlock@CEffect@D3DX11Effects@@IAEXPAUSPassBlock@2@@Z PROC ; D3DX11Effects::CEffect::ApplyPassBlock, COMDAT
; _this$ = ecx

; 504  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 505  :     pBlock->ApplyPassAssignments();

	mov	ecx, DWORD PTR _pBlock$[ebp]
	call	?ApplyPassAssignments@SPassBlock@D3DX11Effects@@QAEXXZ ; D3DX11Effects::SPassBlock::ApplyPassAssignments

; 506  : 
; 507  :     if (NULL != pBlock->BackingStore.pBlendBlock)

	mov	eax, DWORD PTR _pBlock$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN20@ApplyPassB

; 508  :     {
; 509  :         ApplyRenderStateBlock(pBlock->BackingStore.pBlendBlock);

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyRenderStateBlock@CEffect@D3DX11Effects@@IAEHPAUSBaseBlock@2@@Z ; D3DX11Effects::CEffect::ApplyRenderStateBlock

; 510  : #ifdef FXDEBUG
; 511  :         if( !pBlock->BackingStore.pBlendBlock->IsValid )
; 512  :             DPF( 0, "Pass::Apply - warning: applying invalid BlendState." );
; 513  : #endif
; 514  :         pBlock->BackingStore.pBlendState = pBlock->BackingStore.pBlendBlock->pBlendObject;

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _pBlock$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+20], eax

; 515  :         m_pContext->OMSetBlendState(pBlock->BackingStore.pBlendState,
; 516  :             pBlock->BackingStore.BlendFactor,
; 517  :             pBlock->BackingStore.SampleMask);

	mov	esi, esp
	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _pBlock$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+176]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+176]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+140]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN20@ApplyPassB:

; 518  :     }
; 519  : 
; 520  :     if (NULL != pBlock->BackingStore.pDepthStencilBlock)

	mov	eax, DWORD PTR _pBlock$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN19@ApplyPassB

; 521  :     {
; 522  :         ApplyRenderStateBlock(pBlock->BackingStore.pDepthStencilBlock);

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyRenderStateBlock@CEffect@D3DX11Effects@@IAEHPAUSBaseBlock@2@@Z ; D3DX11Effects::CEffect::ApplyRenderStateBlock

; 523  : #ifdef FXDEBUG
; 524  :         if( !pBlock->BackingStore.pDepthStencilBlock->IsValid )
; 525  :             DPF( 0, "Pass::Apply - warning: applying invalid DepthStencilState." );
; 526  : #endif
; 527  :         pBlock->BackingStore.pDepthStencilState = pBlock->BackingStore.pDepthStencilBlock->pDSObject;

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	edx, DWORD PTR _pBlock$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+44], eax

; 528  :         m_pContext->OMSetDepthStencilState(pBlock->BackingStore.pDepthStencilState,
; 529  :             pBlock->BackingStore.StencilRef);

	mov	esi, esp
	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _pBlock$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+176]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+144]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN19@ApplyPassB:

; 530  :     }
; 531  : 
; 532  :     if (NULL != pBlock->BackingStore.pRasterizerBlock)

	mov	eax, DWORD PTR _pBlock$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN18@ApplyPassB

; 533  :     {
; 534  :         ApplyRenderStateBlock(pBlock->BackingStore.pRasterizerBlock);

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyRenderStateBlock@CEffect@D3DX11Effects@@IAEHPAUSBaseBlock@2@@Z ; D3DX11Effects::CEffect::ApplyRenderStateBlock

; 535  : #ifdef FXDEBUG
; 536  :         if( !pBlock->BackingStore.pRasterizerBlock->IsValid )
; 537  :             DPF( 0, "Pass::Apply - warning: applying invalid RasterizerState." );
; 538  : #endif
; 539  :         m_pContext->RSSetState(pBlock->BackingStore.pRasterizerBlock->pRasterizerObject);

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+176]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+172]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN18@ApplyPassB:

; 540  :     }
; 541  : 
; 542  :     if (NULL != pBlock->BackingStore.pRenderTargetViews[0])

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pBlock$[ebp]
	cmp	DWORD PTR [edx+ecx+72], 0
	je	$LN17@ApplyPassB
$LN16@ApplyPassB:

; 543  :     {
; 544  :         // Grab all render targets
; 545  :         ID3D11RenderTargetView *pRTV[D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT];
; 546  : 
; 547  :         D3DXASSERT(pBlock->BackingStore.RenderTargetViewCount <= D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT);

	mov	eax, DWORD PTR _pBlock$[ebp]
	cmp	DWORD PTR [eax+68], 8
	jbe	SHORT $LN15@ApplyPassB
	push	OFFSET ??_C@_0FF@CGHNDDKB@pBlock?9?$DOBackingStore?4RenderTarge@
	mov	eax, DWORD PTR ?__LINE__Var@?1??ApplyPassBlock@CEffect@D3DX11Effects@@IAEXPAUSPassBlock@3@@Z@4JA
	add	eax, 43					; 0000002bH
	push	eax
	push	OFFSET ??_C@_0FD@JEDBEEMH@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN15@ApplyPassB:
	xor	eax, eax
	jne	SHORT $LN16@ApplyPassB
$LN11@ApplyPassB:

; 548  :         __analysis_assume(D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT >= pBlock->BackingStore.RenderTargetViewCount);

	xor	eax, eax
	jne	SHORT $LN11@ApplyPassB

; 549  : 
; 550  :         for (UINT i=0; i<pBlock->BackingStore.RenderTargetViewCount; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN9@ApplyPassB
$LN8@ApplyPassB:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN9@ApplyPassB:
	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax+68]
	jae	SHORT $LN7@ApplyPassB

; 551  :         {
; 552  :             pRTV[i] = pBlock->BackingStore.pRenderTargetViews[i]->pRenderTargetView;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _pBlock$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+72]
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR _pRTV$2[ebp+eax*4], ecx

; 553  :         }

	jmp	SHORT $LN8@ApplyPassB
$LN7@ApplyPassB:

; 554  : 
; 555  :         // This call could be combined with the call to set PS UAVs if both exist in the pass
; 556  :         m_pContext->OMSetRenderTargetsAndUnorderedAccessViews( pBlock->BackingStore.RenderTargetViewCount, pRTV, pBlock->BackingStore.pDepthStencilView->pDepthStencilView, 7, D3D11_KEEP_UNORDERED_ACCESS_VIEWS, NULL, NULL );

	mov	esi, esp
	push	0
	push	0
	push	-1
	push	7
	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	edx, DWORD PTR [ecx]
	push	edx
	lea	eax, DWORD PTR _pRTV$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBlock$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+176]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+136]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN17@ApplyPassB:

; 557  :     }
; 558  : 
; 559  :     if (NULL != pBlock->BackingStore.pVertexShaderBlock)

	mov	eax, DWORD PTR _pBlock$[ebp]
	cmp	DWORD PTR [eax+108], 0
	je	SHORT $LN6@ApplyPassB

; 560  :     {
; 561  : #ifdef FXDEBUG
; 562  :         if( !pBlock->BackingStore.pVertexShaderBlock->IsValid )
; 563  :             DPF( 0, "Pass::Apply - warning: applying invalid vertex shader." );
; 564  : #endif
; 565  :         ApplyShaderBlock(pBlock->BackingStore.pVertexShaderBlock);

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyShaderBlock@CEffect@D3DX11Effects@@IAEXPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffect::ApplyShaderBlock
$LN6@ApplyPassB:

; 566  :     }
; 567  : 
; 568  :     if (NULL != pBlock->BackingStore.pPixelShaderBlock)

	mov	eax, DWORD PTR _pBlock$[ebp]
	cmp	DWORD PTR [eax+112], 0
	je	SHORT $LN5@ApplyPassB

; 569  :     {
; 570  : #ifdef FXDEBUG
; 571  :         if( !pBlock->BackingStore.pPixelShaderBlock->IsValid )
; 572  :             DPF( 0, "Pass::Apply - warning: applying invalid pixel shader." );
; 573  : #endif
; 574  :         ApplyShaderBlock(pBlock->BackingStore.pPixelShaderBlock);

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyShaderBlock@CEffect@D3DX11Effects@@IAEXPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffect::ApplyShaderBlock
$LN5@ApplyPassB:

; 575  :     }
; 576  : 
; 577  :     if (NULL != pBlock->BackingStore.pGeometryShaderBlock)

	mov	eax, DWORD PTR _pBlock$[ebp]
	cmp	DWORD PTR [eax+116], 0
	je	SHORT $LN4@ApplyPassB

; 578  :     {
; 579  : #ifdef FXDEBUG
; 580  :         if( !pBlock->BackingStore.pGeometryShaderBlock->IsValid )
; 581  :             DPF( 0, "Pass::Apply - warning: applying invalid geometry shader." );
; 582  : #endif
; 583  :         ApplyShaderBlock(pBlock->BackingStore.pGeometryShaderBlock);

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyShaderBlock@CEffect@D3DX11Effects@@IAEXPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffect::ApplyShaderBlock
$LN4@ApplyPassB:

; 584  :     }
; 585  : 
; 586  :     if (NULL != pBlock->BackingStore.pHullShaderBlock)

	mov	eax, DWORD PTR _pBlock$[ebp]
	cmp	DWORD PTR [eax+128], 0
	je	SHORT $LN3@ApplyPassB

; 587  :     {
; 588  : #ifdef FXDEBUG
; 589  :         if( !pBlock->BackingStore.pHullShaderBlock->IsValid )
; 590  :             DPF( 0, "Pass::Apply - warning: applying invalid hull shader." );
; 591  : #endif
; 592  :         ApplyShaderBlock(pBlock->BackingStore.pHullShaderBlock);

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyShaderBlock@CEffect@D3DX11Effects@@IAEXPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffect::ApplyShaderBlock
$LN3@ApplyPassB:

; 593  :     }
; 594  : 
; 595  :     if (NULL != pBlock->BackingStore.pDomainShaderBlock)

	mov	eax, DWORD PTR _pBlock$[ebp]
	cmp	DWORD PTR [eax+124], 0
	je	SHORT $LN2@ApplyPassB

; 596  :     {
; 597  : #ifdef FXDEBUG
; 598  :         if( !pBlock->BackingStore.pDomainShaderBlock->IsValid )
; 599  :             DPF( 0, "Pass::Apply - warning: applying invalid domain shader." );
; 600  : #endif
; 601  :         ApplyShaderBlock(pBlock->BackingStore.pDomainShaderBlock);

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyShaderBlock@CEffect@D3DX11Effects@@IAEXPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffect::ApplyShaderBlock
$LN2@ApplyPassB:

; 602  :     }
; 603  : 
; 604  :     if (NULL != pBlock->BackingStore.pComputeShaderBlock)

	mov	eax, DWORD PTR _pBlock$[ebp]
	cmp	DWORD PTR [eax+120], 0
	je	SHORT $LN21@ApplyPassB

; 605  :     {
; 606  : #ifdef FXDEBUG
; 607  :         if( !pBlock->BackingStore.pComputeShaderBlock->IsValid )
; 608  :             DPF( 0, "Pass::Apply - warning: applying invalid compute shader." );
; 609  : #endif
; 610  :         ApplyShaderBlock(pBlock->BackingStore.pComputeShaderBlock);

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyShaderBlock@CEffect@D3DX11Effects@@IAEXPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffect::ApplyShaderBlock
$LN21@ApplyPassB:

; 611  :     }
; 612  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@ApplyPassB
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN25@ApplyPassB:
	DD	1
	DD	$LN24@ApplyPassB
$LN24@ApplyPassB:
	DD	-52					; ffffffccH
	DD	32					; 00000020H
	DD	$LN23@ApplyPassB
$LN23@ApplyPassB:
	DB	112					; 00000070H
	DB	82					; 00000052H
	DB	84					; 00000054H
	DB	86					; 00000056H
	DB	0
?ApplyPassBlock@CEffect@D3DX11Effects@@IAEXPAUSPassBlock@2@@Z ENDP ; D3DX11Effects::CEffect::ApplyPassBlock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\sparta2.0\uclan-sparta\effects11\effectruntime.cpp
;	COMDAT ?ApplyRenderStateBlock@CEffect@D3DX11Effects@@IAEHPAUSBaseBlock@2@@Z
_TEXT	SEGMENT
tv73 = -268						; size = 4
_pRBlock$1 = -68					; size = 4
_pBBlock$2 = -56					; size = 4
_pDSBlock$3 = -44					; size = 4
_pSBlock$4 = -32					; size = 4
_bRecreate$ = -20					; size = 4
_this$ = -8						; size = 4
_pBlock$ = 8						; size = 4
?ApplyRenderStateBlock@CEffect@D3DX11Effects@@IAEHPAUSBaseBlock@2@@Z PROC ; D3DX11Effects::CEffect::ApplyRenderStateBlock, COMDAT
; _this$ = ecx

; 269  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 270  :     if( pBlock->IsUserManaged )

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 31					; 0000001fH
	sar	ecx, 31					; 0000001fH
	test	ecx, ecx
	je	SHORT $LN38@ApplyRende

; 271  :     {
; 272  :         return FALSE;

	xor	eax, eax
	jmp	$LN39@ApplyRende
$LN38@ApplyRende:

; 273  :     }
; 274  : 
; 275  :     BOOL bRecreate = pBlock->ApplyAssignments(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pBlock$[ebp]
	call	?ApplyAssignments@SBaseBlock@D3DX11Effects@@QAEHPAVCEffect@2@@Z ; D3DX11Effects::SBaseBlock::ApplyAssignments
	mov	DWORD PTR _bRecreate$[ebp], eax

; 276  : 
; 277  :     if (bRecreate)

	cmp	DWORD PTR _bRecreate$[ebp], 0
	je	$LN37@ApplyRende

; 278  :     {
; 279  :         switch (pBlock->BlockType)

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv73[ebp], ecx
	mov	edx, DWORD PTR tv73[ebp]
	sub	edx, 1
	mov	DWORD PTR tv73[ebp], edx
	cmp	DWORD PTR tv73[ebp], 3
	ja	$LN4@ApplyRende
	mov	eax, DWORD PTR tv73[ebp]
	jmp	DWORD PTR $LN41@ApplyRende[eax*4]
$LN34@ApplyRende:

; 280  :         {
; 281  :         case EBT_Sampler:
; 282  :             {
; 283  :                 SSamplerBlock *pSBlock = pBlock->AsSampler();

	mov	ecx, DWORD PTR _pBlock$[ebp]
	call	?AsSampler@SBaseBlock@D3DX11Effects@@QBEPAUSSamplerBlock@2@XZ ; D3DX11Effects::SBaseBlock::AsSampler
	mov	DWORD PTR _pSBlock$4[ebp], eax
$LN33@ApplyRende:

; 284  : 
; 285  :                 D3DXASSERT(NULL != pSBlock->pD3DObject);

	mov	eax, DWORD PTR _pSBlock$4[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN32@ApplyRende
	push	OFFSET ??_C@_0BM@KCMNKNCP@NULL?5?$CB?$DN?5pSBlock?9?$DOpD3DObject?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??ApplyRenderStateBlock@CEffect@D3DX11Effects@@IAEHPAUSBaseBlock@3@@Z@4JA
	add	eax, 16					; 00000010H
	push	eax
	push	OFFSET ??_C@_0FD@JEDBEEMH@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN32@ApplyRende:
	xor	eax, eax
	jne	SHORT $LN33@ApplyRende

; 286  :                 pSBlock->pD3DObject->Release();

	mov	eax, DWORD PTR _pSBlock$4[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pSBlock$4[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 287  : 
; 288  :                 m_pDevice->CreateSamplerState( &pSBlock->BackingStore.SamplerDesc, &pSBlock->pD3DObject );

	mov	eax, DWORD PTR _pSBlock$4[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _pSBlock$4[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+92]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 289  : 
; 290  :             }
; 291  :             break;

	jmp	$LN37@ApplyRende
$LN29@ApplyRende:

; 292  : 
; 293  :         case EBT_DepthStencil:
; 294  :             {
; 295  :                 SDepthStencilBlock *pDSBlock = pBlock->AsDepthStencil();

	mov	ecx, DWORD PTR _pBlock$[ebp]
	call	?AsDepthStencil@SBaseBlock@D3DX11Effects@@QBEPAUSDepthStencilBlock@2@XZ ; D3DX11Effects::SBaseBlock::AsDepthStencil
	mov	DWORD PTR _pDSBlock$3[ebp], eax
$LN28@ApplyRende:

; 296  : 
; 297  :                 D3DXASSERT(NULL != pDSBlock->pDSObject);

	mov	eax, DWORD PTR _pDSBlock$3[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN27@ApplyRende
	push	OFFSET ??_C@_0BM@GLNHMJCE@NULL?5?$CB?$DN?5pDSBlock?9?$DOpDSObject?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??ApplyRenderStateBlock@CEffect@D3DX11Effects@@IAEHPAUSBaseBlock@3@@Z@4JA
	add	eax, 28					; 0000001cH
	push	eax
	push	OFFSET ??_C@_0FD@JEDBEEMH@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN27@ApplyRende:
	xor	eax, eax
	jne	SHORT $LN28@ApplyRende

; 298  :                 SAFE_RELEASE( pDSBlock->pDSObject );

	mov	eax, DWORD PTR _pDSBlock$3[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN24@ApplyRende
	mov	eax, DWORD PTR _pDSBlock$3[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pDSBlock$3[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _pDSBlock$3[ebp]
	mov	DWORD PTR [eax+16], 0
$LN24@ApplyRende:

; 299  :                 if( SUCCEEDED( m_pDevice->CreateDepthStencilState( &pDSBlock->BackingStore, &pDSBlock->pDSObject ) ) )

	mov	eax, DWORD PTR _pDSBlock$3[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _pDSBlock$3[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+84]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jl	SHORT $LN23@ApplyRende

; 300  :                     pDSBlock->IsValid = TRUE;

	mov	eax, DWORD PTR _pDSBlock$3[ebp]
	mov	DWORD PTR [eax+72], 1

; 301  :                 else

	jmp	SHORT $LN22@ApplyRende
$LN23@ApplyRende:

; 302  :                     pDSBlock->IsValid = FALSE;

	mov	eax, DWORD PTR _pDSBlock$3[ebp]
	mov	DWORD PTR [eax+72], 0
$LN22@ApplyRende:

; 303  :             }
; 304  :             break;

	jmp	$LN37@ApplyRende
$LN21@ApplyRende:

; 305  :         
; 306  :         case EBT_Blend:
; 307  :             {
; 308  :                 SBlendBlock *pBBlock = pBlock->AsBlend();

	mov	ecx, DWORD PTR _pBlock$[ebp]
	call	?AsBlend@SBaseBlock@D3DX11Effects@@QBEPAUSBlendBlock@2@XZ ; D3DX11Effects::SBaseBlock::AsBlend
	mov	DWORD PTR _pBBlock$2[ebp], eax
$LN20@ApplyRende:

; 309  : 
; 310  :                 D3DXASSERT(NULL != pBBlock->pBlendObject);

	mov	eax, DWORD PTR _pBBlock$2[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN19@ApplyRende
	push	OFFSET ??_C@_0BO@PNLDBCIP@NULL?5?$CB?$DN?5pBBlock?9?$DOpBlendObject?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??ApplyRenderStateBlock@CEffect@D3DX11Effects@@IAEHPAUSBaseBlock@3@@Z@4JA
	add	eax, 41					; 00000029H
	push	eax
	push	OFFSET ??_C@_0FD@JEDBEEMH@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN19@ApplyRende:
	xor	eax, eax
	jne	SHORT $LN20@ApplyRende

; 311  :                 SAFE_RELEASE( pBBlock->pBlendObject );

	mov	eax, DWORD PTR _pBBlock$2[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN16@ApplyRende
	mov	eax, DWORD PTR _pBBlock$2[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pBBlock$2[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _pBBlock$2[ebp]
	mov	DWORD PTR [eax+16], 0
$LN16@ApplyRende:

; 312  :                 if( SUCCEEDED( m_pDevice->CreateBlendState( &pBBlock->BackingStore, &pBBlock->pBlendObject ) ) )

	mov	eax, DWORD PTR _pBBlock$2[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _pBBlock$2[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+80]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jl	SHORT $LN15@ApplyRende

; 313  :                     pBBlock->IsValid = TRUE;

	mov	eax, DWORD PTR _pBBlock$2[ebp]
	mov	DWORD PTR [eax+284], 1

; 314  :                 else

	jmp	SHORT $LN14@ApplyRende
$LN15@ApplyRende:

; 315  :                     pBBlock->IsValid = FALSE;

	mov	eax, DWORD PTR _pBBlock$2[ebp]
	mov	DWORD PTR [eax+284], 0
$LN14@ApplyRende:

; 316  :             }
; 317  :             break;

	jmp	$LN37@ApplyRende
$LN13@ApplyRende:

; 318  : 
; 319  :         case EBT_Rasterizer:
; 320  :             {
; 321  :                 SRasterizerBlock *pRBlock = pBlock->AsRasterizer();

	mov	ecx, DWORD PTR _pBlock$[ebp]
	call	?AsRasterizer@SBaseBlock@D3DX11Effects@@QBEPAUSRasterizerBlock@2@XZ ; D3DX11Effects::SBaseBlock::AsRasterizer
	mov	DWORD PTR _pRBlock$1[ebp], eax
$LN12@ApplyRende:

; 322  : 
; 323  :                 D3DXASSERT(NULL != pRBlock->pRasterizerObject);

	mov	eax, DWORD PTR _pRBlock$1[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN11@ApplyRende
	push	OFFSET ??_C@_0CD@BLJGGNCB@NULL?5?$CB?$DN?5pRBlock?9?$DOpRasterizerObje@
	mov	eax, DWORD PTR ?__LINE__Var@?1??ApplyRenderStateBlock@CEffect@D3DX11Effects@@IAEHPAUSBaseBlock@3@@Z@4JA
	add	eax, 54					; 00000036H
	push	eax
	push	OFFSET ??_C@_0FD@JEDBEEMH@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN11@ApplyRende:
	xor	eax, eax
	jne	SHORT $LN12@ApplyRende

; 324  : 
; 325  :                 SAFE_RELEASE( pRBlock->pRasterizerObject );

	mov	eax, DWORD PTR _pRBlock$1[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN8@ApplyRende
	mov	eax, DWORD PTR _pRBlock$1[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pRBlock$1[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _pRBlock$1[ebp]
	mov	DWORD PTR [eax+16], 0
$LN8@ApplyRende:

; 326  :                 if( SUCCEEDED( m_pDevice->CreateRasterizerState( &pRBlock->BackingStore, &pRBlock->pRasterizerObject ) ) )

	mov	eax, DWORD PTR _pRBlock$1[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _pRBlock$1[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+172]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+88]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jl	SHORT $LN7@ApplyRende

; 327  :                     pRBlock->IsValid = TRUE;

	mov	eax, DWORD PTR _pRBlock$1[ebp]
	mov	DWORD PTR [eax+60], 1

; 328  :                 else

	jmp	SHORT $LN6@ApplyRende
$LN7@ApplyRende:

; 329  :                     pRBlock->IsValid = FALSE;

	mov	eax, DWORD PTR _pRBlock$1[ebp]
	mov	DWORD PTR [eax+60], 0
$LN6@ApplyRende:

; 330  :             }
; 331  :             break;

	jmp	SHORT $LN37@ApplyRende
$LN4@ApplyRende:

; 332  :         
; 333  :         default:
; 334  :             D3DXASSERT(0);

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@ApplyRende
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??ApplyRenderStateBlock@CEffect@D3DX11Effects@@IAEHPAUSBaseBlock@3@@Z@4JA
	add	eax, 65					; 00000041H
	push	eax
	push	OFFSET ??_C@_0FD@JEDBEEMH@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@ApplyRende:
	xor	eax, eax
	jne	SHORT $LN4@ApplyRende
$LN37@ApplyRende:

; 335  :         }
; 336  :     }
; 337  : 
; 338  :     return bRecreate;

	mov	eax, DWORD PTR _bRecreate$[ebp]
$LN39@ApplyRende:

; 339  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN41@ApplyRende:
	DD	$LN29@ApplyRende
	DD	$LN21@ApplyRende
	DD	$LN13@ApplyRende
	DD	$LN34@ApplyRende
?ApplyRenderStateBlock@CEffect@D3DX11Effects@@IAEHPAUSBaseBlock@2@@Z ENDP ; D3DX11Effects::CEffect::ApplyRenderStateBlock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\sparta2.0\uclan-sparta\effects11\effectruntime.cpp
;	COMDAT ?ApplyShaderBlock@CEffect@D3DX11Effects@@IAEXPAUSShaderBlock@2@@Z
_TEXT	SEGMENT
_pCI$1 = -188						; size = 4
_pInterfaceDep$2 = -176					; size = 4
_ppClassInstances$ = -164				; size = 4
_Interfaces$ = -152					; size = 4
_pLastResourceDep$ = -140				; size = 4
_pResourceDep$ = -128					; size = 4
_ppLastTB$ = -116					; size = 4
_ppTB$ = -104						; size = 4
_pUAVDep$3 = -92					; size = 4
_pLastSampDep$ = -80					; size = 4
_pSampDep$ = -68					; size = 4
_pLastCBDep$ = -56					; size = 4
_pCBDep$ = -44						; size = 4
_pVT$ = -32						; size = 4
_i$ = -20						; size = 4
_this$ = -8						; size = 4
_pBlock$ = 8						; size = 4
?ApplyShaderBlock@CEffect@D3DX11Effects@@IAEXPAUSShaderBlock@2@@Z PROC ; D3DX11Effects::CEffect::ApplyShaderBlock, COMDAT
; _this$ = ecx

; 145  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 384				; 00000180H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-384]
	mov	ecx, 96					; 00000060H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 146  :     UINT i;
; 147  : 
; 148  :     SD3DShaderVTable *pVT = pBlock->pVT;

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _pVT$[ebp], ecx

; 149  : 
; 150  :     // Apply constant buffers first (tbuffers are done later)
; 151  :     SShaderCBDependency *pCBDep = pBlock->pCBDeps;

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _pCBDep$[ebp], ecx

; 152  :     SShaderCBDependency *pLastCBDep = pBlock->pCBDeps + pBlock->CBDepCount;

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shl	ecx, 4
	mov	edx, DWORD PTR _pBlock$[ebp]
	add	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR _pLastCBDep$[ebp], ecx

; 153  : 
; 154  :     for (; pCBDep<pLastCBDep; pCBDep++)

	jmp	SHORT $LN66@ApplyShade
$LN65@ApplyShade:
	mov	eax, DWORD PTR _pCBDep$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _pCBDep$[ebp], eax
$LN66@ApplyShade:
	mov	eax, DWORD PTR _pCBDep$[ebp]
	cmp	eax, DWORD PTR _pLastCBDep$[ebp]
	jae	$LN64@ApplyShade
$LN63@ApplyShade:

; 155  :     {
; 156  :         D3DXASSERT(pCBDep->ppFXPointers);

	mov	eax, DWORD PTR _pCBDep$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN62@ApplyShade
	push	OFFSET ??_C@_0BF@MGFBBOMH@pCBDep?9?$DOppFXPointers?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??ApplyShaderBlock@CEffect@D3DX11Effects@@IAEXPAUSShaderBlock@3@@Z@4JA
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_0FD@JEDBEEMH@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN62@ApplyShade:
	xor	eax, eax
	jne	SHORT $LN63@ApplyShade

; 157  : 
; 158  :         for (i = 0; i < pCBDep->Count; ++ i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN59@ApplyShade
$LN58@ApplyShade:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN59@ApplyShade:
	mov	eax, DWORD PTR _pCBDep$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN57@ApplyShade

; 159  :         {
; 160  :             CheckAndUpdateCB_FX(m_pContext, (SConstantBuffer*)pCBDep->ppFXPointers[i]);

	mov	eax, DWORD PTR _pCBDep$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+176]
	push	edx
	call	?CheckAndUpdateCB_FX@D3DX11Effects@@YAXPAUID3D11DeviceContext@@PAUSConstantBuffer@1@@Z ; D3DX11Effects::CheckAndUpdateCB_FX
	add	esp, 8

; 161  :         }

	jmp	SHORT $LN58@ApplyShade
$LN57@ApplyShade:

; 162  : 
; 163  :         (m_pContext->*(pVT->pSetConstantBuffers))(pCBDep->StartIndex, pCBDep->Count, pCBDep->ppD3DObjects);

	mov	esi, esp
	mov	eax, DWORD PTR _pCBDep$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _pCBDep$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _pCBDep$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	push	ecx
	mov	edx, DWORD PTR _pVT$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 164  :     }

	jmp	$LN65@ApplyShade
$LN64@ApplyShade:

; 165  : 
; 166  :     // Next, apply samplers
; 167  :     SShaderSamplerDependency *pSampDep = pBlock->pSampDeps;

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _pSampDep$[ebp], ecx

; 168  :     SShaderSamplerDependency *pLastSampDep = pBlock->pSampDeps + pBlock->SampDepCount;

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shl	ecx, 4
	mov	edx, DWORD PTR _pBlock$[ebp]
	add	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR _pLastSampDep$[ebp], ecx

; 169  : 
; 170  :     for (; pSampDep<pLastSampDep; pSampDep++)

	jmp	SHORT $LN56@ApplyShade
$LN55@ApplyShade:
	mov	eax, DWORD PTR _pSampDep$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _pSampDep$[ebp], eax
$LN56@ApplyShade:
	mov	eax, DWORD PTR _pSampDep$[ebp]
	cmp	eax, DWORD PTR _pLastSampDep$[ebp]
	jae	$LN45@ApplyShade
$LN53@ApplyShade:

; 171  :     {
; 172  :         D3DXASSERT(pSampDep->ppFXPointers);

	mov	eax, DWORD PTR _pSampDep$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN52@ApplyShade
	push	OFFSET ??_C@_0BH@DPCBGJNL@pSampDep?9?$DOppFXPointers?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??ApplyShaderBlock@CEffect@D3DX11Effects@@IAEXPAUSShaderBlock@3@@Z@4JA
	add	eax, 27					; 0000001bH
	push	eax
	push	OFFSET ??_C@_0FD@JEDBEEMH@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN52@ApplyShade:
	xor	eax, eax
	jne	SHORT $LN53@ApplyShade

; 173  : 
; 174  :         for (i=0; i<pSampDep->Count; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN49@ApplyShade
$LN48@ApplyShade:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN49@ApplyShade:
	mov	eax, DWORD PTR _pSampDep$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN47@ApplyShade

; 175  :         {
; 176  :             if ( ApplyRenderStateBlock(pSampDep->ppFXPointers[i]) )

	mov	eax, DWORD PTR _pSampDep$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ApplyRenderStateBlock@CEffect@D3DX11Effects@@IAEHPAUSBaseBlock@2@@Z ; D3DX11Effects::CEffect::ApplyRenderStateBlock
	test	eax, eax
	je	SHORT $LN46@ApplyShade

; 177  :             {
; 178  :                 // If the sampler was updated, its pointer will have changed
; 179  :                 pSampDep->ppD3DObjects[i] = pSampDep->ppFXPointers[i]->pD3DObject;

	mov	eax, DWORD PTR _pSampDep$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _pSampDep$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+ecx*4], eax
$LN46@ApplyShade:

; 180  :             }
; 181  :         }

	jmp	SHORT $LN48@ApplyShade
$LN47@ApplyShade:

; 182  :         (m_pContext->*(pVT->pSetSamplers))(pSampDep->StartIndex, pSampDep->Count, pSampDep->ppD3DObjects);

	mov	esi, esp
	mov	eax, DWORD PTR _pSampDep$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _pSampDep$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _pSampDep$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	push	ecx
	mov	edx, DWORD PTR _pVT$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 183  :     }

	jmp	$LN55@ApplyShade
$LN45@ApplyShade:

; 184  :  
; 185  :     // Set the UAVs
; 186  :     // UAV ranges were combined in EffectLoad.  This code remains unchanged, however, so that ranges can be easily split
; 187  :     D3DXASSERT( pBlock->UAVDepCount < 2 );

	mov	eax, DWORD PTR _pBlock$[ebp]
	cmp	DWORD PTR [eax+48], 2
	jb	SHORT $LN44@ApplyShade
	push	OFFSET ??_C@_0BI@NGBDBHCB@pBlock?9?$DOUAVDepCount?5?$DM?52?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??ApplyShaderBlock@CEffect@D3DX11Effects@@IAEXPAUSShaderBlock@3@@Z@4JA
	add	eax, 42					; 0000002aH
	push	eax
	push	OFFSET ??_C@_0FD@JEDBEEMH@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN44@ApplyShade:
	xor	eax, eax
	jne	SHORT $LN45@ApplyShade

; 188  :     if( pBlock->UAVDepCount > 0 )

	mov	eax, DWORD PTR _pBlock$[ebp]
	cmp	DWORD PTR [eax+48], 0
	jbe	$LN41@ApplyShade

; 189  :     {
; 190  :         SUnorderedAccessViewDependency *pUAVDep = pBlock->pUAVDeps;

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _pUAVDep$3[ebp], ecx
$LN40@ApplyShade:

; 191  :         D3DXASSERT(pUAVDep->ppFXPointers);

	mov	eax, DWORD PTR _pUAVDep$3[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN39@ApplyShade
	push	OFFSET ??_C@_0BG@OOFFHDHA@pUAVDep?9?$DOppFXPointers?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??ApplyShaderBlock@CEffect@D3DX11Effects@@IAEXPAUSShaderBlock@3@@Z@4JA
	add	eax, 46					; 0000002eH
	push	eax
	push	OFFSET ??_C@_0FD@JEDBEEMH@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN39@ApplyShade:
	xor	eax, eax
	jne	SHORT $LN40@ApplyShade

; 192  : 
; 193  :         for (i=0; i<pUAVDep->Count; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN36@ApplyShade
$LN35@ApplyShade:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN36@ApplyShade:
	mov	eax, DWORD PTR _pUAVDep$3[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN34@ApplyShade

; 194  :         {
; 195  :             pUAVDep->ppD3DObjects[i] = pUAVDep->ppFXPointers[i]->pUnorderedAccessView;

	mov	eax, DWORD PTR _pUAVDep$3[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _pUAVDep$3[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 196  :         }

	jmp	SHORT $LN35@ApplyShade
$LN34@ApplyShade:

; 197  : 
; 198  :         if( EOT_ComputeShader5 == pBlock->GetShaderType() )

	mov	ecx, DWORD PTR _pBlock$[ebp]
	call	?GetShaderType@SShaderBlock@D3DX11Effects@@QAE?AW4EObjectType@2@XZ ; D3DX11Effects::SShaderBlock::GetShaderType
	cmp	eax, 28					; 0000001cH
	jne	SHORT $LN33@ApplyShade

; 199  :         {
; 200  :             m_pContext->CSSetUnorderedAccessViews( pUAVDep->StartIndex, pUAVDep->Count, pUAVDep->ppD3DObjects, g_pNegativeOnes );

	mov	esi, esp
	push	OFFSET ?g_pNegativeOnes@D3DX11Effects@@3PAIA ; D3DX11Effects::g_pNegativeOnes
	mov	eax, DWORD PTR _pUAVDep$3[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _pUAVDep$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _pUAVDep$3[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+176]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+272]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 201  :         }
; 202  :         else

	jmp	SHORT $LN41@ApplyShade
$LN33@ApplyShade:

; 203  :         {
; 204  :             // This call could be combined with the call to set render targets if both exist in the pass
; 205  :             m_pContext->OMSetRenderTargetsAndUnorderedAccessViews( D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL, NULL, NULL, pUAVDep->StartIndex, pUAVDep->Count, pUAVDep->ppD3DObjects, g_pNegativeOnes );

	mov	esi, esp
	push	OFFSET ?g_pNegativeOnes@D3DX11Effects@@3PAIA ; D3DX11Effects::g_pNegativeOnes
	mov	eax, DWORD PTR _pUAVDep$3[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _pUAVDep$3[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _pUAVDep$3[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	0
	push	0
	push	-1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+176]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+136]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN41@ApplyShade:

; 206  :         }
; 207  :     }
; 208  : 
; 209  :     // TBuffers are funny:
; 210  :     // We keep two references to them. One is in as a standard texture dep, and that gets used for all sets
; 211  :     // The other is as a part of the TBufferDeps array, which tells us to rebuild the matching CBs.
; 212  :     // These two refs could be rolled into one, but then we would have to predicate on each CB or each texture.
; 213  :     SConstantBuffer **ppTB = pBlock->ppTbufDeps;

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _ppTB$[ebp], ecx

; 214  :     SConstantBuffer **ppLastTB = ppTB + pBlock->TBufferDepCount;

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _ppTB$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _ppLastTB$[ebp], eax

; 215  : 
; 216  :     for (; ppTB<ppLastTB; ppTB++)

	jmp	SHORT $LN31@ApplyShade
$LN30@ApplyShade:
	mov	eax, DWORD PTR _ppTB$[ebp]
	add	eax, 4
	mov	DWORD PTR _ppTB$[ebp], eax
$LN31@ApplyShade:
	mov	eax, DWORD PTR _ppTB$[ebp]
	cmp	eax, DWORD PTR _ppLastTB$[ebp]
	jae	SHORT $LN29@ApplyShade

; 217  :     {
; 218  :         CheckAndUpdateCB_FX(m_pContext, (SConstantBuffer*)*ppTB);

	mov	eax, DWORD PTR _ppTB$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+176]
	push	eax
	call	?CheckAndUpdateCB_FX@D3DX11Effects@@YAXPAUID3D11DeviceContext@@PAUSConstantBuffer@1@@Z ; D3DX11Effects::CheckAndUpdateCB_FX
	add	esp, 8

; 219  :     }

	jmp	SHORT $LN30@ApplyShade
$LN29@ApplyShade:

; 220  : 
; 221  :     // Set the textures
; 222  :     SShaderResourceDependency *pResourceDep = pBlock->pResourceDeps;

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _pResourceDep$[ebp], ecx

; 223  :     SShaderResourceDependency *pLastResourceDep = pBlock->pResourceDeps + pBlock->ResourceDepCount;

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	shl	ecx, 4
	mov	edx, DWORD PTR _pBlock$[ebp]
	add	ecx, DWORD PTR [edx+44]
	mov	DWORD PTR _pLastResourceDep$[ebp], ecx

; 224  : 
; 225  :     for (; pResourceDep<pLastResourceDep; pResourceDep++)

	jmp	SHORT $LN28@ApplyShade
$LN27@ApplyShade:
	mov	eax, DWORD PTR _pResourceDep$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _pResourceDep$[ebp], eax
$LN28@ApplyShade:
	mov	eax, DWORD PTR _pResourceDep$[ebp]
	cmp	eax, DWORD PTR _pLastResourceDep$[ebp]
	jae	$LN26@ApplyShade
$LN25@ApplyShade:

; 226  :     {
; 227  :         D3DXASSERT(pResourceDep->ppFXPointers);

	mov	eax, DWORD PTR _pResourceDep$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN24@ApplyShade
	push	OFFSET ??_C@_0BL@EPJLBLKH@pResourceDep?9?$DOppFXPointers?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??ApplyShaderBlock@CEffect@D3DX11Effects@@IAEXPAUSShaderBlock@3@@Z@4JA
	add	eax, 82					; 00000052H
	push	eax
	push	OFFSET ??_C@_0FD@JEDBEEMH@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN24@ApplyShade:
	xor	eax, eax
	jne	SHORT $LN25@ApplyShade

; 228  : 
; 229  :         for (i=0; i<pResourceDep->Count; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN21@ApplyShade
$LN20@ApplyShade:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN21@ApplyShade:
	mov	eax, DWORD PTR _pResourceDep$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN19@ApplyShade

; 230  :         {
; 231  :             pResourceDep->ppD3DObjects[i] = pResourceDep->ppFXPointers[i]->pShaderResource;

	mov	eax, DWORD PTR _pResourceDep$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _pResourceDep$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 232  :         }

	jmp	SHORT $LN20@ApplyShade
$LN19@ApplyShade:

; 233  : 
; 234  :         (m_pContext->*(pVT->pSetShaderResources))(pResourceDep->StartIndex, pResourceDep->Count, pResourceDep->ppD3DObjects);

	mov	esi, esp
	mov	eax, DWORD PTR _pResourceDep$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _pResourceDep$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _pResourceDep$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	push	ecx
	mov	edx, DWORD PTR _pVT$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 235  :     }

	jmp	$LN27@ApplyShade
$LN26@ApplyShade:

; 236  : 
; 237  :     // Update Interface dependencies
; 238  :     UINT Interfaces = 0;

	mov	DWORD PTR _Interfaces$[ebp], 0

; 239  :     ID3D11ClassInstance** ppClassInstances = NULL;

	mov	DWORD PTR _ppClassInstances$[ebp], 0
$LN18@ApplyShade:

; 240  :     D3DXASSERT( pBlock->InterfaceDepCount < 2 );

	mov	eax, DWORD PTR _pBlock$[ebp]
	cmp	DWORD PTR [eax+32], 2
	jb	SHORT $LN17@ApplyShade
	push	OFFSET ??_C@_0BO@JBMJAKB@pBlock?9?$DOInterfaceDepCount?5?$DM?52?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??ApplyShaderBlock@CEffect@D3DX11Effects@@IAEXPAUSShaderBlock@3@@Z@4JA
	add	eax, 95					; 0000005fH
	push	eax
	push	OFFSET ??_C@_0FD@JEDBEEMH@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN17@ApplyShade:
	xor	eax, eax
	jne	SHORT $LN18@ApplyShade

; 241  :     if( pBlock->InterfaceDepCount > 0 )

	mov	eax, DWORD PTR _pBlock$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jbe	$LN14@ApplyShade

; 242  :     {
; 243  :         SInterfaceDependency *pInterfaceDep = pBlock->pInterfaceDeps;

	mov	eax, DWORD PTR _pBlock$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _pInterfaceDep$2[ebp], ecx
$LN13@ApplyShade:

; 244  :         D3DXASSERT(pInterfaceDep->ppFXPointers);

	mov	eax, DWORD PTR _pInterfaceDep$2[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN12@ApplyShade
	push	OFFSET ??_C@_0BM@IJPMAIHM@pInterfaceDep?9?$DOppFXPointers?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??ApplyShaderBlock@CEffect@D3DX11Effects@@IAEXPAUSShaderBlock@3@@Z@4JA
	add	eax, 99					; 00000063H
	push	eax
	push	OFFSET ??_C@_0FD@JEDBEEMH@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN12@ApplyShade:
	xor	eax, eax
	jne	SHORT $LN13@ApplyShade

; 245  : 
; 246  :         ppClassInstances = pInterfaceDep->ppD3DObjects;

	mov	eax, DWORD PTR _pInterfaceDep$2[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _ppClassInstances$[ebp], ecx

; 247  :         Interfaces = pInterfaceDep->Count;

	mov	eax, DWORD PTR _pInterfaceDep$2[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _Interfaces$[ebp], ecx

; 248  :         for (i=0; i<pInterfaceDep->Count; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@ApplyShade
$LN8@ApplyShade:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@ApplyShade:
	mov	eax, DWORD PTR _pInterfaceDep$2[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN14@ApplyShade

; 249  :         {
; 250  :             SClassInstanceGlobalVariable* pCI = pInterfaceDep->ppFXPointers[i]->pClassInstance;

	mov	eax, DWORD PTR _pInterfaceDep$2[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pCI$1[ebp], ecx

; 251  :             if( pCI )

	cmp	DWORD PTR _pCI$1[ebp], 0
	je	SHORT $LN6@ApplyShade
$LN5@ApplyShade:

; 252  :             {
; 253  :                 D3DXASSERT( pCI->pMemberData != NULL );

	mov	eax, DWORD PTR _pCI$1[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@ApplyShade
	push	OFFSET ??_C@_0BJ@DKPGBPLM@pCI?9?$DOpMemberData?5?$CB?$DN?5NULL?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??ApplyShaderBlock@CEffect@D3DX11Effects@@IAEXPAUSShaderBlock@3@@Z@4JA
	add	eax, 108				; 0000006cH
	push	eax
	push	OFFSET ??_C@_0FD@JEDBEEMH@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN4@ApplyShade:
	xor	eax, eax
	jne	SHORT $LN5@ApplyShade

; 254  :                 pInterfaceDep->ppD3DObjects[i] = pCI->pMemberData->Data.pD3DClassInstance;

	mov	eax, DWORD PTR _pCI$1[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _pInterfaceDep$2[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	edx, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+edx*4], ecx

; 255  :             }
; 256  :             else

	jmp	SHORT $LN1@ApplyShade
$LN6@ApplyShade:

; 257  :             {
; 258  :                 pInterfaceDep->ppD3DObjects[i] = NULL;

	mov	eax, DWORD PTR _pInterfaceDep$2[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [ecx+edx*4], 0
$LN1@ApplyShade:

; 259  :             }
; 260  :         }

	jmp	$LN8@ApplyShade
$LN14@ApplyShade:

; 261  :     }
; 262  : 
; 263  :     // Now set the shader
; 264  :     (m_pContext->*(pVT->pSetShader))(pBlock->pD3DObject, ppClassInstances, Interfaces);

	mov	esi, esp
	mov	eax, DWORD PTR _Interfaces$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ppClassInstances$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pBlock$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+176]
	push	edx
	mov	eax, DWORD PTR _pVT$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 265  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 384				; 00000180H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ApplyShaderBlock@CEffect@D3DX11Effects@@IAEXPAUSShaderBlock@2@@Z ENDP ; D3DX11Effects::CEffect::ApplyShaderBlock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\sparta2.0\uclan-sparta\effects11\effectruntime.cpp
;	COMDAT ?CheckDependencies@SPassBlock@D3DX11Effects@@QAEHXZ
_TEXT	SEGMENT
_i$1 = -56						; size = 4
_i$2 = -44						; size = 4
_i$3 = -32						; size = 4
_i$4 = -20						; size = 4
_this$ = -8						; size = 4
?CheckDependencies@SPassBlock@D3DX11Effects@@QAEHXZ PROC ; D3DX11Effects::SPassBlock::CheckDependencies, COMDAT
; _this$ = ecx

; 69   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 70   :     if( HasDependencies )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+152], 0
	je	SHORT $LN26@CheckDepen

; 71   :         return TRUE;

	mov	eax, 1
	jmp	$LN27@CheckDepen
$LN26@CheckDepen:

; 72   : 
; 73   :     for( UINT i=0; i < AssignmentCount; i++ )

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN25@CheckDepen
$LN24@CheckDepen:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN25@CheckDepen:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$4[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN23@CheckDepen

; 74   :     {
; 75   :         if( pAssignments[i].DependencyCount > 0 )

	mov	eax, DWORD PTR _i$4[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx+eax+12], 0
	jbe	SHORT $LN22@CheckDepen

; 76   :             return HasDependencies = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+152], 1
	mov	eax, 1
	jmp	$LN27@CheckDepen
$LN22@CheckDepen:

; 77   :     }

	jmp	SHORT $LN24@CheckDepen
$LN23@CheckDepen:

; 78   :     if( BackingStore.pBlendBlock && BackingStore.pBlendBlock->AssignmentCount > 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN21@CheckDepen
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	cmp	DWORD PTR [ecx+8], 0
	jbe	SHORT $LN21@CheckDepen

; 79   :     {
; 80   :         for( UINT i=0; i < BackingStore.pBlendBlock->AssignmentCount; i++ )

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN20@CheckDepen
$LN19@CheckDepen:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN20@CheckDepen:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _i$3[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN21@CheckDepen

; 81   :         {
; 82   :             if( BackingStore.pBlendBlock->pAssignments[i].DependencyCount > 0 )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _i$3[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+12]
	cmp	DWORD PTR [eax+edx+12], 0
	jbe	SHORT $LN17@CheckDepen

; 83   :                 return HasDependencies = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+152], 1
	mov	eax, 1
	jmp	$LN27@CheckDepen
$LN17@CheckDepen:

; 84   :         }

	jmp	SHORT $LN19@CheckDepen
$LN21@CheckDepen:

; 85   :     }
; 86   :     if( BackingStore.pDepthStencilBlock && BackingStore.pDepthStencilBlock->AssignmentCount > 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN16@CheckDepen
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	cmp	DWORD PTR [ecx+8], 0
	jbe	SHORT $LN16@CheckDepen

; 87   :     {
; 88   :         for( UINT i=0; i < BackingStore.pDepthStencilBlock->AssignmentCount; i++ )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN15@CheckDepen
$LN14@CheckDepen:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN15@CheckDepen:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	edx, DWORD PTR _i$2[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN16@CheckDepen

; 89   :         {
; 90   :             if( BackingStore.pDepthStencilBlock->pAssignments[i].DependencyCount > 0 )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	edx, DWORD PTR _i$2[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+12]
	cmp	DWORD PTR [eax+edx+12], 0
	jbe	SHORT $LN12@CheckDepen

; 91   :                 return HasDependencies = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+152], 1
	mov	eax, 1
	jmp	$LN27@CheckDepen
$LN12@CheckDepen:

; 92   :         }

	jmp	SHORT $LN14@CheckDepen
$LN16@CheckDepen:

; 93   :     }
; 94   :     if( BackingStore.pRasterizerBlock && BackingStore.pRasterizerBlock->AssignmentCount > 0 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN11@CheckDepen
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	cmp	DWORD PTR [ecx+8], 0
	jbe	SHORT $LN11@CheckDepen

; 95   :     {
; 96   :         for( UINT i=0; i < BackingStore.pRasterizerBlock->AssignmentCount; i++ )

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN10@CheckDepen
$LN9@CheckDepen:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN10@CheckDepen:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _i$1[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jae	SHORT $LN11@CheckDepen

; 97   :         {
; 98   :             if( BackingStore.pRasterizerBlock->pAssignments[i].DependencyCount > 0 )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _i$1[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+12]
	cmp	DWORD PTR [eax+edx+12], 0
	jbe	SHORT $LN7@CheckDepen

; 99   :                 return HasDependencies = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+152], 1
	mov	eax, 1
	jmp	$LN27@CheckDepen
$LN7@CheckDepen:

; 100  :         }

	jmp	SHORT $LN9@CheckDepen
$LN11@CheckDepen:

; 101  :     }
; 102  :     if( BackingStore.pVertexShaderBlock && CheckShaderDependencies( BackingStore.pVertexShaderBlock ) )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+108], 0
	je	SHORT $LN6@CheckDepen
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckShaderDependencies@SPassBlock@D3DX11Effects@@QAEHPAUSShaderBlock@2@@Z ; D3DX11Effects::SPassBlock::CheckShaderDependencies
	test	eax, eax
	je	SHORT $LN6@CheckDepen

; 103  :     {
; 104  :         return HasDependencies = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+152], 1
	mov	eax, 1
	jmp	$LN27@CheckDepen
$LN6@CheckDepen:

; 105  :     }
; 106  :     if( BackingStore.pGeometryShaderBlock && CheckShaderDependencies( BackingStore.pGeometryShaderBlock ) )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+116], 0
	je	SHORT $LN5@CheckDepen
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckShaderDependencies@SPassBlock@D3DX11Effects@@QAEHPAUSShaderBlock@2@@Z ; D3DX11Effects::SPassBlock::CheckShaderDependencies
	test	eax, eax
	je	SHORT $LN5@CheckDepen

; 107  :     {
; 108  :         return HasDependencies = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+152], 1
	mov	eax, 1
	jmp	$LN27@CheckDepen
$LN5@CheckDepen:

; 109  :     }
; 110  :     if( BackingStore.pPixelShaderBlock && CheckShaderDependencies( BackingStore.pPixelShaderBlock ) )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+112], 0
	je	SHORT $LN4@CheckDepen
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckShaderDependencies@SPassBlock@D3DX11Effects@@QAEHPAUSShaderBlock@2@@Z ; D3DX11Effects::SPassBlock::CheckShaderDependencies
	test	eax, eax
	je	SHORT $LN4@CheckDepen

; 111  :     {
; 112  :         return HasDependencies = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+152], 1
	mov	eax, 1
	jmp	$LN27@CheckDepen
$LN4@CheckDepen:

; 113  :     }
; 114  :     if( BackingStore.pHullShaderBlock && CheckShaderDependencies( BackingStore.pHullShaderBlock ) )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+128], 0
	je	SHORT $LN3@CheckDepen
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckShaderDependencies@SPassBlock@D3DX11Effects@@QAEHPAUSShaderBlock@2@@Z ; D3DX11Effects::SPassBlock::CheckShaderDependencies
	test	eax, eax
	je	SHORT $LN3@CheckDepen

; 115  :     {
; 116  :         return HasDependencies = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+152], 1
	mov	eax, 1
	jmp	SHORT $LN27@CheckDepen
$LN3@CheckDepen:

; 117  :     }
; 118  :     if( BackingStore.pDomainShaderBlock && CheckShaderDependencies( BackingStore.pDomainShaderBlock ) )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+124], 0
	je	SHORT $LN2@CheckDepen
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+124]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckShaderDependencies@SPassBlock@D3DX11Effects@@QAEHPAUSShaderBlock@2@@Z ; D3DX11Effects::SPassBlock::CheckShaderDependencies
	test	eax, eax
	je	SHORT $LN2@CheckDepen

; 119  :     {
; 120  :         return HasDependencies = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+152], 1
	mov	eax, 1
	jmp	SHORT $LN27@CheckDepen
$LN2@CheckDepen:

; 121  :     }
; 122  :     if( BackingStore.pComputeShaderBlock && CheckShaderDependencies( BackingStore.pComputeShaderBlock ) )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+120], 0
	je	SHORT $LN1@CheckDepen
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CheckShaderDependencies@SPassBlock@D3DX11Effects@@QAEHPAUSShaderBlock@2@@Z ; D3DX11Effects::SPassBlock::CheckShaderDependencies
	test	eax, eax
	je	SHORT $LN1@CheckDepen

; 123  :     {
; 124  :         return HasDependencies = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+152], 1
	mov	eax, 1
	jmp	SHORT $LN27@CheckDepen
$LN1@CheckDepen:

; 125  :     }
; 126  : 
; 127  :     return HasDependencies;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+152]
$LN27@CheckDepen:

; 128  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CheckDependencies@SPassBlock@D3DX11Effects@@QAEHXZ ENDP ; D3DX11Effects::SPassBlock::CheckDependencies
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\sparta2.0\uclan-sparta\effects11\effectruntime.cpp
;	COMDAT ?CheckShaderDependencies@SPassBlock@D3DX11Effects@@QAEHPAUSShaderBlock@2@@Z
_TEXT	SEGMENT
_pInterfaceDep$1 = -32					; size = 4
_i$2 = -20						; size = 4
_this$ = -8						; size = 4
_pBlock$ = 8						; size = 4
?CheckShaderDependencies@SPassBlock@D3DX11Effects@@QAEHPAUSShaderBlock@2@@Z PROC ; D3DX11Effects::SPassBlock::CheckShaderDependencies, COMDAT
; _this$ = ecx

; 50   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   :     if( pBlock->InterfaceDepCount > 0 )

	mov	eax, DWORD PTR _pBlock$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jbe	$LN9@CheckShade
$LN8@CheckShade:

; 52   :     {
; 53   :         D3DXASSERT( pBlock->InterfaceDepCount == 1 );

	mov	eax, DWORD PTR _pBlock$[ebp]
	cmp	DWORD PTR [eax+32], 1
	je	SHORT $LN7@CheckShade
	push	OFFSET ??_C@_0BP@OHDEFJLA@pBlock?9?$DOInterfaceDepCount?5?$DN?$DN?51?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??CheckShaderDependencies@SPassBlock@D3DX11Effects@@QAEHPAUSShaderBlock@3@@Z@4JA
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_0FD@JEDBEEMH@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN7@CheckShade:
	xor	eax, eax
	jne	SHORT $LN8@CheckShade

; 54   :         for( UINT i=0; i < pBlock->pInterfaceDeps[0].Count; i++ )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@CheckShade
$LN3@CheckShade:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@CheckShade:
	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pBlock$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	edx, DWORD PTR _i$2[ebp]
	cmp	edx, DWORD PTR [eax+ecx+4]
	jae	SHORT $LN9@CheckShade

; 55   :         {
; 56   :             SInterface* pInterfaceDep = pBlock->pInterfaceDeps[0].ppFXPointers[i];

	mov	eax, 16					; 00000010H
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pBlock$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+ecx+8]
	mov	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _pInterfaceDep$1[ebp], eax

; 57   :             if( pInterfaceDep > pEffect->m_pInterfaces && pInterfaceDep < (pEffect->m_pInterfaces + pEffect->m_InterfaceCount) )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	mov	edx, DWORD PTR _pInterfaceDep$1[ebp]
	cmp	edx, DWORD PTR [ecx+112]
	jbe	SHORT $LN1@CheckShade
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+144]
	mov	edx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR [ecx+112]
	lea	ecx, DWORD PTR [eax+edx*4]
	cmp	DWORD PTR _pInterfaceDep$1[ebp], ecx
	jae	SHORT $LN1@CheckShade

; 58   :             {
; 59   :                 // This is a global interface pointer (as opposed to an SInterface created in a BindInterface call
; 60   :                 return TRUE;

	mov	eax, 1
	jmp	SHORT $LN10@CheckShade
$LN1@CheckShade:

; 61   :             }
; 62   :         }

	jmp	SHORT $LN3@CheckShade
$LN9@CheckShade:

; 63   :     }
; 64   :     return FALSE;

	xor	eax, eax
$LN10@CheckShade:

; 65   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?CheckShaderDependencies@SPassBlock@D3DX11Effects@@QAEHPAUSShaderBlock@2@@Z ENDP ; D3DX11Effects::SPassBlock::CheckShaderDependencies
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\sparta2.0\uclan-sparta\effects11\effectruntime.cpp
;	COMDAT ?ApplyPassAssignments@SPassBlock@D3DX11Effects@@QAEXXZ
_TEXT	SEGMENT
_pLastAssn$ = -32					; size = 4
_pAssignment$ = -20					; size = 4
_this$ = -8						; size = 4
?ApplyPassAssignments@SPassBlock@D3DX11Effects@@QAEXXZ PROC ; D3DX11Effects::SPassBlock::ApplyPassAssignments, COMDAT
; _this$ = ecx

; 36   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 37   :     SAssignment *pAssignment = pAssignments;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _pAssignment$[ebp], ecx

; 38   :     SAssignment *pLastAssn = pAssignments + AssignmentCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+16]
	mov	DWORD PTR _pLastAssn$[ebp], ecx

; 39   : 
; 40   :     pEffect->IncrementTimer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	call	?IncrementTimer@CEffect@D3DX11Effects@@IAEXXZ ; D3DX11Effects::CEffect::IncrementTimer

; 41   : 
; 42   :     for(; pAssignment < pLastAssn; pAssignment++)

	jmp	SHORT $LN3@ApplyPassA
$LN2@ApplyPassA:
	mov	eax, DWORD PTR _pAssignment$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pAssignment$[ebp], eax
$LN3@ApplyPassA:
	mov	eax, DWORD PTR _pAssignment$[ebp]
	cmp	eax, DWORD PTR _pLastAssn$[ebp]
	jae	SHORT $LN4@ApplyPassA

; 43   :     {
; 44   :         pEffect->EvaluateAssignment(pAssignment);

	mov	eax, DWORD PTR _pAssignment$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+144]
	call	?EvaluateAssignment@CEffect@D3DX11Effects@@IAEHPAUSAssignment@2@@Z ; D3DX11Effects::CEffect::EvaluateAssignment

; 45   :     }

	jmp	SHORT $LN2@ApplyPassA
$LN4@ApplyPassA:

; 46   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ApplyPassAssignments@SPassBlock@D3DX11Effects@@QAEXXZ ENDP ; D3DX11Effects::SPassBlock::ApplyPassAssignments
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\sparta2.0\uclan-sparta\effects11\effect.h
;	COMDAT ?AsRasterizer@SBaseBlock@D3DX11Effects@@QBEPAUSRasterizerBlock@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?AsRasterizer@SBaseBlock@D3DX11Effects@@QBEPAUSRasterizerBlock@2@XZ PROC ; D3DX11Effects::SBaseBlock::AsRasterizer, COMDAT
; _this$ = ecx

; 312  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN4@AsRasteriz:

; 313  :         D3DXASSERT( BlockType == EBT_Rasterizer );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 3
	je	SHORT $LN3@AsRasteriz
	push	OFFSET ??_C@_0BM@IMDGHILL@BlockType?5?$DN?$DN?5EBT_Rasterizer?$AA@
	push	313					; 00000139H
	push	OFFSET ??_C@_0EK@PNDNONEE@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@AsRasteriz:
	xor	eax, eax
	jne	SHORT $LN4@AsRasteriz

; 314  :         return (SRasterizerBlock*) this;

	mov	eax, DWORD PTR _this$[ebp]

; 315  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AsRasterizer@SBaseBlock@D3DX11Effects@@QBEPAUSRasterizerBlock@2@XZ ENDP ; D3DX11Effects::SBaseBlock::AsRasterizer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\sparta2.0\uclan-sparta\effects11\effect.h
;	COMDAT ?AsBlend@SBaseBlock@D3DX11Effects@@QBEPAUSBlendBlock@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?AsBlend@SBaseBlock@D3DX11Effects@@QBEPAUSBlendBlock@2@XZ PROC ; D3DX11Effects::SBaseBlock::AsBlend, COMDAT
; _this$ = ecx

; 306  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN4@AsBlend:

; 307  :         D3DXASSERT( BlockType == EBT_Blend );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 2
	je	SHORT $LN3@AsBlend
	push	OFFSET ??_C@_0BH@MENOAHCH@BlockType?5?$DN?$DN?5EBT_Blend?$AA@
	push	307					; 00000133H
	push	OFFSET ??_C@_0EK@PNDNONEE@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@AsBlend:
	xor	eax, eax
	jne	SHORT $LN4@AsBlend

; 308  :         return (SBlendBlock*) this;

	mov	eax, DWORD PTR _this$[ebp]

; 309  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AsBlend@SBaseBlock@D3DX11Effects@@QBEPAUSBlendBlock@2@XZ ENDP ; D3DX11Effects::SBaseBlock::AsBlend
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\sparta2.0\uclan-sparta\effects11\effect.h
;	COMDAT ?AsDepthStencil@SBaseBlock@D3DX11Effects@@QBEPAUSDepthStencilBlock@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?AsDepthStencil@SBaseBlock@D3DX11Effects@@QBEPAUSDepthStencilBlock@2@XZ PROC ; D3DX11Effects::SBaseBlock::AsDepthStencil, COMDAT
; _this$ = ecx

; 300  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN4@AsDepthSte:

; 301  :         D3DXASSERT( BlockType == EBT_DepthStencil );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN3@AsDepthSte
	push	OFFSET ??_C@_0BO@PGMIDLAC@BlockType?5?$DN?$DN?5EBT_DepthStencil?$AA@
	push	301					; 0000012dH
	push	OFFSET ??_C@_0EK@PNDNONEE@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@AsDepthSte:
	xor	eax, eax
	jne	SHORT $LN4@AsDepthSte

; 302  :         return (SDepthStencilBlock*) this;

	mov	eax, DWORD PTR _this$[ebp]

; 303  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AsDepthStencil@SBaseBlock@D3DX11Effects@@QBEPAUSDepthStencilBlock@2@XZ ENDP ; D3DX11Effects::SBaseBlock::AsDepthStencil
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\sparta2.0\uclan-sparta\effects11\effect.h
;	COMDAT ?AsSampler@SBaseBlock@D3DX11Effects@@QBEPAUSSamplerBlock@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?AsSampler@SBaseBlock@D3DX11Effects@@QBEPAUSSamplerBlock@2@XZ PROC ; D3DX11Effects::SBaseBlock::AsSampler, COMDAT
; _this$ = ecx

; 294  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN4@AsSampler:

; 295  :         D3DXASSERT( BlockType == EBT_Sampler );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 4
	je	SHORT $LN3@AsSampler
	push	OFFSET ??_C@_0BJ@DAEFCCLD@BlockType?5?$DN?$DN?5EBT_Sampler?$AA@
	push	295					; 00000127H
	push	OFFSET ??_C@_0EK@PNDNONEE@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@AsSampler:
	xor	eax, eax
	jne	SHORT $LN4@AsSampler

; 296  :         return (SSamplerBlock*) this;

	mov	eax, DWORD PTR _this$[ebp]

; 297  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AsSampler@SBaseBlock@D3DX11Effects@@QBEPAUSSamplerBlock@2@XZ ENDP ; D3DX11Effects::SBaseBlock::AsSampler
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\sparta2.0\uclan-sparta\effects11\effectruntime.cpp
;	COMDAT ?ApplyAssignments@SBaseBlock@D3DX11Effects@@QAEHPAVCEffect@2@@Z
_TEXT	SEGMENT
_bRecreate$ = -44					; size = 4
_pLastAssn$ = -32					; size = 4
_pAssignment$ = -20					; size = 4
_this$ = -8						; size = 4
_pEffect$ = 8						; size = 4
?ApplyAssignments@SBaseBlock@D3DX11Effects@@QAEHPAVCEffect@2@@Z PROC ; D3DX11Effects::SBaseBlock::ApplyAssignments, COMDAT
; _this$ = ecx

; 22   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 23   :     SAssignment *pAssignment = pAssignments;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _pAssignment$[ebp], ecx

; 24   :     SAssignment *pLastAssn = pAssignments + AssignmentCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 5
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _pLastAssn$[ebp], ecx

; 25   :     BOOL bRecreate = FALSE;

	mov	DWORD PTR _bRecreate$[ebp], 0

; 26   : 
; 27   :     for(; pAssignment < pLastAssn; pAssignment++)

	jmp	SHORT $LN3@ApplyAssig
$LN2@ApplyAssig:
	mov	eax, DWORD PTR _pAssignment$[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _pAssignment$[ebp], eax
$LN3@ApplyAssig:
	mov	eax, DWORD PTR _pAssignment$[ebp]
	cmp	eax, DWORD PTR _pLastAssn$[ebp]
	jae	SHORT $LN1@ApplyAssig

; 28   :     {
; 29   :         bRecreate |= pEffect->EvaluateAssignment(pAssignment);

	mov	eax, DWORD PTR _pAssignment$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pEffect$[ebp]
	call	?EvaluateAssignment@CEffect@D3DX11Effects@@IAEHPAUSAssignment@2@@Z ; D3DX11Effects::CEffect::EvaluateAssignment
	or	eax, DWORD PTR _bRecreate$[ebp]
	mov	DWORD PTR _bRecreate$[ebp], eax

; 30   :     }

	jmp	SHORT $LN2@ApplyAssig
$LN1@ApplyAssig:

; 31   : 
; 32   :     return bRecreate;

	mov	eax, DWORD PTR _bRecreate$[ebp]

; 33   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ApplyAssignments@SBaseBlock@D3DX11Effects@@QAEHPAVCEffect@2@@Z ENDP ; D3DX11Effects::SBaseBlock::ApplyAssignments
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\sparta2.0\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?dwordMemcpy@@YAXPIAXPIBXI@Z
_TEXT	SEGMENT
_dwordCount$ = -20					; size = 4
_i$ = -8						; size = 4
_pDest$ = 8						; size = 4
_pSource$ = 12						; size = 4
_uByteCount$ = 16					; size = 4
?dwordMemcpy@@YAXPIAXPIBXI@Z PROC			; dwordMemcpy, COMDAT

; 75   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN10@dwordMemcp:

; 76   :     UINT i;
; 77   :     D3DXASSERT(uByteCount % 4 == 0);

	mov	eax, DWORD PTR _uByteCount$[ebp]
	xor	edx, edx
	mov	ecx, 4
	div	ecx
	test	edx, edx
	je	SHORT $LN9@dwordMemcp
	push	OFFSET ??_C@_0BE@PIKLEFGK@uByteCount?5?$CF?54?5?$DN?$DN?50?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??dwordMemcpy@@YAXPIAXPIBXI@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0FC@PAPMLGFN@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN9@dwordMemcp:
	xor	eax, eax
	jne	SHORT $LN10@dwordMemcp

; 78   : #ifdef _AMD64_
; 79   :     const UINT qwordCount = uByteCount >> 3;
; 80   : 
; 81   :     __int64* src64 = (__int64*) pSource;
; 82   :     __int64* dst64 = (__int64*) pDest;
; 83   : 
; 84   :     for (i=0; i<(qwordCount & 0x3); i++)
; 85   :     {
; 86   :         *(dst64) = *(src64);
; 87   :         dst64++;
; 88   :         src64++;
; 89   :     }
; 90   : 
; 91   :     for (; i<qwordCount; i+= 4)
; 92   :     {
; 93   :         *(dst64     ) = *(src64     );
; 94   :         *(dst64 + 1 ) = *(src64 + 1 );
; 95   :         *(dst64 + 2 ) = *(src64 + 2 );
; 96   :         *(dst64 + 3 ) = *(src64 + 3 );
; 97   :         dst64 += 4;
; 98   :         src64 += 4;
; 99   :     }
; 100  : 
; 101  :     ANALYSIS_ASSUME( dst64 - static_cast< __int64* >(pDest) <= uByteCount - 4 );
; 102  :     ANALYSIS_ASSUME( src64 - static_cast< const __int64* >(pSource) <= uByteCount - 4 );
; 103  :     if( uByteCount & 0x4 )
; 104  :     {
; 105  :         *((UINT*)dst64) = *((UINT*)src64);
; 106  :     }
; 107  : #else
; 108  :     const UINT dwordCount = uByteCount >> 2;

	mov	eax, DWORD PTR _uByteCount$[ebp]
	shr	eax, 2
	mov	DWORD PTR _dwordCount$[ebp], eax

; 109  : 
; 110  :     for (i=0; i<(dwordCount & 0x3); i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@dwordMemcp
$LN5@dwordMemcp:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@dwordMemcp:
	mov	eax, DWORD PTR _dwordCount$[ebp]
	and	eax, 3
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN4@dwordMemcp

; 111  :     {
; 112  : #pragma prefast(suppress: __WARNING_UNRELATED_LOOP_TERMINATION, "(dwordCount & 03) < dwordCount")
; 113  :         ((UINT*)pDest)[i  ] = ((UINT*)pSource)[i  ];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _pSource$[ebp]
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [ecx+eax*4], edx

; 114  :     }

	jmp	SHORT $LN5@dwordMemcp
$LN4@dwordMemcp:

; 115  :     for (; i<dwordCount; i+= 4)

	jmp	SHORT $LN3@dwordMemcp
$LN2@dwordMemcp:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 4
	mov	DWORD PTR _i$[ebp], eax
$LN3@dwordMemcp:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _dwordCount$[ebp]
	jae	SHORT $LN11@dwordMemcp

; 116  :     {
; 117  :         ((UINT*)pDest)[i  ] = ((UINT*)pSource)[i  ];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _pSource$[ebp]
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [ecx+eax*4], edx

; 118  :         ((UINT*)pDest)[i+1] = ((UINT*)pSource)[i+1];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _pSource$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+4]
	mov	DWORD PTR [ecx+eax*4+4], edx

; 119  :         ((UINT*)pDest)[i+2] = ((UINT*)pSource)[i+2];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _pSource$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+8]
	mov	DWORD PTR [ecx+eax*4+8], edx

; 120  :         ((UINT*)pDest)[i+3] = ((UINT*)pSource)[i+3];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _pDest$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _pSource$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+12]
	mov	DWORD PTR [ecx+eax*4+12], edx

; 121  :     }

	jmp	SHORT $LN2@dwordMemcp
$LN11@dwordMemcp:

; 122  : #endif
; 123  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?dwordMemcpy@@YAXPIAXPIBXI@Z ENDP			; dwordMemcpy
_TEXT	ENDS
END
