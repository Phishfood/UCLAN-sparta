; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

	TITLE	C:\Users\Simon\Documents\GitHub\UCLAN-sparta\Effects11\EffectLoad.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BJ@PCDFIDK@MIN_LINEAR_MAG_MIP_POINT?$AA@	; `string'
PUBLIC	??_C@_0CA@PLHBLOON@MIN_LINEAR_MAG_POINT_MIP_LINEAR?$AA@ ; `string'
PUBLIC	??_C@_0BJ@BLHOHPBA@MIN_MAG_LINEAR_MIP_POINT?$AA@ ; `string'
PUBLIC	??_C@_0BD@LLNOFHHP@MIN_MAG_MIP_LINEAR?$AA@	; `string'
PUBLIC	??_C@_0M@FBHCHPJF@ANISOTROPIC?$AA@		; `string'
PUBLIC	??_C@_0BN@EJHCGLM@COMPARISON_MIN_MAG_MIP_POINT?$AA@ ; `string'
PUBLIC	??_C@_0CE@BDNJCEEB@COMPARISON_MIN_MAG_POINT_MIP_LIN@ ; `string'
PUBLIC	_IID_ID3DX11EffectBlendVariable
PUBLIC	??_C@_0CK@OGELINIF@COMPARISON_MIN_POINT_MAG_LINEAR_@ ; `string'
PUBLIC	??_C@_0CE@PMJCANCG@COMPARISON_MIN_POINT_MAG_MIP_LIN@ ; `string'
PUBLIC	??_C@_0CE@ELIPCDDG@COMPARISON_MIN_LINEAR_MAG_MIP_PO@ ; `string'
PUBLIC	??_C@_0CL@PMJFJEGG@COMPARISON_MIN_LINEAR_MAG_POINT_@ ; `string'
PUBLIC	??_C@_0CE@FPNCAEBM@COMPARISON_MIN_MAG_LINEAR_MIP_PO@ ; `string'
PUBLIC	??_C@_0BO@EDLFHIHK@COMPARISON_MIN_MAG_MIP_LINEAR?$AA@ ; `string'
PUBLIC	??_C@_0BH@FICIAAEE@COMPARISON_ANISOTROPIC?$AA@	; `string'
PUBLIC	??_C@_09JIMOEHJJ@TEXT_1BIT?$AA@			; `string'
PUBLIC	??_C@_03OKMGHDAC@ONE?$AA@			; `string'
PUBLIC	??_C@_09BBJLDKJG@SRC_COLOR?$AA@			; `string'
PUBLIC	??_C@_0O@LDCOGIID@INV_SRC_COLOR?$AA@		; `string'
PUBLIC	??_C@_09GFJMFOHN@SRC_ALPHA?$AA@			; `string'
PUBLIC	??_C@_0O@MHCJAMGI@INV_SRC_ALPHA?$AA@		; `string'
PUBLIC	??_C@_0L@MALFDAFE@DEST_ALPHA?$AA@		; `string'
PUBLIC	??_C@_0P@KNMKGBON@INV_DEST_ALPHA?$AA@		; `string'
PUBLIC	??_C@_0L@LELCFELP@DEST_COLOR?$AA@		; `string'
PUBLIC	??_C@_0P@NJMNAFAG@INV_DEST_COLOR?$AA@		; `string'
PUBLIC	??_C@_0O@NDCPKMML@SRC_ALPHA_SAT?$AA@		; `string'
PUBLIC	??_C@_0N@HLIPIAPO@BLEND_FACTOR?$AA@		; `string'
PUBLIC	??_C@_0BB@FCOEJJBC@INV_BLEND_FACTOR?$AA@	; `string'
PUBLIC	??_C@_0L@MCMGPDMI@SRC1_COLOR?$AA@		; `string'
PUBLIC	??_C@_0P@KPLJKCHB@INV_SRC1_COLOR?$AA@		; `string'
PUBLIC	??_C@_0L@LGMBJHCD@SRC1_ALPHA?$AA@		; `string'
PUBLIC	??_C@_0P@NLLOMGJK@INV_SRC1_ALPHA?$AA@		; `string'
PUBLIC	??_C@_05LLKDOPEJ@CLAMP?$AA@			; `string'
PUBLIC	??_C@_04BJAJGGLD@WRAP?$AA@			; `string'
PUBLIC	??_C@_06LPIEMBDF@MIRROR?$AA@			; `string'
PUBLIC	??_C@_06OHHANPFE@BORDER?$AA@			; `string'
PUBLIC	??_C@_0M@IBDDGNND@MIRROR_ONCE?$AA@		; `string'
PUBLIC	??_C@_04OKGDLNCL@NONE?$AA@			; `string'
PUBLIC	??_C@_05LCELFLHH@FRONT?$AA@			; `string'
PUBLIC	??_C@_04FJBHJJME@BACK?$AA@			; `string'
PUBLIC	??_C@_05PLMGMCPK@NEVER?$AA@			; `string'
PUBLIC	??_C@_04PHHIILNL@LESS?$AA@			; `string'
PUBLIC	??_C@_05MFJMDLJG@EQUAL?$AA@			; `string'
PUBLIC	??_C@_0L@POPDHMNN@LESS_EQUAL?$AA@		; `string'
PUBLIC	??_C@_07INHKBBNC@GREATER?$AA@			; `string'
PUBLIC	??_C@_09BCHNGNOE@NOT_EQUAL?$AA@			; `string'
PUBLIC	??_C@_0O@LBCFDHKJ@GREATER_EQUAL?$AA@		; `string'
PUBLIC	??_C@_06KDBFKDHA@ALWAYS?$AA@			; `string'
PUBLIC	??_C@_04HGNONLMK@KEEP?$AA@			; `string'
PUBLIC	??_C@_07NGBKIEMN@REPLACE?$AA@			; `string'
PUBLIC	??_C@_08KPABMPDL@INCR_SAT?$AA@			; `string'
PUBLIC	??_C@_08DCEDEDK@DECR_SAT?$AA@			; `string'
PUBLIC	??_C@_06CMCEILNN@INVERT?$AA@			; `string'
PUBLIC	??_C@_04ONKEBBJL@INCR?$AA@			; `string'
PUBLIC	??_C@_04MCDFFCCL@DECR?$AA@			; `string'
PUBLIC	??_C@_03BOJFLAKG@ADD?$AA@			; `string'
PUBLIC	??_C@_08MGBEENML@SUBTRACT?$AA@			; `string'
PUBLIC	??_C@_0N@DGGLJHJP@REV_SUBTRACT?$AA@		; `string'
PUBLIC	??_C@_03KGHEHEMH@MIN?$AA@			; `string'
PUBLIC	??_C@_03LEPPJAKI@MAX?$AA@			; `string'
PUBLIC	_IID_ID3DX11EffectDepthStencilVariable
PUBLIC	_IID_ID3DX11EffectVectorVariable
PUBLIC	_IID_ID3DX11EffectRasterizerVariable
PUBLIC	_IID_ID3DX11EffectMatrixVariable
PUBLIC	?c_InvalidIndex@SType@D3DX11Effects@@2IB	; D3DX11Effects::SType::c_InvalidIndex
PUBLIC	?c_ScalarSize@SType@D3DX11Effects@@2IB		; D3DX11Effects::SType::c_ScalarSize
PUBLIC	?c_ScalarsPerRegister@SType@D3DX11Effects@@2IB	; D3DX11Effects::SType::c_ScalarsPerRegister
PUBLIC	?c_RegisterSize@SType@D3DX11Effects@@2IB	; D3DX11Effects::SType::c_RegisterSize
PUBLIC	_IID_ID3DX11EffectSamplerVariable
PUBLIC	_IID_ID3DX11EffectStringVariable
PUBLIC	_IID_ID3DX11EffectPass
PUBLIC	??_C@_0BA@LIKHENHC@RasterizerState?$AA@		; `string'
PUBLIC	??_C@_0BC@JHBFINCM@DepthStencilState?$AA@	; `string'
PUBLIC	?D3D11_DEFAULT@@3UCD3D11_DEFAULT@@B		; D3D11_DEFAULT
PUBLIC	_IID_ID3DX11EffectClassInstanceVariable
PUBLIC	??_C@_0L@DDELOHAJ@BlendState?$AA@		; `string'
PUBLIC	??_C@_0BB@GOKJNCIL@RenderTargetView?$AA@	; `string'
PUBLIC	??_C@_0BB@LMDLMKPB@DepthStencilView?$AA@	; `string'
PUBLIC	??_C@_0N@IBEMAACP@GenerateMips?$AA@		; `string'
PUBLIC	??_C@_0N@GMCBJINM@VertexShader?$AA@		; `string'
PUBLIC	??_C@_0M@FCHPCNFJ@PixelShader?$AA@		; `string'
PUBLIC	??_C@_0P@OICECHMN@GeometryShader?$AA@		; `string'
PUBLIC	??_C@_0O@JEENBINA@DS_StencilRef?$AA@		; `string'
PUBLIC	??_C@_0P@CEGHKKMF@AB_BlendFactor?$AA@		; `string'
PUBLIC	??_C@_0O@FIKBICKJ@AB_SampleMask?$AA@		; `string'
PUBLIC	??_C@_08NMIIEEEP@FillMode?$AA@			; `string'
PUBLIC	??_C@_08LNALCFGE@CullMode?$AA@			; `string'
PUBLIC	??_C@_0BG@LHEPJHBL@FrontCounterClockwise?$AA@	; `string'
PUBLIC	??_C@_09OEBKCEKF@DepthBias?$AA@			; `string'
PUBLIC	??_C@_0P@IFJAGLKM@DepthBiasClamp?$AA@		; `string'
PUBLIC	??_C@_0BF@HPDIBKDM@SlopeScaledDepthBias?$AA@	; `string'
PUBLIC	??_C@_0BA@LGNIIPEG@DepthClipEnable?$AA@		; `string'
PUBLIC	??_C@_0O@CMAKKCKB@ScissorEnable?$AA@		; `string'
PUBLIC	??_C@_0BC@MCHLHGON@MultisampleEnable?$AA@	; `string'
PUBLIC	??_C@_0BG@OEFGIGEF@AntialiasedLineEnable?$AA@	; `string'
PUBLIC	??_C@_0M@IGDDNLAN@DepthEnable?$AA@		; `string'
PUBLIC	??_C@_0P@OOBKHNOI@DepthWriteMask?$AA@		; `string'
PUBLIC	??_C@_09EKMLDPCO@DepthFunc?$AA@			; `string'
PUBLIC	??_C@_0O@LIJDBNBF@StencilEnable?$AA@		; `string'
PUBLIC	??_C@_0BA@LEFMBHCL@StencilReadMask?$AA@		; `string'
PUBLIC	??_C@_0BB@LHFJFMDO@StencilWriteMask?$AA@	; `string'
PUBLIC	??_C@_0BF@FOECBGIB@FrontFaceStencilFail?$AA@	; `string'
PUBLIC	??_C@_0BK@POMOKFDB@FrontFaceStencilDepthFail?$AA@ ; `string'
PUBLIC	??_C@_0BF@GNAJFMJL@FrontFaceStencilPass?$AA@	; `string'
PUBLIC	??_C@_0BF@DOONMAD@FrontFaceStencilFunc?$AA@	; `string'
PUBLIC	??_C@_0BE@FOHAIIEL@BackFaceStencilFail?$AA@	; `string'
PUBLIC	??_C@_0BJ@CHBLPCCC@BackFaceStencilDepthFail?$AA@ ; `string'
PUBLIC	??_C@_0BE@GNDLMCFB@BackFaceStencilPass?$AA@	; `string'
PUBLIC	??_C@_0BE@DNMECMJ@BackFaceStencilFunc?$AA@	; `string'
PUBLIC	_IID_ID3DX11EffectTechnique
PUBLIC	??_C@_0BG@COOKFDEE@AlphaToCoverageEnable?$AA@	; `string'
PUBLIC	??_C@_0M@LNIFNHGE@BlendEnable?$AA@		; `string'
PUBLIC	?g_lvGeneralCount@D3DX11Effects@@3IB		; D3DX11Effects::g_lvGeneralCount
PUBLIC	_IID_ID3DX11EffectInterfaceVariable
PUBLIC	_IID_ID3DX11EffectGroup
PUBLIC	_IID_ID3D11ShaderReflectionType
PUBLIC	?g_szEffectLoadArea@D3DX11Effects@@3PBDB	; D3DX11Effects::g_szEffectLoadArea
PUBLIC	??_C@_0BC@GGPPNGNB@D3D11EffectLoader?$AA@	; `string'
PUBLIC	_IID_ID3DX11Effect
PUBLIC	_IID_ID3D11ShaderReflectionVariable
PUBLIC	?g_vtPS@D3DX11Effects@@3USD3DShaderVTable@1@A	; D3DX11Effects::g_vtPS
PUBLIC	??_9ID3D11DeviceContext@@$BCE@AG		; ID3D11DeviceContext::`vcall'{36}'
PUBLIC	??_9ID3D11DeviceContext@@$BEA@AG		; ID3D11DeviceContext::`vcall'{64}'
PUBLIC	??_9ID3D11DeviceContext@@$BCI@AG		; ID3D11DeviceContext::`vcall'{40}'
PUBLIC	??_9ID3D11DeviceContext@@$BCA@AG		; ID3D11DeviceContext::`vcall'{32}'
PUBLIC	??_9ID3D11Device@@$BDM@AG			; ID3D11Device::`vcall'{60}'
PUBLIC	?g_vtVS@D3DX11Effects@@3USD3DShaderVTable@1@A	; D3DX11Effects::g_vtVS
PUBLIC	_IID_ID3D11ShaderReflectionConstantBuffer
PUBLIC	??_9ID3D11DeviceContext@@$BCM@AG		; ID3D11DeviceContext::`vcall'{44}'
PUBLIC	??_9ID3D11DeviceContext@@$BBM@AG		; ID3D11DeviceContext::`vcall'{28}'
PUBLIC	??_9ID3D11DeviceContext@@$BGI@AG		; ID3D11DeviceContext::`vcall'{104}'
PUBLIC	_IID_ID3DX11EffectShaderResourceVariable
PUBLIC	??_9ID3D11DeviceContext@@$BGE@AG		; ID3D11DeviceContext::`vcall'{100}'
PUBLIC	??_9ID3D11Device@@$BDA@AG			; ID3D11Device::`vcall'{48}'
PUBLIC	?g_vtGS@D3DX11Effects@@3USD3DShaderVTable@1@A	; D3DX11Effects::g_vtGS
PUBLIC	_IID_ID3D11ShaderReflection
PUBLIC	??_9ID3D11DeviceContext@@$BFM@AG		; ID3D11DeviceContext::`vcall'{92}'
PUBLIC	??_9ID3D11DeviceContext@@$BFI@AG		; ID3D11DeviceContext::`vcall'{88}'
PUBLIC	??_9ID3D11DeviceContext@@$BIA@AG		; ID3D11DeviceContext::`vcall'{128}'
PUBLIC	??_9ID3D11DeviceContext@@$BHM@AG		; ID3D11DeviceContext::`vcall'{124}'
PUBLIC	??_9ID3D11Device@@$BDE@AG			; ID3D11Device::`vcall'{52}'
PUBLIC	?g_vtHS@D3DX11Effects@@3USD3DShaderVTable@1@A	; D3DX11Effects::g_vtHS
PUBLIC	??_9ID3D11DeviceContext@@$BPA@AG		; ID3D11DeviceContext::`vcall'{240}'
PUBLIC	??_9ID3D11DeviceContext@@$BPI@AG		; ID3D11DeviceContext::`vcall'{248}'
PUBLIC	??_9ID3D11DeviceContext@@$BPE@AG		; ID3D11DeviceContext::`vcall'{244}'
PUBLIC	??_9ID3D11DeviceContext@@$BOM@AG		; ID3D11DeviceContext::`vcall'{236}'
PUBLIC	?g_vtDS@D3DX11Effects@@3USD3DShaderVTable@1@A	; D3DX11Effects::g_vtDS
PUBLIC	??_9ID3D11DeviceContext@@$BBAA@AG		; ID3D11DeviceContext::`vcall'{256}'
PUBLIC	??_9ID3D11DeviceContext@@$BBAI@AG		; ID3D11DeviceContext::`vcall'{264}'
PUBLIC	??_9ID3D11DeviceContext@@$BBAE@AG		; ID3D11DeviceContext::`vcall'{260}'
PUBLIC	??_9ID3D11DeviceContext@@$BPM@AG		; ID3D11DeviceContext::`vcall'{252}'
PUBLIC	??_9ID3D11Device@@$BEE@AG			; ID3D11Device::`vcall'{68}'
PUBLIC	?g_vtCS@D3DX11Effects@@3USD3DShaderVTable@1@A	; D3DX11Effects::g_vtCS
PUBLIC	??_9ID3D11DeviceContext@@$BBBE@AG		; ID3D11DeviceContext::`vcall'{276}'
PUBLIC	??_9ID3D11DeviceContext@@$BBBM@AG		; ID3D11DeviceContext::`vcall'{284}'
PUBLIC	??_9ID3D11DeviceContext@@$BBBI@AG		; ID3D11DeviceContext::`vcall'{280}'
PUBLIC	??_9ID3D11DeviceContext@@$BBAM@AG		; ID3D11DeviceContext::`vcall'{268}'
PUBLIC	??_9ID3D11Device@@$BEI@AG			; ID3D11Device::`vcall'{72}'
PUBLIC	_IID_ID3D11LibraryReflection
PUBLIC	_IID_ID3DX11EffectUnorderedAccessViewVariable
PUBLIC	_IID_ID3D11FunctionReflection
PUBLIC	_IID_ID3D11FunctionParameterReflection
PUBLIC	_IID_ID3D11Module
PUBLIC	??_C@_06BACILOGA@fx_4_0?$AA@			; `string'
PUBLIC	??_C@_06JDDIPCB@fx_4_1?$AA@			; `string'
PUBLIC	??_C@_06KIJENJAF@fx_5_0?$AA@			; `string'
PUBLIC	_IID_ID3D11ModuleInstance
PUBLIC	_IID_ID3DX11EffectRenderTargetViewVariable
PUBLIC	_IID_ID3D11Linker
PUBLIC	_IID_ID3D11LinkingNode
PUBLIC	_IID_ID3DX11EffectDepthStencilViewVariable
PUBLIC	_IID_ID3D11FunctionLinkingGraph
PUBLIC	_IID_ID3DX11EffectConstantBuffer
PUBLIC	_IID_ID3DX11EffectType
PUBLIC	?c_IsTBuffer@SBinaryConstantBuffer@D3DX11Effects@@2IB ; D3DX11Effects::SBinaryConstantBuffer::c_IsTBuffer
PUBLIC	?c_IsSingle@SBinaryConstantBuffer@D3DX11Effects@@2IB ; D3DX11Effects::SBinaryConstantBuffer::c_IsSingle
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	_IID_ID3DX11EffectVariable
PUBLIC	_IID_ID3DX11EffectShaderVariable
PUBLIC	??_C@_04HIBGFPH@NULL?$AA@			; `string'
PUBLIC	??_C@_05MAJJAKPI@FALSE?$AA@			; `string'
PUBLIC	??_C@_04HCDDPBNL@TRUE?$AA@			; `string'
PUBLIC	??_C@_04PPGNNOJD@ZERO?$AA@			; `string'
PUBLIC	??_C@_03NIFPGLBG@ALL?$AA@			; `string'
PUBLIC	??_C@_09HJIKPONA@WIREFRAME?$AA@			; `string'
PUBLIC	??_C@_05CEBIDAFG@SOLID?$AA@			; `string'
PUBLIC	_IID_ID3DX11EffectScalarVariable
PUBLIC	??_C@_0BC@NBGEKGB@MIN_MAG_MIP_POINT?$AA@	; `string'
PUBLIC	??_C@_0BJ@FHHFFPEN@MIN_MAG_POINT_MIP_LINEAR?$AA@ ; `string'
PUBLIC	??_C@_0BP@GPKFBPIB@MIN_POINT_MAG_LINEAR_MIP_POINT?$AA@ ; `string'
PUBLIC	??_C@_0BJ@LIDOHGCK@MIN_POINT_MAG_MIP_LINEAR?$AA@ ; `string'
;	COMDAT ??_C@_0BJ@LIDOHGCK@MIN_POINT_MAG_MIP_LINEAR?$AA@
CONST	SEGMENT
??_C@_0BJ@LIDOHGCK@MIN_POINT_MAG_MIP_LINEAR?$AA@ DB 'MIN_POINT_MAG_MIP_LI'
	DB	'NEAR', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GPKFBPIB@MIN_POINT_MAG_LINEAR_MIP_POINT?$AA@
CONST	SEGMENT
??_C@_0BP@GPKFBPIB@MIN_POINT_MAG_LINEAR_MIP_POINT?$AA@ DB 'MIN_POINT_MAG_'
	DB	'LINEAR_MIP_POINT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FHHFFPEN@MIN_MAG_POINT_MIP_LINEAR?$AA@
CONST	SEGMENT
??_C@_0BJ@FHHFFPEN@MIN_MAG_POINT_MIP_LINEAR?$AA@ DB 'MIN_MAG_POINT_MIP_LI'
	DB	'NEAR', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NBGEKGB@MIN_MAG_MIP_POINT?$AA@
CONST	SEGMENT
??_C@_0BC@NBGEKGB@MIN_MAG_MIP_POINT?$AA@ DB 'MIN_MAG_MIP_POINT', 00H ; `string'
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectScalarVariable
CONST	SEGMENT
_IID_ID3DX11EffectScalarVariable DD 0921ef2e5H
	DW	0a65dH
	DW	04e92H
	DB	09fH
	DB	0c6H
	DB	04eH
	DB	09cH
	DB	0c0H
	DB	09aH
	DB	04aH
	DB	0deH
CONST	ENDS
;	COMDAT ??_C@_05CEBIDAFG@SOLID?$AA@
CONST	SEGMENT
??_C@_05CEBIDAFG@SOLID?$AA@ DB 'SOLID', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09HJIKPONA@WIREFRAME?$AA@
CONST	SEGMENT
??_C@_09HJIKPONA@WIREFRAME?$AA@ DB 'WIREFRAME', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03NIFPGLBG@ALL?$AA@
CONST	SEGMENT
??_C@_03NIFPGLBG@ALL?$AA@ DB 'ALL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PPGNNOJD@ZERO?$AA@
CONST	SEGMENT
??_C@_04PPGNNOJD@ZERO?$AA@ DB 'ZERO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HCDDPBNL@TRUE?$AA@
CONST	SEGMENT
??_C@_04HCDDPBNL@TRUE?$AA@ DB 'TRUE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MAJJAKPI@FALSE?$AA@
CONST	SEGMENT
??_C@_05MAJJAKPI@FALSE?$AA@ DB 'FALSE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HIBGFPH@NULL?$AA@
CONST	SEGMENT
??_C@_04HIBGFPH@NULL?$AA@ DB 'NULL', 00H		; `string'
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectShaderVariable
CONST	SEGMENT
_IID_ID3DX11EffectShaderVariable DD 07508b344H
	DW	020aH
	DW	04ec7H
	DB	091H
	DB	018H
	DB	062H
	DB	0cdH
	DB	0d3H
	DB	06cH
	DB	088H
	DB	0d7H
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectVariable
CONST	SEGMENT
_IID_ID3DX11EffectVariable DD 036a777dH
	DW	0b56eH
	DW	04b25H
	DB	0b3H
	DB	013H
	DB	0ccH
	DB	03dH
	DB	0daH
	DB	0b7H
	DB	018H
	DB	073H
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?c_IsSingle@SBinaryConstantBuffer@D3DX11Effects@@2IB
CONST	SEGMENT
?c_IsSingle@SBinaryConstantBuffer@D3DX11Effects@@2IB DD 02H ; D3DX11Effects::SBinaryConstantBuffer::c_IsSingle
CONST	ENDS
;	COMDAT ?c_IsTBuffer@SBinaryConstantBuffer@D3DX11Effects@@2IB
CONST	SEGMENT
?c_IsTBuffer@SBinaryConstantBuffer@D3DX11Effects@@2IB DD 01H ; D3DX11Effects::SBinaryConstantBuffer::c_IsTBuffer
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectType
CONST	SEGMENT
_IID_ID3DX11EffectType DD 04250d721H
	DW	0d5e5H
	DW	0491fH
	DB	0b6H
	DB	02bH
	DB	058H
	DB	07cH
	DB	043H
	DB	018H
	DB	062H
	DB	085H
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectConstantBuffer
CONST	SEGMENT
_IID_ID3DX11EffectConstantBuffer DD 02cb6c733H
	DW	082d2H
	DW	04000H
	DB	0b3H
	DB	0daH
	DB	062H
	DB	019H
	DB	0d9H
	DB	0a9H
	DB	09bH
	DB	0f2H
CONST	ENDS
;	COMDAT _IID_ID3D11FunctionLinkingGraph
CONST	SEGMENT
_IID_ID3D11FunctionLinkingGraph DD 054133220H
	DW	01ce8H
	DW	043d3H
	DB	082H
	DB	036H
	DB	098H
	DB	055H
	DB	0c5H
	DB	0ceH
	DB	0ecH
	DB	0ffH
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectDepthStencilViewVariable
CONST	SEGMENT
_IID_ID3DX11EffectDepthStencilViewVariable DD 033c648acH
	DW	02e9eH
	DW	04a2eH
	DB	09cH
	DB	0d6H
	DB	0deH
	DB	031H
	DB	0acH
	DB	0c5H
	DB	0b3H
	DB	047H
CONST	ENDS
;	COMDAT _IID_ID3D11LinkingNode
CONST	SEGMENT
_IID_ID3D11LinkingNode DD 0d80dd70cH
	DW	08d2fH
	DW	04751H
	DB	094H
	DB	0a1H
	DB	03H
	DB	0c7H
	DB	09bH
	DB	035H
	DB	056H
	DB	0dbH
CONST	ENDS
;	COMDAT _IID_ID3D11Linker
CONST	SEGMENT
_IID_ID3D11Linker DD 059a6cd0eH
	DW	0e10dH
	DW	04c1fH
	DB	088H
	DB	0c0H
	DB	063H
	DB	0abH
	DB	0a1H
	DB	0daH
	DB	0f3H
	DB	0eH
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectRenderTargetViewVariable
CONST	SEGMENT
_IID_ID3DX11EffectRenderTargetViewVariable DD 0d5066909H
	DW	0f40cH
	DW	043f8H
	DB	09dH
	DB	0b5H
	DB	05H
	DB	07cH
	DB	02aH
	DB	020H
	DB	085H
	DB	052H
CONST	ENDS
;	COMDAT _IID_ID3D11ModuleInstance
CONST	SEGMENT
_IID_ID3D11ModuleInstance DD 0469e07f7H
	DW	045aH
	DW	048d5H
	DB	0aaH
	DB	012H
	DB	068H
	DB	0a4H
	DB	078H
	DB	0cdH
	DB	0f7H
	DB	05dH
CONST	ENDS
;	COMDAT ??_C@_06KIJENJAF@fx_5_0?$AA@
CONST	SEGMENT
??_C@_06KIJENJAF@fx_5_0?$AA@ DB 'fx_5_0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JDDIPCB@fx_4_1?$AA@
CONST	SEGMENT
??_C@_06JDDIPCB@fx_4_1?$AA@ DB 'fx_4_1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BACILOGA@fx_4_0?$AA@
CONST	SEGMENT
??_C@_06BACILOGA@fx_4_0?$AA@ DB 'fx_4_0', 00H		; `string'
CONST	ENDS
;	COMDAT _IID_ID3D11Module
CONST	SEGMENT
_IID_ID3D11Module DD 0cac701eeH
	DW	080fcH
	DW	04122H
	DB	082H
	DB	042H
	DB	010H
	DB	0b3H
	DB	09cH
	DB	08cH
	DB	0ecH
	DB	034H
CONST	ENDS
;	COMDAT _IID_ID3D11FunctionParameterReflection
CONST	SEGMENT
_IID_ID3D11FunctionParameterReflection DD 042757488H
	DW	0334fH
	DW	047feH
	DB	098H
	DB	02eH
	DB	01aH
	DB	065H
	DB	0d0H
	DB	08cH
	DB	0c4H
	DB	062H
CONST	ENDS
;	COMDAT _IID_ID3D11FunctionReflection
CONST	SEGMENT
_IID_ID3D11FunctionReflection DD 0207bcecbH
	DW	0d683H
	DW	04a06H
	DB	0a8H
	DB	0a3H
	DB	09bH
	DB	014H
	DB	09bH
	DB	09fH
	DB	073H
	DB	0a4H
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectUnorderedAccessViewVariable
CONST	SEGMENT
_IID_ID3DX11EffectUnorderedAccessViewVariable DD 079b4ac8cH
	DW	0870aH
	DW	047d2H
	DB	0b0H
	DB	05aH
	DB	08bH
	DB	0d5H
	DB	0ccH
	DB	03eH
	DB	0e6H
	DB	0c9H
CONST	ENDS
;	COMDAT _IID_ID3D11LibraryReflection
CONST	SEGMENT
_IID_ID3D11LibraryReflection DD 054384f1bH
	DW	05b3eH
	DW	04bb7H
	DB	0aeH
	DB	01H
	DB	060H
	DB	0baH
	DB	030H
	DB	097H
	DB	0cbH
	DB	0b6H
CONST	ENDS
;	COMDAT _IID_ID3D11ShaderReflection
CONST	SEGMENT
_IID_ID3D11ShaderReflection DD 08d536ca1H
	DW	0ccaH
	DW	04956H
	DB	0a8H
	DB	037H
	DB	078H
	DB	069H
	DB	063H
	DB	075H
	DB	055H
	DB	084H
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectShaderResourceVariable
CONST	SEGMENT
_IID_ID3DX11EffectShaderResourceVariable DD 0350db233H
	DW	0bbe0H
	DW	0485cH
	DB	09bH
	DB	0feH
	DB	0c0H
	DB	02H
	DB	06bH
	DB	084H
	DB	04fH
	DB	089H
CONST	ENDS
;	COMDAT _IID_ID3D11ShaderReflectionConstantBuffer
CONST	SEGMENT
_IID_ID3D11ShaderReflectionConstantBuffer DD 0eb62d63dH
	DW	093ddH
	DW	04318H
	DB	08aH
	DB	0e8H
	DB	0c6H
	DB	0f8H
	DB	03aH
	DB	0d3H
	DB	071H
	DB	0b8H
CONST	ENDS
;	COMDAT _IID_ID3D11ShaderReflectionVariable
CONST	SEGMENT
_IID_ID3D11ShaderReflectionVariable DD 051f23923H
	DW	0f3e5H
	DW	04bd1H
	DB	091H
	DB	0cbH
	DB	060H
	DB	061H
	DB	077H
	DB	0d8H
	DB	0dbH
	DB	04cH
CONST	ENDS
;	COMDAT _IID_ID3DX11Effect
CONST	SEGMENT
_IID_ID3DX11Effect DD 0fa61ca24H
	DW	0e4baH
	DW	04262H
	DB	09dH
	DB	0b8H
	DB	0b1H
	DB	032H
	DB	0e8H
	DB	0caH
	DB	0e3H
	DB	019H
CONST	ENDS
;	COMDAT ??_C@_0BC@GGPPNGNB@D3D11EffectLoader?$AA@
CONST	SEGMENT
??_C@_0BC@GGPPNGNB@D3D11EffectLoader?$AA@ DB 'D3D11EffectLoader', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?g_szEffectLoadArea@D3DX11Effects@@3PBDB DD FLAT:??_C@_0BC@GGPPNGNB@D3D11EffectLoader?$AA@ ; D3DX11Effects::g_szEffectLoadArea
?g_vtPS@D3DX11Effects@@3USD3DShaderVTable@1@A DD FLAT:??_9ID3D11DeviceContext@@$BCE@AG ; D3DX11Effects::g_vtPS
	DD	FLAT:??_9ID3D11DeviceContext@@$BEA@AG
	DD	FLAT:??_9ID3D11DeviceContext@@$BCI@AG
	DD	FLAT:??_9ID3D11DeviceContext@@$BCA@AG
	DD	FLAT:??_9ID3D11Device@@$BDM@AG
?g_vtVS@D3DX11Effects@@3USD3DShaderVTable@1@A DD FLAT:??_9ID3D11DeviceContext@@$BCM@AG ; D3DX11Effects::g_vtVS
	DD	FLAT:??_9ID3D11DeviceContext@@$BBM@AG
	DD	FLAT:??_9ID3D11DeviceContext@@$BGI@AG
	DD	FLAT:??_9ID3D11DeviceContext@@$BGE@AG
	DD	FLAT:??_9ID3D11Device@@$BDA@AG
?g_vtGS@D3DX11Effects@@3USD3DShaderVTable@1@A DD FLAT:??_9ID3D11DeviceContext@@$BFM@AG ; D3DX11Effects::g_vtGS
	DD	FLAT:??_9ID3D11DeviceContext@@$BFI@AG
	DD	FLAT:??_9ID3D11DeviceContext@@$BIA@AG
	DD	FLAT:??_9ID3D11DeviceContext@@$BHM@AG
	DD	FLAT:??_9ID3D11Device@@$BDE@AG
?g_vtHS@D3DX11Effects@@3USD3DShaderVTable@1@A DD FLAT:??_9ID3D11DeviceContext@@$BPA@AG ; D3DX11Effects::g_vtHS
	DD	FLAT:??_9ID3D11DeviceContext@@$BPI@AG
	DD	FLAT:??_9ID3D11DeviceContext@@$BPE@AG
	DD	FLAT:??_9ID3D11DeviceContext@@$BOM@AG
	DD	FLAT:??_9ID3D11DeviceContext@@$BEA@AG
?g_vtDS@D3DX11Effects@@3USD3DShaderVTable@1@A DD FLAT:??_9ID3D11DeviceContext@@$BBAA@AG ; D3DX11Effects::g_vtDS
	DD	FLAT:??_9ID3D11DeviceContext@@$BBAI@AG
	DD	FLAT:??_9ID3D11DeviceContext@@$BBAE@AG
	DD	FLAT:??_9ID3D11DeviceContext@@$BPM@AG
	DD	FLAT:??_9ID3D11Device@@$BEE@AG
?g_vtCS@D3DX11Effects@@3USD3DShaderVTable@1@A DD FLAT:??_9ID3D11DeviceContext@@$BBBE@AG ; D3DX11Effects::g_vtCS
	DD	FLAT:??_9ID3D11DeviceContext@@$BBBM@AG
	DD	FLAT:??_9ID3D11DeviceContext@@$BBBI@AG
	DD	FLAT:??_9ID3D11DeviceContext@@$BBAM@AG
	DD	FLAT:??_9ID3D11Device@@$BEI@AG
_DATA	ENDS
;	COMDAT _IID_ID3D11ShaderReflectionType
CONST	SEGMENT
_IID_ID3D11ShaderReflectionType DD 06e6ffa6aH
	DW	09baeH
	DW	04613H
	DB	0a5H
	DB	01eH
	DB	091H
	DB	065H
	DB	02dH
	DB	050H
	DB	08cH
	DB	021H
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectGroup
CONST	SEGMENT
_IID_ID3DX11EffectGroup DD 03074acfH
	DW	097deH
	DW	0485fH
	DB	0b2H
	DB	01H
	DB	0cbH
	DB	077H
	DB	052H
	DB	064H
	DB	0afH
	DB	0d6H
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectInterfaceVariable
CONST	SEGMENT
_IID_ID3DX11EffectInterfaceVariable DD 0516c8cd8H
	DW	01c80H
	DW	040a4H
	DB	0b1H
	DB	09bH
	DB	06H
	DB	088H
	DB	079H
	DB	02fH
	DB	011H
	DB	0a5H
CONST	ENDS
;	COMDAT ??_C@_0M@LNIFNHGE@BlendEnable?$AA@
CONST	SEGMENT
??_C@_0M@LNIFNHGE@BlendEnable?$AA@ DB 'BlendEnable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@COOKFDEE@AlphaToCoverageEnable?$AA@
CONST	SEGMENT
??_C@_0BG@COOKFDEE@AlphaToCoverageEnable?$AA@ DB 'AlphaToCoverageEnable', 00H ; `string'
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectTechnique
CONST	SEGMENT
_IID_ID3DX11EffectTechnique DD 051198831H
	DW	01f1dH
	DW	04f47H
	DB	0bdH
	DB	076H
	DB	041H
	DB	0cbH
	DB	08H
	DB	035H
	DB	0b1H
	DB	0deH
CONST	ENDS
;	COMDAT ??_C@_0BE@DNMECMJ@BackFaceStencilFunc?$AA@
CONST	SEGMENT
??_C@_0BE@DNMECMJ@BackFaceStencilFunc?$AA@ DB 'BackFaceStencilFunc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GNDLMCFB@BackFaceStencilPass?$AA@
CONST	SEGMENT
??_C@_0BE@GNDLMCFB@BackFaceStencilPass?$AA@ DB 'BackFaceStencilPass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CHBLPCCC@BackFaceStencilDepthFail?$AA@
CONST	SEGMENT
??_C@_0BJ@CHBLPCCC@BackFaceStencilDepthFail?$AA@ DB 'BackFaceStencilDepth'
	DB	'Fail', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FOHAIIEL@BackFaceStencilFail?$AA@
CONST	SEGMENT
??_C@_0BE@FOHAIIEL@BackFaceStencilFail?$AA@ DB 'BackFaceStencilFail', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DOONMAD@FrontFaceStencilFunc?$AA@
CONST	SEGMENT
??_C@_0BF@DOONMAD@FrontFaceStencilFunc?$AA@ DB 'FrontFaceStencilFunc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GNAJFMJL@FrontFaceStencilPass?$AA@
CONST	SEGMENT
??_C@_0BF@GNAJFMJL@FrontFaceStencilPass?$AA@ DB 'FrontFaceStencilPass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@POMOKFDB@FrontFaceStencilDepthFail?$AA@
CONST	SEGMENT
??_C@_0BK@POMOKFDB@FrontFaceStencilDepthFail?$AA@ DB 'FrontFaceStencilDep'
	DB	'thFail', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FOECBGIB@FrontFaceStencilFail?$AA@
CONST	SEGMENT
??_C@_0BF@FOECBGIB@FrontFaceStencilFail?$AA@ DB 'FrontFaceStencilFail', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LHFJFMDO@StencilWriteMask?$AA@
CONST	SEGMENT
??_C@_0BB@LHFJFMDO@StencilWriteMask?$AA@ DB 'StencilWriteMask', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LEFMBHCL@StencilReadMask?$AA@
CONST	SEGMENT
??_C@_0BA@LEFMBHCL@StencilReadMask?$AA@ DB 'StencilReadMask', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LIJDBNBF@StencilEnable?$AA@
CONST	SEGMENT
??_C@_0O@LIJDBNBF@StencilEnable?$AA@ DB 'StencilEnable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09EKMLDPCO@DepthFunc?$AA@
CONST	SEGMENT
??_C@_09EKMLDPCO@DepthFunc?$AA@ DB 'DepthFunc', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OOBKHNOI@DepthWriteMask?$AA@
CONST	SEGMENT
??_C@_0P@OOBKHNOI@DepthWriteMask?$AA@ DB 'DepthWriteMask', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IGDDNLAN@DepthEnable?$AA@
CONST	SEGMENT
??_C@_0M@IGDDNLAN@DepthEnable?$AA@ DB 'DepthEnable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OEFGIGEF@AntialiasedLineEnable?$AA@
CONST	SEGMENT
??_C@_0BG@OEFGIGEF@AntialiasedLineEnable?$AA@ DB 'AntialiasedLineEnable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MCHLHGON@MultisampleEnable?$AA@
CONST	SEGMENT
??_C@_0BC@MCHLHGON@MultisampleEnable?$AA@ DB 'MultisampleEnable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CMAKKCKB@ScissorEnable?$AA@
CONST	SEGMENT
??_C@_0O@CMAKKCKB@ScissorEnable?$AA@ DB 'ScissorEnable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LGNIIPEG@DepthClipEnable?$AA@
CONST	SEGMENT
??_C@_0BA@LGNIIPEG@DepthClipEnable?$AA@ DB 'DepthClipEnable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HPDIBKDM@SlopeScaledDepthBias?$AA@
CONST	SEGMENT
??_C@_0BF@HPDIBKDM@SlopeScaledDepthBias?$AA@ DB 'SlopeScaledDepthBias', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IFJAGLKM@DepthBiasClamp?$AA@
CONST	SEGMENT
??_C@_0P@IFJAGLKM@DepthBiasClamp?$AA@ DB 'DepthBiasClamp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OEBKCEKF@DepthBias?$AA@
CONST	SEGMENT
??_C@_09OEBKCEKF@DepthBias?$AA@ DB 'DepthBias', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LHEPJHBL@FrontCounterClockwise?$AA@
CONST	SEGMENT
??_C@_0BG@LHEPJHBL@FrontCounterClockwise?$AA@ DB 'FrontCounterClockwise', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LNALCFGE@CullMode?$AA@
CONST	SEGMENT
??_C@_08LNALCFGE@CullMode?$AA@ DB 'CullMode', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08NMIIEEEP@FillMode?$AA@
CONST	SEGMENT
??_C@_08NMIIEEEP@FillMode?$AA@ DB 'FillMode', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FIKBICKJ@AB_SampleMask?$AA@
CONST	SEGMENT
??_C@_0O@FIKBICKJ@AB_SampleMask?$AA@ DB 'AB_SampleMask', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CEGHKKMF@AB_BlendFactor?$AA@
CONST	SEGMENT
??_C@_0P@CEGHKKMF@AB_BlendFactor?$AA@ DB 'AB_BlendFactor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JEENBINA@DS_StencilRef?$AA@
CONST	SEGMENT
??_C@_0O@JEENBINA@DS_StencilRef?$AA@ DB 'DS_StencilRef', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@OICECHMN@GeometryShader?$AA@
CONST	SEGMENT
??_C@_0P@OICECHMN@GeometryShader?$AA@ DB 'GeometryShader', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FCHPCNFJ@PixelShader?$AA@
CONST	SEGMENT
??_C@_0M@FCHPCNFJ@PixelShader?$AA@ DB 'PixelShader', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GMCBJINM@VertexShader?$AA@
CONST	SEGMENT
??_C@_0N@GMCBJINM@VertexShader?$AA@ DB 'VertexShader', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IBEMAACP@GenerateMips?$AA@
CONST	SEGMENT
??_C@_0N@IBEMAACP@GenerateMips?$AA@ DB 'GenerateMips', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LMDLMKPB@DepthStencilView?$AA@
CONST	SEGMENT
??_C@_0BB@LMDLMKPB@DepthStencilView?$AA@ DB 'DepthStencilView', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GOKJNCIL@RenderTargetView?$AA@
CONST	SEGMENT
??_C@_0BB@GOKJNCIL@RenderTargetView?$AA@ DB 'RenderTargetView', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DDELOHAJ@BlendState?$AA@
CONST	SEGMENT
??_C@_0L@DDELOHAJ@BlendState?$AA@ DB 'BlendState', 00H	; `string'
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectClassInstanceVariable
CONST	SEGMENT
_IID_ID3DX11EffectClassInstanceVariable DD 0926a8053H
	DW	02a39H
	DW	04db4H
	DB	09bH
	DB	0deH
	DB	0cfH
	DB	064H
	DB	09aH
	DB	0deH
	DB	0bdH
	DB	0c1H
CONST	ENDS
;	COMDAT ??_C@_0BC@JHBFINCM@DepthStencilState?$AA@
CONST	SEGMENT
??_C@_0BC@JHBFINCM@DepthStencilState?$AA@ DB 'DepthStencilState', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LIKHENHC@RasterizerState?$AA@
CONST	SEGMENT
??_C@_0BA@LIKHENHC@RasterizerState?$AA@ DB 'RasterizerState', 00H ; `string'
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectPass
CONST	SEGMENT
_IID_ID3DX11EffectPass DD 03437cec4H
	DW	04ac1H
	DW	04d87H
	DB	089H
	DB	016H
	DB	0f4H
	DB	0bdH
	DB	05aH
	DB	041H
	DB	038H
	DB	0cH
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectStringVariable
CONST	SEGMENT
_IID_ID3DX11EffectStringVariable DD 0f355c818H
	DW	01beH
	DW	04653H
	DB	0a7H
	DB	0ccH
	DB	060H
	DB	0ffH
	DB	0feH
	DB	0ddH
	DB	0c7H
	DB	06dH
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectSamplerVariable
CONST	SEGMENT
_IID_ID3DX11EffectSamplerVariable DD 0c6402e55H
	DW	01095H
	DW	04d95H
	DB	089H
	DB	031H
	DB	0f9H
	DB	026H
	DB	060H
	DB	051H
	DB	03dH
	DB	0d9H
CONST	ENDS
;	COMDAT ?c_RegisterSize@SType@D3DX11Effects@@2IB
CONST	SEGMENT
?c_RegisterSize@SType@D3DX11Effects@@2IB DD 010H	; D3DX11Effects::SType::c_RegisterSize
CONST	ENDS
;	COMDAT ?c_ScalarsPerRegister@SType@D3DX11Effects@@2IB
CONST	SEGMENT
?c_ScalarsPerRegister@SType@D3DX11Effects@@2IB DD 04H	; D3DX11Effects::SType::c_ScalarsPerRegister
CONST	ENDS
;	COMDAT ?c_ScalarSize@SType@D3DX11Effects@@2IB
CONST	SEGMENT
?c_ScalarSize@SType@D3DX11Effects@@2IB DD 04H		; D3DX11Effects::SType::c_ScalarSize
CONST	ENDS
;	COMDAT ?c_InvalidIndex@SType@D3DX11Effects@@2IB
CONST	SEGMENT
?c_InvalidIndex@SType@D3DX11Effects@@2IB DD 0ffffffffH	; D3DX11Effects::SType::c_InvalidIndex
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectMatrixVariable
CONST	SEGMENT
_IID_ID3DX11EffectMatrixVariable DD 0e1096cf4H
	DW	0c027H
	DW	0419aH
	DB	08dH
	DB	086H
	DB	0d2H
	DB	091H
	DB	073H
	DB	0dcH
	DB	080H
	DB	03eH
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectRasterizerVariable
CONST	SEGMENT
_IID_ID3DX11EffectRasterizerVariable DD 053a262f6H
	DW	05f74H
	DW	04151H
	DB	0a1H
	DB	032H
	DB	0e3H
	DB	0ddH
	DB	019H
	DB	0a6H
	DB	02cH
	DB	09dH
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectVectorVariable
CONST	SEGMENT
_IID_ID3DX11EffectVectorVariable DD 05e785d4aH
	DW	0d87bH
	DW	048d8H
	DB	0b6H
	DB	0e6H
	DB	0fH
	DB	08cH
	DB	0a7H
	DB	0e7H
	DB	046H
	DB	07aH
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectDepthStencilVariable
CONST	SEGMENT
_IID_ID3DX11EffectDepthStencilVariable DD 069b5751bH
	DW	061a5H
	DW	048e5H
	DB	0bdH
	DB	041H
	DB	0d9H
	DB	039H
	DB	088H
	DB	011H
	DB	015H
	DB	063H
CONST	ENDS
;	COMDAT ??_C@_03LEPPJAKI@MAX?$AA@
CONST	SEGMENT
??_C@_03LEPPJAKI@MAX?$AA@ DB 'MAX', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KGHEHEMH@MIN?$AA@
CONST	SEGMENT
??_C@_03KGHEHEMH@MIN?$AA@ DB 'MIN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DGGLJHJP@REV_SUBTRACT?$AA@
CONST	SEGMENT
??_C@_0N@DGGLJHJP@REV_SUBTRACT?$AA@ DB 'REV_SUBTRACT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08MGBEENML@SUBTRACT?$AA@
CONST	SEGMENT
??_C@_08MGBEENML@SUBTRACT?$AA@ DB 'SUBTRACT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03BOJFLAKG@ADD?$AA@
CONST	SEGMENT
??_C@_03BOJFLAKG@ADD?$AA@ DB 'ADD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MCDFFCCL@DECR?$AA@
CONST	SEGMENT
??_C@_04MCDFFCCL@DECR?$AA@ DB 'DECR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04ONKEBBJL@INCR?$AA@
CONST	SEGMENT
??_C@_04ONKEBBJL@INCR?$AA@ DB 'INCR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CMCEILNN@INVERT?$AA@
CONST	SEGMENT
??_C@_06CMCEILNN@INVERT?$AA@ DB 'INVERT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DCEDEDK@DECR_SAT?$AA@
CONST	SEGMENT
??_C@_08DCEDEDK@DECR_SAT?$AA@ DB 'DECR_SAT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KPABMPDL@INCR_SAT?$AA@
CONST	SEGMENT
??_C@_08KPABMPDL@INCR_SAT?$AA@ DB 'INCR_SAT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07NGBKIEMN@REPLACE?$AA@
CONST	SEGMENT
??_C@_07NGBKIEMN@REPLACE?$AA@ DB 'REPLACE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HGNONLMK@KEEP?$AA@
CONST	SEGMENT
??_C@_04HGNONLMK@KEEP?$AA@ DB 'KEEP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KDBFKDHA@ALWAYS?$AA@
CONST	SEGMENT
??_C@_06KDBFKDHA@ALWAYS?$AA@ DB 'ALWAYS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LBCFDHKJ@GREATER_EQUAL?$AA@
CONST	SEGMENT
??_C@_0O@LBCFDHKJ@GREATER_EQUAL?$AA@ DB 'GREATER_EQUAL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BCHNGNOE@NOT_EQUAL?$AA@
CONST	SEGMENT
??_C@_09BCHNGNOE@NOT_EQUAL?$AA@ DB 'NOT_EQUAL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07INHKBBNC@GREATER?$AA@
CONST	SEGMENT
??_C@_07INHKBBNC@GREATER?$AA@ DB 'GREATER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@POPDHMNN@LESS_EQUAL?$AA@
CONST	SEGMENT
??_C@_0L@POPDHMNN@LESS_EQUAL?$AA@ DB 'LESS_EQUAL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MFJMDLJG@EQUAL?$AA@
CONST	SEGMENT
??_C@_05MFJMDLJG@EQUAL?$AA@ DB 'EQUAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PHHIILNL@LESS?$AA@
CONST	SEGMENT
??_C@_04PHHIILNL@LESS?$AA@ DB 'LESS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PLMGMCPK@NEVER?$AA@
CONST	SEGMENT
??_C@_05PLMGMCPK@NEVER?$AA@ DB 'NEVER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FJBHJJME@BACK?$AA@
CONST	SEGMENT
??_C@_04FJBHJJME@BACK?$AA@ DB 'BACK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LCELFLHH@FRONT?$AA@
CONST	SEGMENT
??_C@_05LCELFLHH@FRONT?$AA@ DB 'FRONT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OKGDLNCL@NONE?$AA@
CONST	SEGMENT
??_C@_04OKGDLNCL@NONE?$AA@ DB 'NONE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IBDDGNND@MIRROR_ONCE?$AA@
CONST	SEGMENT
??_C@_0M@IBDDGNND@MIRROR_ONCE?$AA@ DB 'MIRROR_ONCE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06OHHANPFE@BORDER?$AA@
CONST	SEGMENT
??_C@_06OHHANPFE@BORDER?$AA@ DB 'BORDER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LPIEMBDF@MIRROR?$AA@
CONST	SEGMENT
??_C@_06LPIEMBDF@MIRROR?$AA@ DB 'MIRROR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BJAJGGLD@WRAP?$AA@
CONST	SEGMENT
??_C@_04BJAJGGLD@WRAP?$AA@ DB 'WRAP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LLKDOPEJ@CLAMP?$AA@
CONST	SEGMENT
??_C@_05LLKDOPEJ@CLAMP?$AA@ DB 'CLAMP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NLLOMGJK@INV_SRC1_ALPHA?$AA@
CONST	SEGMENT
??_C@_0P@NLLOMGJK@INV_SRC1_ALPHA?$AA@ DB 'INV_SRC1_ALPHA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LGMBJHCD@SRC1_ALPHA?$AA@
CONST	SEGMENT
??_C@_0L@LGMBJHCD@SRC1_ALPHA?$AA@ DB 'SRC1_ALPHA', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KPLJKCHB@INV_SRC1_COLOR?$AA@
CONST	SEGMENT
??_C@_0P@KPLJKCHB@INV_SRC1_COLOR?$AA@ DB 'INV_SRC1_COLOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MCMGPDMI@SRC1_COLOR?$AA@
CONST	SEGMENT
??_C@_0L@MCMGPDMI@SRC1_COLOR?$AA@ DB 'SRC1_COLOR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCOEJJBC@INV_BLEND_FACTOR?$AA@
CONST	SEGMENT
??_C@_0BB@FCOEJJBC@INV_BLEND_FACTOR?$AA@ DB 'INV_BLEND_FACTOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HLIPIAPO@BLEND_FACTOR?$AA@
CONST	SEGMENT
??_C@_0N@HLIPIAPO@BLEND_FACTOR?$AA@ DB 'BLEND_FACTOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NDCPKMML@SRC_ALPHA_SAT?$AA@
CONST	SEGMENT
??_C@_0O@NDCPKMML@SRC_ALPHA_SAT?$AA@ DB 'SRC_ALPHA_SAT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NJMNAFAG@INV_DEST_COLOR?$AA@
CONST	SEGMENT
??_C@_0P@NJMNAFAG@INV_DEST_COLOR?$AA@ DB 'INV_DEST_COLOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LELCFELP@DEST_COLOR?$AA@
CONST	SEGMENT
??_C@_0L@LELCFELP@DEST_COLOR?$AA@ DB 'DEST_COLOR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KNMKGBON@INV_DEST_ALPHA?$AA@
CONST	SEGMENT
??_C@_0P@KNMKGBON@INV_DEST_ALPHA?$AA@ DB 'INV_DEST_ALPHA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MALFDAFE@DEST_ALPHA?$AA@
CONST	SEGMENT
??_C@_0L@MALFDAFE@DEST_ALPHA?$AA@ DB 'DEST_ALPHA', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MHCJAMGI@INV_SRC_ALPHA?$AA@
CONST	SEGMENT
??_C@_0O@MHCJAMGI@INV_SRC_ALPHA?$AA@ DB 'INV_SRC_ALPHA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GFJMFOHN@SRC_ALPHA?$AA@
CONST	SEGMENT
??_C@_09GFJMFOHN@SRC_ALPHA?$AA@ DB 'SRC_ALPHA', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LDCOGIID@INV_SRC_COLOR?$AA@
CONST	SEGMENT
??_C@_0O@LDCOGIID@INV_SRC_COLOR?$AA@ DB 'INV_SRC_COLOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BBJLDKJG@SRC_COLOR?$AA@
CONST	SEGMENT
??_C@_09BBJLDKJG@SRC_COLOR?$AA@ DB 'SRC_COLOR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03OKMGHDAC@ONE?$AA@
CONST	SEGMENT
??_C@_03OKMGHDAC@ONE?$AA@ DB 'ONE', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
_g_rvBLEND DD	FLAT:??_C@_04PPGNNOJD@ZERO?$AA@
	DD	01H
	DD	FLAT:??_C@_03OKMGHDAC@ONE?$AA@
	DD	02H
	DD	FLAT:??_C@_09BBJLDKJG@SRC_COLOR?$AA@
	DD	03H
	DD	FLAT:??_C@_0O@LDCOGIID@INV_SRC_COLOR?$AA@
	DD	04H
	DD	FLAT:??_C@_09GFJMFOHN@SRC_ALPHA?$AA@
	DD	05H
	DD	FLAT:??_C@_0O@MHCJAMGI@INV_SRC_ALPHA?$AA@
	DD	06H
	DD	FLAT:??_C@_0L@MALFDAFE@DEST_ALPHA?$AA@
	DD	07H
	DD	FLAT:??_C@_0P@KNMKGBON@INV_DEST_ALPHA?$AA@
	DD	08H
	DD	FLAT:??_C@_0L@LELCFELP@DEST_COLOR?$AA@
	DD	09H
	DD	FLAT:??_C@_0P@NJMNAFAG@INV_DEST_COLOR?$AA@
	DD	0aH
	DD	FLAT:??_C@_0O@NDCPKMML@SRC_ALPHA_SAT?$AA@
	DD	0bH
	DD	FLAT:??_C@_0N@HLIPIAPO@BLEND_FACTOR?$AA@
	DD	0eH
	DD	FLAT:??_C@_0BB@FCOEJJBC@INV_BLEND_FACTOR?$AA@
	DD	0fH
	DD	FLAT:??_C@_0L@MCMGPDMI@SRC1_COLOR?$AA@
	DD	010H
	DD	FLAT:??_C@_0P@KPLJKCHB@INV_SRC1_COLOR?$AA@
	DD	011H
	DD	FLAT:??_C@_0L@LGMBJHCD@SRC1_ALPHA?$AA@
	DD	012H
	DD	FLAT:??_C@_0P@NLLOMGJK@INV_SRC1_ALPHA?$AA@
	DD	013H
	DD	00H
	DD	00H
_g_rvTADDRESS DD FLAT:??_C@_05LLKDOPEJ@CLAMP?$AA@
	DD	03H
	DD	FLAT:??_C@_04BJAJGGLD@WRAP?$AA@
	DD	01H
	DD	FLAT:??_C@_06LPIEMBDF@MIRROR?$AA@
	DD	02H
	DD	FLAT:??_C@_06OHHANPFE@BORDER?$AA@
	DD	04H
	DD	FLAT:??_C@_0M@IBDDGNND@MIRROR_ONCE?$AA@
	DD	05H
	DD	00H
	DD	00H
_g_rvCULL DD	FLAT:??_C@_04OKGDLNCL@NONE?$AA@
	DD	01H
	DD	FLAT:??_C@_05LCELFLHH@FRONT?$AA@
	DD	02H
	DD	FLAT:??_C@_04FJBHJJME@BACK?$AA@
	DD	03H
	DD	00H
	DD	00H
_g_rvCMP DD	FLAT:??_C@_05PLMGMCPK@NEVER?$AA@
	DD	01H
	DD	FLAT:??_C@_04PHHIILNL@LESS?$AA@
	DD	02H
	DD	FLAT:??_C@_05MFJMDLJG@EQUAL?$AA@
	DD	03H
	DD	FLAT:??_C@_0L@POPDHMNN@LESS_EQUAL?$AA@
	DD	04H
	DD	FLAT:??_C@_07INHKBBNC@GREATER?$AA@
	DD	05H
	DD	FLAT:??_C@_09BCHNGNOE@NOT_EQUAL?$AA@
	DD	06H
	DD	FLAT:??_C@_0O@LBCFDHKJ@GREATER_EQUAL?$AA@
	DD	07H
	DD	FLAT:??_C@_06KDBFKDHA@ALWAYS?$AA@
	DD	08H
	DD	00H
	DD	00H
_g_rvSTENCILOP DD FLAT:??_C@_04HGNONLMK@KEEP?$AA@
	DD	01H
	DD	FLAT:??_C@_04PPGNNOJD@ZERO?$AA@
	DD	02H
	DD	FLAT:??_C@_07NGBKIEMN@REPLACE?$AA@
	DD	03H
	DD	FLAT:??_C@_08KPABMPDL@INCR_SAT?$AA@
	DD	04H
	DD	FLAT:??_C@_08DCEDEDK@DECR_SAT?$AA@
	DD	05H
	DD	FLAT:??_C@_06CMCEILNN@INVERT?$AA@
	DD	06H
	DD	FLAT:??_C@_04ONKEBBJL@INCR?$AA@
	DD	07H
	DD	FLAT:??_C@_04MCDFFCCL@DECR?$AA@
	DD	08H
	DD	00H
	DD	00H
_g_rvBLENDOP DD	FLAT:??_C@_03BOJFLAKG@ADD?$AA@
	DD	01H
	DD	FLAT:??_C@_08MGBEENML@SUBTRACT?$AA@
	DD	02H
	DD	FLAT:??_C@_0N@DGGLJHJP@REV_SUBTRACT?$AA@
	DD	03H
	DD	FLAT:??_C@_03KGHEHEMH@MIN?$AA@
	DD	04H
	DD	FLAT:??_C@_03LEPPJAKI@MAX?$AA@
	DD	05H
	DD	00H
	DD	00H
?g_lvGeneralCount@D3DX11Effects@@3IB DD 03bH		; D3DX11Effects::g_lvGeneralCount
_g_EffectVersions DD FLAT:??_C@_06BACILOGA@fx_4_0?$AA@
	DD	046580400H
	DD	0feff1001H
	DD	FLAT:??_C@_06JDDIPCB@fx_4_1?$AA@
	DD	046580401H
	DD	0feff1011H
	DD	FLAT:??_C@_06KIJENJAF@fx_5_0?$AA@
	DD	046580500H
	DD	0feff2001H
_c_PrimeSizes DD 0bH
	DD	017H
	DD	035H
	DD	061H
	DD	0c1H
	DD	0185H
	DD	0301H
	DD	0607H
	DD	0c07H
	DD	01807H
	DD	03001H
	DD	06011H
	DD	0c005H
	DD	01800dH
	DD	030005H
	DD	060019H
	DD	0c0001H
	DD	0180005H
	DD	030000bH
	DD	060000dH
	DD	0c00005H
	DD	01800013H
	DD	03000005H
	DD	06000017H
	DD	0c000013H
	DD	018000005H
	DD	030000059H
	DD	060000005H
_g_rvNULL DD	FLAT:??_C@_04HIBGFPH@NULL?$AA@
	DD	00H
	DD	00H
	DD	00H
_g_rvBOOL DD	FLAT:??_C@_05MAJJAKPI@FALSE?$AA@
	DD	00H
	DD	FLAT:??_C@_04HCDDPBNL@TRUE?$AA@
	DD	01H
	DD	00H
	DD	00H
_g_rvDEPTH_WRITE_MASK DD FLAT:??_C@_04PPGNNOJD@ZERO?$AA@
	DD	00H
	DD	FLAT:??_C@_03NIFPGLBG@ALL?$AA@
	DD	01H
	DD	00H
	DD	00H
_g_rvFILL DD	FLAT:??_C@_09HJIKPONA@WIREFRAME?$AA@
	DD	02H
	DD	FLAT:??_C@_05CEBIDAFG@SOLID?$AA@
	DD	03H
	DD	00H
	DD	00H
_g_rvFILTER DD	FLAT:??_C@_0BC@NBGEKGB@MIN_MAG_MIP_POINT?$AA@
	DD	00H
	DD	FLAT:??_C@_0BJ@FHHFFPEN@MIN_MAG_POINT_MIP_LINEAR?$AA@
	DD	01H
	DD	FLAT:??_C@_0BP@GPKFBPIB@MIN_POINT_MAG_LINEAR_MIP_POINT?$AA@
	DD	04H
	DD	FLAT:??_C@_0BJ@LIDOHGCK@MIN_POINT_MAG_MIP_LINEAR?$AA@
	DD	05H
	DD	FLAT:??_C@_0BJ@PCDFIDK@MIN_LINEAR_MAG_MIP_POINT?$AA@
	DD	010H
	DD	FLAT:??_C@_0CA@PLHBLOON@MIN_LINEAR_MAG_POINT_MIP_LINEAR?$AA@
	DD	011H
	DD	FLAT:??_C@_0BJ@BLHOHPBA@MIN_MAG_LINEAR_MIP_POINT?$AA@
	DD	014H
	DD	FLAT:??_C@_0BD@LLNOFHHP@MIN_MAG_MIP_LINEAR?$AA@
	DD	015H
	DD	FLAT:??_C@_0M@FBHCHPJF@ANISOTROPIC?$AA@
	DD	055H
	DD	FLAT:??_C@_0BN@EJHCGLM@COMPARISON_MIN_MAG_MIP_POINT?$AA@
	DD	080H
	DD	FLAT:??_C@_0CE@BDNJCEEB@COMPARISON_MIN_MAG_POINT_MIP_LIN@
	DD	081H
	DD	FLAT:??_C@_0CK@OGELINIF@COMPARISON_MIN_POINT_MAG_LINEAR_@
	DD	084H
	DD	FLAT:??_C@_0CE@PMJCANCG@COMPARISON_MIN_POINT_MAG_MIP_LIN@
	DD	085H
	DD	FLAT:??_C@_0CE@ELIPCDDG@COMPARISON_MIN_LINEAR_MAG_MIP_PO@
	DD	090H
	DD	FLAT:??_C@_0CL@PMJFJEGG@COMPARISON_MIN_LINEAR_MAG_POINT_@
	DD	091H
	DD	FLAT:??_C@_0CE@FPNCAEBM@COMPARISON_MIN_MAG_LINEAR_MIP_PO@
	DD	094H
	DD	FLAT:??_C@_0BO@EDLFHIHK@COMPARISON_MIN_MAG_MIP_LINEAR?$AA@
	DD	095H
	DD	FLAT:??_C@_0BH@FICIAAEE@COMPARISON_ANISOTROPIC?$AA@
	DD	0d5H
	DD	FLAT:??_C@_09JIMOEHJJ@TEXT_1BIT?$AA@
	DD	080000000H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ??_C@_09JIMOEHJJ@TEXT_1BIT?$AA@
CONST	SEGMENT
??_C@_09JIMOEHJJ@TEXT_1BIT?$AA@ DB 'TEXT_1BIT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FICIAAEE@COMPARISON_ANISOTROPIC?$AA@
CONST	SEGMENT
??_C@_0BH@FICIAAEE@COMPARISON_ANISOTROPIC?$AA@ DB 'COMPARISON_ANISOTROPIC'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EDLFHIHK@COMPARISON_MIN_MAG_MIP_LINEAR?$AA@
CONST	SEGMENT
??_C@_0BO@EDLFHIHK@COMPARISON_MIN_MAG_MIP_LINEAR?$AA@ DB 'COMPARISON_MIN_'
	DB	'MAG_MIP_LINEAR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FPNCAEBM@COMPARISON_MIN_MAG_LINEAR_MIP_PO@
CONST	SEGMENT
??_C@_0CE@FPNCAEBM@COMPARISON_MIN_MAG_LINEAR_MIP_PO@ DB 'COMPARISON_MIN_M'
	DB	'AG_LINEAR_MIP_POINT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@PMJFJEGG@COMPARISON_MIN_LINEAR_MAG_POINT_@
CONST	SEGMENT
??_C@_0CL@PMJFJEGG@COMPARISON_MIN_LINEAR_MAG_POINT_@ DB 'COMPARISON_MIN_L'
	DB	'INEAR_MAG_POINT_MIP_LINEAR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@ELIPCDDG@COMPARISON_MIN_LINEAR_MAG_MIP_PO@
CONST	SEGMENT
??_C@_0CE@ELIPCDDG@COMPARISON_MIN_LINEAR_MAG_MIP_PO@ DB 'COMPARISON_MIN_L'
	DB	'INEAR_MAG_MIP_POINT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@PMJCANCG@COMPARISON_MIN_POINT_MAG_MIP_LIN@
CONST	SEGMENT
??_C@_0CE@PMJCANCG@COMPARISON_MIN_POINT_MAG_MIP_LIN@ DB 'COMPARISON_MIN_P'
	DB	'OINT_MAG_MIP_LINEAR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@OGELINIF@COMPARISON_MIN_POINT_MAG_LINEAR_@
CONST	SEGMENT
??_C@_0CK@OGELINIF@COMPARISON_MIN_POINT_MAG_LINEAR_@ DB 'COMPARISON_MIN_P'
	DB	'OINT_MAG_LINEAR_MIP_POINT', 00H		; `string'
CONST	ENDS
;	COMDAT _IID_ID3DX11EffectBlendVariable
CONST	SEGMENT
_IID_ID3DX11EffectBlendVariable DD 0d664f4d7H
	DW	03b81H
	DW	04805H
	DB	0b2H
	DB	077H
	DB	0c1H
	DB	0dfH
	DB	058H
	DB	0c3H
	DB	09fH
	DB	053H
CONST	ENDS
;	COMDAT ??_C@_0CE@BDNJCEEB@COMPARISON_MIN_MAG_POINT_MIP_LIN@
CONST	SEGMENT
??_C@_0CE@BDNJCEEB@COMPARISON_MIN_MAG_POINT_MIP_LIN@ DB 'COMPARISON_MIN_M'
	DB	'AG_POINT_MIP_LINEAR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EJHCGLM@COMPARISON_MIN_MAG_MIP_POINT?$AA@
CONST	SEGMENT
??_C@_0BN@EJHCGLM@COMPARISON_MIN_MAG_MIP_POINT?$AA@ DB 'COMPARISON_MIN_MA'
	DB	'G_MIP_POINT', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FBHCHPJF@ANISOTROPIC?$AA@
CONST	SEGMENT
??_C@_0M@FBHCHPJF@ANISOTROPIC?$AA@ DB 'ANISOTROPIC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LLNOFHHP@MIN_MAG_MIP_LINEAR?$AA@
CONST	SEGMENT
??_C@_0BD@LLNOFHHP@MIN_MAG_MIP_LINEAR?$AA@ DB 'MIN_MAG_MIP_LINEAR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BLHOHPBA@MIN_MAG_LINEAR_MIP_POINT?$AA@
CONST	SEGMENT
??_C@_0BJ@BLHOHPBA@MIN_MAG_LINEAR_MIP_POINT?$AA@ DB 'MIN_MAG_LINEAR_MIP_P'
	DB	'OINT', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PLHBLOON@MIN_LINEAR_MAG_POINT_MIP_LINEAR?$AA@
CONST	SEGMENT
??_C@_0CA@PLHBLOON@MIN_LINEAR_MAG_POINT_MIP_LINEAR?$AA@ DB 'MIN_LINEAR_MA'
	DB	'G_POINT_MIP_LINEAR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PCDFIDK@MIN_LINEAR_MAG_MIP_POINT?$AA@
CONST	SEGMENT
??_C@_0BJ@PCDFIDK@MIN_LINEAR_MAG_MIP_POINT?$AA@ DB 'MIN_LINEAR_MAG_MIP_PO'
	DB	'INT', 00H					; `string'
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0ID3DX11EffectType@@QAE@XZ			; ID3DX11EffectType::ID3DX11EffectType
PUBLIC	??0ID3DX11EffectVariable@@QAE@XZ		; ID3DX11EffectVariable::ID3DX11EffectVariable
PUBLIC	??0ID3DX11EffectConstantBuffer@@QAE@XZ		; ID3DX11EffectConstantBuffer::ID3DX11EffectConstantBuffer
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?AlignToPowerOf2@@YAIII@Z			; AlignToPowerOf2
PUBLIC	?AlignToPowerOf2@@YAPAXPAXI@Z			; AlignToPowerOf2
PUBLIC	?IsObjectTypeHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@1@Z ; D3DX11Effects::IsObjectTypeHelper
PUBLIC	?IsSamplerHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z ; D3DX11Effects::IsSamplerHelper
PUBLIC	?IsStateBlockObjectHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z ; D3DX11Effects::IsStateBlockObjectHelper
PUBLIC	?IsShaderHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z ; D3DX11Effects::IsShaderHelper
PUBLIC	?IsInterfaceHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z ; D3DX11Effects::IsInterfaceHelper
PUBLIC	?IsShaderResourceHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z ; D3DX11Effects::IsShaderResourceHelper
PUBLIC	?IsUnorderedAccessViewHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z ; D3DX11Effects::IsUnorderedAccessViewHelper
PUBLIC	?IsRenderTargetViewHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z ; D3DX11Effects::IsRenderTargetViewHelper
PUBLIC	?IsDepthStencilViewHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z ; D3DX11Effects::IsDepthStencilViewHelper
PUBLIC	?IsObjectAssignmentHelper@D3DX11Effects@@YAHW4ELhsType@1@@Z ; D3DX11Effects::IsObjectAssignmentHelper
PUBLIC	?RequiresPool@SBinaryHeader@D3DX11Effects@@QBE_NXZ ; D3DX11Effects::SBinaryHeader::RequiresPool
PUBLIC	??0SType@D3DX11Effects@@QAE@XZ			; D3DX11Effects::SType::SType
PUBLIC	?IsObjectType@SType@D3DX11Effects@@QBEHW4EObjectType@2@@Z ; D3DX11Effects::SType::IsObjectType
PUBLIC	?IsShader@SType@D3DX11Effects@@QBEHXZ		; D3DX11Effects::SType::IsShader
PUBLIC	?BelongsInConstantBuffer@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::BelongsInConstantBuffer
PUBLIC	?IsStateBlockObject@SType@D3DX11Effects@@QBEHXZ	; D3DX11Effects::SType::IsStateBlockObject
PUBLIC	?IsClassInstance@SType@D3DX11Effects@@QBEHXZ	; D3DX11Effects::SType::IsClassInstance
PUBLIC	?IsInterface@SType@D3DX11Effects@@QBEHXZ	; D3DX11Effects::SType::IsInterface
PUBLIC	?IsShaderResource@SType@D3DX11Effects@@QBEHXZ	; D3DX11Effects::SType::IsShaderResource
PUBLIC	?IsUnorderedAccessView@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::IsUnorderedAccessView
PUBLIC	?IsSampler@SType@D3DX11Effects@@QBEHXZ		; D3DX11Effects::SType::IsSampler
PUBLIC	?IsRenderTargetView@SType@D3DX11Effects@@QBEHXZ	; D3DX11Effects::SType::IsRenderTargetView
PUBLIC	?IsDepthStencilView@SType@D3DX11Effects@@QBEHXZ	; D3DX11Effects::SType::IsDepthStencilView
PUBLIC	?IsValid@SType@D3DX11Effects@@UAGHXZ		; D3DX11Effects::SType::IsValid
PUBLIC	?GetDesc@SType@D3DX11Effects@@UAGJPAU_D3DX11_EFFECT_TYPE_DESC@@@Z ; D3DX11Effects::SType::GetDesc
PUBLIC	??0SInterface@D3DX11Effects@@QAE@XZ		; D3DX11Effects::SInterface::SInterface
PUBLIC	??0SShaderResource@D3DX11Effects@@QAE@XZ	; D3DX11Effects::SShaderResource::SShaderResource
PUBLIC	??0SUnorderedAccessView@D3DX11Effects@@QAE@XZ	; D3DX11Effects::SUnorderedAccessView::SUnorderedAccessView
PUBLIC	??_FSShaderBlock@D3DX11Effects@@QAEXXZ		; D3DX11Effects::SShaderBlock::`default constructor closure'
PUBLIC	??0SVariable@D3DX11Effects@@QAE@XZ		; D3DX11Effects::SVariable::SVariable
PUBLIC	??_FSAnonymousShader@D3DX11Effects@@QAEXXZ	; D3DX11Effects::SAnonymousShader::`default constructor closure'
PUBLIC	?AsScalar@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectScalarVariable@@XZ ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsScalar
PUBLIC	?AsVector@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectVectorVariable@@XZ ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsVector
PUBLIC	?AsMatrix@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectMatrixVariable@@XZ ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsMatrix
PUBLIC	?AsString@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectStringVariable@@XZ ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsString
PUBLIC	?AsClassInstance@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectClassInstanceVariable@@XZ ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsClassInstance
PUBLIC	?AsInterface@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectInterfaceVariable@@XZ ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsInterface
PUBLIC	?AsShaderResource@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectShaderResourceVariable@@XZ ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsShaderResource
PUBLIC	?AsUnorderedAccessView@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectUnorderedAccessViewVariable@@XZ ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsUnorderedAccessView
PUBLIC	?AsRenderTargetView@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectRenderTargetViewVariable@@XZ ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsRenderTargetView
PUBLIC	?AsDepthStencilView@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectDepthStencilViewVariable@@XZ ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsDepthStencilView
PUBLIC	?AsConstantBuffer@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectConstantBuffer@@XZ ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsConstantBuffer
PUBLIC	?AsShader@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectShaderVariable@@XZ ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsShader
PUBLIC	?AsBlend@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectBlendVariable@@XZ ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsBlend
PUBLIC	?AsDepthStencil@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectDepthStencilVariable@@XZ ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsDepthStencil
PUBLIC	?AsRasterizer@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectRasterizerVariable@@XZ ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsRasterizer
PUBLIC	?AsSampler@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectSamplerVariable@@XZ ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsSampler
PUBLIC	??0?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@QAE@XZ ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::TUncastableVariable<ID3DX11EffectConstantBuffer>
PUBLIC	??0SConstantBuffer@D3DX11Effects@@QAE@XZ	; D3DX11Effects::SConstantBuffer::SConstantBuffer
PUBLIC	??0SDependency@SAssignment@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SAssignment::SDependency::SDependency
PUBLIC	?IsObjectAssignment@SAssignment@D3DX11Effects@@QAEHXZ ; D3DX11Effects::SAssignment::IsObjectAssignment
PUBLIC	??0SAssignment@D3DX11Effects@@QAE@XZ		; D3DX11Effects::SAssignment::SAssignment
PUBLIC	?ReserveMemory@CEffectHeap@D3DX11Effects@@QAEJI@Z ; D3DX11Effects::CEffectHeap::ReserveMemory
PUBLIC	?GetSize@CEffectHeap@D3DX11Effects@@QAEIXZ	; D3DX11Effects::CEffectHeap::GetSize
PUBLIC	?AddString@CEffectHeap@D3DX11Effects@@QAEJPBDPAPAD@Z ; D3DX11Effects::CEffectHeap::AddString
PUBLIC	?AddData@CEffectHeap@D3DX11Effects@@QAEJPBXIPAPAX@Z ; D3DX11Effects::CEffectHeap::AddData
PUBLIC	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
PUBLIC	?MoveString@CEffectHeap@D3DX11Effects@@QAEJPAPAD@Z ; D3DX11Effects::CEffectHeap::MoveString
PUBLIC	?MoveInterfaceParameters@CEffectHeap@D3DX11Effects@@QAEJIPAPAUSInterfaceParameter@SShaderBlock@2@@Z ; D3DX11Effects::CEffectHeap::MoveInterfaceParameters
PUBLIC	?MoveEmptyDataBlock@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveEmptyDataBlock
PUBLIC	?IsInHeap@CEffectHeap@D3DX11Effects@@QBEHPAX@Z	; D3DX11Effects::CEffectHeap::IsInHeap
PUBLIC	??0CEffectHeap@D3DX11Effects@@QAE@XZ		; D3DX11Effects::CEffectHeap::CEffectHeap
PUBLIC	??1CEffectHeap@D3DX11Effects@@QAE@XZ		; D3DX11Effects::CEffectHeap::~CEffectHeap
PUBLIC	??0CEffectReflection@D3DX11Effects@@QAE@XZ	; D3DX11Effects::CEffectReflection::CEffectReflection
PUBLIC	??A?$CEffectVector@PAUSMember@D3DX11Effects@@@@QAEAAPAUSMember@D3DX11Effects@@I@Z ; CEffectVector<D3DX11Effects::SMember *>::operator[]
PUBLIC	?GetSize@?$CEffectVector@PAUSMember@D3DX11Effects@@@@QBEIXZ ; CEffectVector<D3DX11Effects::SMember *>::GetSize
PUBLIC	?AreTypesEqual@CEffect@D3DX11Effects@@KAHABQAUSType@2@0@Z ; D3DX11Effects::CEffect::AreTypesEqual
PUBLIC	?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z ; D3DX11Effects::CEffect::AreStringsEqual
PUBLIC	?LoadEffect@CEffect@D3DX11Effects@@QAEJPBXI@Z	; D3DX11Effects::CEffect::LoadEffect
PUBLIC	?Grow@?$CEffectVector@PAX@@IAEJXZ		; CEffectVector<void *>::Grow
PUBLIC	?Reserve@?$CEffectVector@PAX@@IAEJI@Z		; CEffectVector<void *>::Reserve
PUBLIC	??0?$CEffectVector@PAX@@QAE@XZ			; CEffectVector<void *>::CEffectVector<void *>
PUBLIC	??1?$CEffectVector@PAX@@QAE@XZ			; CEffectVector<void *>::~CEffectVector<void *>
PUBLIC	?Clear@?$CEffectVector@PAX@@QAEXXZ		; CEffectVector<void *>::Clear
PUBLIC	?Empty@?$CEffectVector@PAX@@QAEXXZ		; CEffectVector<void *>::Empty
PUBLIC	?Add@?$CEffectVector@PAX@@QAEJABQAX@Z		; CEffectVector<void *>::Add
PUBLIC	??A?$CEffectVector@PAX@@QAEAAPAXI@Z		; CEffectVector<void *>::operator[]
PUBLIC	?GetSize@?$CEffectVector@PAX@@QBEIXZ		; CEffectVector<void *>::GetSize
PUBLIC	??0SRange@D3DX11Effects@@QAE@XZ			; D3DX11Effects::SRange::SRange
PUBLIC	??1SRange@D3DX11Effects@@QAE@XZ			; D3DX11Effects::SRange::~SRange
PUBLIC	??_GSRange@D3DX11Effects@@QAEPAXI@Z		; D3DX11Effects::SRange::`scalar deleting destructor'
PUBLIC	?GetSimpleParameterTypeFromObjectType@D3DX11Effects@@YA?AW4_D3D_SHADER_VARIABLE_TYPE@@W4EObjectType@1@@Z ; D3DX11Effects::GetSimpleParameterTypeFromObjectType
PUBLIC	?Reserve@?$CEffectVector@E@@IAEJI@Z		; CEffectVector<unsigned char>::Reserve
PUBLIC	??0?$CEffectVector@E@@QAE@XZ			; CEffectVector<unsigned char>::CEffectVector<unsigned char>
PUBLIC	??1?$CEffectVector@E@@QAE@XZ			; CEffectVector<unsigned char>::~CEffectVector<unsigned char>
PUBLIC	?Clear@?$CEffectVector@E@@QAEXXZ		; CEffectVector<unsigned char>::Clear
PUBLIC	?Empty@?$CEffectVector@E@@QAEXXZ		; CEffectVector<unsigned char>::Empty
PUBLIC	?AddRange@?$CEffectVector@E@@QAEPAEI@Z		; CEffectVector<unsigned char>::AddRange
PUBLIC	??A?$CEffectVector@E@@QAEAAEI@Z			; CEffectVector<unsigned char>::operator[]
PUBLIC	?GetSize@?$CEffectVector@E@@QBEIXZ		; CEffectVector<unsigned char>::GetSize
PUBLIC	?Grow@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@IAEJXZ ; CEffectVector<D3DX11Effects::SInterface *>::Grow
PUBLIC	?Reserve@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@IAEJI@Z ; CEffectVector<D3DX11Effects::SInterface *>::Reserve
PUBLIC	??0?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAE@XZ ; CEffectVector<D3DX11Effects::SInterface *>::CEffectVector<D3DX11Effects::SInterface *>
PUBLIC	??1?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAE@XZ ; CEffectVector<D3DX11Effects::SInterface *>::~CEffectVector<D3DX11Effects::SInterface *>
PUBLIC	?Clear@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAEXXZ ; CEffectVector<D3DX11Effects::SInterface *>::Clear
PUBLIC	?Empty@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAEXXZ ; CEffectVector<D3DX11Effects::SInterface *>::Empty
PUBLIC	?Add@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAEJABQAUSInterface@D3DX11Effects@@@Z ; CEffectVector<D3DX11Effects::SInterface *>::Add
PUBLIC	??A?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAEAAPAUSInterface@D3DX11Effects@@I@Z ; CEffectVector<D3DX11Effects::SInterface *>::operator[]
PUBLIC	?GetSize@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QBEIXZ ; CEffectVector<D3DX11Effects::SInterface *>::GetSize
PUBLIC	?LoadCBs@CEffectLoader@D3DX11Effects@@IAEJXZ	; D3DX11Effects::CEffectLoader::LoadCBs
PUBLIC	?LoadNumericVariable@CEffectLoader@D3DX11Effects@@IAEJPAUSConstantBuffer@2@@Z ; D3DX11Effects::CEffectLoader::LoadNumericVariable
PUBLIC	?LoadObjectVariables@CEffectLoader@D3DX11Effects@@IAEJXZ ; D3DX11Effects::CEffectLoader::LoadObjectVariables
PUBLIC	?LoadInterfaceVariables@CEffectLoader@D3DX11Effects@@IAEJXZ ; D3DX11Effects::CEffectLoader::LoadInterfaceVariables
PUBLIC	?LoadTypeAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPAUSType@2@I@Z ; D3DX11Effects::CEffectLoader::LoadTypeAndAddToPool
PUBLIC	?LoadStringAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPADI@Z ; D3DX11Effects::CEffectLoader::LoadStringAndAddToPool
PUBLIC	?LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@2@PAEPAI2@Z ; D3DX11Effects::CEffectLoader::LoadAssignments
PUBLIC	?LoadGroups@CEffectLoader@D3DX11Effects@@IAEJXZ	; D3DX11Effects::CEffectLoader::LoadGroups
PUBLIC	?LoadTechnique@CEffectLoader@D3DX11Effects@@IAEJPAUSTechnique@2@@Z ; D3DX11Effects::CEffectLoader::LoadTechnique
PUBLIC	?LoadAnnotations@CEffectLoader@D3DX11Effects@@IAEJPAIPAPAUSAnnotation@2@@Z ; D3DX11Effects::CEffectLoader::LoadAnnotations
PUBLIC	?ExecuteConstantAssignment@CEffectLoader@D3DX11Effects@@IAEJPAUSBinaryConstant@2@PAXW4_D3D_SHADER_VARIABLE_TYPE@@@Z ; D3DX11Effects::CEffectLoader::ExecuteConstantAssignment
PUBLIC	?UnpackData@CEffectLoader@D3DX11Effects@@IAEIPAE0IPAUSType@2@PAI@Z ; D3DX11Effects::CEffectLoader::UnpackData
PUBLIC	?GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffectLoader::GrabShaderData
PUBLIC	?BuildShaderBlock@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffectLoader::BuildShaderBlock
PUBLIC	?InitializeReflectionDataAndMoveStrings@CEffectLoader@D3DX11Effects@@IAEJI@Z ; D3DX11Effects::CEffectLoader::InitializeReflectionDataAndMoveStrings
PUBLIC	?ReallocateReflectionData@CEffectLoader@D3DX11Effects@@IAEJ_N@Z ; D3DX11Effects::CEffectLoader::ReallocateReflectionData
PUBLIC	?ReallocateEffectData@CEffectLoader@D3DX11Effects@@IAEJ_N@Z ; D3DX11Effects::CEffectLoader::ReallocateEffectData
PUBLIC	?ReallocateShaderBlocks@CEffectLoader@D3DX11Effects@@IAEJXZ ; D3DX11Effects::CEffectLoader::ReallocateShaderBlocks
PUBLIC	?ReallocateAnnotationData@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAnnotation@2@@Z ; D3DX11Effects::CEffectLoader::ReallocateAnnotationData
PUBLIC	?CalculateAnnotationSize@CEffectLoader@D3DX11Effects@@IAEJIPAUSAnnotation@2@@Z ; D3DX11Effects::CEffectLoader::CalculateAnnotationSize
PUBLIC	?CalculateShaderBlockSize@CEffectLoader@D3DX11Effects@@IAEIXZ ; D3DX11Effects::CEffectLoader::CalculateShaderBlockSize
PUBLIC	?FixupCBPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSConstantBuffer@2@@Z ; D3DX11Effects::CEffectLoader::FixupCBPointer
PUBLIC	?FixupShaderPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupShaderPointer
PUBLIC	?FixupDSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSDepthStencilBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupDSPointer
PUBLIC	?FixupABPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSBlendBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupABPointer
PUBLIC	?FixupRSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSRasterizerBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupRSPointer
PUBLIC	?FixupInterfacePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSInterface@2@_N@Z ; D3DX11Effects::CEffectLoader::FixupInterfacePointer
PUBLIC	?FixupShaderResourcePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderResource@2@@Z ; D3DX11Effects::CEffectLoader::FixupShaderResourcePointer
PUBLIC	?FixupUnorderedAccessViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSUnorderedAccessView@2@@Z ; D3DX11Effects::CEffectLoader::FixupUnorderedAccessViewPointer
PUBLIC	?FixupRenderTargetViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSRenderTargetView@2@@Z ; D3DX11Effects::CEffectLoader::FixupRenderTargetViewPointer
PUBLIC	?FixupDepthStencilViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSDepthStencilView@2@@Z ; D3DX11Effects::CEffectLoader::FixupDepthStencilViewPointer
PUBLIC	?FixupSamplerPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSSamplerBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupSamplerPointer
PUBLIC	?FixupVariablePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSGlobalVariable@2@@Z ; D3DX11Effects::CEffectLoader::FixupVariablePointer
PUBLIC	?FixupStringPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSString@2@@Z ; D3DX11Effects::CEffectLoader::FixupStringPointer
PUBLIC	?FixupMemberDataPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSMemberDataPointer@2@@Z ; D3DX11Effects::CEffectLoader::FixupMemberDataPointer
PUBLIC	?FixupGroupPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSGroup@2@@Z ; D3DX11Effects::CEffectLoader::FixupGroupPointer
PUBLIC	?GetStringAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIPAPAD@Z ; D3DX11Effects::CEffectLoader::GetStringAndAddToReflection
PUBLIC	?GetUnstructuredDataBlock@CEffectLoader@D3DX11Effects@@IAEJIPAIPAPAX@Z ; D3DX11Effects::CEffectLoader::GetUnstructuredDataBlock
PUBLIC	?GetInterfaceParametersAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIIPAPAUSInterfaceParameter@SShaderBlock@2@@Z ; D3DX11Effects::CEffectLoader::GetInterfaceParametersAndAddToReflection
PUBLIC	?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z ; D3DX11Effects::CEffectLoader::LoadEffect
PUBLIC	??0CEffectLoader@D3DX11Effects@@QAE@XZ		; D3DX11Effects::CEffectLoader::CEffectLoader
PUBLIC	??1CEffectLoader@D3DX11Effects@@QAE@XZ		; D3DX11Effects::CEffectLoader::~CEffectLoader
PUBLIC	??$AddDataInternal@$00@CEffectHeap@D3DX11Effects@@IAEJPBXIPAPAX@Z ; D3DX11Effects::CEffectHeap::AddDataInternal<1>
PUBLIC	??$AddDataInternal@$0A@@CEffectHeap@D3DX11Effects@@IAEJPBXIPAPAX@Z ; D3DX11Effects::CEffectHeap::AddDataInternal<0>
PUBLIC	?GetEffectVersion@D3DX11Effects@@YAJIPAK@Z	; D3DX11Effects::GetEffectVersion
PUBLIC	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@XZ		; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
PUBLIC	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z	; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
PUBLIC	??Y?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z ; CheckedNumber<unsigned int,4294967295>::operator+=
PUBLIC	??X?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z ; CheckedNumber<unsigned int,4294967295>::operator*=
PUBLIC	?GetValue@?$CheckedNumber@I$0PPPPPPPP@@@QAEJPAI@Z ; CheckedNumber<unsigned int,4294967295>::GetValue
PUBLIC	??0?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAE@XZ ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>
PUBLIC	?CleanArray@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@IAEXXZ ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::CleanArray
PUBLIC	?GetNextHashTableSize@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@SAII@Z ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::GetNextHashTableSize
PUBLIC	?Grow@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEJIIPAPAX_N@Z ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::Grow
PUBLIC	?AutoGrow@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEJXZ ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::AutoGrow
PUBLIC	?FindValueWithHash@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEJPAUSType@D3DX11Effects@@IPAVCIterator@1@@Z ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::FindValueWithHash
PUBLIC	?GetFirstEntry@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEXPAVCIterator@1@@Z ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::GetFirstEntry
PUBLIC	?PastEnd@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEHPAVCIterator@1@@Z ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::PastEnd
PUBLIC	?GetNextEntry@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEXPAVCIterator@1@@Z ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::GetNextEntry
PUBLIC	??0?$CEffectHashTableWithPrivateHeap@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAE@XZ ; CEffectHashTableWithPrivateHeap<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::CEffectHashTableWithPrivateHeap<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>
PUBLIC	?SetPrivateHeap@?$CEffectHashTableWithPrivateHeap@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEXPAVCDataBlockStore@@@Z ; CEffectHashTableWithPrivateHeap<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::SetPrivateHeap
PUBLIC	?AddValueWithHash@?$CEffectHashTableWithPrivateHeap@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEJPAUSType@D3DX11Effects@@I@Z ; CEffectHashTableWithPrivateHeap<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::AddValueWithHash
PUBLIC	??0?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAE@XZ ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>
PUBLIC	?CleanArray@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@IAEXXZ ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::CleanArray
PUBLIC	?GetNextHashTableSize@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@SAII@Z ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::GetNextHashTableSize
PUBLIC	?Grow@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEJIIPAPAX_N@Z ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::Grow
PUBLIC	?AutoGrow@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEJXZ ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::AutoGrow
PUBLIC	?FindValueWithHash@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEJPBDIPAVCIterator@1@@Z ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::FindValueWithHash
PUBLIC	?GetFirstEntry@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEXPAVCIterator@1@@Z ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::GetFirstEntry
PUBLIC	?PastEnd@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEHPAVCIterator@1@@Z ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::PastEnd
PUBLIC	?GetNextEntry@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEXPAVCIterator@1@@Z ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::GetNextEntry
PUBLIC	??0?$CEffectHashTableWithPrivateHeap@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAE@XZ ; CEffectHashTableWithPrivateHeap<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::CEffectHashTableWithPrivateHeap<char const *,&D3DX11Effects::CEffect::AreStringsEqual>
PUBLIC	?SetPrivateHeap@?$CEffectHashTableWithPrivateHeap@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEXPAVCDataBlockStore@@@Z ; CEffectHashTableWithPrivateHeap<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::SetPrivateHeap
PUBLIC	?AddValueWithHash@?$CEffectHashTableWithPrivateHeap@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEJPBDI@Z ; CEffectHashTableWithPrivateHeap<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::AddValueWithHash
PUBLIC	?GetData@CIterator@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEPBDXZ ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::CIterator::GetData
PUBLIC	?GetHash@CIterator@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEIXZ ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::CIterator::GetHash
PUBLIC	?GetData@CIterator@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEPAUSType@D3DX11Effects@@XZ ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::CIterator::GetData
PUBLIC	?GetHash@CIterator@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEIXZ ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::CIterator::GetHash
PUBLIC	?Grow@?$CEffectVector@USRange@D3DX11Effects@@@@IAEJXZ ; CEffectVector<D3DX11Effects::SRange>::Grow
PUBLIC	?Reserve@?$CEffectVector@USRange@D3DX11Effects@@@@IAEJI@Z ; CEffectVector<D3DX11Effects::SRange>::Reserve
PUBLIC	??0?$CEffectVector@USRange@D3DX11Effects@@@@QAE@XZ ; CEffectVector<D3DX11Effects::SRange>::CEffectVector<D3DX11Effects::SRange>
PUBLIC	??1?$CEffectVector@USRange@D3DX11Effects@@@@QAE@XZ ; CEffectVector<D3DX11Effects::SRange>::~CEffectVector<D3DX11Effects::SRange>
PUBLIC	?Clear@?$CEffectVector@USRange@D3DX11Effects@@@@QAEXXZ ; CEffectVector<D3DX11Effects::SRange>::Clear
PUBLIC	?Empty@?$CEffectVector@USRange@D3DX11Effects@@@@QAEXXZ ; CEffectVector<D3DX11Effects::SRange>::Empty
PUBLIC	?Add@?$CEffectVector@USRange@D3DX11Effects@@@@QAEPAUSRange@D3DX11Effects@@XZ ; CEffectVector<D3DX11Effects::SRange>::Add
PUBLIC	??A?$CEffectVector@USRange@D3DX11Effects@@@@QAEAAUSRange@D3DX11Effects@@I@Z ; CEffectVector<D3DX11Effects::SRange>::operator[]
PUBLIC	?GetSize@?$CEffectVector@USRange@D3DX11Effects@@@@QBEIXZ ; CEffectVector<D3DX11Effects::SRange>::GetSize
PUBLIC	?Grow@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@IAEJXZ ; CEffectVector<D3DX11Effects::SConstantBuffer *>::Grow
PUBLIC	?Reserve@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@IAEJI@Z ; CEffectVector<D3DX11Effects::SConstantBuffer *>::Reserve
PUBLIC	??0?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAE@XZ ; CEffectVector<D3DX11Effects::SConstantBuffer *>::CEffectVector<D3DX11Effects::SConstantBuffer *>
PUBLIC	??1?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAE@XZ ; CEffectVector<D3DX11Effects::SConstantBuffer *>::~CEffectVector<D3DX11Effects::SConstantBuffer *>
PUBLIC	?Clear@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAEXXZ ; CEffectVector<D3DX11Effects::SConstantBuffer *>::Clear
PUBLIC	?Empty@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAEXXZ ; CEffectVector<D3DX11Effects::SConstantBuffer *>::Empty
PUBLIC	?Add@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAEJABQAUSConstantBuffer@D3DX11Effects@@@Z ; CEffectVector<D3DX11Effects::SConstantBuffer *>::Add
PUBLIC	??A?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAEAAPAUSConstantBuffer@D3DX11Effects@@I@Z ; CEffectVector<D3DX11Effects::SConstantBuffer *>::operator[]
PUBLIC	?GetSize@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QBEIXZ ; CEffectVector<D3DX11Effects::SConstantBuffer *>::GetSize
PUBLIC	??0?$SShaderDependency@PAUSSamplerBlock@D3DX11Effects@@PAUID3D11SamplerState@@@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SShaderDependency<D3DX11Effects::SSamplerBlock *,ID3D11SamplerState *>::SShaderDependency<D3DX11Effects::SSamplerBlock *,ID3D11SamplerState *>
PUBLIC	??0?$SShaderDependency@PAUSConstantBuffer@D3DX11Effects@@PAUID3D11Buffer@@@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SShaderDependency<D3DX11Effects::SConstantBuffer *,ID3D11Buffer *>::SShaderDependency<D3DX11Effects::SConstantBuffer *,ID3D11Buffer *>
PUBLIC	??0?$SShaderDependency@PAUSInterface@D3DX11Effects@@PAUID3D11ClassInstance@@@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SShaderDependency<D3DX11Effects::SInterface *,ID3D11ClassInstance *>::SShaderDependency<D3DX11Effects::SInterface *,ID3D11ClassInstance *>
PUBLIC	??0?$SShaderDependency@PAUSShaderResource@D3DX11Effects@@PAUID3D11ShaderResourceView@@@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SShaderDependency<D3DX11Effects::SShaderResource *,ID3D11ShaderResourceView *>::SShaderDependency<D3DX11Effects::SShaderResource *,ID3D11ShaderResourceView *>
PUBLIC	??0?$SShaderDependency@PAUSUnorderedAccessView@D3DX11Effects@@PAUID3D11UnorderedAccessView@@@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SShaderDependency<D3DX11Effects::SUnorderedAccessView *,ID3D11UnorderedAccessView *>::SShaderDependency<D3DX11Effects::SUnorderedAccessView *,ID3D11UnorderedAccessView *>
PUBLIC	??$CalculateBlockAssignmentSize@USPassBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEIAAPAUSPassBlock@1@I@Z ; D3DX11Effects::CEffectLoader::CalculateBlockAssignmentSize<D3DX11Effects::SPassBlock>
PUBLIC	??$CalculateBlockAssignmentSize@USBlendBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEIAAPAUSBlendBlock@1@I@Z ; D3DX11Effects::CEffectLoader::CalculateBlockAssignmentSize<D3DX11Effects::SBlendBlock>
PUBLIC	??$CalculateBlockAssignmentSize@USDepthStencilBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEIAAPAUSDepthStencilBlock@1@I@Z ; D3DX11Effects::CEffectLoader::CalculateBlockAssignmentSize<D3DX11Effects::SDepthStencilBlock>
PUBLIC	??$CalculateBlockAssignmentSize@USRasterizerBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEIAAPAUSRasterizerBlock@1@I@Z ; D3DX11Effects::CEffectLoader::CalculateBlockAssignmentSize<D3DX11Effects::SRasterizerBlock>
PUBLIC	??$CalculateBlockAssignmentSize@USSamplerBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEIAAPAUSSamplerBlock@1@I@Z ; D3DX11Effects::CEffectLoader::CalculateBlockAssignmentSize<D3DX11Effects::SSamplerBlock>
PUBLIC	??$ReallocateBlockAssignments@USDepthStencilBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEJAAPAUSDepthStencilBlock@1@IPAU21@@Z ; D3DX11Effects::CEffectLoader::ReallocateBlockAssignments<D3DX11Effects::SDepthStencilBlock>
PUBLIC	??$ReallocateBlockAssignments@USBlendBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEJAAPAUSBlendBlock@1@IPAU21@@Z ; D3DX11Effects::CEffectLoader::ReallocateBlockAssignments<D3DX11Effects::SBlendBlock>
PUBLIC	??$ReallocateBlockAssignments@USRasterizerBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEJAAPAUSRasterizerBlock@1@IPAU21@@Z ; D3DX11Effects::CEffectLoader::ReallocateBlockAssignments<D3DX11Effects::SRasterizerBlock>
PUBLIC	??$ReallocateBlockAssignments@USSamplerBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEJAAPAUSSamplerBlock@1@IPAU21@@Z ; D3DX11Effects::CEffectLoader::ReallocateBlockAssignments<D3DX11Effects::SSamplerBlock>
PUBLIC	??$ReallocateBlockAssignments@USPassBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEJAAPAUSPassBlock@1@IPAU21@@Z ; D3DX11Effects::CEffectLoader::ReallocateBlockAssignments<D3DX11Effects::SPassBlock>
PUBLIC	?IsValid@SConstantBuffer@D3DX11Effects@@W3AGHXZ	; [thunk]:D3DX11Effects::SConstantBuffer::IsValid`adjustor{4}'
PUBLIC	?__LINE__Var@?1??AlignToPowerOf2@@YAIII@Z@4JA	; `AlignToPowerOf2'::`2'::__LINE__Var
PUBLIC	??_C@_0CD@GECBLADO@?$CIAlignment?5?$CG?5?$CIAlignment?5?9?51?$CJ?$CJ?5?$DN?$DN@ ; `string'
PUBLIC	??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@ ; `string'
PUBLIC	??_C@_0DA@FKFDAOLL@Alignment?5?$DO?50?5?$CG?$CG?5Value?5?$DM?50xfffff@ ; `string'
PUBLIC	?__LINE__Var@?1??AlignToPowerOf2@@YAPAXPAXI@Z@4JA ; `AlignToPowerOf2'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1???2@YAPAXIAAVCDataBlockStore@@@Z@4JA@af81a2e3 ; `operator new'::`2'::__LINE__Var
PUBLIC	??_C@_0BA@BGIBFJE@s?5?$DM?$DN?50xffffffff?$AA@	; `string'
PUBLIC	??_7SType@D3DX11Effects@@6B@			; D3DX11Effects::SType::`vftable'
PUBLIC	??_C@_01GBGANLPD@0?$AA@				; `string'
PUBLIC	??_7?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@6B@ ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::`vftable'
PUBLIC	??_7SConstantBuffer@D3DX11Effects@@6B?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@1@@ ; D3DX11Effects::SConstantBuffer::`vftable'
PUBLIC	??_7SConstantBuffer@D3DX11Effects@@6BID3DX11EffectType@@@ ; D3DX11Effects::SConstantBuffer::`vftable'
PUBLIC	?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B	; D3DX11Effects::g_lvGeneral
PUBLIC	??_C@_08FHHACIOE@SrcBlend?$AA@			; `string'
PUBLIC	??_C@_09PGFKOIGA@DestBlend?$AA@			; `string'
PUBLIC	??_C@_07CDPFEHAN@BlendOp?$AA@			; `string'
PUBLIC	??_C@_0O@NAACGGGK@SrcBlendAlpha?$AA@		; `string'
PUBLIC	??_C@_0P@GAOPNAKA@DestBlendAlpha?$AA@		; `string'
PUBLIC	??_C@_0N@DKCOEBAI@BlendOpAlpha?$AA@		; `string'
PUBLIC	??_C@_0BG@GLNCJOAF@RenderTargetWriteMask?$AA@	; `string'
PUBLIC	??_C@_06IBDJIBGI@Filter?$AA@			; `string'
PUBLIC	??_C@_08EIOBODP@AddressU?$AA@			; `string'
PUBLIC	??_C@_08CPKDENPM@AddressV?$AA@			; `string'
PUBLIC	??_C@_08DGLIHMLN@AddressW?$AA@			; `string'
PUBLIC	??_C@_0L@CFFHFEFO@MipLODBias?$AA@		; `string'
PUBLIC	??_C@_0O@IEMFCLON@MaxAnisotropy?$AA@		; `string'
PUBLIC	??_C@_0P@DNEECBOJ@ComparisonFunc?$AA@		; `string'
PUBLIC	??_C@_0M@DGENNPFN@BorderColor?$AA@		; `string'
PUBLIC	??_C@_06HAKHAEPP@MinLOD?$AA@			; `string'
PUBLIC	??_C@_06HDFEOELA@MaxLOD?$AA@			; `string'
PUBLIC	??_C@_07GKACAEDJ@Texture?$AA@			; `string'
PUBLIC	??_C@_0L@GABJGNCK@HullShader?$AA@		; `string'
PUBLIC	??_C@_0N@PCCENCDF@DomainShader?$AA@		; `string'
PUBLIC	??_C@_0O@OCHNEELN@ComputeShader?$AA@		; `string'
PUBLIC	?g_NullRasterizer@D3DX11Effects@@3USRasterizerBlock@1@A ; D3DX11Effects::g_NullRasterizer
PUBLIC	?g_NullDepthStencil@D3DX11Effects@@3USDepthStencilBlock@1@A ; D3DX11Effects::g_NullDepthStencil
PUBLIC	?g_NullBlend@D3DX11Effects@@3USBlendBlock@1@A	; D3DX11Effects::g_NullBlend
PUBLIC	?g_NullTexture@D3DX11Effects@@3USShaderResource@1@A ; D3DX11Effects::g_NullTexture
PUBLIC	?g_NullInterface@D3DX11Effects@@3USInterface@1@A ; D3DX11Effects::g_NullInterface
PUBLIC	?g_NullUnorderedAccessView@D3DX11Effects@@3USUnorderedAccessView@1@A ; D3DX11Effects::g_NullUnorderedAccessView
PUBLIC	?g_NullRenderTargetView@D3DX11Effects@@3USRenderTargetView@1@A ; D3DX11Effects::g_NullRenderTargetView
PUBLIC	?g_NullDepthStencilView@D3DX11Effects@@3USDepthStencilView@1@A ; D3DX11Effects::g_NullDepthStencilView
PUBLIC	?g_NullVS@D3DX11Effects@@3USShaderBlock@1@A	; D3DX11Effects::g_NullVS
PUBLIC	?g_NullGS@D3DX11Effects@@3USShaderBlock@1@A	; D3DX11Effects::g_NullGS
PUBLIC	?g_NullPS@D3DX11Effects@@3USShaderBlock@1@A	; D3DX11Effects::g_NullPS
PUBLIC	?g_NullHS@D3DX11Effects@@3USShaderBlock@1@A	; D3DX11Effects::g_NullHS
PUBLIC	?g_NullDS@D3DX11Effects@@3USShaderBlock@1@A	; D3DX11Effects::g_NullDS
PUBLIC	?g_NullCS@D3DX11Effects@@3USShaderBlock@1@A	; D3DX11Effects::g_NullCS
PUBLIC	?__LINE__Var@?1??GetSimpleParameterTypeFromObjectType@D3DX11Effects@@YA?AW4_D3D_SHADER_VARIABLE_TYPE@@W4EObjectType@2@@Z@4JA ; `D3DX11Effects::GetSimpleParameterTypeFromObjectType'::`2'::__LINE__Var
PUBLIC	??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@ ; `string'
PUBLIC	?__LINE__Var@?1??ReserveMemory@CEffectHeap@D3DX11Effects@@QAEJI@Z@4JA ; `D3DX11Effects::CEffectHeap::ReserveMemory'::`2'::__LINE__Var
PUBLIC	??_C@_08BINKKIMB@?$CBm_pData?$AA@		; `string'
PUBLIC	??_C@_0DD@BFMHPEDF@dwSize?5?$DN?$DN?5AlignToPowerOf2?$CIdwSize@ ; `string'
PUBLIC	??_C@_0DF@IDKFFGGG@m_pData?5?$DN?$DN?5AlignToPowerOf2?$CIm_pDa@ ; `string'
PUBLIC	?__LINE__Var@?1??AddString@CEffectHeap@D3DX11Effects@@QAEJPBDPAPAD@Z@4JA ; `D3DX11Effects::CEffectHeap::AddString'::`2'::__LINE__Var
PUBLIC	??_C@_0BD@BAKFCGNM@size?5?$DM?$DN?50xffffffff?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??GetInterfaceParametersAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIIPAPAUSInterfaceParameter@SShaderBlock@3@@Z@4JA ; `D3DX11Effects::CEffectLoader::GetInterfaceParametersAndAddToReflection'::`2'::__LINE__Var
PUBLIC	??_C@_0N@FLMPGDAJ@ppInterfaces?$AA@		; `string'
PUBLIC	?__LINE__Var@?1??FixupCBPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSConstantBuffer@3@@Z@4JA ; `D3DX11Effects::CEffectLoader::FixupCBPointer'::`2'::__LINE__Var
PUBLIC	??_C@_0FJ@INHMCKEN@index?5?$CK?5sizeof?$CISConstantBuffer?$CJ?5@ ; `string'
PUBLIC	?__LINE__Var@?1??FixupShaderPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderBlock@3@@Z@4JA ; `D3DX11Effects::CEffectLoader::FixupShaderPointer'::`2'::__LINE__Var
PUBLIC	??_C@_0FB@MDPFEFHI@index?5?$CK?5sizeof?$CISShaderBlock?$CJ?5?$DN?$DN?5@ ; `string'
PUBLIC	?__LINE__Var@?1??FixupDSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSDepthStencilBlock@3@@Z@4JA ; `D3DX11Effects::CEffectLoader::FixupDSPointer'::`2'::__LINE__Var
PUBLIC	??_C@_0EO@EMFBLMHI@index?5?$CK?5sizeof?$CISDepthStencilBloc@ ; `string'
PUBLIC	?__LINE__Var@?1??FixupABPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSBlendBlock@3@@Z@4JA ; `D3DX11Effects::CEffectLoader::FixupABPointer'::`2'::__LINE__Var
PUBLIC	??_C@_0EH@EEOKIBCN@index?5?$CK?5sizeof?$CISBlendBlock?$CJ?5?$DN?$DN?5?$CI@ ; `string'
PUBLIC	?__LINE__Var@?1??FixupRSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSRasterizerBlock@3@@Z@4JA ; `D3DX11Effects::CEffectLoader::FixupRSPointer'::`2'::__LINE__Var
PUBLIC	??_C@_0EM@COJALNDC@index?5?$CK?5sizeof?$CISRasterizerBlock?$CJ@ ; `string'
PUBLIC	?__LINE__Var@?1??FixupSamplerPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSSamplerBlock@3@@Z@4JA ; `D3DX11Effects::CEffectLoader::FixupSamplerPointer'::`2'::__LINE__Var
PUBLIC	??_C@_0EP@DBMIHIDO@index?5?$CK?5sizeof?$CISSamplerBlock?$CJ?5?$DN?$DN@ ; `string'
PUBLIC	?__LINE__Var@?1??FixupInterfacePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSInterface@3@_N@Z@4JA ; `D3DX11Effects::CEffectLoader::FixupInterfacePointer'::`2'::__LINE__Var
PUBLIC	??_C@_0FA@JGMDEBIG@index?5?$CK?5sizeof?$CISInterface?$CJ?5?$DN?$DN?5?$CI?$CI@ ; `string'
PUBLIC	?__LINE__Var@?1??FixupShaderResourcePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderResource@3@@Z@4JA ; `D3DX11Effects::CEffectLoader::FixupShaderResourcePointer'::`2'::__LINE__Var
PUBLIC	??_C@_0FJ@HNIAAANN@index?5?$CK?5sizeof?$CISShaderResource?$CJ?5@ ; `string'
PUBLIC	??_C@_0HL@CPLEJCIJ@index?5?$CK?5sizeof?$CISConstantBuffer?$CJ?5@ ; `string'
PUBLIC	?__LINE__Var@?1??FixupUnorderedAccessViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSUnorderedAccessView@3@@Z@4JA ; `D3DX11Effects::CEffectLoader::FixupUnorderedAccessViewPointer'::`2'::__LINE__Var
PUBLIC	??_C@_0GO@DKPEPIML@index?5?$CK?5sizeof?$CISUnorderedAccessV@ ; `string'
PUBLIC	?__LINE__Var@?1??FixupRenderTargetViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSRenderTargetView@3@@Z@4JA ; `D3DX11Effects::CEffectLoader::FixupRenderTargetViewPointer'::`2'::__LINE__Var
PUBLIC	??_C@_0GF@BPLAAPBL@index?5?$CK?5sizeof?$CISRenderTargetView@ ; `string'
PUBLIC	?__LINE__Var@?1??FixupDepthStencilViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSDepthStencilView@3@@Z@4JA ; `D3DX11Effects::CEffectLoader::FixupDepthStencilViewPointer'::`2'::__LINE__Var
PUBLIC	??_C@_0GF@JFEJOMCF@index?5?$CK?5sizeof?$CISDepthStencilView@ ; `string'
PUBLIC	?__LINE__Var@?1??FixupStringPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSString@3@@Z@4JA ; `D3DX11Effects::CEffectLoader::FixupStringPointer'::`2'::__LINE__Var
PUBLIC	??_C@_0EH@BOFKCOKB@index?5?$CK?5sizeof?$CISString?$CJ?5?$DN?$DN?5?$CI?$CIsiz@ ; `string'
PUBLIC	?__LINE__Var@?1??FixupMemberDataPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSMemberDataPointer@3@@Z@4JA ; `D3DX11Effects::CEffectLoader::FixupMemberDataPointer'::`2'::__LINE__Var
PUBLIC	??_C@_0FP@HCBEHMGA@index?5?$CK?5sizeof?$CISMemberDataPointe@ ; `string'
PUBLIC	?__LINE__Var@?1??FixupVariablePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSGlobalVariable@3@@Z@4JA ; `D3DX11Effects::CEffectLoader::FixupVariablePointer'::`2'::__LINE__Var
PUBLIC	??_C@_0EJ@ODBKDCBD@index?5?$CK?5sizeof?$CISGlobalVariable?$CJ?5@ ; `string'
PUBLIC	?__LINE__Var@?1??FixupGroupPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSGroup@3@@Z@4JA ; `D3DX11Effects::CEffectLoader::FixupGroupPointer'::`2'::__LINE__Var
PUBLIC	??_C@_0EE@IAMBMFNL@index?5?$CK?5sizeof?$CISGroup?$CJ?5?$DN?$DN?5?$CI?$CIsize@ ; `string'
PUBLIC	?__LINE__Var@?1??GetEffectVersion@D3DX11Effects@@YAJIPAK@Z@4JA ; `D3DX11Effects::GetEffectVersion'::`2'::__LINE__Var
PUBLIC	??_C@_0BB@EKHKLBAF@pVersion?5?$CB?$DN?5NULL?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@3@PBXI@Z@4JA ; `D3DX11Effects::CEffectLoader::LoadEffect'::`2'::__LINE__Var
PUBLIC	??_C@_0BJ@CKANEIJE@pEffect?5?$CG?$CG?5pEffectBuffer?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??LoadStringAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPADI@Z@4JA ; `D3DX11Effects::CEffectLoader::LoadStringAndAddToPool'::`2'::__LINE__Var
PUBLIC	??_C@_0CB@IDNKIKCE@m_pEffect?9?$DOm_pPooledHeap?5?$CB?$DN?5NULL@ ; `string'
PUBLIC	?__LINE__Var@?1??LoadTypeAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPAUSType@3@I@Z@4JA ; `D3DX11Effects::CEffectLoader::LoadTypeAndAddToPool'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??UnpackData@CEffectLoader@D3DX11Effects@@IAEIPAE0IPAUSType@3@PAI@Z@4JA ; `D3DX11Effects::CEffectLoader::UnpackData'::`2'::__LINE__Var
PUBLIC	??_C@_0GF@KAFJAGGJ@?$CIUINT_PTR?$CJpType?9?$DOStructType?4pMem@ ; `string'
PUBLIC	??_C@_0BL@MBHMPHIB@PackedDataSize?5?$DO?5bytesRead?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@3@PAEPAI2@Z@4JA ; `D3DX11Effects::CEffectLoader::LoadAssignments'::`2'::__LINE__Var
PUBLIC	??_C@_0DB@DHBABGJO@g_lvGeneral?$FLpsAssignments?$FLi?$FN?4iSt@ ; `string'
PUBLIC	??_C@_0CC@HBGMAMIM@pAssignment?9?$DOIsObjectAssignment?$CI@ ; `string'
PUBLIC	?__LINE__Var@?1??GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@3@@Z@4JA ; `D3DX11Effects::CEffectLoader::GrabShaderData'::`2'::__LINE__Var
PUBLIC	??_C@_0BK@FLKFENGC@pRange?9?$DOlast?5?$DM?$DN?5bindPoint?$AA@ ; `string'
PUBLIC	??_C@_0BP@KPGDMHCO@ShaderDesc?4ConstantBuffers?5?$DO?50?$AA@ ; `string'
PUBLIC	??_C@_0DD@KDJDPJGM@InterfaceDesc?4uFlags?5?$CG?5D3D11_SVF@ ; `string'
PUBLIC	??_C@_09LHJJGINI@size?5?$DN?$DN?51?$AA@		; `string'
PUBLIC	??_C@_0BK@HKMDMOLB@bindPoint?5?$DN?$DN?5pRange?9?$DOlast?$AA@ ; `string'
PUBLIC	??_C@_0CM@MAFMDAKC@pDep?9?$DOCount?5?$DN?$DN?5pRange?9?$DOvResource@ ; `string'
PUBLIC	?__LINE__Var@?1??BuildShaderBlock@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@3@@Z@4JA ; `D3DX11Effects::CEffectLoader::BuildShaderBlock'::`2'::__LINE__Var
PUBLIC	??_C@_0CB@OFFCFNOA@pShaderBlock?9?$DOpD3DObject?5?$DN?$DN?5NULL@ ; `string'
PUBLIC	??_C@_0CK@DHOBBOIG@pShaderBlock?9?$DOpInputSignatureBlo@ ; `string'
PUBLIC	??_C@_0DB@CCEAMAH@Internal?5loading?5error?3?5cannot?5m@ ; `string'
PUBLIC	?__LINE__Var@?1??ReallocateEffectData@CEffectLoader@D3DX11Effects@@IAEJ_N@Z@4JA ; `D3DX11Effects::CEffectLoader::ReallocateEffectData'::`2'::__LINE__Var
PUBLIC	??_C@_0CC@JJDOBLOA@m_BackgroundInterfaces?$FLi?$FN?5?$CB?$DN?5NUL@ ; `string'
PUBLIC	??_C@_0GI@CBPKGJFM@pMember?9?$DOData?4pGeneric?5?$DN?$DN?5NULL?5?$HM@ ; `string'
PUBLIC	??_C@_0CA@ONKMEPNK@ID3DX11EffectVariable?3?3AsScalar?$AA@ ; `string'
PUBLIC	??_C@_0CA@IMDOICHK@ID3DX11EffectVariable?3?3AsVector?$AA@ ; `string'
PUBLIC	??_C@_0CA@HLLPIICO@ID3DX11EffectVariable?3?3AsMatrix?$AA@ ; `string'
PUBLIC	??_C@_0CA@NPAIMBLA@ID3DX11EffectVariable?3?3AsString?$AA@ ; `string'
PUBLIC	??_C@_0CH@DGGONKPA@ID3DX11EffectVariable?3?3AsClassIn@ ; `string'
PUBLIC	??_C@_0CD@IJDMLLGC@ID3DX11EffectVariable?3?3AsInterfa@ ; `string'
PUBLIC	??_C@_0CI@CAHLNOAL@ID3DX11EffectVariable?3?3AsShaderR@ ; `string'
PUBLIC	??_C@_0CN@NNAKDDLF@ID3DX11EffectVariable?3?3AsUnorder@ ; `string'
PUBLIC	??_C@_0CK@MBMJDIEM@ID3DX11EffectVariable?3?3AsRenderT@ ; `string'
PUBLIC	??_C@_0CK@BDFLCADG@ID3DX11EffectVariable?3?3AsDepthSt@ ; `string'
PUBLIC	??_C@_0CI@NALNEDPE@ID3DX11EffectVariable?3?3AsConstan@ ; `string'
PUBLIC	??_C@_0CA@EFNGDPCK@ID3DX11EffectVariable?3?3AsShader?$AA@ ; `string'
PUBLIC	??_C@_0BP@BBIMBLAD@ID3DX11EffectVariable?3?3AsBlend?$AA@ ; `string'
PUBLIC	??_C@_0CG@OKHHDBGN@ID3DX11EffectVariable?3?3AsDepthSt@ ; `string'
PUBLIC	??_C@_0CE@DBMPNCNM@ID3DX11EffectVariable?3?3AsRasteri@ ; `string'
PUBLIC	??_C@_0CB@NFKMEKAI@ID3DX11EffectVariable?3?3AsSampler@ ; `string'
PUBLIC	??_C@_0BC@HKPIIPPC@index?5?$DM?5m_CurSize?$AA@	; `string'
PUBLIC	??_C@_0BH@ONGAIIBI@NULL?5?$DN?$DN?5m_pPrivateHeap?$AA@ ; `string'
PUBLIC	??_C@_0BH@NPDKKNAK@NULL?5?$CB?$DN?5m_pPrivateHeap?$AA@ ; `string'
PUBLIC	??_C@_0BD@EGDKBIFK@m_NumHashSlots?5?$DO?50?$AA@	; `string'
PUBLIC	??_C@_0BD@NLANFHLH@NULL?5?$CB?$DN?5pHashEntry?$AA@ ; `string'
PUBLIC	??_C@_0BP@NMGLEII@valuesMigrated?5?$DN?$DN?5m_NumEntries?$AA@ ; `string'
PUBLIC	??_C@_0EM@CAMAPMFM@pIterator?9?$DOppHashSlot?5?$DO?$DN?5m_rgpHa@ ; `string'
PUBLIC	??_C@_0BO@BGHPDFMF@NULL?5?$CB?$DN?5pIterator?9?$DOpHashEntry?$AA@ ; `string'
PUBLIC	??_C@_0DL@GPKFPIPI@?$CKppPointer?5?$DN?$DN?5AlignToPowerOf2?$CI?$CKp@ ; `string'
PUBLIC	??_C@_0EH@BPELLKNA@?$CBpAssignment?9?$DOIsObjectAssignment@ ; `string'
PUBLIC	??_C@_0EG@GMMJAJM@pVariable?9?$DOpType?9?$DOBelongsInConst@ ; `string'
PUBLIC	??_C@_0BM@CFJFHGND@m_pEffect?9?$DOm_LocalTimer?5?$DO?50?$AA@ ; `string'
PUBLIC	??_R0?AUID3DX11EffectType@@@8			; ID3DX11EffectType `RTTI Type Descriptor'
PUBLIC	??_R3ID3DX11EffectType@@8			; ID3DX11EffectType::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ID3DX11EffectType@@8			; ID3DX11EffectType::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ID3DX11EffectType@@8		; ID3DX11EffectType::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUID3DX11EffectVariable@@@8		; ID3DX11EffectVariable `RTTI Type Descriptor'
PUBLIC	??_R3ID3DX11EffectVariable@@8			; ID3DX11EffectVariable::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ID3DX11EffectVariable@@8			; ID3DX11EffectVariable::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ID3DX11EffectVariable@@8		; ID3DX11EffectVariable::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUID3DX11EffectConstantBuffer@@@8		; ID3DX11EffectConstantBuffer `RTTI Type Descriptor'
PUBLIC	??_R3ID3DX11EffectConstantBuffer@@8		; ID3DX11EffectConstantBuffer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ID3DX11EffectConstantBuffer@@8		; ID3DX11EffectConstantBuffer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ID3DX11EffectConstantBuffer@@8	; ID3DX11EffectConstantBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4SConstantBuffer@D3DX11Effects@@6B?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@1@@ ; D3DX11Effects::SConstantBuffer::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUSConstantBuffer@D3DX11Effects@@@8	; D3DX11Effects::SConstantBuffer `RTTI Type Descriptor'
PUBLIC	??_R3SConstantBuffer@D3DX11Effects@@8		; D3DX11Effects::SConstantBuffer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SConstantBuffer@D3DX11Effects@@8		; D3DX11Effects::SConstantBuffer::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SConstantBuffer@D3DX11Effects@@8	; D3DX11Effects::SConstantBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@8 ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AU?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@@8 ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer> `RTTI Type Descriptor'
PUBLIC	??_R3?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@8 ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@8 ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@ID3DX11EffectType@@8		; ID3DX11EffectType::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R4SConstantBuffer@D3DX11Effects@@6BID3DX11EffectType@@@ ; D3DX11Effects::SConstantBuffer::`RTTI Complete Object Locator'
PUBLIC	??_R4SType@D3DX11Effects@@6B@			; D3DX11Effects::SType::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUSType@D3DX11Effects@@@8			; D3DX11Effects::SType `RTTI Type Descriptor'
PUBLIC	??_R3SType@D3DX11Effects@@8			; D3DX11Effects::SType::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SType@D3DX11Effects@@8			; D3DX11Effects::SType::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SType@D3DX11Effects@@8		; D3DX11Effects::SType::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@6B@ ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::`RTTI Complete Object Locator'
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	__purecall:PROC
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??2@YAPAXIABUnothrow_t@std@@@Z:PROC		; operator new
EXTRN	??_U@YAPAXIABUnothrow_t@std@@@Z:PROC		; operator new[]
EXTRN	??3@YAXPAXABUnothrow_t@std@@@Z:PROC		; operator delete
EXTRN	??_V@YAXPAXABUnothrow_t@std@@@Z:PROC		; operator delete[]
EXTRN	?D3DXDebugAssert@@YGHPBDH0@Z:PROC		; D3DXDebugAssert
EXTRN	?SetData@CMemoryStream@D3DX11Core@@QAEJPBXK@Z:PROC ; D3DX11Core::CMemoryStream::SetData
EXTRN	?Read@CMemoryStream@D3DX11Core@@QAEJPAI@Z:PROC	; D3DX11Core::CMemoryStream::Read
EXTRN	?Read@CMemoryStream@D3DX11Core@@QAEJPAPAXK@Z:PROC ; D3DX11Core::CMemoryStream::Read
EXTRN	?ReadAtOffset@CMemoryStream@D3DX11Core@@QAEJKKPAPAX@Z:PROC ; D3DX11Core::CMemoryStream::ReadAtOffset
EXTRN	?ReadAtOffset@CMemoryStream@D3DX11Core@@QAEJKPAPBD@Z:PROC ; D3DX11Core::CMemoryStream::ReadAtOffset
EXTRN	?GetPosition@CMemoryStream@D3DX11Core@@QAEKXZ:PROC ; D3DX11Core::CMemoryStream::GetPosition
EXTRN	?Seek@CMemoryStream@D3DX11Core@@QAEJK@Z:PROC	; D3DX11Core::CMemoryStream::Seek
EXTRN	??0CMemoryStream@D3DX11Core@@QAE@XZ:PROC	; D3DX11Core::CMemoryStream::CMemoryStream
EXTRN	??1CMemoryStream@D3DX11Core@@QAE@XZ:PROC	; D3DX11Core::CMemoryStream::~CMemoryStream
EXTRN	?Allocate@CDataBlockStore@@QAEPAXI@Z:PROC	; CDataBlockStore::Allocate
EXTRN	?EnableAlignment@CDataBlockStore@@QAEXXZ:PROC	; CDataBlockStore::EnableAlignment
EXTRN	??0CDataBlockStore@@QAE@XZ:PROC			; CDataBlockStore::CDataBlockStore
EXTRN	??1CDataBlockStore@@QAE@XZ:PROC			; CDataBlockStore::~CDataBlockStore
EXTRN	?IsEqual@SType@D3DX11Effects@@QBEHPAU12@@Z:PROC	; D3DX11Effects::SType::IsEqual
EXTRN	?GetDescHelper@SType@D3DX11Effects@@QBEJPAU_D3DX11_EFFECT_TYPE_DESC@@H@Z:PROC ; D3DX11Effects::SType::GetDescHelper
EXTRN	?GetMemberTypeByIndex@SType@D3DX11Effects@@UAGPAUID3DX11EffectType@@I@Z:PROC ; D3DX11Effects::SType::GetMemberTypeByIndex
EXTRN	?GetMemberTypeByName@SType@D3DX11Effects@@UAGPAUID3DX11EffectType@@PBD@Z:PROC ; D3DX11Effects::SType::GetMemberTypeByName
EXTRN	?GetMemberTypeBySemantic@SType@D3DX11Effects@@UAGPAUID3DX11EffectType@@PBD@Z:PROC ; D3DX11Effects::SType::GetMemberTypeBySemantic
EXTRN	?GetMemberName@SType@D3DX11Effects@@UAGPBDI@Z:PROC ; D3DX11Effects::SType::GetMemberName
EXTRN	?GetMemberSemantic@SType@D3DX11Effects@@UAGPBDI@Z:PROC ; D3DX11Effects::SType::GetMemberSemantic
EXTRN	?GetBlockByIndex@D3DX11Effects@@YAPAXW4EVarType@1@W4EObjectType@1@PAXI@Z:PROC ; D3DX11Effects::GetBlockByIndex
EXTRN	??0STechnique@D3DX11Effects@@QAE@XZ:PROC	; D3DX11Effects::STechnique::STechnique
EXTRN	??0SGroup@D3DX11Effects@@QAE@XZ:PROC		; D3DX11Effects::SGroup::SGroup
EXTRN	??0SPassBlock@D3DX11Effects@@QAE@XZ:PROC	; D3DX11Effects::SPassBlock::SPassBlock
EXTRN	?CheckDependencies@SPassBlock@D3DX11Effects@@QAEHXZ:PROC ; D3DX11Effects::SPassBlock::CheckDependencies
EXTRN	??0SDepthStencilBlock@D3DX11Effects@@QAE@XZ:PROC ; D3DX11Effects::SDepthStencilBlock::SDepthStencilBlock
EXTRN	??0SBlendBlock@D3DX11Effects@@QAE@XZ:PROC	; D3DX11Effects::SBlendBlock::SBlendBlock
EXTRN	??0SRasterizerBlock@D3DX11Effects@@QAE@XZ:PROC	; D3DX11Effects::SRasterizerBlock::SRasterizerBlock
EXTRN	??0SSamplerBlock@D3DX11Effects@@QAE@XZ:PROC	; D3DX11Effects::SSamplerBlock::SSamplerBlock
EXTRN	??0SRenderTargetView@D3DX11Effects@@QAE@XZ:PROC	; D3DX11Effects::SRenderTargetView::SRenderTargetView
EXTRN	??0SDepthStencilView@D3DX11Effects@@QAE@XZ:PROC	; D3DX11Effects::SDepthStencilView::SDepthStencilView
EXTRN	??0SShaderBlock@D3DX11Effects@@QAE@PAUSD3DShaderVTable@1@@Z:PROC ; D3DX11Effects::SShaderBlock::SShaderBlock
EXTRN	?GetShaderType@SShaderBlock@D3DX11Effects@@QAE?AW4EObjectType@2@XZ:PROC ; D3DX11Effects::SShaderBlock::GetShaderType
EXTRN	??0SString@D3DX11Effects@@QAE@XZ:PROC		; D3DX11Effects::SString::SString
EXTRN	?PlacementNewVariable@D3DX11Effects@@YAJPAXPAUSType@1@H@Z:PROC ; D3DX11Effects::PlacementNewVariable
EXTRN	??0SAnonymousShader@D3DX11Effects@@QAE@PAUSShaderBlock@1@@Z:PROC ; D3DX11Effects::SAnonymousShader::SAnonymousShader
EXTRN	?IsValid@SConstantBuffer@D3DX11Effects@@UAGHXZ:PROC ; D3DX11Effects::SConstantBuffer::IsValid
EXTRN	?GetType@SConstantBuffer@D3DX11Effects@@UAGPAUID3DX11EffectType@@XZ:PROC ; D3DX11Effects::SConstantBuffer::GetType
EXTRN	?GetDesc@SConstantBuffer@D3DX11Effects@@UAGJPAU_D3DX11_EFFECT_VARIABLE_DESC@@@Z:PROC ; D3DX11Effects::SConstantBuffer::GetDesc
EXTRN	?GetAnnotationByIndex@SConstantBuffer@D3DX11Effects@@UAGPAUID3DX11EffectVariable@@I@Z:PROC ; D3DX11Effects::SConstantBuffer::GetAnnotationByIndex
EXTRN	?GetAnnotationByName@SConstantBuffer@D3DX11Effects@@UAGPAUID3DX11EffectVariable@@PBD@Z:PROC ; D3DX11Effects::SConstantBuffer::GetAnnotationByName
EXTRN	?GetMemberByIndex@SConstantBuffer@D3DX11Effects@@UAGPAUID3DX11EffectVariable@@I@Z:PROC ; D3DX11Effects::SConstantBuffer::GetMemberByIndex
EXTRN	?GetMemberByName@SConstantBuffer@D3DX11Effects@@UAGPAUID3DX11EffectVariable@@PBD@Z:PROC ; D3DX11Effects::SConstantBuffer::GetMemberByName
EXTRN	?GetMemberBySemantic@SConstantBuffer@D3DX11Effects@@UAGPAUID3DX11EffectVariable@@PBD@Z:PROC ; D3DX11Effects::SConstantBuffer::GetMemberBySemantic
EXTRN	?GetElement@SConstantBuffer@D3DX11Effects@@UAGPAUID3DX11EffectVariable@@I@Z:PROC ; D3DX11Effects::SConstantBuffer::GetElement
EXTRN	?GetParentConstantBuffer@SConstantBuffer@D3DX11Effects@@UAGPAUID3DX11EffectConstantBuffer@@XZ:PROC ; D3DX11Effects::SConstantBuffer::GetParentConstantBuffer
EXTRN	?AsConstantBuffer@SConstantBuffer@D3DX11Effects@@UAGPAUID3DX11EffectConstantBuffer@@XZ:PROC ; D3DX11Effects::SConstantBuffer::AsConstantBuffer
EXTRN	?SetRawValue@SConstantBuffer@D3DX11Effects@@UAGJPBXII@Z:PROC ; D3DX11Effects::SConstantBuffer::SetRawValue
EXTRN	?GetRawValue@SConstantBuffer@D3DX11Effects@@UAGJPAXII@Z:PROC ; D3DX11Effects::SConstantBuffer::GetRawValue
EXTRN	?SetConstantBuffer@SConstantBuffer@D3DX11Effects@@UAGJPAUID3D11Buffer@@@Z:PROC ; D3DX11Effects::SConstantBuffer::SetConstantBuffer
EXTRN	?GetConstantBuffer@SConstantBuffer@D3DX11Effects@@UAGJPAPAUID3D11Buffer@@@Z:PROC ; D3DX11Effects::SConstantBuffer::GetConstantBuffer
EXTRN	?UndoSetConstantBuffer@SConstantBuffer@D3DX11Effects@@UAGJXZ:PROC ; D3DX11Effects::SConstantBuffer::UndoSetConstantBuffer
EXTRN	?SetTextureBuffer@SConstantBuffer@D3DX11Effects@@UAGJPAUID3D11ShaderResourceView@@@Z:PROC ; D3DX11Effects::SConstantBuffer::SetTextureBuffer
EXTRN	?GetTextureBuffer@SConstantBuffer@D3DX11Effects@@UAGJPAPAUID3D11ShaderResourceView@@@Z:PROC ; D3DX11Effects::SConstantBuffer::GetTextureBuffer
EXTRN	?UndoSetTextureBuffer@SConstantBuffer@D3DX11Effects@@UAGJXZ:PROC ; D3DX11Effects::SConstantBuffer::UndoSetTextureBuffer
EXTRN	?GetDesc@SConstantBuffer@D3DX11Effects@@UAGJPAU_D3DX11_EFFECT_TYPE_DESC@@@Z:PROC ; D3DX11Effects::SConstantBuffer::GetDesc
EXTRN	?GetMemberTypeByIndex@SConstantBuffer@D3DX11Effects@@UAGPAUID3DX11EffectType@@I@Z:PROC ; D3DX11Effects::SConstantBuffer::GetMemberTypeByIndex
EXTRN	?GetMemberTypeByName@SConstantBuffer@D3DX11Effects@@UAGPAUID3DX11EffectType@@PBD@Z:PROC ; D3DX11Effects::SConstantBuffer::GetMemberTypeByName
EXTRN	?GetMemberTypeBySemantic@SConstantBuffer@D3DX11Effects@@UAGPAUID3DX11EffectType@@PBD@Z:PROC ; D3DX11Effects::SConstantBuffer::GetMemberTypeBySemantic
EXTRN	?GetMemberName@SConstantBuffer@D3DX11Effects@@UAGPBDI@Z:PROC ; D3DX11Effects::SConstantBuffer::GetMemberName
EXTRN	?GetMemberSemantic@SConstantBuffer@D3DX11Effects@@UAGPBDI@Z:PROC ; D3DX11Effects::SConstantBuffer::GetMemberSemantic
EXTRN	?EvaluateAssignment@CEffect@D3DX11Effects@@IAEHPAUSAssignment@2@@Z:PROC ; D3DX11Effects::CEffect::EvaluateAssignment
EXTRN	?FindVariableByName@CEffect@D3DX11Effects@@IAEPAUSGlobalVariable@2@PBD@Z:PROC ; D3DX11Effects::CEffect::FindVariableByName
EXTRN	?FindVariableByNameWithParsing@CEffect@D3DX11Effects@@IAEPAUSVariable@2@PBD@Z:PROC ; D3DX11Effects::CEffect::FindVariableByNameWithParsing
EXTRN	?FindCB@CEffect@D3DX11Effects@@IAEPAUSConstantBuffer@2@PBD@Z:PROC ; D3DX11Effects::CEffect::FindCB
EXTRN	?ReleaseShaderRefection@CEffect@D3DX11Effects@@QAEXXZ:PROC ; D3DX11Effects::CEffect::ReleaseShaderRefection
EXTRN	_D3DReflect@16:PROC
EXTRN	_D3DGetInputSignatureBlob@12:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__ftoui3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	?nothrow@std@@3Unothrow_t@1@B:BYTE		; std::nothrow
EXTRN	?g_InvalidScalarVariable@D3DX11Effects@@3USEffectInvalidScalarVariable@1@A:DWORD ; D3DX11Effects::g_InvalidScalarVariable
EXTRN	?g_InvalidVectorVariable@D3DX11Effects@@3USEffectInvalidVectorVariable@1@A:DWORD ; D3DX11Effects::g_InvalidVectorVariable
EXTRN	?g_InvalidMatrixVariable@D3DX11Effects@@3USEffectInvalidMatrixVariable@1@A:DWORD ; D3DX11Effects::g_InvalidMatrixVariable
EXTRN	?g_InvalidStringVariable@D3DX11Effects@@3USEffectInvalidStringVariable@1@A:DWORD ; D3DX11Effects::g_InvalidStringVariable
EXTRN	?g_InvalidClassInstanceVariable@D3DX11Effects@@3USEffectInvalidClassInstanceVariable@1@A:DWORD ; D3DX11Effects::g_InvalidClassInstanceVariable
EXTRN	?g_InvalidInterfaceVariable@D3DX11Effects@@3USEffectInvalidInterfaceVariable@1@A:DWORD ; D3DX11Effects::g_InvalidInterfaceVariable
EXTRN	?g_InvalidShaderResourceVariable@D3DX11Effects@@3USEffectInvalidShaderResourceVariable@1@A:DWORD ; D3DX11Effects::g_InvalidShaderResourceVariable
EXTRN	?g_InvalidUnorderedAccessViewVariable@D3DX11Effects@@3USEffectInvalidUnorderedAccessViewVariable@1@A:DWORD ; D3DX11Effects::g_InvalidUnorderedAccessViewVariable
EXTRN	?g_InvalidRenderTargetViewVariable@D3DX11Effects@@3USEffectInvalidRenderTargetViewVariable@1@A:DWORD ; D3DX11Effects::g_InvalidRenderTargetViewVariable
EXTRN	?g_InvalidDepthStencilViewVariable@D3DX11Effects@@3USEffectInvalidDepthStencilViewVariable@1@A:DWORD ; D3DX11Effects::g_InvalidDepthStencilViewVariable
EXTRN	?g_InvalidConstantBuffer@D3DX11Effects@@3USEffectInvalidConstantBuffer@1@A:DWORD ; D3DX11Effects::g_InvalidConstantBuffer
EXTRN	?g_InvalidShaderVariable@D3DX11Effects@@3USEffectInvalidShaderVariable@1@A:DWORD ; D3DX11Effects::g_InvalidShaderVariable
EXTRN	?g_InvalidBlendVariable@D3DX11Effects@@3USEffectInvalidBlendVariable@1@A:DWORD ; D3DX11Effects::g_InvalidBlendVariable
EXTRN	?g_InvalidDepthStencilVariable@D3DX11Effects@@3USEffectInvalidDepthStencilVariable@1@A:DWORD ; D3DX11Effects::g_InvalidDepthStencilVariable
EXTRN	?g_InvalidRasterizerVariable@D3DX11Effects@@3USEffectInvalidRasterizerVariable@1@A:DWORD ; D3DX11Effects::g_InvalidRasterizerVariable
EXTRN	?g_InvalidSamplerVariable@D3DX11Effects@@3USEffectInvalidSamplerVariable@1@A:DWORD ; D3DX11Effects::g_InvalidSamplerVariable
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?g_NullRasterizer@D3DX11Effects@@3USRasterizerBlock@1@A DB 040H DUP (?) ; D3DX11Effects::g_NullRasterizer
?g_NullDepthStencil@D3DX11Effects@@3USDepthStencilBlock@1@A DB 04cH DUP (?) ; D3DX11Effects::g_NullDepthStencil
?g_NullBlend@D3DX11Effects@@3USBlendBlock@1@A DB 0120H DUP (?) ; D3DX11Effects::g_NullBlend
?g_NullTexture@D3DX11Effects@@3USShaderResource@1@A DD 01H DUP (?) ; D3DX11Effects::g_NullTexture
?g_NullInterface@D3DX11Effects@@3USInterface@1@A DD 01H DUP (?) ; D3DX11Effects::g_NullInterface
?g_NullUnorderedAccessView@D3DX11Effects@@3USUnorderedAccessView@1@A DD 01H DUP (?) ; D3DX11Effects::g_NullUnorderedAccessView
?g_NullRenderTargetView@D3DX11Effects@@3USRenderTargetView@1@A DD 01H DUP (?) ; D3DX11Effects::g_NullRenderTargetView
?g_NullDepthStencilView@D3DX11Effects@@3USDepthStencilView@1@A DD 01H DUP (?) ; D3DX11Effects::g_NullDepthStencilView
?g_NullVS@D3DX11Effects@@3USShaderBlock@1@A DB 044H DUP (?) ; D3DX11Effects::g_NullVS
?g_NullGS@D3DX11Effects@@3USShaderBlock@1@A DB 044H DUP (?) ; D3DX11Effects::g_NullGS
?g_NullPS@D3DX11Effects@@3USShaderBlock@1@A DB 044H DUP (?) ; D3DX11Effects::g_NullPS
?g_NullHS@D3DX11Effects@@3USShaderBlock@1@A DB 044H DUP (?) ; D3DX11Effects::g_NullHS
?g_NullDS@D3DX11Effects@@3USShaderBlock@1@A DB 044H DUP (?) ; D3DX11Effects::g_NullDS
?g_NullCS@D3DX11Effects@@3USShaderBlock@1@A DB 044H DUP (?) ; D3DX11Effects::g_NullCS
_BSS	ENDS
CRT$XCU	SEGMENT
_g_lvGeneral$initializer$ DD FLAT:??__Eg_lvGeneral@D3DX11Effects@@YAXXZ
CRT$XCU	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R4?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@6B@
rdata$r	SEGMENT
??_R4?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@6B@ DD 00H ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AU?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@@8
	DD	FLAT:??_R3?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SType@D3DX11Effects@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SType@D3DX11Effects@@8 DD FLAT:??_R0?AUSType@D3DX11Effects@@@8 ; D3DX11Effects::SType::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SType@D3DX11Effects@@8
rdata$r	ENDS
;	COMDAT ??_R2SType@D3DX11Effects@@8
rdata$r	SEGMENT
??_R2SType@D3DX11Effects@@8 DD FLAT:??_R1A@?0A@EA@SType@D3DX11Effects@@8 ; D3DX11Effects::SType::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ID3DX11EffectType@@8
rdata$r	ENDS
;	COMDAT ??_R3SType@D3DX11Effects@@8
rdata$r	SEGMENT
??_R3SType@D3DX11Effects@@8 DD 00H			; D3DX11Effects::SType::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2SType@D3DX11Effects@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUSType@D3DX11Effects@@@8
data$r	SEGMENT
??_R0?AUSType@D3DX11Effects@@@8 DD FLAT:??_7type_info@@6B@ ; D3DX11Effects::SType `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUSType@D3DX11Effects@@', 00H
data$r	ENDS
;	COMDAT ??_R4SType@D3DX11Effects@@6B@
rdata$r	SEGMENT
??_R4SType@D3DX11Effects@@6B@ DD 00H			; D3DX11Effects::SType::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUSType@D3DX11Effects@@@8
	DD	FLAT:??_R3SType@D3DX11Effects@@8
rdata$r	ENDS
;	COMDAT ??_R4SConstantBuffer@D3DX11Effects@@6BID3DX11EffectType@@@
rdata$r	SEGMENT
??_R4SConstantBuffer@D3DX11Effects@@6BID3DX11EffectType@@@ DD 00H ; D3DX11Effects::SConstantBuffer::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AUSConstantBuffer@D3DX11Effects@@@8
	DD	FLAT:??_R3SConstantBuffer@D3DX11Effects@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EA@ID3DX11EffectType@@8
rdata$r	SEGMENT
??_R13?0A@EA@ID3DX11EffectType@@8 DD FLAT:??_R0?AUID3DX11EffectType@@@8 ; ID3DX11EffectType::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ID3DX11EffectType@@8
rdata$r	ENDS
;	COMDAT ??_R2?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@8
rdata$r	SEGMENT
??_R2?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@8 DD FLAT:??_R1A@?0A@EA@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@8 ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ID3DX11EffectConstantBuffer@@8
	DD	FLAT:??_R1A@?0A@EA@ID3DX11EffectVariable@@8
rdata$r	ENDS
;	COMDAT ??_R3?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@8
rdata$r	SEGMENT
??_R3?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@8 DD 00H ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@@8
data$r	SEGMENT
??_R0?AU?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@@8 DD FLAT:??_7type_info@@6B@ ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU?$TUncastableVariable@UID3DX11EffectConstantBuffer@@'
	DB	'@D3DX11Effects@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@8 DD FLAT:??_R0?AU?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@@8 ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SConstantBuffer@D3DX11Effects@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SConstantBuffer@D3DX11Effects@@8 DD FLAT:??_R0?AUSConstantBuffer@D3DX11Effects@@@8 ; D3DX11Effects::SConstantBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SConstantBuffer@D3DX11Effects@@8
rdata$r	ENDS
;	COMDAT ??_R2SConstantBuffer@D3DX11Effects@@8
rdata$r	SEGMENT
??_R2SConstantBuffer@D3DX11Effects@@8 DD FLAT:??_R1A@?0A@EA@SConstantBuffer@D3DX11Effects@@8 ; D3DX11Effects::SConstantBuffer::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@8
	DD	FLAT:??_R1A@?0A@EA@ID3DX11EffectConstantBuffer@@8
	DD	FLAT:??_R1A@?0A@EA@ID3DX11EffectVariable@@8
	DD	FLAT:??_R13?0A@EA@ID3DX11EffectType@@8
rdata$r	ENDS
;	COMDAT ??_R3SConstantBuffer@D3DX11Effects@@8
rdata$r	SEGMENT
??_R3SConstantBuffer@D3DX11Effects@@8 DD 00H		; D3DX11Effects::SConstantBuffer::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2SConstantBuffer@D3DX11Effects@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUSConstantBuffer@D3DX11Effects@@@8
data$r	SEGMENT
??_R0?AUSConstantBuffer@D3DX11Effects@@@8 DD FLAT:??_7type_info@@6B@ ; D3DX11Effects::SConstantBuffer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUSConstantBuffer@D3DX11Effects@@', 00H
data$r	ENDS
;	COMDAT ??_R4SConstantBuffer@D3DX11Effects@@6B?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@1@@
rdata$r	SEGMENT
??_R4SConstantBuffer@D3DX11Effects@@6B?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@1@@ DD 00H ; D3DX11Effects::SConstantBuffer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUSConstantBuffer@D3DX11Effects@@@8
	DD	FLAT:??_R3SConstantBuffer@D3DX11Effects@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ID3DX11EffectConstantBuffer@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ID3DX11EffectConstantBuffer@@8 DD FLAT:??_R0?AUID3DX11EffectConstantBuffer@@@8 ; ID3DX11EffectConstantBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ID3DX11EffectConstantBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R2ID3DX11EffectConstantBuffer@@8
rdata$r	SEGMENT
??_R2ID3DX11EffectConstantBuffer@@8 DD FLAT:??_R1A@?0A@EA@ID3DX11EffectConstantBuffer@@8 ; ID3DX11EffectConstantBuffer::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ID3DX11EffectVariable@@8
rdata$r	ENDS
;	COMDAT ??_R3ID3DX11EffectConstantBuffer@@8
rdata$r	SEGMENT
??_R3ID3DX11EffectConstantBuffer@@8 DD 00H		; ID3DX11EffectConstantBuffer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ID3DX11EffectConstantBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUID3DX11EffectConstantBuffer@@@8
data$r	SEGMENT
??_R0?AUID3DX11EffectConstantBuffer@@@8 DD FLAT:??_7type_info@@6B@ ; ID3DX11EffectConstantBuffer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUID3DX11EffectConstantBuffer@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ID3DX11EffectVariable@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ID3DX11EffectVariable@@8 DD FLAT:??_R0?AUID3DX11EffectVariable@@@8 ; ID3DX11EffectVariable::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ID3DX11EffectVariable@@8
rdata$r	ENDS
;	COMDAT ??_R2ID3DX11EffectVariable@@8
rdata$r	SEGMENT
??_R2ID3DX11EffectVariable@@8 DD FLAT:??_R1A@?0A@EA@ID3DX11EffectVariable@@8 ; ID3DX11EffectVariable::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ID3DX11EffectVariable@@8
rdata$r	SEGMENT
??_R3ID3DX11EffectVariable@@8 DD 00H			; ID3DX11EffectVariable::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ID3DX11EffectVariable@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUID3DX11EffectVariable@@@8
data$r	SEGMENT
??_R0?AUID3DX11EffectVariable@@@8 DD FLAT:??_7type_info@@6B@ ; ID3DX11EffectVariable `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUID3DX11EffectVariable@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ID3DX11EffectType@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ID3DX11EffectType@@8 DD FLAT:??_R0?AUID3DX11EffectType@@@8 ; ID3DX11EffectType::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ID3DX11EffectType@@8
rdata$r	ENDS
;	COMDAT ??_R2ID3DX11EffectType@@8
rdata$r	SEGMENT
??_R2ID3DX11EffectType@@8 DD FLAT:??_R1A@?0A@EA@ID3DX11EffectType@@8 ; ID3DX11EffectType::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3ID3DX11EffectType@@8
rdata$r	SEGMENT
??_R3ID3DX11EffectType@@8 DD 00H			; ID3DX11EffectType::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ID3DX11EffectType@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUID3DX11EffectType@@@8
data$r	SEGMENT
??_R0?AUID3DX11EffectType@@@8 DD FLAT:??_7type_info@@6B@ ; ID3DX11EffectType `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUID3DX11EffectType@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BM@CFJFHGND@m_pEffect?9?$DOm_LocalTimer?5?$DO?50?$AA@
CONST	SEGMENT
??_C@_0BM@CFJFHGND@m_pEffect?9?$DOm_LocalTimer?5?$DO?50?$AA@ DB 'm_pEffec'
	DB	't->m_LocalTimer > 0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@GMMJAJM@pVariable?9?$DOpType?9?$DOBelongsInConst@
CONST	SEGMENT
??_C@_0EG@GMMJAJM@pVariable?9?$DOpType?9?$DOBelongsInConst@ DB 'pVariable'
	DB	'->pType->BelongsInConstantBuffer() && NULL != pVariable->pCB', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@BPELLKNA@?$CBpAssignment?9?$DOIsObjectAssignment@
CONST	SEGMENT
??_C@_0EH@BPELLKNA@?$CBpAssignment?9?$DOIsObjectAssignment@ DB '!pAssignm'
	DB	'ent->IsObjectAssignment() && pAssignment->DependencyCount > 0'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@GPKFPIPI@?$CKppPointer?5?$DN?$DN?5AlignToPowerOf2?$CI?$CKp@
CONST	SEGMENT
??_C@_0DL@GPKFPIPI@?$CKppPointer?5?$DN?$DN?5AlignToPowerOf2?$CI?$CKp@ DB '*'
	DB	'ppPointer == AlignToPowerOf2(*ppPointer, c_DataAlignment)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BGHPDFMF@NULL?5?$CB?$DN?5pIterator?9?$DOpHashEntry?$AA@
CONST	SEGMENT
??_C@_0BO@BGHPDFMF@NULL?5?$CB?$DN?5pIterator?9?$DOpHashEntry?$AA@ DB 'NUL'
	DB	'L != pIterator->pHashEntry', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@CAMAPMFM@pIterator?9?$DOppHashSlot?5?$DO?$DN?5m_rgpHa@
CONST	SEGMENT
??_C@_0EM@CAMAPMFM@pIterator?9?$DOppHashSlot?5?$DO?$DN?5m_rgpHa@ DB 'pIte'
	DB	'rator->ppHashSlot >= m_rgpHashEntries && pIterator->ppHashSlo'
	DB	't <= ppEnd', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@NMGLEII@valuesMigrated?5?$DN?$DN?5m_NumEntries?$AA@
CONST	SEGMENT
??_C@_0BP@NMGLEII@valuesMigrated?5?$DN?$DN?5m_NumEntries?$AA@ DB 'valuesM'
	DB	'igrated == m_NumEntries', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NLANFHLH@NULL?5?$CB?$DN?5pHashEntry?$AA@
CONST	SEGMENT
??_C@_0BD@NLANFHLH@NULL?5?$CB?$DN?5pHashEntry?$AA@ DB 'NULL != pHashEntry'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EGDKBIFK@m_NumHashSlots?5?$DO?50?$AA@
CONST	SEGMENT
??_C@_0BD@EGDKBIFK@m_NumHashSlots?5?$DO?50?$AA@ DB 'm_NumHashSlots > 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NPDKKNAK@NULL?5?$CB?$DN?5m_pPrivateHeap?$AA@
CONST	SEGMENT
??_C@_0BH@NPDKKNAK@NULL?5?$CB?$DN?5m_pPrivateHeap?$AA@ DB 'NULL != m_pPri'
	DB	'vateHeap', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@ONGAIIBI@NULL?5?$DN?$DN?5m_pPrivateHeap?$AA@
CONST	SEGMENT
??_C@_0BH@ONGAIIBI@NULL?5?$DN?$DN?5m_pPrivateHeap?$AA@ DB 'NULL == m_pPri'
	DB	'vateHeap', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HKPIIPPC@index?5?$DM?5m_CurSize?$AA@
CONST	SEGMENT
??_C@_0BC@HKPIIPPC@index?5?$DM?5m_CurSize?$AA@ DB 'index < m_CurSize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NFKMEKAI@ID3DX11EffectVariable?3?3AsSampler@
CONST	SEGMENT
??_C@_0CB@NFKMEKAI@ID3DX11EffectVariable?3?3AsSampler@ DB 'ID3DX11EffectV'
	DB	'ariable::AsSampler', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@DBMPNCNM@ID3DX11EffectVariable?3?3AsRasteri@
CONST	SEGMENT
??_C@_0CE@DBMPNCNM@ID3DX11EffectVariable?3?3AsRasteri@ DB 'ID3DX11EffectV'
	DB	'ariable::AsRasterizer', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@OKHHDBGN@ID3DX11EffectVariable?3?3AsDepthSt@
CONST	SEGMENT
??_C@_0CG@OKHHDBGN@ID3DX11EffectVariable?3?3AsDepthSt@ DB 'ID3DX11EffectV'
	DB	'ariable::AsDepthStencil', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BBIMBLAD@ID3DX11EffectVariable?3?3AsBlend?$AA@
CONST	SEGMENT
??_C@_0BP@BBIMBLAD@ID3DX11EffectVariable?3?3AsBlend?$AA@ DB 'ID3DX11Effec'
	DB	'tVariable::AsBlend', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@EFNGDPCK@ID3DX11EffectVariable?3?3AsShader?$AA@
CONST	SEGMENT
??_C@_0CA@EFNGDPCK@ID3DX11EffectVariable?3?3AsShader?$AA@ DB 'ID3DX11Effe'
	DB	'ctVariable::AsShader', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@NALNEDPE@ID3DX11EffectVariable?3?3AsConstan@
CONST	SEGMENT
??_C@_0CI@NALNEDPE@ID3DX11EffectVariable?3?3AsConstan@ DB 'ID3DX11EffectV'
	DB	'ariable::AsConstantBuffer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@BDFLCADG@ID3DX11EffectVariable?3?3AsDepthSt@
CONST	SEGMENT
??_C@_0CK@BDFLCADG@ID3DX11EffectVariable?3?3AsDepthSt@ DB 'ID3DX11EffectV'
	DB	'ariable::AsDepthStencilView', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@MBMJDIEM@ID3DX11EffectVariable?3?3AsRenderT@
CONST	SEGMENT
??_C@_0CK@MBMJDIEM@ID3DX11EffectVariable?3?3AsRenderT@ DB 'ID3DX11EffectV'
	DB	'ariable::AsRenderTargetView', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@NNAKDDLF@ID3DX11EffectVariable?3?3AsUnorder@
CONST	SEGMENT
??_C@_0CN@NNAKDDLF@ID3DX11EffectVariable?3?3AsUnorder@ DB 'ID3DX11EffectV'
	DB	'ariable::AsUnorderedAccessView', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@CAHLNOAL@ID3DX11EffectVariable?3?3AsShaderR@
CONST	SEGMENT
??_C@_0CI@CAHLNOAL@ID3DX11EffectVariable?3?3AsShaderR@ DB 'ID3DX11EffectV'
	DB	'ariable::AsShaderResource', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@IJDMLLGC@ID3DX11EffectVariable?3?3AsInterfa@
CONST	SEGMENT
??_C@_0CD@IJDMLLGC@ID3DX11EffectVariable?3?3AsInterfa@ DB 'ID3DX11EffectV'
	DB	'ariable::AsInterface', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@DGGONKPA@ID3DX11EffectVariable?3?3AsClassIn@
CONST	SEGMENT
??_C@_0CH@DGGONKPA@ID3DX11EffectVariable?3?3AsClassIn@ DB 'ID3DX11EffectV'
	DB	'ariable::AsClassInstance', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NPAIMBLA@ID3DX11EffectVariable?3?3AsString?$AA@
CONST	SEGMENT
??_C@_0CA@NPAIMBLA@ID3DX11EffectVariable?3?3AsString?$AA@ DB 'ID3DX11Effe'
	DB	'ctVariable::AsString', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HLLPIICO@ID3DX11EffectVariable?3?3AsMatrix?$AA@
CONST	SEGMENT
??_C@_0CA@HLLPIICO@ID3DX11EffectVariable?3?3AsMatrix?$AA@ DB 'ID3DX11Effe'
	DB	'ctVariable::AsMatrix', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IMDOICHK@ID3DX11EffectVariable?3?3AsVector?$AA@
CONST	SEGMENT
??_C@_0CA@IMDOICHK@ID3DX11EffectVariable?3?3AsVector?$AA@ DB 'ID3DX11Effe'
	DB	'ctVariable::AsVector', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@ONKMEPNK@ID3DX11EffectVariable?3?3AsScalar?$AA@
CONST	SEGMENT
??_C@_0CA@ONKMEPNK@ID3DX11EffectVariable?3?3AsScalar?$AA@ DB 'ID3DX11Effe'
	DB	'ctVariable::AsScalar', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@CBPKGJFM@pMember?9?$DOData?4pGeneric?5?$DN?$DN?5NULL?5?$HM@
CONST	SEGMENT
??_C@_0GI@CBPKGJFM@pMember?9?$DOData?4pGeneric?5?$DN?$DN?5NULL?5?$HM@ DB 'p'
	DB	'Member->Data.pGeneric == NULL || (*ppTopLevelEntity)->pEffect'
	DB	'->m_Heap.IsInHeap(pMember->Data.pGeneric)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@JJDOBLOA@m_BackgroundInterfaces?$FLi?$FN?5?$CB?$DN?5NUL@
CONST	SEGMENT
??_C@_0CC@JJDOBLOA@m_BackgroundInterfaces?$FLi?$FN?5?$CB?$DN?5NUL@ DB 'm_'
	DB	'BackgroundInterfaces[i] != NULL', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??ReallocateEffectData@CEffectLoader@D3DX11Effects@@IAEJ_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??ReallocateEffectData@CEffectLoader@D3DX11Effects@@IAEJ_N@Z@4JA DD 0e0bH ; `D3DX11Effects::CEffectLoader::ReallocateEffectData'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DB@CCEAMAH@Internal?5loading?5error?3?5cannot?5m@
CONST	SEGMENT
??_C@_0DB@CCEAMAH@Internal?5loading?5error?3?5cannot?5m@ DB 'Internal loa'
	DB	'ding error: cannot move shader data.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@DHOBBOIG@pShaderBlock?9?$DOpInputSignatureBlo@
CONST	SEGMENT
??_C@_0CK@DHOBBOIG@pShaderBlock?9?$DOpInputSignatureBlo@ DB 'pShaderBlock'
	DB	'->pInputSignatureBlob == NULL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@OFFCFNOA@pShaderBlock?9?$DOpD3DObject?5?$DN?$DN?5NULL@
CONST	SEGMENT
??_C@_0CB@OFFCFNOA@pShaderBlock?9?$DOpD3DObject?5?$DN?$DN?5NULL@ DB 'pSha'
	DB	'derBlock->pD3DObject == NULL', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??BuildShaderBlock@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??BuildShaderBlock@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@3@@Z@4JA DD 0bddH ; `D3DX11Effects::CEffectLoader::BuildShaderBlock'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CM@MAFMDAKC@pDep?9?$DOCount?5?$DN?$DN?5pRange?9?$DOvResource@
CONST	SEGMENT
??_C@_0CM@MAFMDAKC@pDep?9?$DOCount?5?$DN?$DN?5pRange?9?$DOvResource@ DB 'p'
	DB	'Dep->Count == pRange->vResources.GetSize()', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HKMDMOLB@bindPoint?5?$DN?$DN?5pRange?9?$DOlast?$AA@
CONST	SEGMENT
??_C@_0BK@HKMDMOLB@bindPoint?5?$DN?$DN?5pRange?9?$DOlast?$AA@ DB 'bindPoi'
	DB	'nt == pRange->last', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09LHJJGINI@size?5?$DN?$DN?51?$AA@
CONST	SEGMENT
??_C@_09LHJJGINI@size?5?$DN?$DN?51?$AA@ DB 'size == 1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@KDJDPJGM@InterfaceDesc?4uFlags?5?$CG?5D3D11_SVF@
CONST	SEGMENT
??_C@_0DD@KDJDPJGM@InterfaceDesc?4uFlags?5?$CG?5D3D11_SVF@ DB 'InterfaceD'
	DB	'esc.uFlags & D3D11_SVF_INTERFACE_POINTER', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KPGDMHCO@ShaderDesc?4ConstantBuffers?5?$DO?50?$AA@
CONST	SEGMENT
??_C@_0BP@KPGDMHCO@ShaderDesc?4ConstantBuffers?5?$DO?50?$AA@ DB 'ShaderDe'
	DB	'sc.ConstantBuffers > 0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FLKFENGC@pRange?9?$DOlast?5?$DM?$DN?5bindPoint?$AA@
CONST	SEGMENT
??_C@_0BK@FLKFENGC@pRange?9?$DOlast?5?$DM?$DN?5bindPoint?$AA@ DB 'pRange-'
	DB	'>last <= bindPoint', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@3@@Z@4JA DD 09c5H ; `D3DX11Effects::CEffectLoader::GrabShaderData'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CC@HBGMAMIM@pAssignment?9?$DOIsObjectAssignment?$CI@
CONST	SEGMENT
??_C@_0CC@HBGMAMIM@pAssignment?9?$DOIsObjectAssignment?$CI@ DB 'pAssignme'
	DB	'nt->IsObjectAssignment()', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@DHBABGJO@g_lvGeneral?$FLpsAssignments?$FLi?$FN?4iSt@
CONST	SEGMENT
??_C@_0DB@DHBABGJO@g_lvGeneral?$FLpsAssignments?$FLi?$FN?4iSt@ DB 'g_lvGe'
	DB	'neral[psAssignments[i].iState].m_Cols == 1', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@3@PAEPAI2@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@3@PAEPAI2@Z@4JA DD 057bH ; `D3DX11Effects::CEffectLoader::LoadAssignments'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BL@MBHMPHIB@PackedDataSize?5?$DO?5bytesRead?$AA@
CONST	SEGMENT
??_C@_0BL@MBHMPHIB@PackedDataSize?5?$DO?5bytesRead?$AA@ DB 'PackedDataSiz'
	DB	'e > bytesRead', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GF@KAFJAGGJ@?$CIUINT_PTR?$CJpType?9?$DOStructType?4pMem@
CONST	SEGMENT
??_C@_0GF@KAFJAGGJ@?$CIUINT_PTR?$CJpType?9?$DOStructType?4pMem@ DB '(UINT'
	DB	'_PTR)pType->StructType.pMembers[j].pType == (UINT)(UINT_PTR)p'
	DB	'Type->StructType.pMembers[j].pType', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??UnpackData@CEffectLoader@D3DX11Effects@@IAEIPAE0IPAUSType@3@PAI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??UnpackData@CEffectLoader@D3DX11Effects@@IAEIPAE0IPAUSType@3@PAI@Z@4JA DD 0462H ; `D3DX11Effects::CEffectLoader::UnpackData'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??LoadTypeAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPAUSType@3@I@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??LoadTypeAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPAUSType@3@I@Z@4JA DD 03a3H ; `D3DX11Effects::CEffectLoader::LoadTypeAndAddToPool'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CB@IDNKIKCE@m_pEffect?9?$DOm_pPooledHeap?5?$CB?$DN?5NULL@
CONST	SEGMENT
??_C@_0CB@IDNKIKCE@m_pEffect?9?$DOm_pPooledHeap?5?$CB?$DN?5NULL@ DB 'm_pE'
	DB	'ffect->m_pPooledHeap != NULL', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??LoadStringAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPADI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??LoadStringAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPADI@Z@4JA DD 037dH ; `D3DX11Effects::CEffectLoader::LoadStringAndAddToPool'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BJ@CKANEIJE@pEffect?5?$CG?$CG?5pEffectBuffer?$AA@
CONST	SEGMENT
??_C@_0BJ@CKANEIJE@pEffect?5?$CG?$CG?5pEffectBuffer?$AA@ DB 'pEffect && p'
	DB	'EffectBuffer', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@3@PBXI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@3@PBXI@Z@4JA DD 02e0H ; `D3DX11Effects::CEffectLoader::LoadEffect'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BB@EKHKLBAF@pVersion?5?$CB?$DN?5NULL?$AA@
CONST	SEGMENT
??_C@_0BB@EKHKLBAF@pVersion?5?$CB?$DN?5NULL?$AA@ DB 'pVersion != NULL', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??GetEffectVersion@D3DX11Effects@@YAJIPAK@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetEffectVersion@D3DX11Effects@@YAJIPAK@Z@4JA DD 02ceH ; `D3DX11Effects::GetEffectVersion'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EE@IAMBMFNL@index?5?$CK?5sizeof?$CISGroup?$CJ?5?$DN?$DN?5?$CI?$CIsize@
CONST	SEGMENT
??_C@_0EE@IAMBMFNL@index?5?$CK?5sizeof?$CISGroup?$CJ?5?$DN?$DN?5?$CI?$CIsize@ DB 'i'
	DB	'ndex * sizeof(SGroup) == ((size_t)*ppGroup - (size_t)m_pOldGr'
	DB	'oups)', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??FixupGroupPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSGroup@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??FixupGroupPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSGroup@3@@Z@4JA DD 02c0H ; `D3DX11Effects::CEffectLoader::FixupGroupPointer'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EJ@ODBKDCBD@index?5?$CK?5sizeof?$CISGlobalVariable?$CJ?5@
CONST	SEGMENT
??_C@_0EJ@ODBKDCBD@index?5?$CK?5sizeof?$CISGlobalVariable?$CJ?5@ DB 'inde'
	DB	'x * sizeof(SGlobalVariable) == ((size_t)*ppVar - (size_t)m_pO'
	DB	'ldVars)', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??FixupVariablePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSGlobalVariable@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??FixupVariablePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSGlobalVariable@3@@Z@4JA DD 02a4H ; `D3DX11Effects::CEffectLoader::FixupVariablePointer'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0FP@HCBEHMGA@index?5?$CK?5sizeof?$CISMemberDataPointe@
CONST	SEGMENT
??_C@_0FP@HCBEHMGA@index?5?$CK?5sizeof?$CISMemberDataPointe@ DB 'index * '
	DB	'sizeof(SMemberDataPointer) == ((size_t)*ppMemberData - (size_'
	DB	't)m_pOldMemberDataBlocks)', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??FixupMemberDataPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSMemberDataPointer@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??FixupMemberDataPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSMemberDataPointer@3@@Z@4JA DD 0299H ; `D3DX11Effects::CEffectLoader::FixupMemberDataPointer'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EH@BOFKCOKB@index?5?$CK?5sizeof?$CISString?$CJ?5?$DN?$DN?5?$CI?$CIsiz@
CONST	SEGMENT
??_C@_0EH@BOFKCOKB@index?5?$CK?5sizeof?$CISString?$CJ?5?$DN?$DN?5?$CI?$CIsiz@ DB 'i'
	DB	'ndex * sizeof(SString) == ((size_t)*ppString - (size_t)m_pOld'
	DB	'Strings)', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??FixupStringPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSString@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??FixupStringPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSString@3@@Z@4JA DD 028eH ; `D3DX11Effects::CEffectLoader::FixupStringPointer'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0GF@JFEJOMCF@index?5?$CK?5sizeof?$CISDepthStencilView@
CONST	SEGMENT
??_C@_0GF@JFEJOMCF@index?5?$CK?5sizeof?$CISDepthStencilView@ DB 'index * '
	DB	'sizeof(SDepthStencilView) == ((size_t)*ppDepthStencilView - ('
	DB	'size_t)m_pOldDepthStencilViews)', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??FixupDepthStencilViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSDepthStencilView@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??FixupDepthStencilViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSDepthStencilView@3@@Z@4JA DD 027fH ; `D3DX11Effects::CEffectLoader::FixupDepthStencilViewPointer'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0GF@BPLAAPBL@index?5?$CK?5sizeof?$CISRenderTargetView@
CONST	SEGMENT
??_C@_0GF@BPLAAPBL@index?5?$CK?5sizeof?$CISRenderTargetView@ DB 'index * '
	DB	'sizeof(SRenderTargetView) == ((size_t)*ppRenderTargetView - ('
	DB	'size_t)m_pOldRenderTargetViews)', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??FixupRenderTargetViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSRenderTargetView@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??FixupRenderTargetViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSRenderTargetView@3@@Z@4JA DD 0270H ; `D3DX11Effects::CEffectLoader::FixupRenderTargetViewPointer'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0GO@DKPEPIML@index?5?$CK?5sizeof?$CISUnorderedAccessV@
CONST	SEGMENT
??_C@_0GO@DKPEPIML@index?5?$CK?5sizeof?$CISUnorderedAccessV@ DB 'index * '
	DB	'sizeof(SUnorderedAccessView) == ((size_t)*ppUnorderedAccessVi'
	DB	'ew - (size_t)m_pOldUnorderedAccessViews)', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??FixupUnorderedAccessViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSUnorderedAccessView@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??FixupUnorderedAccessViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSUnorderedAccessView@3@@Z@4JA DD 0260H ; `D3DX11Effects::CEffectLoader::FixupUnorderedAccessViewPointer'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0HL@CPLEJCIJ@index?5?$CK?5sizeof?$CISConstantBuffer?$CJ?5@
CONST	SEGMENT
??_C@_0HL@CPLEJCIJ@index?5?$CK?5sizeof?$CISConstantBuffer?$CJ?5@ DB 'inde'
	DB	'x * sizeof(SConstantBuffer) == ((size_t)(SConstantBuffer*)*pp'
	DB	'Resource - (size_t)(SConstantBuffer*)&m_pOldCBs->TBuffer)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FJ@HNIAAANN@index?5?$CK?5sizeof?$CISShaderResource?$CJ?5@
CONST	SEGMENT
??_C@_0FJ@HNIAAANN@index?5?$CK?5sizeof?$CISShaderResource?$CJ?5@ DB 'inde'
	DB	'x * sizeof(SShaderResource) == ((size_t)*ppResource - (size_t'
	DB	')m_pOldShaderResources)', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??FixupShaderResourcePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderResource@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??FixupShaderResourcePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderResource@3@@Z@4JA DD 0244H ; `D3DX11Effects::CEffectLoader::FixupShaderResourcePointer'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0FA@JGMDEBIG@index?5?$CK?5sizeof?$CISInterface?$CJ?5?$DN?$DN?5?$CI?$CI@
CONST	SEGMENT
??_C@_0FA@JGMDEBIG@index?5?$CK?5sizeof?$CISInterface?$CJ?5?$DN?$DN?5?$CI?$CI@ DB 'i'
	DB	'ndex * sizeof(SInterface) == ((size_t)*ppInterface - (size_t)'
	DB	'm_pOldInterfaces)', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??FixupInterfacePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSInterface@3@_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??FixupInterfacePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSInterface@3@_N@Z@4JA DD 0225H ; `D3DX11Effects::CEffectLoader::FixupInterfacePointer'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EP@DBMIHIDO@index?5?$CK?5sizeof?$CISSamplerBlock?$CJ?5?$DN?$DN@
CONST	SEGMENT
??_C@_0EP@DBMIHIDO@index?5?$CK?5sizeof?$CISSamplerBlock?$CJ?5?$DN?$DN@ DB 'i'
	DB	'ndex * sizeof(SSamplerBlock) == ((size_t)*ppSampler - (size_t'
	DB	')m_pOldSamplers)', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??FixupSamplerPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSSamplerBlock@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??FixupSamplerPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSSamplerBlock@3@@Z@4JA DD 0219H ; `D3DX11Effects::CEffectLoader::FixupSamplerPointer'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EM@COJALNDC@index?5?$CK?5sizeof?$CISRasterizerBlock?$CJ@
CONST	SEGMENT
??_C@_0EM@COJALNDC@index?5?$CK?5sizeof?$CISRasterizerBlock?$CJ@ DB 'index'
	DB	' * sizeof(SRasterizerBlock) == ((size_t)*ppRSBlock - (size_t)'
	DB	'm_pOldRS)', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??FixupRSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSRasterizerBlock@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??FixupRSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSRasterizerBlock@3@@Z@4JA DD 020bH ; `D3DX11Effects::CEffectLoader::FixupRSPointer'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EH@EEOKIBCN@index?5?$CK?5sizeof?$CISBlendBlock?$CJ?5?$DN?$DN?5?$CI@
CONST	SEGMENT
??_C@_0EH@EEOKIBCN@index?5?$CK?5sizeof?$CISBlendBlock?$CJ?5?$DN?$DN?5?$CI@ DB 'i'
	DB	'ndex * sizeof(SBlendBlock) == ((size_t)*ppABBlock - (size_t)m'
	DB	'_pOldAB)', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??FixupABPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSBlendBlock@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??FixupABPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSBlendBlock@3@@Z@4JA DD 01fdH ; `D3DX11Effects::CEffectLoader::FixupABPointer'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EO@EMFBLMHI@index?5?$CK?5sizeof?$CISDepthStencilBloc@
CONST	SEGMENT
??_C@_0EO@EMFBLMHI@index?5?$CK?5sizeof?$CISDepthStencilBloc@ DB 'index * '
	DB	'sizeof(SDepthStencilBlock) == ((size_t)*ppDSBlock - (size_t)m'
	DB	'_pOldDS)', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??FixupDSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSDepthStencilBlock@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??FixupDSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSDepthStencilBlock@3@@Z@4JA DD 01efH ; `D3DX11Effects::CEffectLoader::FixupDSPointer'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0FB@MDPFEFHI@index?5?$CK?5sizeof?$CISShaderBlock?$CJ?5?$DN?$DN?5@
CONST	SEGMENT
??_C@_0FB@MDPFEFHI@index?5?$CK?5sizeof?$CISShaderBlock?$CJ?5?$DN?$DN?5@ DB 'i'
	DB	'ndex * sizeof(SShaderBlock) == ((size_t)*ppShaderBlock - (siz'
	DB	'e_t)m_pOldShaders)', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??FixupShaderPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderBlock@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??FixupShaderPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderBlock@3@@Z@4JA DD 01dfH ; `D3DX11Effects::CEffectLoader::FixupShaderPointer'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0FJ@INHMCKEN@index?5?$CK?5sizeof?$CISConstantBuffer?$CJ?5@
CONST	SEGMENT
??_C@_0FJ@INHMCKEN@index?5?$CK?5sizeof?$CISConstantBuffer?$CJ?5@ DB 'inde'
	DB	'x * sizeof(SConstantBuffer) == ((size_t)(SConstantBuffer*)*pp'
	DB	'CB - (size_t)m_pOldCBs)', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??FixupCBPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSConstantBuffer@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??FixupCBPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSConstantBuffer@3@@Z@4JA DD 01d2H ; `D3DX11Effects::CEffectLoader::FixupCBPointer'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0N@FLMPGDAJ@ppInterfaces?$AA@
CONST	SEGMENT
??_C@_0N@FLMPGDAJ@ppInterfaces?$AA@ DB 'ppInterfaces', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??GetInterfaceParametersAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIIPAPAUSInterfaceParameter@SShaderBlock@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetInterfaceParametersAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIIPAPAUSInterfaceParameter@SShaderBlock@3@@Z@4JA DD 01adH ; `D3DX11Effects::CEffectLoader::GetInterfaceParametersAndAddToReflection'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BD@BAKFCGNM@size?5?$DM?$DN?50xffffffff?$AA@
CONST	SEGMENT
??_C@_0BD@BAKFCGNM@size?5?$DM?$DN?50xffffffff?$AA@ DB 'size <= 0xffffffff'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??AddString@CEffectHeap@D3DX11Effects@@QAEJPBDPAPAD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??AddString@CEffectHeap@D3DX11Effects@@QAEJPBDPAPAD@Z@4JA DD 0daH ; `D3DX11Effects::CEffectHeap::AddString'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DF@IDKFFGGG@m_pData?5?$DN?$DN?5AlignToPowerOf2?$CIm_pDa@
CONST	SEGMENT
??_C@_0DF@IDKFFGGG@m_pData?5?$DN?$DN?5AlignToPowerOf2?$CIm_pDa@ DB 'm_pDa'
	DB	'ta == AlignToPowerOf2(m_pData, c_DataAlignment)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@BFMHPEDF@dwSize?5?$DN?$DN?5AlignToPowerOf2?$CIdwSize@
CONST	SEGMENT
??_C@_0DD@BFMHPEDF@dwSize?5?$DN?$DN?5AlignToPowerOf2?$CIdwSize@ DB 'dwSiz'
	DB	'e == AlignToPowerOf2(dwSize, c_DataAlignment)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08BINKKIMB@?$CBm_pData?$AA@
CONST	SEGMENT
??_C@_08BINKKIMB@?$CBm_pData?$AA@ DB '!m_pData', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??ReserveMemory@CEffectHeap@D3DX11Effects@@QAEJI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??ReserveMemory@CEffectHeap@D3DX11Effects@@QAEJI@Z@4JA DD 0c8H ; `D3DX11Effects::CEffectHeap::ReserveMemory'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
CONST	SEGMENT
??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@ DB 'c:\users\s'
	DB	'imon\documents\github\uclan-sparta\effects11\effectload.cpp', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??GetSimpleParameterTypeFromObjectType@D3DX11Effects@@YA?AW4_D3D_SHADER_VARIABLE_TYPE@@W4EObjectType@2@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetSimpleParameterTypeFromObjectType@D3DX11Effects@@YA?AW4_D3D_SHADER_VARIABLE_TYPE@@W4EObjectType@2@@Z@4JA DD 05cH ; `D3DX11Effects::GetSimpleParameterTypeFromObjectType'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0O@OCHNEELN@ComputeShader?$AA@
CONST	SEGMENT
??_C@_0O@OCHNEELN@ComputeShader?$AA@ DB 'ComputeShader', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PCCENCDF@DomainShader?$AA@
CONST	SEGMENT
??_C@_0N@PCCENCDF@DomainShader?$AA@ DB 'DomainShader', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GABJGNCK@HullShader?$AA@
CONST	SEGMENT
??_C@_0L@GABJGNCK@HullShader?$AA@ DB 'HullShader', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07GKACAEDJ@Texture?$AA@
CONST	SEGMENT
??_C@_07GKACAEDJ@Texture?$AA@ DB 'Texture', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HDFEOELA@MaxLOD?$AA@
CONST	SEGMENT
??_C@_06HDFEOELA@MaxLOD?$AA@ DB 'MaxLOD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HAKHAEPP@MinLOD?$AA@
CONST	SEGMENT
??_C@_06HAKHAEPP@MinLOD?$AA@ DB 'MinLOD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DGENNPFN@BorderColor?$AA@
CONST	SEGMENT
??_C@_0M@DGENNPFN@BorderColor?$AA@ DB 'BorderColor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DNEECBOJ@ComparisonFunc?$AA@
CONST	SEGMENT
??_C@_0P@DNEECBOJ@ComparisonFunc?$AA@ DB 'ComparisonFunc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IEMFCLON@MaxAnisotropy?$AA@
CONST	SEGMENT
??_C@_0O@IEMFCLON@MaxAnisotropy?$AA@ DB 'MaxAnisotropy', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CFFHFEFO@MipLODBias?$AA@
CONST	SEGMENT
??_C@_0L@CFFHFEFO@MipLODBias?$AA@ DB 'MipLODBias', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DGLIHMLN@AddressW?$AA@
CONST	SEGMENT
??_C@_08DGLIHMLN@AddressW?$AA@ DB 'AddressW', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CPKDENPM@AddressV?$AA@
CONST	SEGMENT
??_C@_08CPKDENPM@AddressV?$AA@ DB 'AddressV', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08EIOBODP@AddressU?$AA@
CONST	SEGMENT
??_C@_08EIOBODP@AddressU?$AA@ DB 'AddressU', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06IBDJIBGI@Filter?$AA@
CONST	SEGMENT
??_C@_06IBDJIBGI@Filter?$AA@ DB 'Filter', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GLNCJOAF@RenderTargetWriteMask?$AA@
CONST	SEGMENT
??_C@_0BG@GLNCJOAF@RenderTargetWriteMask?$AA@ DB 'RenderTargetWriteMask', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DKCOEBAI@BlendOpAlpha?$AA@
CONST	SEGMENT
??_C@_0N@DKCOEBAI@BlendOpAlpha?$AA@ DB 'BlendOpAlpha', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GAOPNAKA@DestBlendAlpha?$AA@
CONST	SEGMENT
??_C@_0P@GAOPNAKA@DestBlendAlpha?$AA@ DB 'DestBlendAlpha', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NAACGGGK@SrcBlendAlpha?$AA@
CONST	SEGMENT
??_C@_0O@NAACGGGK@SrcBlendAlpha?$AA@ DB 'SrcBlendAlpha', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CDPFEHAN@BlendOp?$AA@
CONST	SEGMENT
??_C@_07CDPFEHAN@BlendOp?$AA@ DB 'BlendOp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PGFKOIGA@DestBlend?$AA@
CONST	SEGMENT
??_C@_09PGFKOIGA@DestBlend?$AA@ DB 'DestBlend', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FHHACIOE@SrcBlend?$AA@
CONST	SEGMENT
??_C@_08FHHACIOE@SrcBlend?$AA@ DB 'SrcBlend', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
	ORG $+4
?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B DD FLAT:??_C@_0BA@LIKHENHC@RasterizerState?$AA@ ; D3DX11Effects::g_lvGeneral
	DD	05H
	DD	016H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	06H
	DD	040H
	DD	00H
	DD	FLAT:??_C@_0BC@JHBFINCM@DepthStencilState?$AA@
	DD	05H
	DD	017H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	07H
	DD	03cH
	DD	00H
	DD	FLAT:??_C@_0L@DDELOHAJ@BlendState?$AA@
	DD	05H
	DD	018H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	08H
	DD	038H
	DD	00H
	DD	FLAT:??_C@_0BB@GOKJNCIL@RenderTargetView?$AA@
	DD	05H
	DD	01eH
	DD	01H
	DD	08H
	DD	00H
	DD	00H
	DD	04H
	DD	048H
	DD	00H
	DD	FLAT:??_C@_0BB@LMDLMKPB@DepthStencilView?$AA@
	DD	05H
	DD	01fH
	DD	01H
	DD	08H
	DD	00H
	DD	00H
	DD	05H
	DD	068H
	DD	00H
	DD	FLAT:??_C@_0N@IBEMAACP@GenerateMips?$AA@
	DD	05H
	DD	05H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	09H
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0N@GMCBJINM@VertexShader?$AA@
	DD	05H
	DD	010H
	DD	01H
	DD	01H
	DD	00H
	DD	FLAT:_g_rvNULL
	DD	02H
	DD	06cH
	DD	00H
	DD	FLAT:??_C@_0M@FCHPCNFJ@PixelShader?$AA@
	DD	05H
	DD	0fH
	DD	01H
	DD	01H
	DD	00H
	DD	FLAT:_g_rvNULL
	DD	01H
	DD	070H
	DD	00H
	DD	FLAT:??_C@_0P@OICECHMN@GeometryShader?$AA@
	DD	05H
	DD	015H
	DD	01H
	DD	01H
	DD	00H
	DD	FLAT:_g_rvNULL
	DD	03H
	DD	074H
	DD	00H
	DD	FLAT:??_C@_0O@JEENBINA@DS_StencilRef?$AA@
	DD	05H
	DD	013H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	0aH
	DD	030H
	DD	00H
	DD	FLAT:??_C@_0P@CEGHKKMF@AB_BlendFactor?$AA@
	DD	05H
	DD	03H
	DD	04H
	DD	01H
	DD	00H
	DD	00H
	DD	0bH
	DD	018H
	DD	00H
	DD	FLAT:??_C@_0O@FIKBICKJ@AB_SampleMask?$AA@
	DD	05H
	DD	013H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	0cH
	DD	028H
	DD	00H
	DD	FLAT:??_C@_08NMIIEEEP@FillMode?$AA@
	DD	03H
	DD	013H
	DD	01H
	DD	01H
	DD	00H
	DD	FLAT:_g_rvFILL
	DD	020000H
	DD	014H
	DD	00H
	DD	FLAT:??_C@_08LNALCFGE@CullMode?$AA@
	DD	03H
	DD	013H
	DD	01H
	DD	01H
	DD	00H
	DD	FLAT:_g_rvCULL
	DD	020001H
	DD	018H
	DD	00H
	DD	FLAT:??_C@_0BG@LHEPJHBL@FrontCounterClockwise?$AA@
	DD	03H
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	FLAT:_g_rvBOOL
	DD	020002H
	DD	01cH
	DD	00H
	DD	FLAT:??_C@_09OEBKCEKF@DepthBias?$AA@
	DD	03H
	DD	013H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	020003H
	DD	020H
	DD	00H
	DD	FLAT:??_C@_0P@IFJAGLKM@DepthBiasClamp?$AA@
	DD	03H
	DD	03H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	020004H
	DD	024H
	DD	00H
	DD	FLAT:??_C@_0BF@HPDIBKDM@SlopeScaledDepthBias?$AA@
	DD	03H
	DD	03H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	020005H
	DD	028H
	DD	00H
	DD	FLAT:??_C@_0BA@LGNIIPEG@DepthClipEnable?$AA@
	DD	03H
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	FLAT:_g_rvBOOL
	DD	020006H
	DD	02cH
	DD	00H
	DD	FLAT:??_C@_0O@CMAKKCKB@ScissorEnable?$AA@
	DD	03H
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	FLAT:_g_rvBOOL
	DD	020007H
	DD	030H
	DD	00H
	DD	FLAT:??_C@_0BC@MCHLHGON@MultisampleEnable?$AA@
	DD	03H
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	FLAT:_g_rvBOOL
	DD	020008H
	DD	034H
	DD	00H
	DD	FLAT:??_C@_0BG@OEFGIGEF@AntialiasedLineEnable?$AA@
	DD	03H
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	FLAT:_g_rvBOOL
	DD	020009H
	DD	038H
	DD	00H
	DD	FLAT:??_C@_0M@IGDDNLAN@DepthEnable?$AA@
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	FLAT:_g_rvBOOL
	DD	040000H
	DD	014H
	DD	00H
	DD	FLAT:??_C@_0P@OOBKHNOI@DepthWriteMask?$AA@
	DD	01H
	DD	013H
	DD	01H
	DD	01H
	DD	00H
	DD	FLAT:_g_rvDEPTH_WRITE_MASK
	DD	040001H
	DD	018H
	DD	00H
	DD	FLAT:??_C@_09EKMLDPCO@DepthFunc?$AA@
	DD	01H
	DD	013H
	DD	01H
	DD	01H
	DD	00H
	DD	FLAT:_g_rvCMP
	DD	040002H
	DD	01cH
	DD	00H
	DD	FLAT:??_C@_0O@LIJDBNBF@StencilEnable?$AA@
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	FLAT:_g_rvBOOL
	DD	040003H
	DD	020H
	DD	00H
	DD	FLAT:??_C@_0BA@LEFMBHCL@StencilReadMask?$AA@
	DD	01H
	DD	014H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	040004H
	DD	024H
	DD	00H
	DD	FLAT:??_C@_0BB@LHFJFMDO@StencilWriteMask?$AA@
	DD	01H
	DD	014H
	DD	01H
	DD	01H
	DD	00H
	DD	00H
	DD	040005H
	DD	025H
	DD	00H
	DD	FLAT:??_C@_0BF@FOECBGIB@FrontFaceStencilFail?$AA@
	DD	01H
	DD	013H
	DD	01H
	DD	01H
	DD	00H
	DD	FLAT:_g_rvSTENCILOP
	DD	040006H
	DD	028H
	DD	00H
	DD	FLAT:??_C@_0BK@POMOKFDB@FrontFaceStencilDepthFail?$AA@
	DD	01H
	DD	013H
	DD	01H
	DD	01H
	DD	00H
	DD	FLAT:_g_rvSTENCILOP
	DD	040007H
	DD	02cH
	DD	00H
	DD	FLAT:??_C@_0BF@GNAJFMJL@FrontFaceStencilPass?$AA@
	DD	01H
	DD	013H
	DD	01H
	DD	01H
	DD	00H
	DD	FLAT:_g_rvSTENCILOP
	DD	040008H
	DD	030H
	DD	00H
	DD	FLAT:??_C@_0BF@DOONMAD@FrontFaceStencilFunc?$AA@
	DD	01H
	DD	013H
	DD	01H
	DD	01H
	DD	00H
	DD	FLAT:_g_rvCMP
	DD	040009H
	DD	034H
	DD	00H
	DD	FLAT:??_C@_0BE@FOHAIIEL@BackFaceStencilFail?$AA@
	DD	01H
	DD	013H
	DD	01H
	DD	01H
	DD	00H
	DD	FLAT:_g_rvSTENCILOP
	DD	04000aH
	DD	038H
	DD	00H
	DD	FLAT:??_C@_0BJ@CHBLPCCC@BackFaceStencilDepthFail?$AA@
	DD	01H
	DD	013H
	DD	01H
	DD	01H
	DD	00H
	DD	FLAT:_g_rvSTENCILOP
	DD	04000bH
	DD	03cH
	DD	00H
	DD	FLAT:??_C@_0BE@GNDLMCFB@BackFaceStencilPass?$AA@
	DD	01H
	DD	013H
	DD	01H
	DD	01H
	DD	00H
	DD	FLAT:_g_rvSTENCILOP
	DD	04000cH
	DD	040H
	DD	00H
	DD	FLAT:??_C@_0BE@DNMECMJ@BackFaceStencilFunc?$AA@
	DD	01H
	DD	013H
	DD	01H
	DD	01H
	DD	00H
	DD	FLAT:_g_rvCMP
	DD	04000dH
	DD	044H
	DD	00H
	DD	FLAT:??_C@_0BG@COOKFDEE@AlphaToCoverageEnable?$AA@
	DD	02H
	DD	01H
	DD	01H
	DD	01H
	DD	00H
	DD	FLAT:_g_rvBOOL
	DD	050000H
	DD	014H
	DD	00H
	DD	FLAT:??_C@_0M@LNIFNHGE@BlendEnable?$AA@
	DD	02H
	DD	01H
	DD	01H
	DD	08H
	DD	00H
	DD	FLAT:_g_rvBOOL
	DD	050001H
	DD	01cH
	ORG $+844
_DATA	ENDS
;	COMDAT ??_7SConstantBuffer@D3DX11Effects@@6BID3DX11EffectType@@@
CONST	SEGMENT
??_7SConstantBuffer@D3DX11Effects@@6BID3DX11EffectType@@@ DD FLAT:??_R4SConstantBuffer@D3DX11Effects@@6BID3DX11EffectType@@@ ; D3DX11Effects::SConstantBuffer::`vftable'
	DD	FLAT:?IsValid@SConstantBuffer@D3DX11Effects@@W3AGHXZ
	DD	FLAT:?GetDesc@SConstantBuffer@D3DX11Effects@@UAGJPAU_D3DX11_EFFECT_TYPE_DESC@@@Z
	DD	FLAT:?GetMemberTypeByIndex@SConstantBuffer@D3DX11Effects@@UAGPAUID3DX11EffectType@@I@Z
	DD	FLAT:?GetMemberTypeByName@SConstantBuffer@D3DX11Effects@@UAGPAUID3DX11EffectType@@PBD@Z
	DD	FLAT:?GetMemberTypeBySemantic@SConstantBuffer@D3DX11Effects@@UAGPAUID3DX11EffectType@@PBD@Z
	DD	FLAT:?GetMemberName@SConstantBuffer@D3DX11Effects@@UAGPBDI@Z
	DD	FLAT:?GetMemberSemantic@SConstantBuffer@D3DX11Effects@@UAGPBDI@Z
CONST	ENDS
;	COMDAT ??_7SConstantBuffer@D3DX11Effects@@6B?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@1@@
CONST	SEGMENT
??_7SConstantBuffer@D3DX11Effects@@6B?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@1@@ DD FLAT:??_R4SConstantBuffer@D3DX11Effects@@6B?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@1@@ ; D3DX11Effects::SConstantBuffer::`vftable'
	DD	FLAT:?IsValid@SConstantBuffer@D3DX11Effects@@UAGHXZ
	DD	FLAT:?GetType@SConstantBuffer@D3DX11Effects@@UAGPAUID3DX11EffectType@@XZ
	DD	FLAT:?GetDesc@SConstantBuffer@D3DX11Effects@@UAGJPAU_D3DX11_EFFECT_VARIABLE_DESC@@@Z
	DD	FLAT:?GetAnnotationByIndex@SConstantBuffer@D3DX11Effects@@UAGPAUID3DX11EffectVariable@@I@Z
	DD	FLAT:?GetAnnotationByName@SConstantBuffer@D3DX11Effects@@UAGPAUID3DX11EffectVariable@@PBD@Z
	DD	FLAT:?GetMemberByIndex@SConstantBuffer@D3DX11Effects@@UAGPAUID3DX11EffectVariable@@I@Z
	DD	FLAT:?GetMemberByName@SConstantBuffer@D3DX11Effects@@UAGPAUID3DX11EffectVariable@@PBD@Z
	DD	FLAT:?GetMemberBySemantic@SConstantBuffer@D3DX11Effects@@UAGPAUID3DX11EffectVariable@@PBD@Z
	DD	FLAT:?GetElement@SConstantBuffer@D3DX11Effects@@UAGPAUID3DX11EffectVariable@@I@Z
	DD	FLAT:?GetParentConstantBuffer@SConstantBuffer@D3DX11Effects@@UAGPAUID3DX11EffectConstantBuffer@@XZ
	DD	FLAT:?AsScalar@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectScalarVariable@@XZ
	DD	FLAT:?AsVector@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectVectorVariable@@XZ
	DD	FLAT:?AsMatrix@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectMatrixVariable@@XZ
	DD	FLAT:?AsString@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectStringVariable@@XZ
	DD	FLAT:?AsClassInstance@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectClassInstanceVariable@@XZ
	DD	FLAT:?AsInterface@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectInterfaceVariable@@XZ
	DD	FLAT:?AsShaderResource@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectShaderResourceVariable@@XZ
	DD	FLAT:?AsUnorderedAccessView@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectUnorderedAccessViewVariable@@XZ
	DD	FLAT:?AsRenderTargetView@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectRenderTargetViewVariable@@XZ
	DD	FLAT:?AsDepthStencilView@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectDepthStencilViewVariable@@XZ
	DD	FLAT:?AsConstantBuffer@SConstantBuffer@D3DX11Effects@@UAGPAUID3DX11EffectConstantBuffer@@XZ
	DD	FLAT:?AsShader@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectShaderVariable@@XZ
	DD	FLAT:?AsBlend@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectBlendVariable@@XZ
	DD	FLAT:?AsDepthStencil@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectDepthStencilVariable@@XZ
	DD	FLAT:?AsRasterizer@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectRasterizerVariable@@XZ
	DD	FLAT:?AsSampler@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectSamplerVariable@@XZ
	DD	FLAT:?SetRawValue@SConstantBuffer@D3DX11Effects@@UAGJPBXII@Z
	DD	FLAT:?GetRawValue@SConstantBuffer@D3DX11Effects@@UAGJPAXII@Z
	DD	FLAT:?SetConstantBuffer@SConstantBuffer@D3DX11Effects@@UAGJPAUID3D11Buffer@@@Z
	DD	FLAT:?UndoSetConstantBuffer@SConstantBuffer@D3DX11Effects@@UAGJXZ
	DD	FLAT:?GetConstantBuffer@SConstantBuffer@D3DX11Effects@@UAGJPAPAUID3D11Buffer@@@Z
	DD	FLAT:?SetTextureBuffer@SConstantBuffer@D3DX11Effects@@UAGJPAUID3D11ShaderResourceView@@@Z
	DD	FLAT:?UndoSetTextureBuffer@SConstantBuffer@D3DX11Effects@@UAGJXZ
	DD	FLAT:?GetTextureBuffer@SConstantBuffer@D3DX11Effects@@UAGJPAPAUID3D11ShaderResourceView@@@Z
CONST	ENDS
;	COMDAT ??_7?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@6B@
CONST	SEGMENT
??_7?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@6B@ DD FLAT:??_R4?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@6B@ ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?AsScalar@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectScalarVariable@@XZ
	DD	FLAT:?AsVector@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectVectorVariable@@XZ
	DD	FLAT:?AsMatrix@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectMatrixVariable@@XZ
	DD	FLAT:?AsString@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectStringVariable@@XZ
	DD	FLAT:?AsClassInstance@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectClassInstanceVariable@@XZ
	DD	FLAT:?AsInterface@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectInterfaceVariable@@XZ
	DD	FLAT:?AsShaderResource@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectShaderResourceVariable@@XZ
	DD	FLAT:?AsUnorderedAccessView@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectUnorderedAccessViewVariable@@XZ
	DD	FLAT:?AsRenderTargetView@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectRenderTargetViewVariable@@XZ
	DD	FLAT:?AsDepthStencilView@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectDepthStencilViewVariable@@XZ
	DD	FLAT:?AsConstantBuffer@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectConstantBuffer@@XZ
	DD	FLAT:?AsShader@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectShaderVariable@@XZ
	DD	FLAT:?AsBlend@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectBlendVariable@@XZ
	DD	FLAT:?AsDepthStencil@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectDepthStencilVariable@@XZ
	DD	FLAT:?AsRasterizer@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectRasterizerVariable@@XZ
	DD	FLAT:?AsSampler@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectSamplerVariable@@XZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0?$AA@
CONST	SEGMENT
??_C@_01GBGANLPD@0?$AA@ DB '0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7SType@D3DX11Effects@@6B@
CONST	SEGMENT
??_7SType@D3DX11Effects@@6B@ DD FLAT:??_R4SType@D3DX11Effects@@6B@ ; D3DX11Effects::SType::`vftable'
	DD	FLAT:?IsValid@SType@D3DX11Effects@@UAGHXZ
	DD	FLAT:?GetDesc@SType@D3DX11Effects@@UAGJPAU_D3DX11_EFFECT_TYPE_DESC@@@Z
	DD	FLAT:?GetMemberTypeByIndex@SType@D3DX11Effects@@UAGPAUID3DX11EffectType@@I@Z
	DD	FLAT:?GetMemberTypeByName@SType@D3DX11Effects@@UAGPAUID3DX11EffectType@@PBD@Z
	DD	FLAT:?GetMemberTypeBySemantic@SType@D3DX11Effects@@UAGPAUID3DX11EffectType@@PBD@Z
	DD	FLAT:?GetMemberName@SType@D3DX11Effects@@UAGPBDI@Z
	DD	FLAT:?GetMemberSemantic@SType@D3DX11Effects@@UAGPBDI@Z
CONST	ENDS
;	COMDAT ??_C@_0BA@BGIBFJE@s?5?$DM?$DN?50xffffffff?$AA@
CONST	SEGMENT
??_C@_0BA@BGIBFJE@s?5?$DM?$DN?50xffffffff?$AA@ DB 's <= 0xffffffff', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1???2@YAPAXIAAVCDataBlockStore@@@Z@4JA@af81a2e3
_DATA	SEGMENT
?__LINE__Var@?1???2@YAPAXIAAVCDataBlockStore@@@Z@4JA@af81a2e3 DD 029cH ; `operator new'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??AlignToPowerOf2@@YAPAXPAXI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??AlignToPowerOf2@@YAPAXPAXI@Z@4JA DD 042H ; `AlignToPowerOf2'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0DA@FKFDAOLL@Alignment?5?$DO?50?5?$CG?$CG?5Value?5?$DM?50xfffff@
CONST	SEGMENT
??_C@_0DA@FKFDAOLL@Alignment?5?$DO?50?5?$CG?$CG?5Value?5?$DM?50xfffff@ DB 'A'
	DB	'lignment > 0 && Value < 0xffffffff - Alignment', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
CONST	SEGMENT
??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@ DB 'c:\users\s'
	DB	'imon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@GECBLADO@?$CIAlignment?5?$CG?5?$CIAlignment?5?9?51?$CJ?$CJ?5?$DN?$DN@
CONST	SEGMENT
??_C@_0CD@GECBLADO@?$CIAlignment?5?$CG?5?$CIAlignment?5?9?51?$CJ?$CJ?5?$DN?$DN@ DB '('
	DB	'Alignment & (Alignment - 1)) == 0', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??AlignToPowerOf2@@YAIII@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??AlignToPowerOf2@@YAIII@Z@4JA DD 03aH	; `AlignToPowerOf2'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CEffectVector@USRange@D3DX11Effects@@@@QAEPAUSRange@D3DX11Effects@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CEffectVector@USRange@D3DX11Effects@@@@QAEPAUSRange@D3DX11Effects@@XZ$0
__ehfuncinfo$?Add@?$CEffectVector@USRange@D3DX11Effects@@@@QAEPAUSRange@D3DX11Effects@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CEffectVector@USRange@D3DX11Effects@@@@QAEPAUSRange@D3DX11Effects@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CEffectLoader@D3DX11Effects@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CEffectLoader@D3DX11Effects@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CEffectLoader@D3DX11Effects@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CEffectLoader@D3DX11Effects@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CEffectLoader@D3DX11Effects@@QAE@XZ$3
__ehfuncinfo$??1CEffectLoader@D3DX11Effects@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1CEffectLoader@D3DX11Effects@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CEffectLoader@D3DX11Effects@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CEffectLoader@D3DX11Effects@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CEffectLoader@D3DX11Effects@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CEffectLoader@D3DX11Effects@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CEffectLoader@D3DX11Effects@@QAE@XZ$3
__ehfuncinfo$??0CEffectLoader@D3DX11Effects@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0CEffectLoader@D3DX11Effects@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z DD 019930522H
	DD	012H
	DD	FLAT:__unwindtable$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$54
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$55
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$56
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$57
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$58
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$59
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$60
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$61
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$62
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$63
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$64
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$65
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$66
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$67
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$68
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$69
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$70
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$71
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z$50
	DD	00H
	DD	FLAT:__unwindfunclet$?GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z$51
	DD	01H
	DD	FLAT:__unwindfunclet$?GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z$52
	DD	01H
	DD	FLAT:__unwindfunclet$?GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z$53
	DD	01H
	DD	FLAT:__unwindfunclet$?GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z$54
	DD	01H
	DD	FLAT:__unwindfunclet$?GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z$55
	DD	01H
	DD	FLAT:__unwindfunclet$?GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z$56
	DD	01H
	DD	FLAT:__unwindfunclet$?GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z$57
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadAnnotations@CEffectLoader@D3DX11Effects@@IAEJPAIPAPAUSAnnotation@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadAnnotations@CEffectLoader@D3DX11Effects@@IAEJPAIPAPAUSAnnotation@2@@Z$17
__ehfuncinfo$?LoadAnnotations@CEffectLoader@D3DX11Effects@@IAEJPAIPAPAUSAnnotation@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadAnnotations@CEffectLoader@D3DX11Effects@@IAEJPAIPAPAUSAnnotation@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadTechnique@CEffectLoader@D3DX11Effects@@IAEJPAUSTechnique@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadTechnique@CEffectLoader@D3DX11Effects@@IAEJPAUSTechnique@2@@Z$9
__ehfuncinfo$?LoadTechnique@CEffectLoader@D3DX11Effects@@IAEJPAUSTechnique@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadTechnique@CEffectLoader@D3DX11Effects@@IAEJPAUSTechnique@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadGroups@CEffectLoader@D3DX11Effects@@IAEJXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadGroups@CEffectLoader@D3DX11Effects@@IAEJXZ$7
__ehfuncinfo$?LoadGroups@CEffectLoader@D3DX11Effects@@IAEJXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadGroups@CEffectLoader@D3DX11Effects@@IAEJXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@2@PAEPAI2@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@2@PAEPAI2@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@2@PAEPAI2@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@2@PAEPAI2@Z$53
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@2@PAEPAI2@Z$54
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@2@PAEPAI2@Z$55
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@2@PAEPAI2@Z$56
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@2@PAEPAI2@Z$57
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadTypeAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPAUSType@2@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadTypeAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPAUSType@2@I@Z$30
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadTypeAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPAUSType@2@I@Z$31
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadTypeAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPAUSType@2@I@Z$32
__ehfuncinfo$?LoadTypeAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPAUSType@2@I@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?LoadTypeAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPAUSType@2@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?LoadEffect@CEffect@D3DX11Effects@@QAEJPBXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?LoadEffect@CEffect@D3DX11Effects@@QAEJPBXI@Z$2
__ehfuncinfo$?LoadEffect@CEffect@D3DX11Effects@@QAEJPBXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?LoadEffect@CEffect@D3DX11Effects@@QAEJPBXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
_g_NullRasterizer$initializer$ DD FLAT:??__Eg_NullRasterizer@D3DX11Effects@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_g_NullDepthStencil$initializer$ DD FLAT:??__Eg_NullDepthStencil@D3DX11Effects@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_g_NullBlend$initializer$ DD FLAT:??__Eg_NullBlend@D3DX11Effects@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_g_NullTexture$initializer$ DD FLAT:??__Eg_NullTexture@D3DX11Effects@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_g_NullInterface$initializer$ DD FLAT:??__Eg_NullInterface@D3DX11Effects@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_g_NullUnorderedAccessView$initializer$ DD FLAT:??__Eg_NullUnorderedAccessView@D3DX11Effects@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_g_NullRenderTargetView$initializer$ DD FLAT:??__Eg_NullRenderTargetView@D3DX11Effects@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_g_NullDepthStencilView$initializer$ DD FLAT:??__Eg_NullDepthStencilView@D3DX11Effects@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_g_NullVS$initializer$ DD FLAT:??__Eg_NullVS@D3DX11Effects@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_g_NullGS$initializer$ DD FLAT:??__Eg_NullGS@D3DX11Effects@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_g_NullPS$initializer$ DD FLAT:??__Eg_NullPS@D3DX11Effects@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_g_NullHS$initializer$ DD FLAT:??__Eg_NullHS@D3DX11Effects@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_g_NullDS$initializer$ DD FLAT:??__Eg_NullDS@D3DX11Effects@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_g_NullCS$initializer$ DD FLAT:??__Eg_NullCS@D3DX11Effects@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ?IsValid@SConstantBuffer@D3DX11Effects@@W3AGHXZ
_TEXT	SEGMENT
?IsValid@SConstantBuffer@D3DX11Effects@@W3AGHXZ PROC	; [thunk]:D3DX11Effects::SConstantBuffer::IsValid`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?IsValid@SConstantBuffer@D3DX11Effects@@UAGHXZ ; D3DX11Effects::SConstantBuffer::IsValid
?IsValid@SConstantBuffer@D3DX11Effects@@W3AGHXZ ENDP	; [thunk]:D3DX11Effects::SConstantBuffer::IsValid`adjustor{4}'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ??$ReallocateBlockAssignments@USPassBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEJAAPAUSPassBlock@1@IPAU21@@Z
_TEXT	SEGMENT
tv216 = -352						; size = 4
tv175 = -352						; size = 4
_pVariable$1 = -152					; size = 4
_pDep$2 = -140						; size = 4
_iDep$3 = -128						; size = 4
_pOldVariable$4 = -116					; size = 4
_pOldBlock$5 = -104					; size = 4
_cbDeps$6 = -92						; size = 4
_pAssignment$7 = -80					; size = 4
_pBlock$8 = -68						; size = 4
_j$ = -56						; size = 4
_i$ = -44						; size = 4
_pHeap$ = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_pBlocks$ = 8						; size = 4
_cBlocks$ = 12						; size = 4
_pOldBlocks$ = 16					; size = 4
??$ReallocateBlockAssignments@USPassBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEJAAPAUSPassBlock@1@IPAU21@@Z PROC ; D3DX11Effects::CEffectLoader::ReallocateBlockAssignments<D3DX11Effects::SPassBlock>, COMDAT
; _this$ = ecx

; 3312 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 352				; 00000160H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 88					; 00000058H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3313 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 3314 :     CEffectHeap *pHeap = &m_pEffect->m_Heap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _pHeap$[ebp], ecx

; 3315 :     UINT  i, j;
; 3316 : 
; 3317 :     for(i=0; i<cBlocks; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN67@Reallocate
$LN66@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN67@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _cBlocks$[ebp]
	jae	$lExit$73

; 3318 :     {
; 3319 :         T *pBlock = &pBlocks[i];

	imul	eax, DWORD PTR _i$[ebp], 156
	mov	ecx, DWORD PTR _pBlocks$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR _pBlock$8[ebp], eax

; 3320 :         VHD( pHeap->MoveData((void**) &pBlock->pAssignments, sizeof(SAssignment)*pBlock->AssignmentCount), "Internal loading error: cannot move assignment count." );

	mov	eax, DWORD PTR _pBlock$8[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 5
	push	ecx
	mov	edx, DWORD PTR _pBlock$8[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN64@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN64@Reallocate:

; 3321 : 
; 3322 :         for (j=0; j<pBlock->AssignmentCount; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN62@Reallocate
$LN61@Reallocate:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN62@Reallocate:
	mov	eax, DWORD PTR _pBlock$8[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	$LN60@Reallocate

; 3323 :         {
; 3324 :             SAssignment *pAssignment = &pBlock->pAssignments[j];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _pBlock$8[ebp]
	add	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR _pAssignment$7[ebp], eax

; 3325 :             UINT  cbDeps;
; 3326 : 
; 3327 :             // When cloning, convert pointers back into offsets
; 3328 :             if( pOldBlocks )

	cmp	DWORD PTR _pOldBlocks$[ebp], 0
	je	SHORT $LN59@Reallocate

; 3329 :             {
; 3330 :                 T *pOldBlock = &pOldBlocks[i];

	imul	eax, DWORD PTR _i$[ebp], 156
	add	eax, DWORD PTR _pOldBlocks$[ebp]
	mov	DWORD PTR _pOldBlock$5[ebp], eax

; 3331 :                 pAssignment->Destination.Offset = (UINT)( (UINT_PTR)pAssignment->Destination.pGeneric - (UINT_PTR)pOldBlock ) ;

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _pOldBlock$5[ebp]
	mov	edx, DWORD PTR _pAssignment$7[ebp]
	mov	DWORD PTR [edx+20], ecx
$LN59@Reallocate:

; 3332 :             }
; 3333 : 
; 3334 :             // Convert destination pointers from offset to real pointer
; 3335 :             pAssignment->Destination.pGeneric = (BYTE*) pBlock + pAssignment->Destination.Offset;

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR _pBlock$8[ebp]
	add	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _pAssignment$7[ebp]
	mov	DWORD PTR [edx+20], ecx

; 3336 : 
; 3337 :             // Make sure the data pointer points into the backing store
; 3338 :             VBD( pAssignment->Destination.pGeneric >= &pBlock->BackingStore && 

	mov	eax, DWORD PTR _pBlock$8[ebp]
	add	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	cmp	DWORD PTR [ecx+20], eax
	jb	SHORT $LN57@Reallocate
	mov	eax, DWORD PTR _pBlock$8[ebp]
	add	eax, 132				; 00000084H
	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	cmp	DWORD PTR [ecx+20], eax
	jb	SHORT $LN58@Reallocate
$LN57@Reallocate:
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$73
	jmp	$lExit$73
$LN58@Reallocate:

; 3339 :                  pAssignment->Destination.pGeneric < (BYTE*) &pBlock->BackingStore + sizeof(pBlock->BackingStore), 
; 3340 :                  "Internal loading error: assignment destination out of range." );
; 3341 : 
; 3342 :             // Fixup dependencies
; 3343 :             cbDeps = pAssignment->DependencyCount * sizeof(SAssignment::SDependency);

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 2
	mov	DWORD PTR _cbDeps$6[ebp], ecx

; 3344 :             VHD( pHeap->MoveData((void**) &pAssignment->pDependencies, cbDeps), "Internal loading error: cannot move assignment dependencies." );

	mov	eax, DWORD PTR _cbDeps$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN55@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN55@Reallocate:

; 3345 : 
; 3346 :             SGlobalVariable *pOldVariable = NULL;

	mov	DWORD PTR _pOldVariable$4[ebp], 0

; 3347 :             for(UINT  iDep=0; iDep<pAssignment->DependencyCount; iDep++)

	mov	DWORD PTR _iDep$3[ebp], 0
	jmp	SHORT $LN53@Reallocate
$LN52@Reallocate:
	mov	eax, DWORD PTR _iDep$3[ebp]
	add	eax, 1
	mov	DWORD PTR _iDep$3[ebp], eax
$LN53@Reallocate:
	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR _iDep$3[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN51@Reallocate

; 3348 :             {
; 3349 :                 SAssignment::SDependency *pDep = &pAssignment->pDependencies[iDep];

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _iDep$3[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _pDep$2[ebp], eax

; 3350 :                 // We ignore all but the last variable because below, we only use the last dependency
; 3351 :                 pOldVariable = pDep->pVariable;

	mov	eax, DWORD PTR _pDep$2[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pOldVariable$4[ebp], ecx

; 3352 :                 VH( FixupVariablePointer(&pDep->pVariable) );

	mov	eax, DWORD PTR _pDep$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupVariablePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSGlobalVariable@2@@Z ; D3DX11Effects::CEffectLoader::FixupVariablePointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN50@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN50@Reallocate:

; 3353 :             }

	jmp	SHORT $LN52@Reallocate
$LN51@Reallocate:

; 3354 : 
; 3355 :             // Fixup source pointers
; 3356 :             switch(pAssignment->LhsType)

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv175[ebp], ecx
	cmp	DWORD PTR tv175[ebp], 7
	jg	SHORT $LN70@Reallocate
	cmp	DWORD PTR tv175[ebp], 7
	je	SHORT $LN43@Reallocate
	cmp	DWORD PTR tv175[ebp], 6
	ja	$LN30@Reallocate
	mov	edx, DWORD PTR tv175[ebp]
	jmp	DWORD PTR $LN72@Reallocate[edx*4]
$LN70@Reallocate:
	cmp	DWORD PTR tv175[ebp], 16		; 00000010H
	jg	SHORT $LN71@Reallocate
	cmp	DWORD PTR tv175[ebp], 14		; 0000000eH
	jge	SHORT $LN46@Reallocate
	cmp	DWORD PTR tv175[ebp], 8
	je	SHORT $LN40@Reallocate
	jmp	$LN30@Reallocate
$LN71@Reallocate:
	cmp	DWORD PTR tv175[ebp], 196618		; 0003000aH
	je	$LN34@Reallocate
	jmp	$LN30@Reallocate
$LN46@Reallocate:

; 3357 :             {
; 3358 :             case ELHS_VertexShaderBlock:
; 3359 :             case ELHS_PixelShaderBlock:
; 3360 :             case ELHS_GeometryShaderBlock:
; 3361 :             case ELHS_HullShaderBlock:
; 3362 :             case ELHS_DomainShaderBlock:
; 3363 :             case ELHS_ComputeShaderBlock:
; 3364 :                 VH( FixupShaderPointer(&pAssignment->Source.pShader) );

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupShaderPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupShaderPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN45@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN45@Reallocate:

; 3365 :                 break;

	jmp	$LN4@Reallocate
$LN43@Reallocate:

; 3366 : 
; 3367 :             case ELHS_DepthStencilBlock:
; 3368 :                 VH( FixupDSPointer((SDepthStencilBlock**)&pAssignment->Source.pBlock) );

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupDSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSDepthStencilBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupDSPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN42@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN42@Reallocate:

; 3369 :                 break;

	jmp	$LN4@Reallocate
$LN40@Reallocate:

; 3370 :             case ELHS_BlendBlock:
; 3371 :                 VH( FixupABPointer((SBlendBlock**) &pAssignment->Source.pBlock) );

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupABPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSBlendBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupABPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN39@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN39@Reallocate:

; 3372 :                 break;

	jmp	$LN4@Reallocate
$LN37@Reallocate:

; 3373 :             case ELHS_RasterizerBlock:
; 3374 :                 VH( FixupRSPointer((SRasterizerBlock**) &pAssignment->Source.pBlock) );

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupRSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSRasterizerBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupRSPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN36@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN36@Reallocate:

; 3375 :                 break;

	jmp	$LN4@Reallocate
$LN34@Reallocate:

; 3376 : 
; 3377 :             case ELHS_Texture:
; 3378 :                 VH( FixupShaderResourcePointer((SShaderResource**) &pAssignment->Source.pShaderResource) );

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupShaderResourcePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderResource@2@@Z ; D3DX11Effects::CEffectLoader::FixupShaderResourcePointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN33@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN33@Reallocate:

; 3379 :                 break;

	jmp	$LN4@Reallocate
$LN30@Reallocate:

; 3380 : 
; 3381 :             default:
; 3382 :                 // Non-object assignment (must have at least one dependency or it would have been pruned by now)
; 3383 :                 D3DXASSERT( !pAssignment->IsObjectAssignment() && pAssignment->DependencyCount > 0 );

	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	call	?IsObjectAssignment@SAssignment@D3DX11Effects@@QAEHXZ ; D3DX11Effects::SAssignment::IsObjectAssignment
	test	eax, eax
	jne	SHORT $LN26@Reallocate
	mov	eax, DWORD PTR _pAssignment$7[ebp]
	cmp	DWORD PTR [eax+12], 0
	ja	SHORT $LN29@Reallocate
$LN26@Reallocate:
	push	OFFSET ??_C@_0EH@BPELLKNA@?$CBpAssignment?9?$DOIsObjectAssignment@
	push	3383					; 00000d37H
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN29@Reallocate:
	xor	eax, eax
	jne	SHORT $LN30@Reallocate

; 3384 : 
; 3385 :                 // Numeric variables must be relocated before this function is called
; 3386 :                 
; 3387 :                 switch (pAssignment->AssignmentType)

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv216[ebp], ecx
	cmp	DWORD PTR tv216[ebp], 2
	je	SHORT $LN23@Reallocate
	cmp	DWORD PTR tv216[ebp], 4
	je	SHORT $LN23@Reallocate
	jmp	$LN13@Reallocate
$LN23@Reallocate:

; 3388 :                 {
; 3389 :                 case ERAT_NumericVariable:
; 3390 :                 case ERAT_NumericVariableIndex:
; 3391 :                     // the variable or variable array is always the last dependency in the chain
; 3392 :                     SGlobalVariable *pVariable;
; 3393 :                     pVariable = pAssignment->pDependencies[pAssignment->DependencyCount - 1].pVariable;

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _pAssignment$7[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+ecx*4-4]
	mov	DWORD PTR _pVariable$1[ebp], ecx
$LN22@Reallocate:

; 3394 :                     D3DXASSERT( pVariable->pType->BelongsInConstantBuffer() && NULL != pVariable->pCB );

	mov	eax, DWORD PTR _pVariable$1[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?BelongsInConstantBuffer@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::BelongsInConstantBuffer
	test	eax, eax
	je	SHORT $LN18@Reallocate
	mov	eax, DWORD PTR _pVariable$1[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN21@Reallocate
$LN18@Reallocate:
	push	OFFSET ??_C@_0EG@GMMJAJM@pVariable?9?$DOpType?9?$DOBelongsInConst@
	push	3394					; 00000d42H
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN21@Reallocate:
	xor	eax, eax
	jne	SHORT $LN22@Reallocate

; 3395 : 
; 3396 :                     // When cloning, convert pointers back into offsets
; 3397 :                     if( pOldBlocks )

	cmp	DWORD PTR _pOldBlocks$[ebp], 0
	je	SHORT $LN17@Reallocate

; 3398 :                     {
; 3399 :                         VBD( pOldVariable != NULL, "Internal loading error: pOldVariable is NULL." );

	cmp	DWORD PTR _pOldVariable$4[ebp], 0
	jne	SHORT $LN16@Reallocate
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$73
	jmp	$lExit$73
$LN16@Reallocate:

; 3400 :                         pAssignment->Source.Offset = pAssignment->Source.pNumeric - pOldVariable->pCB->pBackingStore;

	mov	eax, DWORD PTR _pOldVariable$4[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _pAssignment$7[ebp]
	mov	eax, DWORD PTR [edx+24]
	sub	eax, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN17@Reallocate:

; 3401 :                     }
; 3402 : 
; 3403 :                     // Convert from offset to pointer
; 3404 :                     pAssignment->Source.pNumeric = pVariable->pCB->pBackingStore + pAssignment->Source.Offset;

	mov	eax, DWORD PTR _pVariable$1[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	edx, DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	mov	DWORD PTR [ecx+24], edx

; 3405 :                     break;

	jmp	SHORT $LN24@Reallocate
$LN13@Reallocate:

; 3406 : 
; 3407 :                 default:
; 3408 :                     // Shouldn't be able to get here
; 3409 :                     D3DXASSERT(0);

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN12@Reallocate
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	push	3409					; 00000d51H
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN12@Reallocate:
	xor	eax, eax
	jne	SHORT $LN13@Reallocate

; 3410 :                     VHD( E_FAIL, "Loading error: invalid assignment type." );

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN24@Reallocate
	jmp	SHORT $lExit$73
	jmp	SHORT $lExit$73
$LN24@Reallocate:

; 3411 :                 }
; 3412 :                 break;

	jmp	SHORT $LN4@Reallocate
$LN7@Reallocate:

; 3413 : 
; 3414 :             case ELHS_Invalid:
; 3415 :                 VHD( E_FAIL, "Loading error: invalid assignment type." );

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN4@Reallocate
	jmp	SHORT $lExit$73
	jmp	SHORT $lExit$73
$LN4@Reallocate:

; 3416 :             }
; 3417 : 
; 3418 :             D3DXASSERT(m_pEffect->m_LocalTimer > 0);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+164], 0
	ja	SHORT $LN3@Reallocate
	push	OFFSET ??_C@_0BM@CFJFHGND@m_pEffect?9?$DOm_LocalTimer?5?$DO?50?$AA@
	push	3418					; 00000d5aH
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@Reallocate:
	xor	eax, eax
	jne	SHORT $LN4@Reallocate

; 3419 :             m_pEffect->EvaluateAssignment(pAssignment);

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	call	?EvaluateAssignment@CEffect@D3DX11Effects@@IAEHPAUSAssignment@2@@Z ; D3DX11Effects::CEffect::EvaluateAssignment

; 3420 :         }

	jmp	$LN61@Reallocate
$LN60@Reallocate:

; 3421 :     }

	jmp	$LN66@Reallocate
$lExit$73:

; 3422 : 
; 3423 : lExit:
; 3424 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 3425 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN72@Reallocate:
	DD	$LN7@Reallocate
	DD	$LN46@Reallocate
	DD	$LN46@Reallocate
	DD	$LN46@Reallocate
	DD	$LN30@Reallocate
	DD	$LN30@Reallocate
	DD	$LN37@Reallocate
??$ReallocateBlockAssignments@USPassBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEJAAPAUSPassBlock@1@IPAU21@@Z ENDP ; D3DX11Effects::CEffectLoader::ReallocateBlockAssignments<D3DX11Effects::SPassBlock>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ??$ReallocateBlockAssignments@USSamplerBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEJAAPAUSSamplerBlock@1@IPAU21@@Z
_TEXT	SEGMENT
tv216 = -352						; size = 4
tv175 = -352						; size = 4
_pVariable$1 = -152					; size = 4
_pDep$2 = -140						; size = 4
_iDep$3 = -128						; size = 4
_pOldVariable$4 = -116					; size = 4
_pOldBlock$5 = -104					; size = 4
_cbDeps$6 = -92						; size = 4
_pAssignment$7 = -80					; size = 4
_pBlock$8 = -68						; size = 4
_j$ = -56						; size = 4
_i$ = -44						; size = 4
_pHeap$ = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_pBlocks$ = 8						; size = 4
_cBlocks$ = 12						; size = 4
_pOldBlocks$ = 16					; size = 4
??$ReallocateBlockAssignments@USSamplerBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEJAAPAUSSamplerBlock@1@IPAU21@@Z PROC ; D3DX11Effects::CEffectLoader::ReallocateBlockAssignments<D3DX11Effects::SSamplerBlock>, COMDAT
; _this$ = ecx

; 3312 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 352				; 00000160H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 88					; 00000058H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3313 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 3314 :     CEffectHeap *pHeap = &m_pEffect->m_Heap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _pHeap$[ebp], ecx

; 3315 :     UINT  i, j;
; 3316 : 
; 3317 :     for(i=0; i<cBlocks; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN67@Reallocate
$LN66@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN67@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _cBlocks$[ebp]
	jae	$lExit$73

; 3318 :     {
; 3319 :         T *pBlock = &pBlocks[i];

	imul	eax, DWORD PTR _i$[ebp], 76
	mov	ecx, DWORD PTR _pBlocks$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR _pBlock$8[ebp], eax

; 3320 :         VHD( pHeap->MoveData((void**) &pBlock->pAssignments, sizeof(SAssignment)*pBlock->AssignmentCount), "Internal loading error: cannot move assignment count." );

	mov	eax, DWORD PTR _pBlock$8[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 5
	push	ecx
	mov	edx, DWORD PTR _pBlock$8[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN64@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN64@Reallocate:

; 3321 : 
; 3322 :         for (j=0; j<pBlock->AssignmentCount; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN62@Reallocate
$LN61@Reallocate:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN62@Reallocate:
	mov	eax, DWORD PTR _pBlock$8[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	$LN60@Reallocate

; 3323 :         {
; 3324 :             SAssignment *pAssignment = &pBlock->pAssignments[j];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _pBlock$8[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _pAssignment$7[ebp], eax

; 3325 :             UINT  cbDeps;
; 3326 : 
; 3327 :             // When cloning, convert pointers back into offsets
; 3328 :             if( pOldBlocks )

	cmp	DWORD PTR _pOldBlocks$[ebp], 0
	je	SHORT $LN59@Reallocate

; 3329 :             {
; 3330 :                 T *pOldBlock = &pOldBlocks[i];

	imul	eax, DWORD PTR _i$[ebp], 76
	add	eax, DWORD PTR _pOldBlocks$[ebp]
	mov	DWORD PTR _pOldBlock$5[ebp], eax

; 3331 :                 pAssignment->Destination.Offset = (UINT)( (UINT_PTR)pAssignment->Destination.pGeneric - (UINT_PTR)pOldBlock ) ;

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _pOldBlock$5[ebp]
	mov	edx, DWORD PTR _pAssignment$7[ebp]
	mov	DWORD PTR [edx+20], ecx
$LN59@Reallocate:

; 3332 :             }
; 3333 : 
; 3334 :             // Convert destination pointers from offset to real pointer
; 3335 :             pAssignment->Destination.pGeneric = (BYTE*) pBlock + pAssignment->Destination.Offset;

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR _pBlock$8[ebp]
	add	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _pAssignment$7[ebp]
	mov	DWORD PTR [edx+20], ecx

; 3336 : 
; 3337 :             // Make sure the data pointer points into the backing store
; 3338 :             VBD( pAssignment->Destination.pGeneric >= &pBlock->BackingStore && 

	mov	eax, DWORD PTR _pBlock$8[ebp]
	add	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	cmp	DWORD PTR [ecx+20], eax
	jb	SHORT $LN57@Reallocate
	mov	eax, DWORD PTR _pBlock$8[ebp]
	add	eax, 76					; 0000004cH
	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	cmp	DWORD PTR [ecx+20], eax
	jb	SHORT $LN58@Reallocate
$LN57@Reallocate:
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$73
	jmp	$lExit$73
$LN58@Reallocate:

; 3339 :                  pAssignment->Destination.pGeneric < (BYTE*) &pBlock->BackingStore + sizeof(pBlock->BackingStore), 
; 3340 :                  "Internal loading error: assignment destination out of range." );
; 3341 : 
; 3342 :             // Fixup dependencies
; 3343 :             cbDeps = pAssignment->DependencyCount * sizeof(SAssignment::SDependency);

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 2
	mov	DWORD PTR _cbDeps$6[ebp], ecx

; 3344 :             VHD( pHeap->MoveData((void**) &pAssignment->pDependencies, cbDeps), "Internal loading error: cannot move assignment dependencies." );

	mov	eax, DWORD PTR _cbDeps$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN55@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN55@Reallocate:

; 3345 : 
; 3346 :             SGlobalVariable *pOldVariable = NULL;

	mov	DWORD PTR _pOldVariable$4[ebp], 0

; 3347 :             for(UINT  iDep=0; iDep<pAssignment->DependencyCount; iDep++)

	mov	DWORD PTR _iDep$3[ebp], 0
	jmp	SHORT $LN53@Reallocate
$LN52@Reallocate:
	mov	eax, DWORD PTR _iDep$3[ebp]
	add	eax, 1
	mov	DWORD PTR _iDep$3[ebp], eax
$LN53@Reallocate:
	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR _iDep$3[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN51@Reallocate

; 3348 :             {
; 3349 :                 SAssignment::SDependency *pDep = &pAssignment->pDependencies[iDep];

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _iDep$3[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _pDep$2[ebp], eax

; 3350 :                 // We ignore all but the last variable because below, we only use the last dependency
; 3351 :                 pOldVariable = pDep->pVariable;

	mov	eax, DWORD PTR _pDep$2[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pOldVariable$4[ebp], ecx

; 3352 :                 VH( FixupVariablePointer(&pDep->pVariable) );

	mov	eax, DWORD PTR _pDep$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupVariablePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSGlobalVariable@2@@Z ; D3DX11Effects::CEffectLoader::FixupVariablePointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN50@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN50@Reallocate:

; 3353 :             }

	jmp	SHORT $LN52@Reallocate
$LN51@Reallocate:

; 3354 : 
; 3355 :             // Fixup source pointers
; 3356 :             switch(pAssignment->LhsType)

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv175[ebp], ecx
	cmp	DWORD PTR tv175[ebp], 7
	jg	SHORT $LN70@Reallocate
	cmp	DWORD PTR tv175[ebp], 7
	je	SHORT $LN43@Reallocate
	cmp	DWORD PTR tv175[ebp], 6
	ja	$LN30@Reallocate
	mov	edx, DWORD PTR tv175[ebp]
	jmp	DWORD PTR $LN72@Reallocate[edx*4]
$LN70@Reallocate:
	cmp	DWORD PTR tv175[ebp], 16		; 00000010H
	jg	SHORT $LN71@Reallocate
	cmp	DWORD PTR tv175[ebp], 14		; 0000000eH
	jge	SHORT $LN46@Reallocate
	cmp	DWORD PTR tv175[ebp], 8
	je	SHORT $LN40@Reallocate
	jmp	$LN30@Reallocate
$LN71@Reallocate:
	cmp	DWORD PTR tv175[ebp], 196618		; 0003000aH
	je	$LN34@Reallocate
	jmp	$LN30@Reallocate
$LN46@Reallocate:

; 3357 :             {
; 3358 :             case ELHS_VertexShaderBlock:
; 3359 :             case ELHS_PixelShaderBlock:
; 3360 :             case ELHS_GeometryShaderBlock:
; 3361 :             case ELHS_HullShaderBlock:
; 3362 :             case ELHS_DomainShaderBlock:
; 3363 :             case ELHS_ComputeShaderBlock:
; 3364 :                 VH( FixupShaderPointer(&pAssignment->Source.pShader) );

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupShaderPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupShaderPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN45@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN45@Reallocate:

; 3365 :                 break;

	jmp	$LN4@Reallocate
$LN43@Reallocate:

; 3366 : 
; 3367 :             case ELHS_DepthStencilBlock:
; 3368 :                 VH( FixupDSPointer((SDepthStencilBlock**)&pAssignment->Source.pBlock) );

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupDSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSDepthStencilBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupDSPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN42@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN42@Reallocate:

; 3369 :                 break;

	jmp	$LN4@Reallocate
$LN40@Reallocate:

; 3370 :             case ELHS_BlendBlock:
; 3371 :                 VH( FixupABPointer((SBlendBlock**) &pAssignment->Source.pBlock) );

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupABPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSBlendBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupABPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN39@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN39@Reallocate:

; 3372 :                 break;

	jmp	$LN4@Reallocate
$LN37@Reallocate:

; 3373 :             case ELHS_RasterizerBlock:
; 3374 :                 VH( FixupRSPointer((SRasterizerBlock**) &pAssignment->Source.pBlock) );

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupRSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSRasterizerBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupRSPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN36@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN36@Reallocate:

; 3375 :                 break;

	jmp	$LN4@Reallocate
$LN34@Reallocate:

; 3376 : 
; 3377 :             case ELHS_Texture:
; 3378 :                 VH( FixupShaderResourcePointer((SShaderResource**) &pAssignment->Source.pShaderResource) );

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupShaderResourcePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderResource@2@@Z ; D3DX11Effects::CEffectLoader::FixupShaderResourcePointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN33@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN33@Reallocate:

; 3379 :                 break;

	jmp	$LN4@Reallocate
$LN30@Reallocate:

; 3380 : 
; 3381 :             default:
; 3382 :                 // Non-object assignment (must have at least one dependency or it would have been pruned by now)
; 3383 :                 D3DXASSERT( !pAssignment->IsObjectAssignment() && pAssignment->DependencyCount > 0 );

	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	call	?IsObjectAssignment@SAssignment@D3DX11Effects@@QAEHXZ ; D3DX11Effects::SAssignment::IsObjectAssignment
	test	eax, eax
	jne	SHORT $LN26@Reallocate
	mov	eax, DWORD PTR _pAssignment$7[ebp]
	cmp	DWORD PTR [eax+12], 0
	ja	SHORT $LN29@Reallocate
$LN26@Reallocate:
	push	OFFSET ??_C@_0EH@BPELLKNA@?$CBpAssignment?9?$DOIsObjectAssignment@
	push	3383					; 00000d37H
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN29@Reallocate:
	xor	eax, eax
	jne	SHORT $LN30@Reallocate

; 3384 : 
; 3385 :                 // Numeric variables must be relocated before this function is called
; 3386 :                 
; 3387 :                 switch (pAssignment->AssignmentType)

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv216[ebp], ecx
	cmp	DWORD PTR tv216[ebp], 2
	je	SHORT $LN23@Reallocate
	cmp	DWORD PTR tv216[ebp], 4
	je	SHORT $LN23@Reallocate
	jmp	$LN13@Reallocate
$LN23@Reallocate:

; 3388 :                 {
; 3389 :                 case ERAT_NumericVariable:
; 3390 :                 case ERAT_NumericVariableIndex:
; 3391 :                     // the variable or variable array is always the last dependency in the chain
; 3392 :                     SGlobalVariable *pVariable;
; 3393 :                     pVariable = pAssignment->pDependencies[pAssignment->DependencyCount - 1].pVariable;

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _pAssignment$7[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+ecx*4-4]
	mov	DWORD PTR _pVariable$1[ebp], ecx
$LN22@Reallocate:

; 3394 :                     D3DXASSERT( pVariable->pType->BelongsInConstantBuffer() && NULL != pVariable->pCB );

	mov	eax, DWORD PTR _pVariable$1[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?BelongsInConstantBuffer@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::BelongsInConstantBuffer
	test	eax, eax
	je	SHORT $LN18@Reallocate
	mov	eax, DWORD PTR _pVariable$1[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN21@Reallocate
$LN18@Reallocate:
	push	OFFSET ??_C@_0EG@GMMJAJM@pVariable?9?$DOpType?9?$DOBelongsInConst@
	push	3394					; 00000d42H
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN21@Reallocate:
	xor	eax, eax
	jne	SHORT $LN22@Reallocate

; 3395 : 
; 3396 :                     // When cloning, convert pointers back into offsets
; 3397 :                     if( pOldBlocks )

	cmp	DWORD PTR _pOldBlocks$[ebp], 0
	je	SHORT $LN17@Reallocate

; 3398 :                     {
; 3399 :                         VBD( pOldVariable != NULL, "Internal loading error: pOldVariable is NULL." );

	cmp	DWORD PTR _pOldVariable$4[ebp], 0
	jne	SHORT $LN16@Reallocate
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$73
	jmp	$lExit$73
$LN16@Reallocate:

; 3400 :                         pAssignment->Source.Offset = pAssignment->Source.pNumeric - pOldVariable->pCB->pBackingStore;

	mov	eax, DWORD PTR _pOldVariable$4[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _pAssignment$7[ebp]
	mov	eax, DWORD PTR [edx+24]
	sub	eax, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN17@Reallocate:

; 3401 :                     }
; 3402 : 
; 3403 :                     // Convert from offset to pointer
; 3404 :                     pAssignment->Source.pNumeric = pVariable->pCB->pBackingStore + pAssignment->Source.Offset;

	mov	eax, DWORD PTR _pVariable$1[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	edx, DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	mov	DWORD PTR [ecx+24], edx

; 3405 :                     break;

	jmp	SHORT $LN24@Reallocate
$LN13@Reallocate:

; 3406 : 
; 3407 :                 default:
; 3408 :                     // Shouldn't be able to get here
; 3409 :                     D3DXASSERT(0);

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN12@Reallocate
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	push	3409					; 00000d51H
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN12@Reallocate:
	xor	eax, eax
	jne	SHORT $LN13@Reallocate

; 3410 :                     VHD( E_FAIL, "Loading error: invalid assignment type." );

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN24@Reallocate
	jmp	SHORT $lExit$73
	jmp	SHORT $lExit$73
$LN24@Reallocate:

; 3411 :                 }
; 3412 :                 break;

	jmp	SHORT $LN4@Reallocate
$LN7@Reallocate:

; 3413 : 
; 3414 :             case ELHS_Invalid:
; 3415 :                 VHD( E_FAIL, "Loading error: invalid assignment type." );

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN4@Reallocate
	jmp	SHORT $lExit$73
	jmp	SHORT $lExit$73
$LN4@Reallocate:

; 3416 :             }
; 3417 : 
; 3418 :             D3DXASSERT(m_pEffect->m_LocalTimer > 0);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+164], 0
	ja	SHORT $LN3@Reallocate
	push	OFFSET ??_C@_0BM@CFJFHGND@m_pEffect?9?$DOm_LocalTimer?5?$DO?50?$AA@
	push	3418					; 00000d5aH
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@Reallocate:
	xor	eax, eax
	jne	SHORT $LN4@Reallocate

; 3419 :             m_pEffect->EvaluateAssignment(pAssignment);

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	call	?EvaluateAssignment@CEffect@D3DX11Effects@@IAEHPAUSAssignment@2@@Z ; D3DX11Effects::CEffect::EvaluateAssignment

; 3420 :         }

	jmp	$LN61@Reallocate
$LN60@Reallocate:

; 3421 :     }

	jmp	$LN66@Reallocate
$lExit$73:

; 3422 : 
; 3423 : lExit:
; 3424 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 3425 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN72@Reallocate:
	DD	$LN7@Reallocate
	DD	$LN46@Reallocate
	DD	$LN46@Reallocate
	DD	$LN46@Reallocate
	DD	$LN30@Reallocate
	DD	$LN30@Reallocate
	DD	$LN37@Reallocate
??$ReallocateBlockAssignments@USSamplerBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEJAAPAUSSamplerBlock@1@IPAU21@@Z ENDP ; D3DX11Effects::CEffectLoader::ReallocateBlockAssignments<D3DX11Effects::SSamplerBlock>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ??$ReallocateBlockAssignments@USRasterizerBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEJAAPAUSRasterizerBlock@1@IPAU21@@Z
_TEXT	SEGMENT
tv216 = -352						; size = 4
tv175 = -352						; size = 4
_pVariable$1 = -152					; size = 4
_pDep$2 = -140						; size = 4
_iDep$3 = -128						; size = 4
_pOldVariable$4 = -116					; size = 4
_pOldBlock$5 = -104					; size = 4
_cbDeps$6 = -92						; size = 4
_pAssignment$7 = -80					; size = 4
_pBlock$8 = -68						; size = 4
_j$ = -56						; size = 4
_i$ = -44						; size = 4
_pHeap$ = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_pBlocks$ = 8						; size = 4
_cBlocks$ = 12						; size = 4
_pOldBlocks$ = 16					; size = 4
??$ReallocateBlockAssignments@USRasterizerBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEJAAPAUSRasterizerBlock@1@IPAU21@@Z PROC ; D3DX11Effects::CEffectLoader::ReallocateBlockAssignments<D3DX11Effects::SRasterizerBlock>, COMDAT
; _this$ = ecx

; 3312 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 352				; 00000160H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 88					; 00000058H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3313 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 3314 :     CEffectHeap *pHeap = &m_pEffect->m_Heap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _pHeap$[ebp], ecx

; 3315 :     UINT  i, j;
; 3316 : 
; 3317 :     for(i=0; i<cBlocks; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN67@Reallocate
$LN66@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN67@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _cBlocks$[ebp]
	jae	$lExit$73

; 3318 :     {
; 3319 :         T *pBlock = &pBlocks[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _pBlocks$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR _pBlock$8[ebp], eax

; 3320 :         VHD( pHeap->MoveData((void**) &pBlock->pAssignments, sizeof(SAssignment)*pBlock->AssignmentCount), "Internal loading error: cannot move assignment count." );

	mov	eax, DWORD PTR _pBlock$8[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 5
	push	ecx
	mov	edx, DWORD PTR _pBlock$8[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN64@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN64@Reallocate:

; 3321 : 
; 3322 :         for (j=0; j<pBlock->AssignmentCount; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN62@Reallocate
$LN61@Reallocate:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN62@Reallocate:
	mov	eax, DWORD PTR _pBlock$8[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	$LN60@Reallocate

; 3323 :         {
; 3324 :             SAssignment *pAssignment = &pBlock->pAssignments[j];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _pBlock$8[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _pAssignment$7[ebp], eax

; 3325 :             UINT  cbDeps;
; 3326 : 
; 3327 :             // When cloning, convert pointers back into offsets
; 3328 :             if( pOldBlocks )

	cmp	DWORD PTR _pOldBlocks$[ebp], 0
	je	SHORT $LN59@Reallocate

; 3329 :             {
; 3330 :                 T *pOldBlock = &pOldBlocks[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	add	eax, DWORD PTR _pOldBlocks$[ebp]
	mov	DWORD PTR _pOldBlock$5[ebp], eax

; 3331 :                 pAssignment->Destination.Offset = (UINT)( (UINT_PTR)pAssignment->Destination.pGeneric - (UINT_PTR)pOldBlock ) ;

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _pOldBlock$5[ebp]
	mov	edx, DWORD PTR _pAssignment$7[ebp]
	mov	DWORD PTR [edx+20], ecx
$LN59@Reallocate:

; 3332 :             }
; 3333 : 
; 3334 :             // Convert destination pointers from offset to real pointer
; 3335 :             pAssignment->Destination.pGeneric = (BYTE*) pBlock + pAssignment->Destination.Offset;

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR _pBlock$8[ebp]
	add	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _pAssignment$7[ebp]
	mov	DWORD PTR [edx+20], ecx

; 3336 : 
; 3337 :             // Make sure the data pointer points into the backing store
; 3338 :             VBD( pAssignment->Destination.pGeneric >= &pBlock->BackingStore && 

	mov	eax, DWORD PTR _pBlock$8[ebp]
	add	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	cmp	DWORD PTR [ecx+20], eax
	jb	SHORT $LN57@Reallocate
	mov	eax, DWORD PTR _pBlock$8[ebp]
	add	eax, 60					; 0000003cH
	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	cmp	DWORD PTR [ecx+20], eax
	jb	SHORT $LN58@Reallocate
$LN57@Reallocate:
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$73
	jmp	$lExit$73
$LN58@Reallocate:

; 3339 :                  pAssignment->Destination.pGeneric < (BYTE*) &pBlock->BackingStore + sizeof(pBlock->BackingStore), 
; 3340 :                  "Internal loading error: assignment destination out of range." );
; 3341 : 
; 3342 :             // Fixup dependencies
; 3343 :             cbDeps = pAssignment->DependencyCount * sizeof(SAssignment::SDependency);

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 2
	mov	DWORD PTR _cbDeps$6[ebp], ecx

; 3344 :             VHD( pHeap->MoveData((void**) &pAssignment->pDependencies, cbDeps), "Internal loading error: cannot move assignment dependencies." );

	mov	eax, DWORD PTR _cbDeps$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN55@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN55@Reallocate:

; 3345 : 
; 3346 :             SGlobalVariable *pOldVariable = NULL;

	mov	DWORD PTR _pOldVariable$4[ebp], 0

; 3347 :             for(UINT  iDep=0; iDep<pAssignment->DependencyCount; iDep++)

	mov	DWORD PTR _iDep$3[ebp], 0
	jmp	SHORT $LN53@Reallocate
$LN52@Reallocate:
	mov	eax, DWORD PTR _iDep$3[ebp]
	add	eax, 1
	mov	DWORD PTR _iDep$3[ebp], eax
$LN53@Reallocate:
	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR _iDep$3[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN51@Reallocate

; 3348 :             {
; 3349 :                 SAssignment::SDependency *pDep = &pAssignment->pDependencies[iDep];

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _iDep$3[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _pDep$2[ebp], eax

; 3350 :                 // We ignore all but the last variable because below, we only use the last dependency
; 3351 :                 pOldVariable = pDep->pVariable;

	mov	eax, DWORD PTR _pDep$2[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pOldVariable$4[ebp], ecx

; 3352 :                 VH( FixupVariablePointer(&pDep->pVariable) );

	mov	eax, DWORD PTR _pDep$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupVariablePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSGlobalVariable@2@@Z ; D3DX11Effects::CEffectLoader::FixupVariablePointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN50@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN50@Reallocate:

; 3353 :             }

	jmp	SHORT $LN52@Reallocate
$LN51@Reallocate:

; 3354 : 
; 3355 :             // Fixup source pointers
; 3356 :             switch(pAssignment->LhsType)

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv175[ebp], ecx
	cmp	DWORD PTR tv175[ebp], 7
	jg	SHORT $LN70@Reallocate
	cmp	DWORD PTR tv175[ebp], 7
	je	SHORT $LN43@Reallocate
	cmp	DWORD PTR tv175[ebp], 6
	ja	$LN30@Reallocate
	mov	edx, DWORD PTR tv175[ebp]
	jmp	DWORD PTR $LN72@Reallocate[edx*4]
$LN70@Reallocate:
	cmp	DWORD PTR tv175[ebp], 16		; 00000010H
	jg	SHORT $LN71@Reallocate
	cmp	DWORD PTR tv175[ebp], 14		; 0000000eH
	jge	SHORT $LN46@Reallocate
	cmp	DWORD PTR tv175[ebp], 8
	je	SHORT $LN40@Reallocate
	jmp	$LN30@Reallocate
$LN71@Reallocate:
	cmp	DWORD PTR tv175[ebp], 196618		; 0003000aH
	je	$LN34@Reallocate
	jmp	$LN30@Reallocate
$LN46@Reallocate:

; 3357 :             {
; 3358 :             case ELHS_VertexShaderBlock:
; 3359 :             case ELHS_PixelShaderBlock:
; 3360 :             case ELHS_GeometryShaderBlock:
; 3361 :             case ELHS_HullShaderBlock:
; 3362 :             case ELHS_DomainShaderBlock:
; 3363 :             case ELHS_ComputeShaderBlock:
; 3364 :                 VH( FixupShaderPointer(&pAssignment->Source.pShader) );

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupShaderPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupShaderPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN45@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN45@Reallocate:

; 3365 :                 break;

	jmp	$LN4@Reallocate
$LN43@Reallocate:

; 3366 : 
; 3367 :             case ELHS_DepthStencilBlock:
; 3368 :                 VH( FixupDSPointer((SDepthStencilBlock**)&pAssignment->Source.pBlock) );

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupDSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSDepthStencilBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupDSPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN42@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN42@Reallocate:

; 3369 :                 break;

	jmp	$LN4@Reallocate
$LN40@Reallocate:

; 3370 :             case ELHS_BlendBlock:
; 3371 :                 VH( FixupABPointer((SBlendBlock**) &pAssignment->Source.pBlock) );

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupABPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSBlendBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupABPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN39@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN39@Reallocate:

; 3372 :                 break;

	jmp	$LN4@Reallocate
$LN37@Reallocate:

; 3373 :             case ELHS_RasterizerBlock:
; 3374 :                 VH( FixupRSPointer((SRasterizerBlock**) &pAssignment->Source.pBlock) );

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupRSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSRasterizerBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupRSPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN36@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN36@Reallocate:

; 3375 :                 break;

	jmp	$LN4@Reallocate
$LN34@Reallocate:

; 3376 : 
; 3377 :             case ELHS_Texture:
; 3378 :                 VH( FixupShaderResourcePointer((SShaderResource**) &pAssignment->Source.pShaderResource) );

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupShaderResourcePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderResource@2@@Z ; D3DX11Effects::CEffectLoader::FixupShaderResourcePointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN33@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN33@Reallocate:

; 3379 :                 break;

	jmp	$LN4@Reallocate
$LN30@Reallocate:

; 3380 : 
; 3381 :             default:
; 3382 :                 // Non-object assignment (must have at least one dependency or it would have been pruned by now)
; 3383 :                 D3DXASSERT( !pAssignment->IsObjectAssignment() && pAssignment->DependencyCount > 0 );

	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	call	?IsObjectAssignment@SAssignment@D3DX11Effects@@QAEHXZ ; D3DX11Effects::SAssignment::IsObjectAssignment
	test	eax, eax
	jne	SHORT $LN26@Reallocate
	mov	eax, DWORD PTR _pAssignment$7[ebp]
	cmp	DWORD PTR [eax+12], 0
	ja	SHORT $LN29@Reallocate
$LN26@Reallocate:
	push	OFFSET ??_C@_0EH@BPELLKNA@?$CBpAssignment?9?$DOIsObjectAssignment@
	push	3383					; 00000d37H
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN29@Reallocate:
	xor	eax, eax
	jne	SHORT $LN30@Reallocate

; 3384 : 
; 3385 :                 // Numeric variables must be relocated before this function is called
; 3386 :                 
; 3387 :                 switch (pAssignment->AssignmentType)

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv216[ebp], ecx
	cmp	DWORD PTR tv216[ebp], 2
	je	SHORT $LN23@Reallocate
	cmp	DWORD PTR tv216[ebp], 4
	je	SHORT $LN23@Reallocate
	jmp	$LN13@Reallocate
$LN23@Reallocate:

; 3388 :                 {
; 3389 :                 case ERAT_NumericVariable:
; 3390 :                 case ERAT_NumericVariableIndex:
; 3391 :                     // the variable or variable array is always the last dependency in the chain
; 3392 :                     SGlobalVariable *pVariable;
; 3393 :                     pVariable = pAssignment->pDependencies[pAssignment->DependencyCount - 1].pVariable;

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _pAssignment$7[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+ecx*4-4]
	mov	DWORD PTR _pVariable$1[ebp], ecx
$LN22@Reallocate:

; 3394 :                     D3DXASSERT( pVariable->pType->BelongsInConstantBuffer() && NULL != pVariable->pCB );

	mov	eax, DWORD PTR _pVariable$1[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?BelongsInConstantBuffer@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::BelongsInConstantBuffer
	test	eax, eax
	je	SHORT $LN18@Reallocate
	mov	eax, DWORD PTR _pVariable$1[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN21@Reallocate
$LN18@Reallocate:
	push	OFFSET ??_C@_0EG@GMMJAJM@pVariable?9?$DOpType?9?$DOBelongsInConst@
	push	3394					; 00000d42H
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN21@Reallocate:
	xor	eax, eax
	jne	SHORT $LN22@Reallocate

; 3395 : 
; 3396 :                     // When cloning, convert pointers back into offsets
; 3397 :                     if( pOldBlocks )

	cmp	DWORD PTR _pOldBlocks$[ebp], 0
	je	SHORT $LN17@Reallocate

; 3398 :                     {
; 3399 :                         VBD( pOldVariable != NULL, "Internal loading error: pOldVariable is NULL." );

	cmp	DWORD PTR _pOldVariable$4[ebp], 0
	jne	SHORT $LN16@Reallocate
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$73
	jmp	$lExit$73
$LN16@Reallocate:

; 3400 :                         pAssignment->Source.Offset = pAssignment->Source.pNumeric - pOldVariable->pCB->pBackingStore;

	mov	eax, DWORD PTR _pOldVariable$4[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _pAssignment$7[ebp]
	mov	eax, DWORD PTR [edx+24]
	sub	eax, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN17@Reallocate:

; 3401 :                     }
; 3402 : 
; 3403 :                     // Convert from offset to pointer
; 3404 :                     pAssignment->Source.pNumeric = pVariable->pCB->pBackingStore + pAssignment->Source.Offset;

	mov	eax, DWORD PTR _pVariable$1[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	edx, DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	mov	DWORD PTR [ecx+24], edx

; 3405 :                     break;

	jmp	SHORT $LN24@Reallocate
$LN13@Reallocate:

; 3406 : 
; 3407 :                 default:
; 3408 :                     // Shouldn't be able to get here
; 3409 :                     D3DXASSERT(0);

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN12@Reallocate
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	push	3409					; 00000d51H
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN12@Reallocate:
	xor	eax, eax
	jne	SHORT $LN13@Reallocate

; 3410 :                     VHD( E_FAIL, "Loading error: invalid assignment type." );

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN24@Reallocate
	jmp	SHORT $lExit$73
	jmp	SHORT $lExit$73
$LN24@Reallocate:

; 3411 :                 }
; 3412 :                 break;

	jmp	SHORT $LN4@Reallocate
$LN7@Reallocate:

; 3413 : 
; 3414 :             case ELHS_Invalid:
; 3415 :                 VHD( E_FAIL, "Loading error: invalid assignment type." );

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN4@Reallocate
	jmp	SHORT $lExit$73
	jmp	SHORT $lExit$73
$LN4@Reallocate:

; 3416 :             }
; 3417 : 
; 3418 :             D3DXASSERT(m_pEffect->m_LocalTimer > 0);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+164], 0
	ja	SHORT $LN3@Reallocate
	push	OFFSET ??_C@_0BM@CFJFHGND@m_pEffect?9?$DOm_LocalTimer?5?$DO?50?$AA@
	push	3418					; 00000d5aH
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@Reallocate:
	xor	eax, eax
	jne	SHORT $LN4@Reallocate

; 3419 :             m_pEffect->EvaluateAssignment(pAssignment);

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	call	?EvaluateAssignment@CEffect@D3DX11Effects@@IAEHPAUSAssignment@2@@Z ; D3DX11Effects::CEffect::EvaluateAssignment

; 3420 :         }

	jmp	$LN61@Reallocate
$LN60@Reallocate:

; 3421 :     }

	jmp	$LN66@Reallocate
$lExit$73:

; 3422 : 
; 3423 : lExit:
; 3424 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 3425 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN72@Reallocate:
	DD	$LN7@Reallocate
	DD	$LN46@Reallocate
	DD	$LN46@Reallocate
	DD	$LN46@Reallocate
	DD	$LN30@Reallocate
	DD	$LN30@Reallocate
	DD	$LN37@Reallocate
??$ReallocateBlockAssignments@USRasterizerBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEJAAPAUSRasterizerBlock@1@IPAU21@@Z ENDP ; D3DX11Effects::CEffectLoader::ReallocateBlockAssignments<D3DX11Effects::SRasterizerBlock>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ??$ReallocateBlockAssignments@USBlendBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEJAAPAUSBlendBlock@1@IPAU21@@Z
_TEXT	SEGMENT
tv216 = -352						; size = 4
tv175 = -352						; size = 4
_pVariable$1 = -152					; size = 4
_pDep$2 = -140						; size = 4
_iDep$3 = -128						; size = 4
_pOldVariable$4 = -116					; size = 4
_pOldBlock$5 = -104					; size = 4
_cbDeps$6 = -92						; size = 4
_pAssignment$7 = -80					; size = 4
_pBlock$8 = -68						; size = 4
_j$ = -56						; size = 4
_i$ = -44						; size = 4
_pHeap$ = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_pBlocks$ = 8						; size = 4
_cBlocks$ = 12						; size = 4
_pOldBlocks$ = 16					; size = 4
??$ReallocateBlockAssignments@USBlendBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEJAAPAUSBlendBlock@1@IPAU21@@Z PROC ; D3DX11Effects::CEffectLoader::ReallocateBlockAssignments<D3DX11Effects::SBlendBlock>, COMDAT
; _this$ = ecx

; 3312 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 352				; 00000160H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 88					; 00000058H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3313 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 3314 :     CEffectHeap *pHeap = &m_pEffect->m_Heap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _pHeap$[ebp], ecx

; 3315 :     UINT  i, j;
; 3316 : 
; 3317 :     for(i=0; i<cBlocks; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN67@Reallocate
$LN66@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN67@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _cBlocks$[ebp]
	jae	$lExit$73

; 3318 :     {
; 3319 :         T *pBlock = &pBlocks[i];

	imul	eax, DWORD PTR _i$[ebp], 288
	mov	ecx, DWORD PTR _pBlocks$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR _pBlock$8[ebp], eax

; 3320 :         VHD( pHeap->MoveData((void**) &pBlock->pAssignments, sizeof(SAssignment)*pBlock->AssignmentCount), "Internal loading error: cannot move assignment count." );

	mov	eax, DWORD PTR _pBlock$8[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 5
	push	ecx
	mov	edx, DWORD PTR _pBlock$8[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN64@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN64@Reallocate:

; 3321 : 
; 3322 :         for (j=0; j<pBlock->AssignmentCount; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN62@Reallocate
$LN61@Reallocate:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN62@Reallocate:
	mov	eax, DWORD PTR _pBlock$8[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	$LN60@Reallocate

; 3323 :         {
; 3324 :             SAssignment *pAssignment = &pBlock->pAssignments[j];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _pBlock$8[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _pAssignment$7[ebp], eax

; 3325 :             UINT  cbDeps;
; 3326 : 
; 3327 :             // When cloning, convert pointers back into offsets
; 3328 :             if( pOldBlocks )

	cmp	DWORD PTR _pOldBlocks$[ebp], 0
	je	SHORT $LN59@Reallocate

; 3329 :             {
; 3330 :                 T *pOldBlock = &pOldBlocks[i];

	imul	eax, DWORD PTR _i$[ebp], 288
	add	eax, DWORD PTR _pOldBlocks$[ebp]
	mov	DWORD PTR _pOldBlock$5[ebp], eax

; 3331 :                 pAssignment->Destination.Offset = (UINT)( (UINT_PTR)pAssignment->Destination.pGeneric - (UINT_PTR)pOldBlock ) ;

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _pOldBlock$5[ebp]
	mov	edx, DWORD PTR _pAssignment$7[ebp]
	mov	DWORD PTR [edx+20], ecx
$LN59@Reallocate:

; 3332 :             }
; 3333 : 
; 3334 :             // Convert destination pointers from offset to real pointer
; 3335 :             pAssignment->Destination.pGeneric = (BYTE*) pBlock + pAssignment->Destination.Offset;

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR _pBlock$8[ebp]
	add	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _pAssignment$7[ebp]
	mov	DWORD PTR [edx+20], ecx

; 3336 : 
; 3337 :             // Make sure the data pointer points into the backing store
; 3338 :             VBD( pAssignment->Destination.pGeneric >= &pBlock->BackingStore && 

	mov	eax, DWORD PTR _pBlock$8[ebp]
	add	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	cmp	DWORD PTR [ecx+20], eax
	jb	SHORT $LN57@Reallocate
	mov	eax, DWORD PTR _pBlock$8[ebp]
	add	eax, 284				; 0000011cH
	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	cmp	DWORD PTR [ecx+20], eax
	jb	SHORT $LN58@Reallocate
$LN57@Reallocate:
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$73
	jmp	$lExit$73
$LN58@Reallocate:

; 3339 :                  pAssignment->Destination.pGeneric < (BYTE*) &pBlock->BackingStore + sizeof(pBlock->BackingStore), 
; 3340 :                  "Internal loading error: assignment destination out of range." );
; 3341 : 
; 3342 :             // Fixup dependencies
; 3343 :             cbDeps = pAssignment->DependencyCount * sizeof(SAssignment::SDependency);

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 2
	mov	DWORD PTR _cbDeps$6[ebp], ecx

; 3344 :             VHD( pHeap->MoveData((void**) &pAssignment->pDependencies, cbDeps), "Internal loading error: cannot move assignment dependencies." );

	mov	eax, DWORD PTR _cbDeps$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN55@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN55@Reallocate:

; 3345 : 
; 3346 :             SGlobalVariable *pOldVariable = NULL;

	mov	DWORD PTR _pOldVariable$4[ebp], 0

; 3347 :             for(UINT  iDep=0; iDep<pAssignment->DependencyCount; iDep++)

	mov	DWORD PTR _iDep$3[ebp], 0
	jmp	SHORT $LN53@Reallocate
$LN52@Reallocate:
	mov	eax, DWORD PTR _iDep$3[ebp]
	add	eax, 1
	mov	DWORD PTR _iDep$3[ebp], eax
$LN53@Reallocate:
	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR _iDep$3[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN51@Reallocate

; 3348 :             {
; 3349 :                 SAssignment::SDependency *pDep = &pAssignment->pDependencies[iDep];

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _iDep$3[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _pDep$2[ebp], eax

; 3350 :                 // We ignore all but the last variable because below, we only use the last dependency
; 3351 :                 pOldVariable = pDep->pVariable;

	mov	eax, DWORD PTR _pDep$2[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pOldVariable$4[ebp], ecx

; 3352 :                 VH( FixupVariablePointer(&pDep->pVariable) );

	mov	eax, DWORD PTR _pDep$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupVariablePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSGlobalVariable@2@@Z ; D3DX11Effects::CEffectLoader::FixupVariablePointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN50@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN50@Reallocate:

; 3353 :             }

	jmp	SHORT $LN52@Reallocate
$LN51@Reallocate:

; 3354 : 
; 3355 :             // Fixup source pointers
; 3356 :             switch(pAssignment->LhsType)

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv175[ebp], ecx
	cmp	DWORD PTR tv175[ebp], 7
	jg	SHORT $LN70@Reallocate
	cmp	DWORD PTR tv175[ebp], 7
	je	SHORT $LN43@Reallocate
	cmp	DWORD PTR tv175[ebp], 6
	ja	$LN30@Reallocate
	mov	edx, DWORD PTR tv175[ebp]
	jmp	DWORD PTR $LN72@Reallocate[edx*4]
$LN70@Reallocate:
	cmp	DWORD PTR tv175[ebp], 16		; 00000010H
	jg	SHORT $LN71@Reallocate
	cmp	DWORD PTR tv175[ebp], 14		; 0000000eH
	jge	SHORT $LN46@Reallocate
	cmp	DWORD PTR tv175[ebp], 8
	je	SHORT $LN40@Reallocate
	jmp	$LN30@Reallocate
$LN71@Reallocate:
	cmp	DWORD PTR tv175[ebp], 196618		; 0003000aH
	je	$LN34@Reallocate
	jmp	$LN30@Reallocate
$LN46@Reallocate:

; 3357 :             {
; 3358 :             case ELHS_VertexShaderBlock:
; 3359 :             case ELHS_PixelShaderBlock:
; 3360 :             case ELHS_GeometryShaderBlock:
; 3361 :             case ELHS_HullShaderBlock:
; 3362 :             case ELHS_DomainShaderBlock:
; 3363 :             case ELHS_ComputeShaderBlock:
; 3364 :                 VH( FixupShaderPointer(&pAssignment->Source.pShader) );

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupShaderPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupShaderPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN45@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN45@Reallocate:

; 3365 :                 break;

	jmp	$LN4@Reallocate
$LN43@Reallocate:

; 3366 : 
; 3367 :             case ELHS_DepthStencilBlock:
; 3368 :                 VH( FixupDSPointer((SDepthStencilBlock**)&pAssignment->Source.pBlock) );

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupDSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSDepthStencilBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupDSPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN42@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN42@Reallocate:

; 3369 :                 break;

	jmp	$LN4@Reallocate
$LN40@Reallocate:

; 3370 :             case ELHS_BlendBlock:
; 3371 :                 VH( FixupABPointer((SBlendBlock**) &pAssignment->Source.pBlock) );

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupABPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSBlendBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupABPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN39@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN39@Reallocate:

; 3372 :                 break;

	jmp	$LN4@Reallocate
$LN37@Reallocate:

; 3373 :             case ELHS_RasterizerBlock:
; 3374 :                 VH( FixupRSPointer((SRasterizerBlock**) &pAssignment->Source.pBlock) );

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupRSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSRasterizerBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupRSPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN36@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN36@Reallocate:

; 3375 :                 break;

	jmp	$LN4@Reallocate
$LN34@Reallocate:

; 3376 : 
; 3377 :             case ELHS_Texture:
; 3378 :                 VH( FixupShaderResourcePointer((SShaderResource**) &pAssignment->Source.pShaderResource) );

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupShaderResourcePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderResource@2@@Z ; D3DX11Effects::CEffectLoader::FixupShaderResourcePointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN33@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN33@Reallocate:

; 3379 :                 break;

	jmp	$LN4@Reallocate
$LN30@Reallocate:

; 3380 : 
; 3381 :             default:
; 3382 :                 // Non-object assignment (must have at least one dependency or it would have been pruned by now)
; 3383 :                 D3DXASSERT( !pAssignment->IsObjectAssignment() && pAssignment->DependencyCount > 0 );

	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	call	?IsObjectAssignment@SAssignment@D3DX11Effects@@QAEHXZ ; D3DX11Effects::SAssignment::IsObjectAssignment
	test	eax, eax
	jne	SHORT $LN26@Reallocate
	mov	eax, DWORD PTR _pAssignment$7[ebp]
	cmp	DWORD PTR [eax+12], 0
	ja	SHORT $LN29@Reallocate
$LN26@Reallocate:
	push	OFFSET ??_C@_0EH@BPELLKNA@?$CBpAssignment?9?$DOIsObjectAssignment@
	push	3383					; 00000d37H
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN29@Reallocate:
	xor	eax, eax
	jne	SHORT $LN30@Reallocate

; 3384 : 
; 3385 :                 // Numeric variables must be relocated before this function is called
; 3386 :                 
; 3387 :                 switch (pAssignment->AssignmentType)

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv216[ebp], ecx
	cmp	DWORD PTR tv216[ebp], 2
	je	SHORT $LN23@Reallocate
	cmp	DWORD PTR tv216[ebp], 4
	je	SHORT $LN23@Reallocate
	jmp	$LN13@Reallocate
$LN23@Reallocate:

; 3388 :                 {
; 3389 :                 case ERAT_NumericVariable:
; 3390 :                 case ERAT_NumericVariableIndex:
; 3391 :                     // the variable or variable array is always the last dependency in the chain
; 3392 :                     SGlobalVariable *pVariable;
; 3393 :                     pVariable = pAssignment->pDependencies[pAssignment->DependencyCount - 1].pVariable;

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _pAssignment$7[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+ecx*4-4]
	mov	DWORD PTR _pVariable$1[ebp], ecx
$LN22@Reallocate:

; 3394 :                     D3DXASSERT( pVariable->pType->BelongsInConstantBuffer() && NULL != pVariable->pCB );

	mov	eax, DWORD PTR _pVariable$1[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?BelongsInConstantBuffer@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::BelongsInConstantBuffer
	test	eax, eax
	je	SHORT $LN18@Reallocate
	mov	eax, DWORD PTR _pVariable$1[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN21@Reallocate
$LN18@Reallocate:
	push	OFFSET ??_C@_0EG@GMMJAJM@pVariable?9?$DOpType?9?$DOBelongsInConst@
	push	3394					; 00000d42H
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN21@Reallocate:
	xor	eax, eax
	jne	SHORT $LN22@Reallocate

; 3395 : 
; 3396 :                     // When cloning, convert pointers back into offsets
; 3397 :                     if( pOldBlocks )

	cmp	DWORD PTR _pOldBlocks$[ebp], 0
	je	SHORT $LN17@Reallocate

; 3398 :                     {
; 3399 :                         VBD( pOldVariable != NULL, "Internal loading error: pOldVariable is NULL." );

	cmp	DWORD PTR _pOldVariable$4[ebp], 0
	jne	SHORT $LN16@Reallocate
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$73
	jmp	$lExit$73
$LN16@Reallocate:

; 3400 :                         pAssignment->Source.Offset = pAssignment->Source.pNumeric - pOldVariable->pCB->pBackingStore;

	mov	eax, DWORD PTR _pOldVariable$4[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _pAssignment$7[ebp]
	mov	eax, DWORD PTR [edx+24]
	sub	eax, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN17@Reallocate:

; 3401 :                     }
; 3402 : 
; 3403 :                     // Convert from offset to pointer
; 3404 :                     pAssignment->Source.pNumeric = pVariable->pCB->pBackingStore + pAssignment->Source.Offset;

	mov	eax, DWORD PTR _pVariable$1[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	edx, DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	mov	DWORD PTR [ecx+24], edx

; 3405 :                     break;

	jmp	SHORT $LN24@Reallocate
$LN13@Reallocate:

; 3406 : 
; 3407 :                 default:
; 3408 :                     // Shouldn't be able to get here
; 3409 :                     D3DXASSERT(0);

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN12@Reallocate
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	push	3409					; 00000d51H
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN12@Reallocate:
	xor	eax, eax
	jne	SHORT $LN13@Reallocate

; 3410 :                     VHD( E_FAIL, "Loading error: invalid assignment type." );

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN24@Reallocate
	jmp	SHORT $lExit$73
	jmp	SHORT $lExit$73
$LN24@Reallocate:

; 3411 :                 }
; 3412 :                 break;

	jmp	SHORT $LN4@Reallocate
$LN7@Reallocate:

; 3413 : 
; 3414 :             case ELHS_Invalid:
; 3415 :                 VHD( E_FAIL, "Loading error: invalid assignment type." );

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN4@Reallocate
	jmp	SHORT $lExit$73
	jmp	SHORT $lExit$73
$LN4@Reallocate:

; 3416 :             }
; 3417 : 
; 3418 :             D3DXASSERT(m_pEffect->m_LocalTimer > 0);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+164], 0
	ja	SHORT $LN3@Reallocate
	push	OFFSET ??_C@_0BM@CFJFHGND@m_pEffect?9?$DOm_LocalTimer?5?$DO?50?$AA@
	push	3418					; 00000d5aH
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@Reallocate:
	xor	eax, eax
	jne	SHORT $LN4@Reallocate

; 3419 :             m_pEffect->EvaluateAssignment(pAssignment);

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	call	?EvaluateAssignment@CEffect@D3DX11Effects@@IAEHPAUSAssignment@2@@Z ; D3DX11Effects::CEffect::EvaluateAssignment

; 3420 :         }

	jmp	$LN61@Reallocate
$LN60@Reallocate:

; 3421 :     }

	jmp	$LN66@Reallocate
$lExit$73:

; 3422 : 
; 3423 : lExit:
; 3424 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 3425 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN72@Reallocate:
	DD	$LN7@Reallocate
	DD	$LN46@Reallocate
	DD	$LN46@Reallocate
	DD	$LN46@Reallocate
	DD	$LN30@Reallocate
	DD	$LN30@Reallocate
	DD	$LN37@Reallocate
??$ReallocateBlockAssignments@USBlendBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEJAAPAUSBlendBlock@1@IPAU21@@Z ENDP ; D3DX11Effects::CEffectLoader::ReallocateBlockAssignments<D3DX11Effects::SBlendBlock>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ??$ReallocateBlockAssignments@USDepthStencilBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEJAAPAUSDepthStencilBlock@1@IPAU21@@Z
_TEXT	SEGMENT
tv216 = -352						; size = 4
tv175 = -352						; size = 4
_pVariable$1 = -152					; size = 4
_pDep$2 = -140						; size = 4
_iDep$3 = -128						; size = 4
_pOldVariable$4 = -116					; size = 4
_pOldBlock$5 = -104					; size = 4
_cbDeps$6 = -92						; size = 4
_pAssignment$7 = -80					; size = 4
_pBlock$8 = -68						; size = 4
_j$ = -56						; size = 4
_i$ = -44						; size = 4
_pHeap$ = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_pBlocks$ = 8						; size = 4
_cBlocks$ = 12						; size = 4
_pOldBlocks$ = 16					; size = 4
??$ReallocateBlockAssignments@USDepthStencilBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEJAAPAUSDepthStencilBlock@1@IPAU21@@Z PROC ; D3DX11Effects::CEffectLoader::ReallocateBlockAssignments<D3DX11Effects::SDepthStencilBlock>, COMDAT
; _this$ = ecx

; 3312 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 352				; 00000160H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 88					; 00000058H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3313 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 3314 :     CEffectHeap *pHeap = &m_pEffect->m_Heap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _pHeap$[ebp], ecx

; 3315 :     UINT  i, j;
; 3316 : 
; 3317 :     for(i=0; i<cBlocks; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN67@Reallocate
$LN66@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN67@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _cBlocks$[ebp]
	jae	$lExit$73

; 3318 :     {
; 3319 :         T *pBlock = &pBlocks[i];

	imul	eax, DWORD PTR _i$[ebp], 76
	mov	ecx, DWORD PTR _pBlocks$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR _pBlock$8[ebp], eax

; 3320 :         VHD( pHeap->MoveData((void**) &pBlock->pAssignments, sizeof(SAssignment)*pBlock->AssignmentCount), "Internal loading error: cannot move assignment count." );

	mov	eax, DWORD PTR _pBlock$8[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 5
	push	ecx
	mov	edx, DWORD PTR _pBlock$8[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN64@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN64@Reallocate:

; 3321 : 
; 3322 :         for (j=0; j<pBlock->AssignmentCount; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN62@Reallocate
$LN61@Reallocate:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN62@Reallocate:
	mov	eax, DWORD PTR _pBlock$8[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	$LN60@Reallocate

; 3323 :         {
; 3324 :             SAssignment *pAssignment = &pBlock->pAssignments[j];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _pBlock$8[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _pAssignment$7[ebp], eax

; 3325 :             UINT  cbDeps;
; 3326 : 
; 3327 :             // When cloning, convert pointers back into offsets
; 3328 :             if( pOldBlocks )

	cmp	DWORD PTR _pOldBlocks$[ebp], 0
	je	SHORT $LN59@Reallocate

; 3329 :             {
; 3330 :                 T *pOldBlock = &pOldBlocks[i];

	imul	eax, DWORD PTR _i$[ebp], 76
	add	eax, DWORD PTR _pOldBlocks$[ebp]
	mov	DWORD PTR _pOldBlock$5[ebp], eax

; 3331 :                 pAssignment->Destination.Offset = (UINT)( (UINT_PTR)pAssignment->Destination.pGeneric - (UINT_PTR)pOldBlock ) ;

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR _pOldBlock$5[ebp]
	mov	edx, DWORD PTR _pAssignment$7[ebp]
	mov	DWORD PTR [edx+20], ecx
$LN59@Reallocate:

; 3332 :             }
; 3333 : 
; 3334 :             // Convert destination pointers from offset to real pointer
; 3335 :             pAssignment->Destination.pGeneric = (BYTE*) pBlock + pAssignment->Destination.Offset;

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR _pBlock$8[ebp]
	add	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _pAssignment$7[ebp]
	mov	DWORD PTR [edx+20], ecx

; 3336 : 
; 3337 :             // Make sure the data pointer points into the backing store
; 3338 :             VBD( pAssignment->Destination.pGeneric >= &pBlock->BackingStore && 

	mov	eax, DWORD PTR _pBlock$8[ebp]
	add	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	cmp	DWORD PTR [ecx+20], eax
	jb	SHORT $LN57@Reallocate
	mov	eax, DWORD PTR _pBlock$8[ebp]
	add	eax, 72					; 00000048H
	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	cmp	DWORD PTR [ecx+20], eax
	jb	SHORT $LN58@Reallocate
$LN57@Reallocate:
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$73
	jmp	$lExit$73
$LN58@Reallocate:

; 3339 :                  pAssignment->Destination.pGeneric < (BYTE*) &pBlock->BackingStore + sizeof(pBlock->BackingStore), 
; 3340 :                  "Internal loading error: assignment destination out of range." );
; 3341 : 
; 3342 :             // Fixup dependencies
; 3343 :             cbDeps = pAssignment->DependencyCount * sizeof(SAssignment::SDependency);

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 2
	mov	DWORD PTR _cbDeps$6[ebp], ecx

; 3344 :             VHD( pHeap->MoveData((void**) &pAssignment->pDependencies, cbDeps), "Internal loading error: cannot move assignment dependencies." );

	mov	eax, DWORD PTR _cbDeps$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN55@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN55@Reallocate:

; 3345 : 
; 3346 :             SGlobalVariable *pOldVariable = NULL;

	mov	DWORD PTR _pOldVariable$4[ebp], 0

; 3347 :             for(UINT  iDep=0; iDep<pAssignment->DependencyCount; iDep++)

	mov	DWORD PTR _iDep$3[ebp], 0
	jmp	SHORT $LN53@Reallocate
$LN52@Reallocate:
	mov	eax, DWORD PTR _iDep$3[ebp]
	add	eax, 1
	mov	DWORD PTR _iDep$3[ebp], eax
$LN53@Reallocate:
	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR _iDep$3[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN51@Reallocate

; 3348 :             {
; 3349 :                 SAssignment::SDependency *pDep = &pAssignment->pDependencies[iDep];

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _iDep$3[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _pDep$2[ebp], eax

; 3350 :                 // We ignore all but the last variable because below, we only use the last dependency
; 3351 :                 pOldVariable = pDep->pVariable;

	mov	eax, DWORD PTR _pDep$2[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pOldVariable$4[ebp], ecx

; 3352 :                 VH( FixupVariablePointer(&pDep->pVariable) );

	mov	eax, DWORD PTR _pDep$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupVariablePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSGlobalVariable@2@@Z ; D3DX11Effects::CEffectLoader::FixupVariablePointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN50@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN50@Reallocate:

; 3353 :             }

	jmp	SHORT $LN52@Reallocate
$LN51@Reallocate:

; 3354 : 
; 3355 :             // Fixup source pointers
; 3356 :             switch(pAssignment->LhsType)

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv175[ebp], ecx
	cmp	DWORD PTR tv175[ebp], 7
	jg	SHORT $LN70@Reallocate
	cmp	DWORD PTR tv175[ebp], 7
	je	SHORT $LN43@Reallocate
	cmp	DWORD PTR tv175[ebp], 6
	ja	$LN30@Reallocate
	mov	edx, DWORD PTR tv175[ebp]
	jmp	DWORD PTR $LN72@Reallocate[edx*4]
$LN70@Reallocate:
	cmp	DWORD PTR tv175[ebp], 16		; 00000010H
	jg	SHORT $LN71@Reallocate
	cmp	DWORD PTR tv175[ebp], 14		; 0000000eH
	jge	SHORT $LN46@Reallocate
	cmp	DWORD PTR tv175[ebp], 8
	je	SHORT $LN40@Reallocate
	jmp	$LN30@Reallocate
$LN71@Reallocate:
	cmp	DWORD PTR tv175[ebp], 196618		; 0003000aH
	je	$LN34@Reallocate
	jmp	$LN30@Reallocate
$LN46@Reallocate:

; 3357 :             {
; 3358 :             case ELHS_VertexShaderBlock:
; 3359 :             case ELHS_PixelShaderBlock:
; 3360 :             case ELHS_GeometryShaderBlock:
; 3361 :             case ELHS_HullShaderBlock:
; 3362 :             case ELHS_DomainShaderBlock:
; 3363 :             case ELHS_ComputeShaderBlock:
; 3364 :                 VH( FixupShaderPointer(&pAssignment->Source.pShader) );

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupShaderPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupShaderPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN45@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN45@Reallocate:

; 3365 :                 break;

	jmp	$LN4@Reallocate
$LN43@Reallocate:

; 3366 : 
; 3367 :             case ELHS_DepthStencilBlock:
; 3368 :                 VH( FixupDSPointer((SDepthStencilBlock**)&pAssignment->Source.pBlock) );

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupDSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSDepthStencilBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupDSPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN42@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN42@Reallocate:

; 3369 :                 break;

	jmp	$LN4@Reallocate
$LN40@Reallocate:

; 3370 :             case ELHS_BlendBlock:
; 3371 :                 VH( FixupABPointer((SBlendBlock**) &pAssignment->Source.pBlock) );

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupABPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSBlendBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupABPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN39@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN39@Reallocate:

; 3372 :                 break;

	jmp	$LN4@Reallocate
$LN37@Reallocate:

; 3373 :             case ELHS_RasterizerBlock:
; 3374 :                 VH( FixupRSPointer((SRasterizerBlock**) &pAssignment->Source.pBlock) );

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupRSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSRasterizerBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupRSPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN36@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN36@Reallocate:

; 3375 :                 break;

	jmp	$LN4@Reallocate
$LN34@Reallocate:

; 3376 : 
; 3377 :             case ELHS_Texture:
; 3378 :                 VH( FixupShaderResourcePointer((SShaderResource**) &pAssignment->Source.pShaderResource) );

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupShaderResourcePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderResource@2@@Z ; D3DX11Effects::CEffectLoader::FixupShaderResourcePointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN33@Reallocate
	jmp	$lExit$73
	jmp	$lExit$73
$LN33@Reallocate:

; 3379 :                 break;

	jmp	$LN4@Reallocate
$LN30@Reallocate:

; 3380 : 
; 3381 :             default:
; 3382 :                 // Non-object assignment (must have at least one dependency or it would have been pruned by now)
; 3383 :                 D3DXASSERT( !pAssignment->IsObjectAssignment() && pAssignment->DependencyCount > 0 );

	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	call	?IsObjectAssignment@SAssignment@D3DX11Effects@@QAEHXZ ; D3DX11Effects::SAssignment::IsObjectAssignment
	test	eax, eax
	jne	SHORT $LN26@Reallocate
	mov	eax, DWORD PTR _pAssignment$7[ebp]
	cmp	DWORD PTR [eax+12], 0
	ja	SHORT $LN29@Reallocate
$LN26@Reallocate:
	push	OFFSET ??_C@_0EH@BPELLKNA@?$CBpAssignment?9?$DOIsObjectAssignment@
	push	3383					; 00000d37H
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN29@Reallocate:
	xor	eax, eax
	jne	SHORT $LN30@Reallocate

; 3384 : 
; 3385 :                 // Numeric variables must be relocated before this function is called
; 3386 :                 
; 3387 :                 switch (pAssignment->AssignmentType)

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv216[ebp], ecx
	cmp	DWORD PTR tv216[ebp], 2
	je	SHORT $LN23@Reallocate
	cmp	DWORD PTR tv216[ebp], 4
	je	SHORT $LN23@Reallocate
	jmp	$LN13@Reallocate
$LN23@Reallocate:

; 3388 :                 {
; 3389 :                 case ERAT_NumericVariable:
; 3390 :                 case ERAT_NumericVariableIndex:
; 3391 :                     // the variable or variable array is always the last dependency in the chain
; 3392 :                     SGlobalVariable *pVariable;
; 3393 :                     pVariable = pAssignment->pDependencies[pAssignment->DependencyCount - 1].pVariable;

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _pAssignment$7[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+ecx*4-4]
	mov	DWORD PTR _pVariable$1[ebp], ecx
$LN22@Reallocate:

; 3394 :                     D3DXASSERT( pVariable->pType->BelongsInConstantBuffer() && NULL != pVariable->pCB );

	mov	eax, DWORD PTR _pVariable$1[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?BelongsInConstantBuffer@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::BelongsInConstantBuffer
	test	eax, eax
	je	SHORT $LN18@Reallocate
	mov	eax, DWORD PTR _pVariable$1[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN21@Reallocate
$LN18@Reallocate:
	push	OFFSET ??_C@_0EG@GMMJAJM@pVariable?9?$DOpType?9?$DOBelongsInConst@
	push	3394					; 00000d42H
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN21@Reallocate:
	xor	eax, eax
	jne	SHORT $LN22@Reallocate

; 3395 : 
; 3396 :                     // When cloning, convert pointers back into offsets
; 3397 :                     if( pOldBlocks )

	cmp	DWORD PTR _pOldBlocks$[ebp], 0
	je	SHORT $LN17@Reallocate

; 3398 :                     {
; 3399 :                         VBD( pOldVariable != NULL, "Internal loading error: pOldVariable is NULL." );

	cmp	DWORD PTR _pOldVariable$4[ebp], 0
	jne	SHORT $LN16@Reallocate
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$73
	jmp	$lExit$73
$LN16@Reallocate:

; 3400 :                         pAssignment->Source.Offset = pAssignment->Source.pNumeric - pOldVariable->pCB->pBackingStore;

	mov	eax, DWORD PTR _pOldVariable$4[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _pAssignment$7[ebp]
	mov	eax, DWORD PTR [edx+24]
	sub	eax, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN17@Reallocate:

; 3401 :                     }
; 3402 : 
; 3403 :                     // Convert from offset to pointer
; 3404 :                     pAssignment->Source.pNumeric = pVariable->pCB->pBackingStore + pAssignment->Source.Offset;

	mov	eax, DWORD PTR _pVariable$1[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _pAssignment$7[ebp]
	add	edx, DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _pAssignment$7[ebp]
	mov	DWORD PTR [ecx+24], edx

; 3405 :                     break;

	jmp	SHORT $LN24@Reallocate
$LN13@Reallocate:

; 3406 : 
; 3407 :                 default:
; 3408 :                     // Shouldn't be able to get here
; 3409 :                     D3DXASSERT(0);

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN12@Reallocate
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	push	3409					; 00000d51H
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN12@Reallocate:
	xor	eax, eax
	jne	SHORT $LN13@Reallocate

; 3410 :                     VHD( E_FAIL, "Loading error: invalid assignment type." );

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN24@Reallocate
	jmp	SHORT $lExit$73
	jmp	SHORT $lExit$73
$LN24@Reallocate:

; 3411 :                 }
; 3412 :                 break;

	jmp	SHORT $LN4@Reallocate
$LN7@Reallocate:

; 3413 : 
; 3414 :             case ELHS_Invalid:
; 3415 :                 VHD( E_FAIL, "Loading error: invalid assignment type." );

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN4@Reallocate
	jmp	SHORT $lExit$73
	jmp	SHORT $lExit$73
$LN4@Reallocate:

; 3416 :             }
; 3417 : 
; 3418 :             D3DXASSERT(m_pEffect->m_LocalTimer > 0);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+164], 0
	ja	SHORT $LN3@Reallocate
	push	OFFSET ??_C@_0BM@CFJFHGND@m_pEffect?9?$DOm_LocalTimer?5?$DO?50?$AA@
	push	3418					; 00000d5aH
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@Reallocate:
	xor	eax, eax
	jne	SHORT $LN4@Reallocate

; 3419 :             m_pEffect->EvaluateAssignment(pAssignment);

	mov	eax, DWORD PTR _pAssignment$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	call	?EvaluateAssignment@CEffect@D3DX11Effects@@IAEHPAUSAssignment@2@@Z ; D3DX11Effects::CEffect::EvaluateAssignment

; 3420 :         }

	jmp	$LN61@Reallocate
$LN60@Reallocate:

; 3421 :     }

	jmp	$LN66@Reallocate
$lExit$73:

; 3422 : 
; 3423 : lExit:
; 3424 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 3425 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN72@Reallocate:
	DD	$LN7@Reallocate
	DD	$LN46@Reallocate
	DD	$LN46@Reallocate
	DD	$LN46@Reallocate
	DD	$LN30@Reallocate
	DD	$LN30@Reallocate
	DD	$LN37@Reallocate
??$ReallocateBlockAssignments@USDepthStencilBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEJAAPAUSDepthStencilBlock@1@IPAU21@@Z ENDP ; D3DX11Effects::CEffectLoader::ReallocateBlockAssignments<D3DX11Effects::SDepthStencilBlock>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ??$CalculateBlockAssignmentSize@USSamplerBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEIAAPAUSSamplerBlock@1@I@Z
_TEXT	SEGMENT
_pAssignment$1 = -68					; size = 4
_pBlock$2 = -56						; size = 4
_j$ = -44						; size = 4
_i$ = -32						; size = 4
_dwSize$ = -20						; size = 4
_this$ = -8						; size = 4
_pBlocks$ = 8						; size = 4
_cBlocks$ = 12						; size = 4
??$CalculateBlockAssignmentSize@USSamplerBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEIAAPAUSSamplerBlock@1@I@Z PROC ; D3DX11Effects::CEffectLoader::CalculateBlockAssignmentSize<D3DX11Effects::SSamplerBlock>, COMDAT
; _this$ = ecx

; 3428 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3429 :     UINT  dwSize = 0;

	mov	DWORD PTR _dwSize$[ebp], 0

; 3430 :     UINT  i, j;
; 3431 : 
; 3432 :     for(i=0; i<cBlocks; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@CalculateB
$LN5@CalculateB:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@CalculateB:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _cBlocks$[ebp]
	jae	SHORT $LN4@CalculateB

; 3433 :     {
; 3434 :         SBaseBlock *pBlock = &pBlocks[i];

	imul	eax, DWORD PTR _i$[ebp], 76
	mov	ecx, DWORD PTR _pBlocks$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR _pBlock$2[ebp], eax

; 3435 :         dwSize += AlignToPowerOf2(pBlock->AssignmentCount * sizeof(SAssignment), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _pBlock$2[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 5
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	add	eax, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR _dwSize$[ebp], eax

; 3436 :         
; 3437 :         for (j=0; j<pBlock->AssignmentCount; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@CalculateB
$LN2@CalculateB:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN3@CalculateB:
	mov	eax, DWORD PTR _pBlock$2[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN1@CalculateB

; 3438 :         {
; 3439 :             SAssignment *pAssignment = &pBlock->pAssignments[j];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _pBlock$2[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _pAssignment$1[ebp], eax

; 3440 :             
; 3441 :             dwSize += AlignToPowerOf2(pAssignment->DependencyCount * sizeof(SAssignment::SDependency), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _pAssignment$1[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 2
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	add	eax, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR _dwSize$[ebp], eax

; 3442 :         }

	jmp	SHORT $LN2@CalculateB
$LN1@CalculateB:

; 3443 :     }

	jmp	$LN5@CalculateB
$LN4@CalculateB:

; 3444 : 
; 3445 :     return dwSize;

	mov	eax, DWORD PTR _dwSize$[ebp]

; 3446 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$CalculateBlockAssignmentSize@USSamplerBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEIAAPAUSSamplerBlock@1@I@Z ENDP ; D3DX11Effects::CEffectLoader::CalculateBlockAssignmentSize<D3DX11Effects::SSamplerBlock>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ??$CalculateBlockAssignmentSize@USRasterizerBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEIAAPAUSRasterizerBlock@1@I@Z
_TEXT	SEGMENT
_pAssignment$1 = -68					; size = 4
_pBlock$2 = -56						; size = 4
_j$ = -44						; size = 4
_i$ = -32						; size = 4
_dwSize$ = -20						; size = 4
_this$ = -8						; size = 4
_pBlocks$ = 8						; size = 4
_cBlocks$ = 12						; size = 4
??$CalculateBlockAssignmentSize@USRasterizerBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEIAAPAUSRasterizerBlock@1@I@Z PROC ; D3DX11Effects::CEffectLoader::CalculateBlockAssignmentSize<D3DX11Effects::SRasterizerBlock>, COMDAT
; _this$ = ecx

; 3428 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3429 :     UINT  dwSize = 0;

	mov	DWORD PTR _dwSize$[ebp], 0

; 3430 :     UINT  i, j;
; 3431 : 
; 3432 :     for(i=0; i<cBlocks; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@CalculateB
$LN5@CalculateB:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@CalculateB:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _cBlocks$[ebp]
	jae	SHORT $LN4@CalculateB

; 3433 :     {
; 3434 :         SBaseBlock *pBlock = &pBlocks[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _pBlocks$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR _pBlock$2[ebp], eax

; 3435 :         dwSize += AlignToPowerOf2(pBlock->AssignmentCount * sizeof(SAssignment), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _pBlock$2[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 5
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	add	eax, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR _dwSize$[ebp], eax

; 3436 :         
; 3437 :         for (j=0; j<pBlock->AssignmentCount; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@CalculateB
$LN2@CalculateB:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN3@CalculateB:
	mov	eax, DWORD PTR _pBlock$2[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN1@CalculateB

; 3438 :         {
; 3439 :             SAssignment *pAssignment = &pBlock->pAssignments[j];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _pBlock$2[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _pAssignment$1[ebp], eax

; 3440 :             
; 3441 :             dwSize += AlignToPowerOf2(pAssignment->DependencyCount * sizeof(SAssignment::SDependency), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _pAssignment$1[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 2
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	add	eax, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR _dwSize$[ebp], eax

; 3442 :         }

	jmp	SHORT $LN2@CalculateB
$LN1@CalculateB:

; 3443 :     }

	jmp	$LN5@CalculateB
$LN4@CalculateB:

; 3444 : 
; 3445 :     return dwSize;

	mov	eax, DWORD PTR _dwSize$[ebp]

; 3446 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$CalculateBlockAssignmentSize@USRasterizerBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEIAAPAUSRasterizerBlock@1@I@Z ENDP ; D3DX11Effects::CEffectLoader::CalculateBlockAssignmentSize<D3DX11Effects::SRasterizerBlock>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ??$CalculateBlockAssignmentSize@USDepthStencilBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEIAAPAUSDepthStencilBlock@1@I@Z
_TEXT	SEGMENT
_pAssignment$1 = -68					; size = 4
_pBlock$2 = -56						; size = 4
_j$ = -44						; size = 4
_i$ = -32						; size = 4
_dwSize$ = -20						; size = 4
_this$ = -8						; size = 4
_pBlocks$ = 8						; size = 4
_cBlocks$ = 12						; size = 4
??$CalculateBlockAssignmentSize@USDepthStencilBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEIAAPAUSDepthStencilBlock@1@I@Z PROC ; D3DX11Effects::CEffectLoader::CalculateBlockAssignmentSize<D3DX11Effects::SDepthStencilBlock>, COMDAT
; _this$ = ecx

; 3428 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3429 :     UINT  dwSize = 0;

	mov	DWORD PTR _dwSize$[ebp], 0

; 3430 :     UINT  i, j;
; 3431 : 
; 3432 :     for(i=0; i<cBlocks; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@CalculateB
$LN5@CalculateB:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@CalculateB:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _cBlocks$[ebp]
	jae	SHORT $LN4@CalculateB

; 3433 :     {
; 3434 :         SBaseBlock *pBlock = &pBlocks[i];

	imul	eax, DWORD PTR _i$[ebp], 76
	mov	ecx, DWORD PTR _pBlocks$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR _pBlock$2[ebp], eax

; 3435 :         dwSize += AlignToPowerOf2(pBlock->AssignmentCount * sizeof(SAssignment), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _pBlock$2[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 5
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	add	eax, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR _dwSize$[ebp], eax

; 3436 :         
; 3437 :         for (j=0; j<pBlock->AssignmentCount; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@CalculateB
$LN2@CalculateB:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN3@CalculateB:
	mov	eax, DWORD PTR _pBlock$2[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN1@CalculateB

; 3438 :         {
; 3439 :             SAssignment *pAssignment = &pBlock->pAssignments[j];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _pBlock$2[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _pAssignment$1[ebp], eax

; 3440 :             
; 3441 :             dwSize += AlignToPowerOf2(pAssignment->DependencyCount * sizeof(SAssignment::SDependency), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _pAssignment$1[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 2
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	add	eax, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR _dwSize$[ebp], eax

; 3442 :         }

	jmp	SHORT $LN2@CalculateB
$LN1@CalculateB:

; 3443 :     }

	jmp	$LN5@CalculateB
$LN4@CalculateB:

; 3444 : 
; 3445 :     return dwSize;

	mov	eax, DWORD PTR _dwSize$[ebp]

; 3446 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$CalculateBlockAssignmentSize@USDepthStencilBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEIAAPAUSDepthStencilBlock@1@I@Z ENDP ; D3DX11Effects::CEffectLoader::CalculateBlockAssignmentSize<D3DX11Effects::SDepthStencilBlock>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ??$CalculateBlockAssignmentSize@USBlendBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEIAAPAUSBlendBlock@1@I@Z
_TEXT	SEGMENT
_pAssignment$1 = -68					; size = 4
_pBlock$2 = -56						; size = 4
_j$ = -44						; size = 4
_i$ = -32						; size = 4
_dwSize$ = -20						; size = 4
_this$ = -8						; size = 4
_pBlocks$ = 8						; size = 4
_cBlocks$ = 12						; size = 4
??$CalculateBlockAssignmentSize@USBlendBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEIAAPAUSBlendBlock@1@I@Z PROC ; D3DX11Effects::CEffectLoader::CalculateBlockAssignmentSize<D3DX11Effects::SBlendBlock>, COMDAT
; _this$ = ecx

; 3428 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3429 :     UINT  dwSize = 0;

	mov	DWORD PTR _dwSize$[ebp], 0

; 3430 :     UINT  i, j;
; 3431 : 
; 3432 :     for(i=0; i<cBlocks; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@CalculateB
$LN5@CalculateB:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@CalculateB:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _cBlocks$[ebp]
	jae	SHORT $LN4@CalculateB

; 3433 :     {
; 3434 :         SBaseBlock *pBlock = &pBlocks[i];

	imul	eax, DWORD PTR _i$[ebp], 288
	mov	ecx, DWORD PTR _pBlocks$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR _pBlock$2[ebp], eax

; 3435 :         dwSize += AlignToPowerOf2(pBlock->AssignmentCount * sizeof(SAssignment), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _pBlock$2[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 5
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	add	eax, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR _dwSize$[ebp], eax

; 3436 :         
; 3437 :         for (j=0; j<pBlock->AssignmentCount; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@CalculateB
$LN2@CalculateB:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN3@CalculateB:
	mov	eax, DWORD PTR _pBlock$2[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN1@CalculateB

; 3438 :         {
; 3439 :             SAssignment *pAssignment = &pBlock->pAssignments[j];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _pBlock$2[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _pAssignment$1[ebp], eax

; 3440 :             
; 3441 :             dwSize += AlignToPowerOf2(pAssignment->DependencyCount * sizeof(SAssignment::SDependency), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _pAssignment$1[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 2
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	add	eax, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR _dwSize$[ebp], eax

; 3442 :         }

	jmp	SHORT $LN2@CalculateB
$LN1@CalculateB:

; 3443 :     }

	jmp	$LN5@CalculateB
$LN4@CalculateB:

; 3444 : 
; 3445 :     return dwSize;

	mov	eax, DWORD PTR _dwSize$[ebp]

; 3446 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$CalculateBlockAssignmentSize@USBlendBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEIAAPAUSBlendBlock@1@I@Z ENDP ; D3DX11Effects::CEffectLoader::CalculateBlockAssignmentSize<D3DX11Effects::SBlendBlock>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ??$CalculateBlockAssignmentSize@USPassBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEIAAPAUSPassBlock@1@I@Z
_TEXT	SEGMENT
tv72 = -268						; size = 4
_pAssignment$1 = -68					; size = 4
_pBlock$2 = -56						; size = 4
_j$ = -44						; size = 4
_i$ = -32						; size = 4
_dwSize$ = -20						; size = 4
_this$ = -8						; size = 4
_pBlocks$ = 8						; size = 4
_cBlocks$ = 12						; size = 4
??$CalculateBlockAssignmentSize@USPassBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEIAAPAUSPassBlock@1@I@Z PROC ; D3DX11Effects::CEffectLoader::CalculateBlockAssignmentSize<D3DX11Effects::SPassBlock>, COMDAT
; _this$ = ecx

; 3428 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3429 :     UINT  dwSize = 0;

	mov	DWORD PTR _dwSize$[ebp], 0

; 3430 :     UINT  i, j;
; 3431 : 
; 3432 :     for(i=0; i<cBlocks; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@CalculateB
$LN5@CalculateB:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@CalculateB:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _cBlocks$[ebp]
	jae	$LN4@CalculateB

; 3433 :     {
; 3434 :         SBaseBlock *pBlock = &pBlocks[i];

	imul	eax, DWORD PTR _i$[ebp], 156
	mov	ecx, DWORD PTR _pBlocks$[ebp]
	add	eax, DWORD PTR [ecx]
	je	SHORT $LN9@CalculateB
	imul	edx, DWORD PTR _i$[ebp], 156
	mov	eax, DWORD PTR _pBlocks$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, edx
	add	ecx, 4
	mov	DWORD PTR tv72[ebp], ecx
	jmp	SHORT $LN10@CalculateB
$LN9@CalculateB:
	mov	DWORD PTR tv72[ebp], 0
$LN10@CalculateB:
	mov	edx, DWORD PTR tv72[ebp]
	mov	DWORD PTR _pBlock$2[ebp], edx

; 3435 :         dwSize += AlignToPowerOf2(pBlock->AssignmentCount * sizeof(SAssignment), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _pBlock$2[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 5
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	add	eax, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR _dwSize$[ebp], eax

; 3436 :         
; 3437 :         for (j=0; j<pBlock->AssignmentCount; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@CalculateB
$LN2@CalculateB:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN3@CalculateB:
	mov	eax, DWORD PTR _pBlock$2[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN1@CalculateB

; 3438 :         {
; 3439 :             SAssignment *pAssignment = &pBlock->pAssignments[j];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _pBlock$2[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _pAssignment$1[ebp], eax

; 3440 :             
; 3441 :             dwSize += AlignToPowerOf2(pAssignment->DependencyCount * sizeof(SAssignment::SDependency), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _pAssignment$1[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 2
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	add	eax, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR _dwSize$[ebp], eax

; 3442 :         }

	jmp	SHORT $LN2@CalculateB
$LN1@CalculateB:

; 3443 :     }

	jmp	$LN5@CalculateB
$LN4@CalculateB:

; 3444 : 
; 3445 :     return dwSize;

	mov	eax, DWORD PTR _dwSize$[ebp]

; 3446 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$CalculateBlockAssignmentSize@USPassBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEIAAPAUSPassBlock@1@I@Z ENDP ; D3DX11Effects::CEffectLoader::CalculateBlockAssignmentSize<D3DX11Effects::SPassBlock>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ??0?$SShaderDependency@PAUSUnorderedAccessView@D3DX11Effects@@PAUID3D11UnorderedAccessView@@@D3DX11Effects@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$SShaderDependency@PAUSUnorderedAccessView@D3DX11Effects@@PAUID3D11UnorderedAccessView@@@D3DX11Effects@@QAE@XZ PROC ; D3DX11Effects::SShaderDependency<D3DX11Effects::SUnorderedAccessView *,ID3D11UnorderedAccessView *>::SShaderDependency<D3DX11Effects::SUnorderedAccessView *,ID3D11UnorderedAccessView *>, COMDAT
; _this$ = ecx

; 538  :     SShaderDependency()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 539  :     {
; 540  :         StartIndex = Count = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0

; 541  : 
; 542  :         ppD3DObjects = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 543  :         ppFXPointers = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 544  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$SShaderDependency@PAUSUnorderedAccessView@D3DX11Effects@@PAUID3D11UnorderedAccessView@@@D3DX11Effects@@QAE@XZ ENDP ; D3DX11Effects::SShaderDependency<D3DX11Effects::SUnorderedAccessView *,ID3D11UnorderedAccessView *>::SShaderDependency<D3DX11Effects::SUnorderedAccessView *,ID3D11UnorderedAccessView *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ??0?$SShaderDependency@PAUSShaderResource@D3DX11Effects@@PAUID3D11ShaderResourceView@@@D3DX11Effects@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$SShaderDependency@PAUSShaderResource@D3DX11Effects@@PAUID3D11ShaderResourceView@@@D3DX11Effects@@QAE@XZ PROC ; D3DX11Effects::SShaderDependency<D3DX11Effects::SShaderResource *,ID3D11ShaderResourceView *>::SShaderDependency<D3DX11Effects::SShaderResource *,ID3D11ShaderResourceView *>, COMDAT
; _this$ = ecx

; 538  :     SShaderDependency()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 539  :     {
; 540  :         StartIndex = Count = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0

; 541  : 
; 542  :         ppD3DObjects = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 543  :         ppFXPointers = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 544  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$SShaderDependency@PAUSShaderResource@D3DX11Effects@@PAUID3D11ShaderResourceView@@@D3DX11Effects@@QAE@XZ ENDP ; D3DX11Effects::SShaderDependency<D3DX11Effects::SShaderResource *,ID3D11ShaderResourceView *>::SShaderDependency<D3DX11Effects::SShaderResource *,ID3D11ShaderResourceView *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ??0?$SShaderDependency@PAUSInterface@D3DX11Effects@@PAUID3D11ClassInstance@@@D3DX11Effects@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$SShaderDependency@PAUSInterface@D3DX11Effects@@PAUID3D11ClassInstance@@@D3DX11Effects@@QAE@XZ PROC ; D3DX11Effects::SShaderDependency<D3DX11Effects::SInterface *,ID3D11ClassInstance *>::SShaderDependency<D3DX11Effects::SInterface *,ID3D11ClassInstance *>, COMDAT
; _this$ = ecx

; 538  :     SShaderDependency()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 539  :     {
; 540  :         StartIndex = Count = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0

; 541  : 
; 542  :         ppD3DObjects = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 543  :         ppFXPointers = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 544  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$SShaderDependency@PAUSInterface@D3DX11Effects@@PAUID3D11ClassInstance@@@D3DX11Effects@@QAE@XZ ENDP ; D3DX11Effects::SShaderDependency<D3DX11Effects::SInterface *,ID3D11ClassInstance *>::SShaderDependency<D3DX11Effects::SInterface *,ID3D11ClassInstance *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ??0?$SShaderDependency@PAUSConstantBuffer@D3DX11Effects@@PAUID3D11Buffer@@@D3DX11Effects@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$SShaderDependency@PAUSConstantBuffer@D3DX11Effects@@PAUID3D11Buffer@@@D3DX11Effects@@QAE@XZ PROC ; D3DX11Effects::SShaderDependency<D3DX11Effects::SConstantBuffer *,ID3D11Buffer *>::SShaderDependency<D3DX11Effects::SConstantBuffer *,ID3D11Buffer *>, COMDAT
; _this$ = ecx

; 538  :     SShaderDependency()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 539  :     {
; 540  :         StartIndex = Count = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0

; 541  : 
; 542  :         ppD3DObjects = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 543  :         ppFXPointers = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 544  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$SShaderDependency@PAUSConstantBuffer@D3DX11Effects@@PAUID3D11Buffer@@@D3DX11Effects@@QAE@XZ ENDP ; D3DX11Effects::SShaderDependency<D3DX11Effects::SConstantBuffer *,ID3D11Buffer *>::SShaderDependency<D3DX11Effects::SConstantBuffer *,ID3D11Buffer *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ??0?$SShaderDependency@PAUSSamplerBlock@D3DX11Effects@@PAUID3D11SamplerState@@@D3DX11Effects@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$SShaderDependency@PAUSSamplerBlock@D3DX11Effects@@PAUID3D11SamplerState@@@D3DX11Effects@@QAE@XZ PROC ; D3DX11Effects::SShaderDependency<D3DX11Effects::SSamplerBlock *,ID3D11SamplerState *>::SShaderDependency<D3DX11Effects::SSamplerBlock *,ID3D11SamplerState *>, COMDAT
; _this$ = ecx

; 538  :     SShaderDependency()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 539  :     {
; 540  :         StartIndex = Count = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0

; 541  : 
; 542  :         ppD3DObjects = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 543  :         ppFXPointers = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 544  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$SShaderDependency@PAUSSamplerBlock@D3DX11Effects@@PAUID3D11SamplerState@@@D3DX11Effects@@QAE@XZ ENDP ; D3DX11Effects::SShaderDependency<D3DX11Effects::SSamplerBlock *,ID3D11SamplerState *>::SShaderDependency<D3DX11Effects::SSamplerBlock *,ID3D11SamplerState *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?GetSize@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetSize@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QBEIXZ PROC ; CEffectVector<D3DX11Effects::SConstantBuffer *>::GetSize, COMDAT
; _this$ = ecx

; 436  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 437  :         return m_CurSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 438  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QBEIXZ ENDP ; CEffectVector<D3DX11Effects::SConstantBuffer *>::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ??A?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAEAAPAUSConstantBuffer@D3DX11Effects@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_index$ = 8						; size = 4
??A?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAEAAPAUSConstantBuffer@D3DX11Effects@@I@Z PROC ; CEffectVector<D3DX11Effects::SConstantBuffer *>::operator[], COMDAT
; _this$ = ecx

; 412  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN4@operator:

; 413  :         D3DXASSERT(index < m_CurSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jb	SHORT $LN3@operator
	push	OFFSET ??_C@_0BC@HKPIIPPC@index?5?$DM?5m_CurSize?$AA@
	push	413					; 0000019dH
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator

; 414  :         return ((T*)m_pData)[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 415  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAEAAPAUSConstantBuffer@D3DX11Effects@@I@Z ENDP ; CEffectVector<D3DX11Effects::SConstantBuffer *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?Add@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAEJABQAUSConstantBuffer@D3DX11Effects@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 4
?Add@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAEJABQAUSConstantBuffer@D3DX11Effects@@@Z PROC ; CEffectVector<D3DX11Effects::SConstantBuffer *>::Add, COMDAT
; _this$ = ecx

; 350  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 351  :         if (FAILED(Grow()))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@IAEJXZ ; CEffectVector<D3DX11Effects::SConstantBuffer *>::Grow
	test	eax, eax
	jge	SHORT $LN1@Add

; 352  :             return m_hLastError;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	jmp	SHORT $LN2@Add
$LN1@Add:

; 353  : 
; 354  :         memcpy((T*)m_pData + m_CurSize, &var, sizeof(T));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*4], edx

; 355  :         m_CurSize++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 356  : 
; 357  :         return S_OK;

	xor	eax, eax
$LN2@Add:

; 358  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAEJABQAUSConstantBuffer@D3DX11Effects@@@Z ENDP ; CEffectVector<D3DX11Effects::SConstantBuffer *>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?Empty@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAEXXZ
_TEXT	SEGMENT
_i$ = -20						; size = 4
_this$ = -8						; size = 4
?Empty@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAEXXZ PROC ; CEffectVector<D3DX11Effects::SConstantBuffer *>::Empty, COMDAT
; _this$ = ecx

; 307  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 308  :         UINT i;
; 309  :         
; 310  :         // manually invoke destructor on all elements
; 311  :         for (i = 0; i < m_CurSize; ++ i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@Empty
$LN2@Empty:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@Empty:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN1@Empty

; 312  :         {   
; 313  :             ((T*)m_pData + i)->~T();
; 314  :         }

	jmp	SHORT $LN2@Empty
$LN1@Empty:

; 315  :         m_CurSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 316  :         m_hLastError = S_OK;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 317  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAEXXZ ENDP ; CEffectVector<D3DX11Effects::SConstantBuffer *>::Empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?Clear@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAEXXZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
?Clear@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAEXXZ PROC ; CEffectVector<D3DX11Effects::SConstantBuffer *>::Clear, COMDAT
; _this$ = ecx

; 285  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 286  :         Empty();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Empty@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAEXXZ ; CEffectVector<D3DX11Effects::SConstantBuffer *>::Empty

; 287  :         SAFE_DELETE_ARRAY(m_pData);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 288  :         m_MaxSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 289  : #if _DEBUG
; 290  :         m_pCastData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 291  : #endif // _DEBUG
; 292  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAEXXZ ENDP ; CEffectVector<D3DX11Effects::SConstantBuffer *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ??1?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAE@XZ PROC ; CEffectVector<D3DX11Effects::SConstantBuffer *>::~CEffectVector<D3DX11Effects::SConstantBuffer *>, COMDAT
; _this$ = ecx

; 244  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 245  :         Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAEXXZ ; CEffectVector<D3DX11Effects::SConstantBuffer *>::Clear

; 246  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAE@XZ ENDP ; CEffectVector<D3DX11Effects::SConstantBuffer *>::~CEffectVector<D3DX11Effects::SConstantBuffer *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ??0?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAE@XZ PROC ; CEffectVector<D3DX11Effects::SConstantBuffer *>::CEffectVector<D3DX11Effects::SConstantBuffer *>, COMDAT
; _this$ = ecx

; 233  :     CEffectVector<T>()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 234  :     {
; 235  :         m_hLastError = S_OK;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 236  : #if _DEBUG
; 237  :         m_pCastData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 238  : #endif // _DEBUG
; 239  :         m_pData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 240  :         m_CurSize = m_MaxSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 241  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAE@XZ ENDP ; CEffectVector<D3DX11Effects::SConstantBuffer *>::CEffectVector<D3DX11Effects::SConstantBuffer *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?Reserve@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@IAEJI@Z
_TEXT	SEGMENT
tv71 = -256						; size = 4
$T1 = -248						; size = 4
$T2 = -236						; size = 4
_newSize$3 = -32					; size = 4
_pNewData$4 = -20					; size = 4
_this$ = -8						; size = 4
_DesiredSize$ = 8					; size = 4
?Reserve@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@IAEJI@Z PROC ; CEffectVector<D3DX11Effects::SConstantBuffer *>::Reserve, COMDAT
; _this$ = ecx

; 193  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 194  :         if (DesiredSize > m_MaxSize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _DesiredSize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	$LN6@Reserve

; 195  :         {
; 196  :             BYTE *pNewData;
; 197  :             UINT newSize = max(m_MaxSize * 2, DesiredSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 1
	cmp	ecx, DWORD PTR _DesiredSize$[ebp]
	jbe	SHORT $LN9@Reserve
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	shl	eax, 1
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN10@Reserve
$LN9@Reserve:
	mov	ecx, DWORD PTR _DesiredSize$[ebp]
	mov	DWORD PTR tv71[ebp], ecx
$LN10@Reserve:
	mov	edx, DWORD PTR tv71[ebp]
	mov	DWORD PTR _newSize$3[ebp], edx

; 198  : 
; 199  :             if (newSize < 16)

	cmp	DWORD PTR _newSize$3[ebp], 16		; 00000010H
	jae	SHORT $LN5@Reserve

; 200  :                 newSize = 16;

	mov	DWORD PTR _newSize$3[ebp], 16		; 00000010H
$LN5@Reserve:

; 201  : 
; 202  :             if ((newSize < m_MaxSize) || (newSize < m_CurSize) || (newSize >= UINT_MAX / sizeof(T)))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newSize$3[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jb	SHORT $LN3@Reserve
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newSize$3[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jb	SHORT $LN3@Reserve
	cmp	DWORD PTR _newSize$3[ebp], 1073741823	; 3fffffffH
	jb	SHORT $LN4@Reserve
$LN3@Reserve:

; 203  :             {
; 204  :                 m_hLastError = E_OUTOFMEMORY;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], -2147024882		; 8007000eH

; 205  :                 return m_hLastError;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	jmp	$LN7@Reserve
$LN4@Reserve:

; 206  :             }
; 207  : 
; 208  :             pNewData = NEW BYTE[newSize * sizeof(T)];

	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	mov	eax, DWORD PTR _newSize$3[ebp]
	shl	eax, 2
	push	eax
	call	??_U@YAPAXIABUnothrow_t@std@@@Z		; operator new[]
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR _pNewData$4[ebp], ecx

; 209  :             if (pNewData == NULL)

	cmp	DWORD PTR _pNewData$4[ebp], 0
	jne	SHORT $LN2@Reserve

; 210  :             {
; 211  :                 m_hLastError = E_OUTOFMEMORY;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], -2147024882		; 8007000eH

; 212  :                 return m_hLastError;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	jmp	SHORT $LN7@Reserve
$LN2@Reserve:

; 213  :             }
; 214  : 
; 215  :             if (m_pData)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Reserve

; 216  :             {
; 217  :                 memcpy(pNewData, m_pData, m_CurSize * sizeof(T));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _pNewData$4[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 218  :                 delete []m_pData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Reserve:

; 219  :             }
; 220  : 
; 221  :             m_pData = pNewData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pNewData$4[ebp]
	mov	DWORD PTR [eax+4], ecx

; 222  :             m_MaxSize = newSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newSize$3[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN6@Reserve:

; 223  :         }
; 224  : #if _DEBUG
; 225  :         m_pCastData = (T*) m_pData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 226  : #endif // _DEBUG
; 227  :         return S_OK;

	xor	eax, eax
$LN7@Reserve:

; 228  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Reserve@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@IAEJI@Z ENDP ; CEffectVector<D3DX11Effects::SConstantBuffer *>::Reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?Grow@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@IAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Grow@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@IAEJXZ PROC ; CEffectVector<D3DX11Effects::SConstantBuffer *>::Grow, COMDAT
; _this$ = ecx

; 188  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 189  :         return Reserve(m_CurSize + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reserve@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@IAEJI@Z ; CEffectVector<D3DX11Effects::SConstantBuffer *>::Reserve

; 190  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Grow@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@IAEJXZ ENDP ; CEffectVector<D3DX11Effects::SConstantBuffer *>::Grow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?GetSize@?$CEffectVector@USRange@D3DX11Effects@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetSize@?$CEffectVector@USRange@D3DX11Effects@@@@QBEIXZ PROC ; CEffectVector<D3DX11Effects::SRange>::GetSize, COMDAT
; _this$ = ecx

; 436  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 437  :         return m_CurSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 438  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@?$CEffectVector@USRange@D3DX11Effects@@@@QBEIXZ ENDP ; CEffectVector<D3DX11Effects::SRange>::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ??A?$CEffectVector@USRange@D3DX11Effects@@@@QAEAAUSRange@D3DX11Effects@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_index$ = 8						; size = 4
??A?$CEffectVector@USRange@D3DX11Effects@@@@QAEAAUSRange@D3DX11Effects@@I@Z PROC ; CEffectVector<D3DX11Effects::SRange>::operator[], COMDAT
; _this$ = ecx

; 412  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN4@operator:

; 413  :         D3DXASSERT(index < m_CurSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jb	SHORT $LN3@operator
	push	OFFSET ??_C@_0BC@HKPIIPPC@index?5?$DM?5m_CurSize?$AA@
	push	413					; 0000019dH
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator

; 414  :         return ((T*)m_pData)[index];

	imul	eax, DWORD PTR _index$[ebp], 28
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]

; 415  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CEffectVector@USRange@D3DX11Effects@@@@QAEAAUSRange@D3DX11Effects@@I@Z ENDP ; CEffectVector<D3DX11Effects::SRange>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?Add@?$CEffectVector@USRange@D3DX11Effects@@@@QAEPAUSRange@D3DX11Effects@@XZ
_TEXT	SEGMENT
tv83 = -256						; size = 4
$T2 = -248						; size = 4
$T3 = -236						; size = 4
$T4 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?Add@?$CEffectVector@USRange@D3DX11Effects@@@@QAEPAUSRange@D3DX11Effects@@XZ PROC ; CEffectVector<D3DX11Effects::SRange>::Add, COMDAT
; _this$ = ecx

; 320  :     {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CEffectVector@USRange@D3DX11Effects@@@@QAEPAUSRange@D3DX11Effects@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 321  :         if (FAILED(Grow()))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow@?$CEffectVector@USRange@D3DX11Effects@@@@IAEJXZ ; CEffectVector<D3DX11Effects::SRange>::Grow
	test	eax, eax
	jge	SHORT $LN1@Add

; 322  :             return NULL;

	xor	eax, eax
	jmp	SHORT $LN2@Add
$LN1@Add:

; 323  : 
; 324  :         // placement new
; 325  :         return new((T*)m_pData + (m_CurSize ++)) T;

	mov	eax, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [eax+12], 28
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR $T4[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	push	28					; 0000001cH
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN4@Add
	mov	ecx, DWORD PTR $T3[ebp]
	call	??0SRange@D3DX11Effects@@QAE@XZ
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN5@Add
$LN4@Add:
	mov	DWORD PTR tv83[ebp], 0
$LN5@Add:
	mov	ecx, DWORD PTR tv83[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T2[ebp]
$LN2@Add:

; 326  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CEffectVector@USRange@D3DX11Effects@@@@QAEPAUSRange@D3DX11Effects@@XZ$0:
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?Add@?$CEffectVector@USRange@D3DX11Effects@@@@QAEPAUSRange@D3DX11Effects@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-260]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CEffectVector@USRange@D3DX11Effects@@@@QAEPAUSRange@D3DX11Effects@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CEffectVector@USRange@D3DX11Effects@@@@QAEPAUSRange@D3DX11Effects@@XZ ENDP ; CEffectVector<D3DX11Effects::SRange>::Add
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?Empty@?$CEffectVector@USRange@D3DX11Effects@@@@QAEXXZ
_TEXT	SEGMENT
_i$ = -20						; size = 4
_this$ = -8						; size = 4
?Empty@?$CEffectVector@USRange@D3DX11Effects@@@@QAEXXZ PROC ; CEffectVector<D3DX11Effects::SRange>::Empty, COMDAT
; _this$ = ecx

; 307  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 308  :         UINT i;
; 309  :         
; 310  :         // manually invoke destructor on all elements
; 311  :         for (i = 0; i < m_CurSize; ++ i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@Empty
$LN2@Empty:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@Empty:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN1@Empty

; 312  :         {   
; 313  :             ((T*)m_pData + i)->~T();

	push	0
	imul	ecx, DWORD PTR _i$[ebp], 28
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+4]
	call	??_GSRange@D3DX11Effects@@QAEPAXI@Z

; 314  :         }

	jmp	SHORT $LN2@Empty
$LN1@Empty:

; 315  :         m_CurSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 316  :         m_hLastError = S_OK;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 317  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@?$CEffectVector@USRange@D3DX11Effects@@@@QAEXXZ ENDP ; CEffectVector<D3DX11Effects::SRange>::Empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?Clear@?$CEffectVector@USRange@D3DX11Effects@@@@QAEXXZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
?Clear@?$CEffectVector@USRange@D3DX11Effects@@@@QAEXXZ PROC ; CEffectVector<D3DX11Effects::SRange>::Clear, COMDAT
; _this$ = ecx

; 285  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 286  :         Empty();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Empty@?$CEffectVector@USRange@D3DX11Effects@@@@QAEXXZ ; CEffectVector<D3DX11Effects::SRange>::Empty

; 287  :         SAFE_DELETE_ARRAY(m_pData);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 288  :         m_MaxSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 289  : #if _DEBUG
; 290  :         m_pCastData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 291  : #endif // _DEBUG
; 292  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CEffectVector@USRange@D3DX11Effects@@@@QAEXXZ ENDP ; CEffectVector<D3DX11Effects::SRange>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ??1?$CEffectVector@USRange@D3DX11Effects@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$CEffectVector@USRange@D3DX11Effects@@@@QAE@XZ PROC	; CEffectVector<D3DX11Effects::SRange>::~CEffectVector<D3DX11Effects::SRange>, COMDAT
; _this$ = ecx

; 244  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 245  :         Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CEffectVector@USRange@D3DX11Effects@@@@QAEXXZ ; CEffectVector<D3DX11Effects::SRange>::Clear

; 246  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CEffectVector@USRange@D3DX11Effects@@@@QAE@XZ ENDP	; CEffectVector<D3DX11Effects::SRange>::~CEffectVector<D3DX11Effects::SRange>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ??0?$CEffectVector@USRange@D3DX11Effects@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CEffectVector@USRange@D3DX11Effects@@@@QAE@XZ PROC	; CEffectVector<D3DX11Effects::SRange>::CEffectVector<D3DX11Effects::SRange>, COMDAT
; _this$ = ecx

; 233  :     CEffectVector<T>()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 234  :     {
; 235  :         m_hLastError = S_OK;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 236  : #if _DEBUG
; 237  :         m_pCastData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 238  : #endif // _DEBUG
; 239  :         m_pData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 240  :         m_CurSize = m_MaxSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 241  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CEffectVector@USRange@D3DX11Effects@@@@QAE@XZ ENDP	; CEffectVector<D3DX11Effects::SRange>::CEffectVector<D3DX11Effects::SRange>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?Reserve@?$CEffectVector@USRange@D3DX11Effects@@@@IAEJI@Z
_TEXT	SEGMENT
tv71 = -256						; size = 4
$T1 = -248						; size = 4
$T2 = -236						; size = 4
_newSize$3 = -32					; size = 4
_pNewData$4 = -20					; size = 4
_this$ = -8						; size = 4
_DesiredSize$ = 8					; size = 4
?Reserve@?$CEffectVector@USRange@D3DX11Effects@@@@IAEJI@Z PROC ; CEffectVector<D3DX11Effects::SRange>::Reserve, COMDAT
; _this$ = ecx

; 193  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 194  :         if (DesiredSize > m_MaxSize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _DesiredSize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	$LN6@Reserve

; 195  :         {
; 196  :             BYTE *pNewData;
; 197  :             UINT newSize = max(m_MaxSize * 2, DesiredSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 1
	cmp	ecx, DWORD PTR _DesiredSize$[ebp]
	jbe	SHORT $LN9@Reserve
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	shl	eax, 1
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN10@Reserve
$LN9@Reserve:
	mov	ecx, DWORD PTR _DesiredSize$[ebp]
	mov	DWORD PTR tv71[ebp], ecx
$LN10@Reserve:
	mov	edx, DWORD PTR tv71[ebp]
	mov	DWORD PTR _newSize$3[ebp], edx

; 198  : 
; 199  :             if (newSize < 16)

	cmp	DWORD PTR _newSize$3[ebp], 16		; 00000010H
	jae	SHORT $LN5@Reserve

; 200  :                 newSize = 16;

	mov	DWORD PTR _newSize$3[ebp], 16		; 00000010H
$LN5@Reserve:

; 201  : 
; 202  :             if ((newSize < m_MaxSize) || (newSize < m_CurSize) || (newSize >= UINT_MAX / sizeof(T)))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newSize$3[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jb	SHORT $LN3@Reserve
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newSize$3[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jb	SHORT $LN3@Reserve
	cmp	DWORD PTR _newSize$3[ebp], 153391689	; 09249249H
	jb	SHORT $LN4@Reserve
$LN3@Reserve:

; 203  :             {
; 204  :                 m_hLastError = E_OUTOFMEMORY;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], -2147024882		; 8007000eH

; 205  :                 return m_hLastError;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	jmp	$LN7@Reserve
$LN4@Reserve:

; 206  :             }
; 207  : 
; 208  :             pNewData = NEW BYTE[newSize * sizeof(T)];

	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	imul	eax, DWORD PTR _newSize$3[ebp], 28
	push	eax
	call	??_U@YAPAXIABUnothrow_t@std@@@Z		; operator new[]
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR _pNewData$4[ebp], ecx

; 209  :             if (pNewData == NULL)

	cmp	DWORD PTR _pNewData$4[ebp], 0
	jne	SHORT $LN2@Reserve

; 210  :             {
; 211  :                 m_hLastError = E_OUTOFMEMORY;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], -2147024882		; 8007000eH

; 212  :                 return m_hLastError;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	jmp	SHORT $LN7@Reserve
$LN2@Reserve:

; 213  :             }
; 214  : 
; 215  :             if (m_pData)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Reserve

; 216  :             {
; 217  :                 memcpy(pNewData, m_pData, m_CurSize * sizeof(T));

	mov	eax, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [eax+12], 28
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _pNewData$4[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 218  :                 delete []m_pData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Reserve:

; 219  :             }
; 220  : 
; 221  :             m_pData = pNewData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pNewData$4[ebp]
	mov	DWORD PTR [eax+4], ecx

; 222  :             m_MaxSize = newSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newSize$3[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN6@Reserve:

; 223  :         }
; 224  : #if _DEBUG
; 225  :         m_pCastData = (T*) m_pData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 226  : #endif // _DEBUG
; 227  :         return S_OK;

	xor	eax, eax
$LN7@Reserve:

; 228  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Reserve@?$CEffectVector@USRange@D3DX11Effects@@@@IAEJI@Z ENDP ; CEffectVector<D3DX11Effects::SRange>::Reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?Grow@?$CEffectVector@USRange@D3DX11Effects@@@@IAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Grow@?$CEffectVector@USRange@D3DX11Effects@@@@IAEJXZ PROC ; CEffectVector<D3DX11Effects::SRange>::Grow, COMDAT
; _this$ = ecx

; 188  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 189  :         return Reserve(m_CurSize + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reserve@?$CEffectVector@USRange@D3DX11Effects@@@@IAEJI@Z ; CEffectVector<D3DX11Effects::SRange>::Reserve

; 190  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Grow@?$CEffectVector@USRange@D3DX11Effects@@@@IAEJXZ ENDP ; CEffectVector<D3DX11Effects::SRange>::Grow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?GetHash@CIterator@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetHash@CIterator@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEIXZ PROC ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::CIterator::GetHash, COMDAT
; _this$ = ecx

; 880  :         {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN4@GetHash:

; 881  :             D3DXASSERT(NULL != pHashEntry);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN3@GetHash
	push	OFFSET ??_C@_0BD@NLANFHLH@NULL?5?$CB?$DN?5pHashEntry?$AA@
	push	881					; 00000371H
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@GetHash:
	xor	eax, eax
	jne	SHORT $LN4@GetHash

; 882  :             return pHashEntry->Hash;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx]

; 883  :         }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHash@CIterator@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEIXZ ENDP ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::CIterator::GetHash
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?GetData@CIterator@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEPAUSType@D3DX11Effects@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetData@CIterator@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEPAUSType@D3DX11Effects@@XZ PROC ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::CIterator::GetData, COMDAT
; _this$ = ecx

; 874  :         {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN4@GetData:

; 875  :             D3DXASSERT(NULL != pHashEntry);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN3@GetData
	push	OFFSET ??_C@_0BD@NLANFHLH@NULL?5?$CB?$DN?5pHashEntry?$AA@
	push	875					; 0000036bH
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@GetData:
	xor	eax, eax
	jne	SHORT $LN4@GetData

; 876  :             return pHashEntry->Data;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+4]

; 877  :         }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetData@CIterator@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEPAUSType@D3DX11Effects@@XZ ENDP ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::CIterator::GetData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?GetHash@CIterator@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetHash@CIterator@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEIXZ PROC ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::CIterator::GetHash, COMDAT
; _this$ = ecx

; 880  :         {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN4@GetHash:

; 881  :             D3DXASSERT(NULL != pHashEntry);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN3@GetHash
	push	OFFSET ??_C@_0BD@NLANFHLH@NULL?5?$CB?$DN?5pHashEntry?$AA@
	push	881					; 00000371H
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@GetHash:
	xor	eax, eax
	jne	SHORT $LN4@GetHash

; 882  :             return pHashEntry->Hash;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx]

; 883  :         }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHash@CIterator@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEIXZ ENDP ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::CIterator::GetHash
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?GetData@CIterator@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetData@CIterator@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEPBDXZ PROC ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::CIterator::GetData, COMDAT
; _this$ = ecx

; 874  :         {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN4@GetData:

; 875  :             D3DXASSERT(NULL != pHashEntry);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN3@GetData
	push	OFFSET ??_C@_0BD@NLANFHLH@NULL?5?$CB?$DN?5pHashEntry?$AA@
	push	875					; 0000036bH
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@GetData:
	xor	eax, eax
	jne	SHORT $LN4@GetData

; 876  :             return pHashEntry->Data;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+4]

; 877  :         }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetData@CIterator@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEPBDXZ ENDP ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::CIterator::GetData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?AddValueWithHash@?$CEffectHashTableWithPrivateHeap@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEJPBDI@Z
_TEXT	SEGMENT
$T1 = -248						; size = 4
_index$ = -44						; size = 4
_pHashEntry$ = -32					; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_Data$ = 8						; size = 4
_Hash$ = 12						; size = 4
?AddValueWithHash@?$CEffectHashTableWithPrivateHeap@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEJPBDI@Z PROC ; CEffectHashTableWithPrivateHeap<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::AddValueWithHash, COMDAT
; _this$ = ecx

; 1317 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1318 :         HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0
$LN10@AddValueWi:

; 1319 : 
; 1320 :         D3DXASSERT(NULL != m_pPrivateHeap);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN9@AddValueWi
	push	OFFSET ??_C@_0BH@NPDKKNAK@NULL?5?$CB?$DN?5m_pPrivateHeap?$AA@
	push	1320					; 00000528H
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN9@AddValueWi:
	xor	eax, eax
	jne	SHORT $LN10@AddValueWi
$LN6@AddValueWi:

; 1321 :         D3DXASSERT(m_NumHashSlots > 0);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	ja	SHORT $LN5@AddValueWi
	push	OFFSET ??_C@_0BD@EGDKBIFK@m_NumHashSlots?5?$DO?50?$AA@
	push	1321					; 00000529H
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN5@AddValueWi:
	xor	eax, eax
	jne	SHORT $LN6@AddValueWi

; 1322 : 
; 1323 :         SHashEntry *pHashEntry;
; 1324 :         UINT index = Hash % m_NumHashSlots;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _Hash$[ebp]
	xor	edx, edx
	div	DWORD PTR [ecx+4]
	mov	DWORD PTR _index$[ebp], edx

; 1325 : 
; 1326 :         VN( pHashEntry = new(*m_pPrivateHeap) SHashEntry );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	push	12					; 0000000cH
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR _pHashEntry$[ebp], edx
	cmp	DWORD PTR _pHashEntry$[ebp], 0
	jne	SHORT $LN2@AddValueWi
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	SHORT $lExit$13
	jmp	SHORT $lExit$13
$LN2@AddValueWi:

; 1327 :         pHashEntry->pNext = m_rgpHashEntries[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pHashEntry$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx+8], ecx

; 1328 :         pHashEntry->Data = Data;

	mov	eax, DWORD PTR _pHashEntry$[ebp]
	mov	ecx, DWORD PTR _Data$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1329 :         pHashEntry->Hash = Hash;

	mov	eax, DWORD PTR _pHashEntry$[ebp]
	mov	ecx, DWORD PTR _Hash$[ebp]
	mov	DWORD PTR [eax], ecx

; 1330 :         m_rgpHashEntries[index] = pHashEntry;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR _pHashEntry$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax

; 1331 : 
; 1332 :         ++ m_NumEntries;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$lExit$13:

; 1333 : 
; 1334 : lExit:
; 1335 :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 1336 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?AddValueWithHash@?$CEffectHashTableWithPrivateHeap@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEJPBDI@Z ENDP ; CEffectHashTableWithPrivateHeap<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::AddValueWithHash
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?SetPrivateHeap@?$CEffectHashTableWithPrivateHeap@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEXPAVCDataBlockStore@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pPrivateHeap$ = 8					; size = 4
?SetPrivateHeap@?$CEffectHashTableWithPrivateHeap@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEXPAVCDataBlockStore@@@Z PROC ; CEffectHashTableWithPrivateHeap<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::SetPrivateHeap, COMDAT
; _this$ = ecx

; 1310 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN4@SetPrivate:

; 1311 :         D3DXASSERT(NULL == m_pPrivateHeap);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN3@SetPrivate
	push	OFFSET ??_C@_0BH@ONGAIIBI@NULL?5?$DN?$DN?5m_pPrivateHeap?$AA@
	push	1311					; 0000051fH
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@SetPrivate:
	xor	eax, eax
	jne	SHORT $LN4@SetPrivate

; 1312 :         m_pPrivateHeap = pPrivateHeap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pPrivateHeap$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 1313 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetPrivateHeap@?$CEffectHashTableWithPrivateHeap@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEXPAVCDataBlockStore@@@Z ENDP ; CEffectHashTableWithPrivateHeap<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::SetPrivateHeap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ??0?$CEffectHashTableWithPrivateHeap@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CEffectHashTableWithPrivateHeap@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAE@XZ PROC ; CEffectHashTableWithPrivateHeap<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::CEffectHashTableWithPrivateHeap<char const *,&D3DX11Effects::CEffect::AreStringsEqual>, COMDAT
; _this$ = ecx

; 1291 :     CEffectHashTableWithPrivateHeap()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAE@XZ ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>

; 1292 :     {
; 1293 :         m_pPrivateHeap = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 1294 :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CEffectHashTableWithPrivateHeap@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAE@XZ ENDP ; CEffectHashTableWithPrivateHeap<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::CEffectHashTableWithPrivateHeap<char const *,&D3DX11Effects::CEffect::AreStringsEqual>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?GetNextEntry@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEXPAVCIterator@1@@Z
_TEXT	SEGMENT
_ppEnd$ = -20						; size = 4
_this$ = -8						; size = 4
_pIterator$ = 8						; size = 4
?GetNextEntry@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEXPAVCIterator@1@@Z PROC ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::GetNextEntry, COMDAT
; _this$ = ecx

; 1228 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1229 :         SHashEntry **ppEnd = m_rgpHashEntries + m_NumHashSlots;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _ppEnd$[ebp], ecx
$LN13@GetNextEnt:

; 1230 :         D3DXASSERT(pIterator->ppHashSlot >= m_rgpHashEntries && pIterator->ppHashSlot <= ppEnd);

	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jb	SHORT $LN9@GetNextEnt
	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _ppEnd$[ebp]
	jbe	SHORT $LN12@GetNextEnt
$LN9@GetNextEnt:
	push	OFFSET ??_C@_0EM@CAMAPMFM@pIterator?9?$DOppHashSlot?5?$DO?$DN?5m_rgpHa@
	push	1230					; 000004ceH
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN12@GetNextEnt:
	xor	eax, eax
	jne	SHORT $LN13@GetNextEnt
$LN8@GetNextEnt:

; 1231 :         D3DXASSERT(NULL != pIterator->pHashEntry);

	mov	eax, DWORD PTR _pIterator$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN7@GetNextEnt
	push	OFFSET ??_C@_0BO@BGHPDFMF@NULL?5?$CB?$DN?5pIterator?9?$DOpHashEntry?$AA@
	push	1231					; 000004cfH
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN7@GetNextEnt:
	xor	eax, eax
	jne	SHORT $LN8@GetNextEnt

; 1232 : 
; 1233 :         pIterator->pHashEntry = pIterator->pHashEntry->pNext;

	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _pIterator$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+4], eax

; 1234 :         if (NULL != pIterator->pHashEntry)

	mov	eax, DWORD PTR _pIterator$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN4@GetNextEnt

; 1235 :         {
; 1236 :             return;

	jmp	SHORT $LN14@GetNextEnt
$LN4@GetNextEnt:

; 1237 :         }
; 1238 : 
; 1239 :         ++ pIterator->ppHashSlot;

	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _pIterator$[ebp]
	mov	DWORD PTR [edx], ecx
$LN3@GetNextEnt:

; 1240 :         while (pIterator->ppHashSlot < ppEnd)

	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _ppEnd$[ebp]
	jae	SHORT $LN14@GetNextEnt

; 1241 :         {
; 1242 :             pIterator->pHashEntry = *(pIterator->ppHashSlot);

	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pIterator$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], eax

; 1243 :             if (NULL != pIterator->pHashEntry)

	mov	eax, DWORD PTR _pIterator$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@GetNextEnt

; 1244 :             {
; 1245 :                 return;

	jmp	SHORT $LN14@GetNextEnt
$LN1@GetNextEnt:

; 1246 :             }
; 1247 :             ++ pIterator->ppHashSlot;

	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _pIterator$[ebp]
	mov	DWORD PTR [edx], ecx

; 1248 :         }

	jmp	SHORT $LN3@GetNextEnt
$LN14@GetNextEnt:

; 1249 :         // hit the end of the list, ppHashSlot == ppEnd
; 1250 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetNextEntry@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEXPAVCIterator@1@@Z ENDP ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::GetNextEntry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?PastEnd@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEHPAVCIterator@1@@Z
_TEXT	SEGMENT
tv79 = -220						; size = 4
_ppEnd$ = -20						; size = 4
_this$ = -8						; size = 4
_pIterator$ = 8						; size = 4
?PastEnd@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEHPAVCIterator@1@@Z PROC ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::PastEnd, COMDAT
; _this$ = ecx

; 1221 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1222 :         SHashEntry **ppEnd = m_rgpHashEntries + m_NumHashSlots;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _ppEnd$[ebp], ecx
$LN5@PastEnd:

; 1223 :         D3DXASSERT(pIterator->ppHashSlot >= m_rgpHashEntries && pIterator->ppHashSlot <= ppEnd);

	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jb	SHORT $LN1@PastEnd
	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _ppEnd$[ebp]
	jbe	SHORT $LN4@PastEnd
$LN1@PastEnd:
	push	OFFSET ??_C@_0EM@CAMAPMFM@pIterator?9?$DOppHashSlot?5?$DO?$DN?5m_rgpHa@
	push	1223					; 000004c7H
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN4@PastEnd:
	xor	eax, eax
	jne	SHORT $LN5@PastEnd

; 1224 :         return (pIterator->ppHashSlot == ppEnd);

	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _ppEnd$[ebp]
	jne	SHORT $LN8@PastEnd
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN9@PastEnd
$LN8@PastEnd:
	mov	DWORD PTR tv79[ebp], 0
$LN9@PastEnd:
	mov	eax, DWORD PTR tv79[ebp]

; 1225 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?PastEnd@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEHPAVCIterator@1@@Z ENDP ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::PastEnd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?GetFirstEntry@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEXPAVCIterator@1@@Z
_TEXT	SEGMENT
_ppEnd$ = -20						; size = 4
_this$ = -8						; size = 4
_pIterator$ = 8						; size = 4
?GetFirstEntry@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEXPAVCIterator@1@@Z PROC ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::GetFirstEntry, COMDAT
; _this$ = ecx

; 1206 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1207 :         SHashEntry **ppEnd = m_rgpHashEntries + m_NumHashSlots;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _ppEnd$[ebp], ecx

; 1208 :         pIterator->ppHashSlot = m_rgpHashEntries;

	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN3@GetFirstEn:

; 1209 :         while (pIterator->ppHashSlot < ppEnd)

	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _ppEnd$[ebp]
	jae	SHORT $LN4@GetFirstEn

; 1210 :         {
; 1211 :             if (NULL != *(pIterator->ppHashSlot))

	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@GetFirstEn

; 1212 :             {
; 1213 :                 pIterator->pHashEntry = *(pIterator->ppHashSlot);

	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pIterator$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], eax

; 1214 :                 return;

	jmp	SHORT $LN4@GetFirstEn
$LN1@GetFirstEn:

; 1215 :             }
; 1216 :             ++ pIterator->ppHashSlot;

	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _pIterator$[ebp]
	mov	DWORD PTR [edx], ecx

; 1217 :         }

	jmp	SHORT $LN3@GetFirstEn
$LN4@GetFirstEn:

; 1218 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetFirstEntry@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEXPAVCIterator@1@@Z ENDP ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::GetFirstEntry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?FindValueWithHash@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEJPBDIPAVCIterator@1@@Z
_TEXT	SEGMENT
_pEntry$ = -32						; size = 4
_index$ = -20						; size = 4
_this$ = -8						; size = 4
_Data$ = 8						; size = 4
_Hash$ = 12						; size = 4
_pIterator$ = 16					; size = 4
?FindValueWithHash@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEJPBDIPAVCIterator@1@@Z PROC ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::FindValueWithHash, COMDAT
; _this$ = ecx

; 1140 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN7@FindValueW:

; 1141 :         D3DXASSERT(m_NumHashSlots > 0);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	ja	SHORT $LN6@FindValueW
	push	OFFSET ??_C@_0BD@EGDKBIFK@m_NumHashSlots?5?$DO?50?$AA@
	push	1141					; 00000475H
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN6@FindValueW:
	xor	eax, eax
	jne	SHORT $LN7@FindValueW

; 1142 : 
; 1143 :         UINT index = Hash % m_NumHashSlots;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _Hash$[ebp]
	xor	edx, edx
	div	DWORD PTR [ecx+4]
	mov	DWORD PTR _index$[ebp], edx

; 1144 :         SHashEntry *pEntry = m_rgpHashEntries[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _pEntry$[ebp], eax
$LN3@FindValueW:

; 1145 :         while (NULL != pEntry)

	cmp	DWORD PTR _pEntry$[ebp], 0
	je	SHORT $LN2@FindValueW

; 1146 :         {
; 1147 :             if (Hash == pEntry->Hash && pfnIsEqual(pEntry->Data, Data))

	mov	eax, DWORD PTR _pEntry$[ebp]
	mov	ecx, DWORD PTR _Hash$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN1@FindValueW
	lea	eax, DWORD PTR _Data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pEntry$[ebp]
	add	ecx, 4
	push	ecx
	call	?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z ; D3DX11Effects::CEffect::AreStringsEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN1@FindValueW

; 1148 :             {
; 1149 :                 pIterator->ppHashSlot = m_rgpHashEntries + index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _pIterator$[ebp]
	mov	DWORD PTR [ecx], eax

; 1150 :                 pIterator->pHashEntry = pEntry;

	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR _pEntry$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1151 :                 return S_OK;

	xor	eax, eax
	jmp	SHORT $LN8@FindValueW
$LN1@FindValueW:

; 1152 :             }
; 1153 :             pEntry = pEntry->pNext;

	mov	eax, DWORD PTR _pEntry$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pEntry$[ebp], ecx

; 1154 :         }

	jmp	SHORT $LN3@FindValueW
$LN2@FindValueW:

; 1155 :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
$LN8@FindValueW:

; 1156 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?FindValueWithHash@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEJPBDIPAVCIterator@1@@Z ENDP ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::FindValueWithHash
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?AutoGrow@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?AutoGrow@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEJXZ PROC ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::AutoGrow, COMDAT
; _this$ = ecx

; 1065 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1066 :         // arbitrary heuristic -- grow if 1:1
; 1067 :         if (m_NumEntries >= m_NumHashSlots)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jb	SHORT $LN1@AutoGrow

; 1068 :         {
; 1069 :             // grows this hash table so that it is roughly 50% full
; 1070 :             return Grow(m_NumEntries * 2 + 1);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	lea	edx, DWORD PTR [ecx+ecx+1]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEJIIPAPAX_N@Z ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::Grow
	jmp	SHORT $LN2@AutoGrow
$LN1@AutoGrow:

; 1071 :         }
; 1072 :         return S_OK;

	xor	eax, eax
$LN2@AutoGrow:

; 1073 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AutoGrow@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEJXZ ENDP ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::AutoGrow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?Grow@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEJIIPAPAX_N@Z
_TEXT	SEGMENT
$T1 = -316						; size = 4
_index$2 = -112						; size = 4
_nextIter$ = -100					; size = 8
_iter$ = -84						; size = 8
_actualSize$ = -68					; size = 4
_valuesMigrated$ = -56					; size = 4
_rgppListEnds$ = -44					; size = 4
_rgpNewHashEntries$ = -32				; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_DesiredSize$ = 8					; size = 4
_ProvidedArraySize$ = 12				; size = 4
_ProvidedArray$ = 16					; size = 4
_OwnProvidedArray$ = 20					; size = 1
?Grow@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEJIIPAPAX_N@Z PROC ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::Grow, COMDAT
; _this$ = ecx

; 1007 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 320				; 00000140H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1008 :         HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 1009 :         SHashEntry **rgpNewHashEntries = NULL;

	mov	DWORD PTR _rgpNewHashEntries$[ebp], 0

; 1010 :         SHashEntry ***rgppListEnds = NULL;

	mov	DWORD PTR _rgppListEnds$[ebp], 0

; 1011 :         UINT valuesMigrated = 0;

	mov	DWORD PTR _valuesMigrated$[ebp], 0

; 1012 :         UINT actualSize;
; 1013 : 
; 1014 :         VB( DesiredSize > m_NumHashSlots );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _DesiredSize$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	ja	SHORT $LN12@Grow
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$19
	jmp	$lExit$19
$LN12@Grow:

; 1015 : 
; 1016 :         actualSize = GetNextHashTableSize(DesiredSize);

	mov	eax, DWORD PTR _DesiredSize$[ebp]
	push	eax
	call	?GetNextHashTableSize@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@SAII@Z ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::GetNextHashTableSize
	add	esp, 4
	mov	DWORD PTR _actualSize$[ebp], eax

; 1017 : 
; 1018 :         if (ProvidedArray &&
; 1019 :             ProvidedArraySize >= actualSize)

	cmp	DWORD PTR _ProvidedArray$[ebp], 0
	je	SHORT $LN10@Grow
	mov	eax, DWORD PTR _ProvidedArraySize$[ebp]
	cmp	eax, DWORD PTR _actualSize$[ebp]
	jb	SHORT $LN10@Grow

; 1020 :         {
; 1021 :             rgpNewHashEntries = reinterpret_cast<SHashEntry**>(ProvidedArray);

	mov	eax, DWORD PTR _ProvidedArray$[ebp]
	mov	DWORD PTR _rgpNewHashEntries$[ebp], eax

; 1022 :         }
; 1023 :         else

	jmp	SHORT $LN9@Grow
$LN10@Grow:

; 1024 :         {
; 1025 :             OwnProvidedArray = true;

	mov	BYTE PTR _OwnProvidedArray$[ebp], 1

; 1026 :             
; 1027 :             VN( rgpNewHashEntries = NEW SHashEntry*[actualSize] );

	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	xor	ecx, ecx
	mov	eax, DWORD PTR _actualSize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIABUnothrow_t@std@@@Z		; operator new[]
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _rgpNewHashEntries$[ebp], eax
	cmp	DWORD PTR _rgpNewHashEntries$[ebp], 0
	jne	SHORT $LN9@Grow
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$19
	jmp	$lExit$19
$LN9@Grow:

; 1028 :         }
; 1029 :         
; 1030 :         ZeroMemory(rgpNewHashEntries, sizeof(SHashEntry*) * actualSize);

	mov	eax, DWORD PTR _actualSize$[ebp]
	shl	eax, 2
	push	eax
	push	0
	mov	ecx, DWORD PTR _rgpNewHashEntries$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1031 : 
; 1032 :         // Expensive operation: rebuild the hash table
; 1033 :         CIterator iter, nextIter;
; 1034 :         GetFirstEntry(&iter);

	lea	eax, DWORD PTR _iter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFirstEntry@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEXPAVCIterator@1@@Z ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::GetFirstEntry
$LN6@Grow:

; 1035 :         while (!PastEnd(&iter))

	lea	eax, DWORD PTR _iter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PastEnd@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEHPAVCIterator@1@@Z ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::PastEnd
	test	eax, eax
	jne	SHORT $LN4@Grow

; 1036 :         {
; 1037 :             UINT index = iter.GetHash() % actualSize;

	lea	ecx, DWORD PTR _iter$[ebp]
	call	?GetHash@CIterator@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEIXZ ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::CIterator::GetHash
	xor	edx, edx
	div	DWORD PTR _actualSize$[ebp]
	mov	DWORD PTR _index$2[ebp], edx

; 1038 : 
; 1039 :             // we need to advance to the next element
; 1040 :             // before we seize control of this element and move
; 1041 :             // it to the new table
; 1042 :             nextIter = iter;

	mov	eax, DWORD PTR _iter$[ebp]
	mov	DWORD PTR _nextIter$[ebp], eax
	mov	ecx, DWORD PTR _iter$[ebp+4]
	mov	DWORD PTR _nextIter$[ebp+4], ecx

; 1043 :             GetNextEntry(&nextIter);

	lea	eax, DWORD PTR _nextIter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNextEntry@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEXPAVCIterator@1@@Z ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::GetNextEntry

; 1044 : 
; 1045 :             // seize this hash entry, migrate it to the new table
; 1046 :             iter.pHashEntry->pNext = rgpNewHashEntries[index];

	mov	eax, DWORD PTR _iter$[ebp+4]
	mov	ecx, DWORD PTR _index$2[ebp]
	mov	edx, DWORD PTR _rgpNewHashEntries$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [eax+8], ecx

; 1047 :             rgpNewHashEntries[index] = iter.pHashEntry;

	mov	eax, DWORD PTR _index$2[ebp]
	mov	ecx, DWORD PTR _rgpNewHashEntries$[ebp]
	mov	edx, DWORD PTR _iter$[ebp+4]
	mov	DWORD PTR [ecx+eax*4], edx

; 1048 : 
; 1049 :             iter = nextIter;

	mov	eax, DWORD PTR _nextIter$[ebp]
	mov	DWORD PTR _iter$[ebp], eax
	mov	ecx, DWORD PTR _nextIter$[ebp+4]
	mov	DWORD PTR _iter$[ebp+4], ecx

; 1050 :             ++ valuesMigrated;

	mov	eax, DWORD PTR _valuesMigrated$[ebp]
	add	eax, 1
	mov	DWORD PTR _valuesMigrated$[ebp], eax

; 1051 :         }

	jmp	SHORT $LN6@Grow
$LN4@Grow:

; 1052 : 
; 1053 :         D3DXASSERT(valuesMigrated == m_NumEntries);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _valuesMigrated$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	je	SHORT $LN3@Grow
	push	OFFSET ??_C@_0BP@NMGLEII@valuesMigrated?5?$DN?$DN?5m_NumEntries?$AA@
	push	1053					; 0000041dH
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@Grow:
	xor	eax, eax
	jne	SHORT $LN4@Grow

; 1054 : 
; 1055 :         CleanArray();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanArray@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@IAEXXZ ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::CleanArray

; 1056 :         m_rgpHashEntries = rgpNewHashEntries;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rgpNewHashEntries$[ebp]
	mov	DWORD PTR [eax], ecx

; 1057 :         m_NumHashSlots = actualSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _actualSize$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1058 :         m_bOwnHashEntryArray = OwnProvidedArray;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _OwnProvidedArray$[ebp]
	mov	BYTE PTR [eax+12], cl
$lExit$19:

; 1059 : 
; 1060 : lExit:
; 1061 :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 1062 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@Grow
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN18@Grow:
	DD	2
	DD	$LN17@Grow
$LN17@Grow:
	DD	-84					; ffffffacH
	DD	8
	DD	$LN15@Grow
	DD	-100					; ffffff9cH
	DD	8
	DD	$LN16@Grow
$LN16@Grow:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN15@Grow:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?Grow@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEJIIPAPAX_N@Z ENDP ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::Grow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?GetNextHashTableSize@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@SAII@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_DesiredSize$ = 8					; size = 4
?GetNextHashTableSize@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@SAII@Z PROC ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::GetNextHashTableSize, COMDAT

; 986  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 987  :         // figure out the next logical size to use
; 988  :         for (UINT i = 0; i < c_NumPrimes; ++ i)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@GetNextHas
$LN3@GetNextHas:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@GetNextHas:
	cmp	DWORD PTR _i$1[ebp], 28			; 0000001cH
	jae	SHORT $LN2@GetNextHas

; 989  :         {
; 990  :             if (c_PrimeSizes[i] >= DesiredSize)

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _c_PrimeSizes[eax*4]
	cmp	ecx, DWORD PTR _DesiredSize$[ebp]
	jb	SHORT $LN1@GetNextHas

; 991  :             {
; 992  :                 return c_PrimeSizes[i];

	mov	eax, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _c_PrimeSizes[eax*4]
	jmp	SHORT $LN5@GetNextHas
$LN1@GetNextHas:

; 993  :             }
; 994  :         }

	jmp	SHORT $LN3@GetNextHas
$LN2@GetNextHas:

; 995  : 
; 996  :         return DesiredSize;

	mov	eax, DWORD PTR _DesiredSize$[ebp]
$LN5@GetNextHas:

; 997  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNextHashTableSize@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@SAII@Z ENDP ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::GetNextHashTableSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?CleanArray@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@IAEXXZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
?CleanArray@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@IAEXXZ PROC ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::CleanArray, COMDAT
; _this$ = ecx

; 951  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 952  :         if (m_bOwnHashEntryArray)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	je	SHORT $LN2@CleanArray

; 953  :         {
; 954  :             SAFE_DELETE_ARRAY(m_rgpHashEntries);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 955  :             m_bOwnHashEntryArray = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0
$LN2@CleanArray:

; 956  :         }
; 957  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CleanArray@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@IAEXXZ ENDP ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::CleanArray
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ??0?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAE@XZ PROC ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>, COMDAT
; _this$ = ecx

; 886  :     CEffectHashTable()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  :     {
; 888  :         m_rgpHashEntries = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 889  :         m_NumHashSlots = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 890  :         m_NumEntries = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 891  :         m_bOwnHashEntryArray = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 892  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAE@XZ ENDP ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?AddValueWithHash@?$CEffectHashTableWithPrivateHeap@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEJPAUSType@D3DX11Effects@@I@Z
_TEXT	SEGMENT
$T1 = -248						; size = 4
_index$ = -44						; size = 4
_pHashEntry$ = -32					; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_Data$ = 8						; size = 4
_Hash$ = 12						; size = 4
?AddValueWithHash@?$CEffectHashTableWithPrivateHeap@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEJPAUSType@D3DX11Effects@@I@Z PROC ; CEffectHashTableWithPrivateHeap<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::AddValueWithHash, COMDAT
; _this$ = ecx

; 1317 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1318 :         HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0
$LN10@AddValueWi:

; 1319 : 
; 1320 :         D3DXASSERT(NULL != m_pPrivateHeap);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN9@AddValueWi
	push	OFFSET ??_C@_0BH@NPDKKNAK@NULL?5?$CB?$DN?5m_pPrivateHeap?$AA@
	push	1320					; 00000528H
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN9@AddValueWi:
	xor	eax, eax
	jne	SHORT $LN10@AddValueWi
$LN6@AddValueWi:

; 1321 :         D3DXASSERT(m_NumHashSlots > 0);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	ja	SHORT $LN5@AddValueWi
	push	OFFSET ??_C@_0BD@EGDKBIFK@m_NumHashSlots?5?$DO?50?$AA@
	push	1321					; 00000529H
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN5@AddValueWi:
	xor	eax, eax
	jne	SHORT $LN6@AddValueWi

; 1322 : 
; 1323 :         SHashEntry *pHashEntry;
; 1324 :         UINT index = Hash % m_NumHashSlots;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _Hash$[ebp]
	xor	edx, edx
	div	DWORD PTR [ecx+4]
	mov	DWORD PTR _index$[ebp], edx

; 1325 : 
; 1326 :         VN( pHashEntry = new(*m_pPrivateHeap) SHashEntry );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	push	12					; 0000000cH
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR _pHashEntry$[ebp], edx
	cmp	DWORD PTR _pHashEntry$[ebp], 0
	jne	SHORT $LN2@AddValueWi
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	SHORT $lExit$13
	jmp	SHORT $lExit$13
$LN2@AddValueWi:

; 1327 :         pHashEntry->pNext = m_rgpHashEntries[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pHashEntry$[ebp]
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx+8], ecx

; 1328 :         pHashEntry->Data = Data;

	mov	eax, DWORD PTR _pHashEntry$[ebp]
	mov	ecx, DWORD PTR _Data$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1329 :         pHashEntry->Hash = Hash;

	mov	eax, DWORD PTR _pHashEntry$[ebp]
	mov	ecx, DWORD PTR _Hash$[ebp]
	mov	DWORD PTR [eax], ecx

; 1330 :         m_rgpHashEntries[index] = pHashEntry;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR _pHashEntry$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax

; 1331 : 
; 1332 :         ++ m_NumEntries;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$lExit$13:

; 1333 : 
; 1334 : lExit:
; 1335 :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 1336 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?AddValueWithHash@?$CEffectHashTableWithPrivateHeap@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEJPAUSType@D3DX11Effects@@I@Z ENDP ; CEffectHashTableWithPrivateHeap<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::AddValueWithHash
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?SetPrivateHeap@?$CEffectHashTableWithPrivateHeap@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEXPAVCDataBlockStore@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pPrivateHeap$ = 8					; size = 4
?SetPrivateHeap@?$CEffectHashTableWithPrivateHeap@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEXPAVCDataBlockStore@@@Z PROC ; CEffectHashTableWithPrivateHeap<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::SetPrivateHeap, COMDAT
; _this$ = ecx

; 1310 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN4@SetPrivate:

; 1311 :         D3DXASSERT(NULL == m_pPrivateHeap);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN3@SetPrivate
	push	OFFSET ??_C@_0BH@ONGAIIBI@NULL?5?$DN?$DN?5m_pPrivateHeap?$AA@
	push	1311					; 0000051fH
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@SetPrivate:
	xor	eax, eax
	jne	SHORT $LN4@SetPrivate

; 1312 :         m_pPrivateHeap = pPrivateHeap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pPrivateHeap$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 1313 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetPrivateHeap@?$CEffectHashTableWithPrivateHeap@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEXPAVCDataBlockStore@@@Z ENDP ; CEffectHashTableWithPrivateHeap<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::SetPrivateHeap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ??0?$CEffectHashTableWithPrivateHeap@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CEffectHashTableWithPrivateHeap@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAE@XZ PROC ; CEffectHashTableWithPrivateHeap<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::CEffectHashTableWithPrivateHeap<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>, COMDAT
; _this$ = ecx

; 1291 :     CEffectHashTableWithPrivateHeap()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAE@XZ ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>

; 1292 :     {
; 1293 :         m_pPrivateHeap = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 1294 :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CEffectHashTableWithPrivateHeap@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAE@XZ ENDP ; CEffectHashTableWithPrivateHeap<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::CEffectHashTableWithPrivateHeap<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?GetNextEntry@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEXPAVCIterator@1@@Z
_TEXT	SEGMENT
_ppEnd$ = -20						; size = 4
_this$ = -8						; size = 4
_pIterator$ = 8						; size = 4
?GetNextEntry@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEXPAVCIterator@1@@Z PROC ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::GetNextEntry, COMDAT
; _this$ = ecx

; 1228 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1229 :         SHashEntry **ppEnd = m_rgpHashEntries + m_NumHashSlots;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _ppEnd$[ebp], ecx
$LN13@GetNextEnt:

; 1230 :         D3DXASSERT(pIterator->ppHashSlot >= m_rgpHashEntries && pIterator->ppHashSlot <= ppEnd);

	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jb	SHORT $LN9@GetNextEnt
	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _ppEnd$[ebp]
	jbe	SHORT $LN12@GetNextEnt
$LN9@GetNextEnt:
	push	OFFSET ??_C@_0EM@CAMAPMFM@pIterator?9?$DOppHashSlot?5?$DO?$DN?5m_rgpHa@
	push	1230					; 000004ceH
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN12@GetNextEnt:
	xor	eax, eax
	jne	SHORT $LN13@GetNextEnt
$LN8@GetNextEnt:

; 1231 :         D3DXASSERT(NULL != pIterator->pHashEntry);

	mov	eax, DWORD PTR _pIterator$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN7@GetNextEnt
	push	OFFSET ??_C@_0BO@BGHPDFMF@NULL?5?$CB?$DN?5pIterator?9?$DOpHashEntry?$AA@
	push	1231					; 000004cfH
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN7@GetNextEnt:
	xor	eax, eax
	jne	SHORT $LN8@GetNextEnt

; 1232 : 
; 1233 :         pIterator->pHashEntry = pIterator->pHashEntry->pNext;

	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _pIterator$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+4], eax

; 1234 :         if (NULL != pIterator->pHashEntry)

	mov	eax, DWORD PTR _pIterator$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN4@GetNextEnt

; 1235 :         {
; 1236 :             return;

	jmp	SHORT $LN14@GetNextEnt
$LN4@GetNextEnt:

; 1237 :         }
; 1238 : 
; 1239 :         ++ pIterator->ppHashSlot;

	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _pIterator$[ebp]
	mov	DWORD PTR [edx], ecx
$LN3@GetNextEnt:

; 1240 :         while (pIterator->ppHashSlot < ppEnd)

	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _ppEnd$[ebp]
	jae	SHORT $LN14@GetNextEnt

; 1241 :         {
; 1242 :             pIterator->pHashEntry = *(pIterator->ppHashSlot);

	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pIterator$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], eax

; 1243 :             if (NULL != pIterator->pHashEntry)

	mov	eax, DWORD PTR _pIterator$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@GetNextEnt

; 1244 :             {
; 1245 :                 return;

	jmp	SHORT $LN14@GetNextEnt
$LN1@GetNextEnt:

; 1246 :             }
; 1247 :             ++ pIterator->ppHashSlot;

	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _pIterator$[ebp]
	mov	DWORD PTR [edx], ecx

; 1248 :         }

	jmp	SHORT $LN3@GetNextEnt
$LN14@GetNextEnt:

; 1249 :         // hit the end of the list, ppHashSlot == ppEnd
; 1250 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetNextEntry@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEXPAVCIterator@1@@Z ENDP ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::GetNextEntry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?PastEnd@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEHPAVCIterator@1@@Z
_TEXT	SEGMENT
tv79 = -220						; size = 4
_ppEnd$ = -20						; size = 4
_this$ = -8						; size = 4
_pIterator$ = 8						; size = 4
?PastEnd@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEHPAVCIterator@1@@Z PROC ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::PastEnd, COMDAT
; _this$ = ecx

; 1221 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1222 :         SHashEntry **ppEnd = m_rgpHashEntries + m_NumHashSlots;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _ppEnd$[ebp], ecx
$LN5@PastEnd:

; 1223 :         D3DXASSERT(pIterator->ppHashSlot >= m_rgpHashEntries && pIterator->ppHashSlot <= ppEnd);

	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jb	SHORT $LN1@PastEnd
	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _ppEnd$[ebp]
	jbe	SHORT $LN4@PastEnd
$LN1@PastEnd:
	push	OFFSET ??_C@_0EM@CAMAPMFM@pIterator?9?$DOppHashSlot?5?$DO?$DN?5m_rgpHa@
	push	1223					; 000004c7H
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN4@PastEnd:
	xor	eax, eax
	jne	SHORT $LN5@PastEnd

; 1224 :         return (pIterator->ppHashSlot == ppEnd);

	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _ppEnd$[ebp]
	jne	SHORT $LN8@PastEnd
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN9@PastEnd
$LN8@PastEnd:
	mov	DWORD PTR tv79[ebp], 0
$LN9@PastEnd:
	mov	eax, DWORD PTR tv79[ebp]

; 1225 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?PastEnd@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEHPAVCIterator@1@@Z ENDP ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::PastEnd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?GetFirstEntry@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEXPAVCIterator@1@@Z
_TEXT	SEGMENT
_ppEnd$ = -20						; size = 4
_this$ = -8						; size = 4
_pIterator$ = 8						; size = 4
?GetFirstEntry@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEXPAVCIterator@1@@Z PROC ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::GetFirstEntry, COMDAT
; _this$ = ecx

; 1206 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1207 :         SHashEntry **ppEnd = m_rgpHashEntries + m_NumHashSlots;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _ppEnd$[ebp], ecx

; 1208 :         pIterator->ppHashSlot = m_rgpHashEntries;

	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN3@GetFirstEn:

; 1209 :         while (pIterator->ppHashSlot < ppEnd)

	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _ppEnd$[ebp]
	jae	SHORT $LN4@GetFirstEn

; 1210 :         {
; 1211 :             if (NULL != *(pIterator->ppHashSlot))

	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@GetFirstEn

; 1212 :             {
; 1213 :                 pIterator->pHashEntry = *(pIterator->ppHashSlot);

	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pIterator$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx+4], eax

; 1214 :                 return;

	jmp	SHORT $LN4@GetFirstEn
$LN1@GetFirstEn:

; 1215 :             }
; 1216 :             ++ pIterator->ppHashSlot;

	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR _pIterator$[ebp]
	mov	DWORD PTR [edx], ecx

; 1217 :         }

	jmp	SHORT $LN3@GetFirstEn
$LN4@GetFirstEn:

; 1218 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetFirstEntry@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEXPAVCIterator@1@@Z ENDP ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::GetFirstEntry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?FindValueWithHash@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEJPAUSType@D3DX11Effects@@IPAVCIterator@1@@Z
_TEXT	SEGMENT
_pEntry$ = -32						; size = 4
_index$ = -20						; size = 4
_this$ = -8						; size = 4
_Data$ = 8						; size = 4
_Hash$ = 12						; size = 4
_pIterator$ = 16					; size = 4
?FindValueWithHash@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEJPAUSType@D3DX11Effects@@IPAVCIterator@1@@Z PROC ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::FindValueWithHash, COMDAT
; _this$ = ecx

; 1140 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN7@FindValueW:

; 1141 :         D3DXASSERT(m_NumHashSlots > 0);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	ja	SHORT $LN6@FindValueW
	push	OFFSET ??_C@_0BD@EGDKBIFK@m_NumHashSlots?5?$DO?50?$AA@
	push	1141					; 00000475H
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN6@FindValueW:
	xor	eax, eax
	jne	SHORT $LN7@FindValueW

; 1142 : 
; 1143 :         UINT index = Hash % m_NumHashSlots;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _Hash$[ebp]
	xor	edx, edx
	div	DWORD PTR [ecx+4]
	mov	DWORD PTR _index$[ebp], edx

; 1144 :         SHashEntry *pEntry = m_rgpHashEntries[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _pEntry$[ebp], eax
$LN3@FindValueW:

; 1145 :         while (NULL != pEntry)

	cmp	DWORD PTR _pEntry$[ebp], 0
	je	SHORT $LN2@FindValueW

; 1146 :         {
; 1147 :             if (Hash == pEntry->Hash && pfnIsEqual(pEntry->Data, Data))

	mov	eax, DWORD PTR _pEntry$[ebp]
	mov	ecx, DWORD PTR _Hash$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN1@FindValueW
	lea	eax, DWORD PTR _Data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pEntry$[ebp]
	add	ecx, 4
	push	ecx
	call	?AreTypesEqual@CEffect@D3DX11Effects@@KAHABQAUSType@2@0@Z ; D3DX11Effects::CEffect::AreTypesEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN1@FindValueW

; 1148 :             {
; 1149 :                 pIterator->ppHashSlot = m_rgpHashEntries + index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _pIterator$[ebp]
	mov	DWORD PTR [ecx], eax

; 1150 :                 pIterator->pHashEntry = pEntry;

	mov	eax, DWORD PTR _pIterator$[ebp]
	mov	ecx, DWORD PTR _pEntry$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1151 :                 return S_OK;

	xor	eax, eax
	jmp	SHORT $LN8@FindValueW
$LN1@FindValueW:

; 1152 :             }
; 1153 :             pEntry = pEntry->pNext;

	mov	eax, DWORD PTR _pEntry$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _pEntry$[ebp], ecx

; 1154 :         }

	jmp	SHORT $LN3@FindValueW
$LN2@FindValueW:

; 1155 :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
$LN8@FindValueW:

; 1156 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?FindValueWithHash@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEJPAUSType@D3DX11Effects@@IPAVCIterator@1@@Z ENDP ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::FindValueWithHash
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?AutoGrow@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?AutoGrow@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEJXZ PROC ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::AutoGrow, COMDAT
; _this$ = ecx

; 1065 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1066 :         // arbitrary heuristic -- grow if 1:1
; 1067 :         if (m_NumEntries >= m_NumHashSlots)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jb	SHORT $LN1@AutoGrow

; 1068 :         {
; 1069 :             // grows this hash table so that it is roughly 50% full
; 1070 :             return Grow(m_NumEntries * 2 + 1);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	lea	edx, DWORD PTR [ecx+ecx+1]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEJIIPAPAX_N@Z ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::Grow
	jmp	SHORT $LN2@AutoGrow
$LN1@AutoGrow:

; 1071 :         }
; 1072 :         return S_OK;

	xor	eax, eax
$LN2@AutoGrow:

; 1073 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AutoGrow@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEJXZ ENDP ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::AutoGrow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?Grow@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEJIIPAPAX_N@Z
_TEXT	SEGMENT
$T1 = -316						; size = 4
_index$2 = -112						; size = 4
_nextIter$ = -100					; size = 8
_iter$ = -84						; size = 8
_actualSize$ = -68					; size = 4
_valuesMigrated$ = -56					; size = 4
_rgppListEnds$ = -44					; size = 4
_rgpNewHashEntries$ = -32				; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_DesiredSize$ = 8					; size = 4
_ProvidedArraySize$ = 12				; size = 4
_ProvidedArray$ = 16					; size = 4
_OwnProvidedArray$ = 20					; size = 1
?Grow@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEJIIPAPAX_N@Z PROC ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::Grow, COMDAT
; _this$ = ecx

; 1007 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 320				; 00000140H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1008 :         HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 1009 :         SHashEntry **rgpNewHashEntries = NULL;

	mov	DWORD PTR _rgpNewHashEntries$[ebp], 0

; 1010 :         SHashEntry ***rgppListEnds = NULL;

	mov	DWORD PTR _rgppListEnds$[ebp], 0

; 1011 :         UINT valuesMigrated = 0;

	mov	DWORD PTR _valuesMigrated$[ebp], 0

; 1012 :         UINT actualSize;
; 1013 : 
; 1014 :         VB( DesiredSize > m_NumHashSlots );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _DesiredSize$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	ja	SHORT $LN12@Grow
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$19
	jmp	$lExit$19
$LN12@Grow:

; 1015 : 
; 1016 :         actualSize = GetNextHashTableSize(DesiredSize);

	mov	eax, DWORD PTR _DesiredSize$[ebp]
	push	eax
	call	?GetNextHashTableSize@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@SAII@Z ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::GetNextHashTableSize
	add	esp, 4
	mov	DWORD PTR _actualSize$[ebp], eax

; 1017 : 
; 1018 :         if (ProvidedArray &&
; 1019 :             ProvidedArraySize >= actualSize)

	cmp	DWORD PTR _ProvidedArray$[ebp], 0
	je	SHORT $LN10@Grow
	mov	eax, DWORD PTR _ProvidedArraySize$[ebp]
	cmp	eax, DWORD PTR _actualSize$[ebp]
	jb	SHORT $LN10@Grow

; 1020 :         {
; 1021 :             rgpNewHashEntries = reinterpret_cast<SHashEntry**>(ProvidedArray);

	mov	eax, DWORD PTR _ProvidedArray$[ebp]
	mov	DWORD PTR _rgpNewHashEntries$[ebp], eax

; 1022 :         }
; 1023 :         else

	jmp	SHORT $LN9@Grow
$LN10@Grow:

; 1024 :         {
; 1025 :             OwnProvidedArray = true;

	mov	BYTE PTR _OwnProvidedArray$[ebp], 1

; 1026 :             
; 1027 :             VN( rgpNewHashEntries = NEW SHashEntry*[actualSize] );

	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	xor	ecx, ecx
	mov	eax, DWORD PTR _actualSize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIABUnothrow_t@std@@@Z		; operator new[]
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR _rgpNewHashEntries$[ebp], eax
	cmp	DWORD PTR _rgpNewHashEntries$[ebp], 0
	jne	SHORT $LN9@Grow
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$19
	jmp	$lExit$19
$LN9@Grow:

; 1028 :         }
; 1029 :         
; 1030 :         ZeroMemory(rgpNewHashEntries, sizeof(SHashEntry*) * actualSize);

	mov	eax, DWORD PTR _actualSize$[ebp]
	shl	eax, 2
	push	eax
	push	0
	mov	ecx, DWORD PTR _rgpNewHashEntries$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1031 : 
; 1032 :         // Expensive operation: rebuild the hash table
; 1033 :         CIterator iter, nextIter;
; 1034 :         GetFirstEntry(&iter);

	lea	eax, DWORD PTR _iter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFirstEntry@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEXPAVCIterator@1@@Z ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::GetFirstEntry
$LN6@Grow:

; 1035 :         while (!PastEnd(&iter))

	lea	eax, DWORD PTR _iter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?PastEnd@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEHPAVCIterator@1@@Z ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::PastEnd
	test	eax, eax
	jne	SHORT $LN4@Grow

; 1036 :         {
; 1037 :             UINT index = iter.GetHash() % actualSize;

	lea	ecx, DWORD PTR _iter$[ebp]
	call	?GetHash@CIterator@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEIXZ ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::CIterator::GetHash
	xor	edx, edx
	div	DWORD PTR _actualSize$[ebp]
	mov	DWORD PTR _index$2[ebp], edx

; 1038 : 
; 1039 :             // we need to advance to the next element
; 1040 :             // before we seize control of this element and move
; 1041 :             // it to the new table
; 1042 :             nextIter = iter;

	mov	eax, DWORD PTR _iter$[ebp]
	mov	DWORD PTR _nextIter$[ebp], eax
	mov	ecx, DWORD PTR _iter$[ebp+4]
	mov	DWORD PTR _nextIter$[ebp+4], ecx

; 1043 :             GetNextEntry(&nextIter);

	lea	eax, DWORD PTR _nextIter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetNextEntry@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEXPAVCIterator@1@@Z ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::GetNextEntry

; 1044 : 
; 1045 :             // seize this hash entry, migrate it to the new table
; 1046 :             iter.pHashEntry->pNext = rgpNewHashEntries[index];

	mov	eax, DWORD PTR _iter$[ebp+4]
	mov	ecx, DWORD PTR _index$2[ebp]
	mov	edx, DWORD PTR _rgpNewHashEntries$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR [eax+8], ecx

; 1047 :             rgpNewHashEntries[index] = iter.pHashEntry;

	mov	eax, DWORD PTR _index$2[ebp]
	mov	ecx, DWORD PTR _rgpNewHashEntries$[ebp]
	mov	edx, DWORD PTR _iter$[ebp+4]
	mov	DWORD PTR [ecx+eax*4], edx

; 1048 : 
; 1049 :             iter = nextIter;

	mov	eax, DWORD PTR _nextIter$[ebp]
	mov	DWORD PTR _iter$[ebp], eax
	mov	ecx, DWORD PTR _nextIter$[ebp+4]
	mov	DWORD PTR _iter$[ebp+4], ecx

; 1050 :             ++ valuesMigrated;

	mov	eax, DWORD PTR _valuesMigrated$[ebp]
	add	eax, 1
	mov	DWORD PTR _valuesMigrated$[ebp], eax

; 1051 :         }

	jmp	SHORT $LN6@Grow
$LN4@Grow:

; 1052 : 
; 1053 :         D3DXASSERT(valuesMigrated == m_NumEntries);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _valuesMigrated$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	je	SHORT $LN3@Grow
	push	OFFSET ??_C@_0BP@NMGLEII@valuesMigrated?5?$DN?$DN?5m_NumEntries?$AA@
	push	1053					; 0000041dH
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@Grow:
	xor	eax, eax
	jne	SHORT $LN4@Grow

; 1054 : 
; 1055 :         CleanArray();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanArray@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@IAEXXZ ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::CleanArray

; 1056 :         m_rgpHashEntries = rgpNewHashEntries;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rgpNewHashEntries$[ebp]
	mov	DWORD PTR [eax], ecx

; 1057 :         m_NumHashSlots = actualSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _actualSize$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1058 :         m_bOwnHashEntryArray = OwnProvidedArray;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _OwnProvidedArray$[ebp]
	mov	BYTE PTR [eax+12], cl
$lExit$19:

; 1059 : 
; 1060 : lExit:
; 1061 :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 1062 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@Grow
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN18@Grow:
	DD	2
	DD	$LN17@Grow
$LN17@Grow:
	DD	-84					; ffffffacH
	DD	8
	DD	$LN15@Grow
	DD	-100					; ffffff9cH
	DD	8
	DD	$LN16@Grow
$LN16@Grow:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN15@Grow:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?Grow@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEJIIPAPAX_N@Z ENDP ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::Grow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?GetNextHashTableSize@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@SAII@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_DesiredSize$ = 8					; size = 4
?GetNextHashTableSize@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@SAII@Z PROC ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::GetNextHashTableSize, COMDAT

; 986  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 987  :         // figure out the next logical size to use
; 988  :         for (UINT i = 0; i < c_NumPrimes; ++ i)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@GetNextHas
$LN3@GetNextHas:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@GetNextHas:
	cmp	DWORD PTR _i$1[ebp], 28			; 0000001cH
	jae	SHORT $LN2@GetNextHas

; 989  :         {
; 990  :             if (c_PrimeSizes[i] >= DesiredSize)

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _c_PrimeSizes[eax*4]
	cmp	ecx, DWORD PTR _DesiredSize$[ebp]
	jb	SHORT $LN1@GetNextHas

; 991  :             {
; 992  :                 return c_PrimeSizes[i];

	mov	eax, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _c_PrimeSizes[eax*4]
	jmp	SHORT $LN5@GetNextHas
$LN1@GetNextHas:

; 993  :             }
; 994  :         }

	jmp	SHORT $LN3@GetNextHas
$LN2@GetNextHas:

; 995  : 
; 996  :         return DesiredSize;

	mov	eax, DWORD PTR _DesiredSize$[ebp]
$LN5@GetNextHas:

; 997  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetNextHashTableSize@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@SAII@Z ENDP ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::GetNextHashTableSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?CleanArray@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@IAEXXZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
?CleanArray@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@IAEXXZ PROC ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::CleanArray, COMDAT
; _this$ = ecx

; 951  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 952  :         if (m_bOwnHashEntryArray)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	je	SHORT $LN2@CleanArray

; 953  :         {
; 954  :             SAFE_DELETE_ARRAY(m_rgpHashEntries);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 955  :             m_bOwnHashEntryArray = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0
$LN2@CleanArray:

; 956  :         }
; 957  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CleanArray@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@IAEXXZ ENDP ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::CleanArray
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ??0?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAE@XZ PROC ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>, COMDAT
; _this$ = ecx

; 886  :     CEffectHashTable()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  :     {
; 888  :         m_rgpHashEntries = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 889  :         m_NumHashSlots = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 890  :         m_NumEntries = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 891  :         m_bOwnHashEntryArray = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 892  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAE@XZ ENDP ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?GetValue@?$CheckedNumber@I$0PPPPPPPP@@@QAEJPAI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pValue$ = 8						; size = 4
?GetValue@?$CheckedNumber@I$0PPPPPPPP@@@QAEJPAI@Z PROC	; CheckedNumber<unsigned int,4294967295>::GetValue, COMDAT
; _this$ = ecx

; 591  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 592  :         if (!m_bValid)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@GetValue

; 593  :         {
; 594  :             *pValue = -1;

	mov	eax, DWORD PTR _pValue$[ebp]
	mov	DWORD PTR [eax], -1

; 595  :             return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN2@GetValue
$LN1@GetValue:

; 596  :         }
; 597  : 
; 598  :         *pValue = m_Value;

	mov	eax, DWORD PTR _pValue$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 599  :         return S_OK;

	xor	eax, eax
$LN2@GetValue:

; 600  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetValue@?$CheckedNumber@I$0PPPPPPPP@@@QAEJPAI@Z ENDP	; CheckedNumber<unsigned int,4294967295>::GetValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ??X?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_other$ = 8						; size = 4
??X?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z PROC	; CheckedNumber<unsigned int,4294967295>::operator*=, COMDAT
; _this$ = ecx

; 570  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 571  :         if (!other.m_bValid)

	mov	eax, DWORD PTR _other$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN4@operator

; 572  :         {
; 573  :             m_bValid = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 574  :         }
; 575  :         else

	jmp	SHORT $LN3@operator
$LN4@operator:

; 576  :         {
; 577  :             if (other.m_Value != 0)

	mov	eax, DWORD PTR _other$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@operator

; 578  :             {
; 579  :                 if (m_Value > MaxValue / other.m_Value)

	mov	ecx, DWORD PTR _other$[ebp]
	or	eax, -1
	xor	edx, edx
	div	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], eax
	jbe	SHORT $LN2@operator

; 580  :                 {
; 581  :                     m_bValid = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN2@operator:

; 582  :                 }
; 583  :             }
; 584  :             m_Value *= other.m_Value;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [eax]
	imul	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], edx
$LN3@operator:

; 585  :         }
; 586  : 
; 587  :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 588  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??X?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z ENDP	; CheckedNumber<unsigned int,4294967295>::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ??Y?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_other$ = 8						; size = 4
??Y?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z PROC	; CheckedNumber<unsigned int,4294967295>::operator+=, COMDAT
; _this$ = ecx

; 547  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 548  :         if (!other.m_bValid)

	mov	eax, DWORD PTR _other$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN3@operator

; 549  :         {
; 550  :             m_bValid = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 551  :         }
; 552  :         else

	jmp	SHORT $LN2@operator
$LN3@operator:

; 553  :         {
; 554  :             m_Value += other.m_Value;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _other$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx

; 555  : 
; 556  :             if (m_Value < other.m_Value)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN2@operator

; 557  :                 m_bValid = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN2@operator:

; 558  :         }
; 559  : 
; 560  :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 561  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z ENDP	; CheckedNumber<unsigned int,4294967295>::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_value$ = 8						; size = 4
??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z PROC		; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>, COMDAT
; _this$ = ecx

; 528  :     CheckedNumber<T, MaxValue>(const T &value)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 529  :     {
; 530  :         m_Value = value;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 531  :         m_bValid = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 1

; 532  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ENDP		; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@XZ PROC		; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>, COMDAT
; _this$ = ecx

; 522  :     CheckedNumber<T, MaxValue>()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 523  :     {
; 524  :         m_Value = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 525  :         m_bValid = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 1

; 526  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@XZ ENDP		; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?GetEffectVersion@D3DX11Effects@@YAJIPAK@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_effectFileTag$ = 8					; size = 4
_pVersion$ = 12						; size = 4
?GetEffectVersion@D3DX11Effects@@YAJIPAK@Z PROC		; D3DX11Effects::GetEffectVersion, COMDAT

; 718  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN9@GetEffectV:

; 719  :     D3DXASSERT( pVersion != NULL );

	cmp	DWORD PTR _pVersion$[ebp], 0
	jne	SHORT $LN8@GetEffectV
	push	OFFSET ??_C@_0BB@EKHKLBAF@pVersion?5?$CB?$DN?5NULL?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??GetEffectVersion@D3DX11Effects@@YAJIPAK@Z@4JA
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN8@GetEffectV:
	xor	eax, eax
	jne	SHORT $LN9@GetEffectV

; 720  :     if( !pVersion )

	cmp	DWORD PTR _pVersion$[ebp], 0
	jne	SHORT $LN5@GetEffectV

; 721  :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN10@GetEffectV
$LN5@GetEffectV:

; 722  : 
; 723  :     for( UINT i = 0; i < NUM_EFFECT10_VERSIONS; i++ )

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@GetEffectV
$LN3@GetEffectV:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@GetEffectV:
	cmp	DWORD PTR _i$1[ebp], 3
	jae	SHORT $LN2@GetEffectV

; 724  :     {
; 725  :         if( g_EffectVersions[i].m_Tag == effectFileTag )

	imul	eax, DWORD PTR _i$1[ebp], 12
	mov	ecx, DWORD PTR _g_EffectVersions[eax+8]
	cmp	ecx, DWORD PTR _effectFileTag$[ebp]
	jne	SHORT $LN1@GetEffectV

; 726  :         {
; 727  :             *pVersion = g_EffectVersions[i].m_Version;

	imul	eax, DWORD PTR _i$1[ebp], 12
	mov	ecx, DWORD PTR _pVersion$[ebp]
	mov	edx, DWORD PTR _g_EffectVersions[eax+4]
	mov	DWORD PTR [ecx], edx

; 728  :             return S_OK;

	xor	eax, eax
	jmp	SHORT $LN10@GetEffectV
$LN1@GetEffectV:

; 729  :         }
; 730  :     }

	jmp	SHORT $LN3@GetEffectV
$LN2@GetEffectV:

; 731  : 
; 732  :     return E_FAIL;

	mov	eax, -2147467259			; 80004005H
$LN10@GetEffectV:

; 733  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetEffectVersion@D3DX11Effects@@YAJIPAK@Z ENDP		; D3DX11Effects::GetEffectVersion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ??$AddDataInternal@$0A@@CEffectHeap@D3DX11Effects@@IAEJPBXIPAPAX@Z
_TEXT	SEGMENT
$T1 = -284						; size = 8
$T2 = -268						; size = 8
$T3 = -252						; size = 4
_hr$ = -48						; size = 4
_finalSize$ = -36					; size = 4
_chkFinalSize$ = -24					; size = 8
_this$ = -8						; size = 4
_pData$ = 8						; size = 4
_dwSize$ = 12						; size = 4
_ppPointer$ = 16					; size = 4
??$AddDataInternal@$0A@@CEffectHeap@D3DX11Effects@@IAEJPBXIPAPAX@Z PROC ; D3DX11Effects::CEffectHeap::AddDataInternal<0>, COMDAT
; _this$ = ecx

; 227  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 228  :     CCheckedDword chkFinalSize( m_dwSize );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	lea	ecx, DWORD PTR _chkFinalSize$[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>

; 229  :     UINT  finalSize;
; 230  :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 231  : 
; 232  :     chkFinalSize += dwSize;

	lea	eax, DWORD PTR _dwSize$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	lea	ecx, DWORD PTR _chkFinalSize$[ebp]
	call	??Y?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z ; CheckedNumber<unsigned int,4294967295>::operator+=

; 233  :     chkFinalSize += c_DataAlignment; // account for alignment

	mov	DWORD PTR $T3[ebp], 4
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	ecx, DWORD PTR _chkFinalSize$[ebp]
	call	??Y?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z ; CheckedNumber<unsigned int,4294967295>::operator+=

; 234  : 
; 235  :     VHD( chkFinalSize.GetValue(&finalSize), "Overflow while adding data to Effect heap."  );

	lea	eax, DWORD PTR _finalSize$[ebp]
	push	eax
	lea	ecx, DWORD PTR _chkFinalSize$[ebp]
	call	?GetValue@?$CheckedNumber@I$0PPPPPPPP@@@QAEJPAI@Z ; CheckedNumber<unsigned int,4294967295>::GetValue
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN10@AddDataInt
	jmp	$lExit$17
	jmp	$lExit$17
$LN10@AddDataInt:

; 236  :     
; 237  :     // align original value
; 238  :     finalSize = AlignToPowerOf2(finalSize - c_DataAlignment, c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _finalSize$[ebp]
	sub	eax, 4
	push	eax
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	DWORD PTR _finalSize$[ebp], eax

; 239  :     VBD( finalSize <= m_dwBufferSize, "Overflow adding data to Effect heap." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _finalSize$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jbe	SHORT $LN8@AddDataInt
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $lExit$17
	jmp	SHORT $lExit$17
$LN8@AddDataInt:

; 240  : 
; 241  :     *ppPointer = m_pData + m_dwSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _ppPointer$[ebp]
	mov	DWORD PTR [eax], ecx
$LN6@AddDataInt:

; 242  :     D3DXASSERT(*ppPointer == AlignToPowerOf2(*ppPointer, c_DataAlignment));

	push	4
	mov	eax, DWORD PTR _ppPointer$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?AlignToPowerOf2@@YAPAXPAXI@Z		; AlignToPowerOf2
	add	esp, 8
	mov	edx, DWORD PTR _ppPointer$[ebp]
	cmp	DWORD PTR [edx], eax
	je	SHORT $LN5@AddDataInt
	push	OFFSET ??_C@_0DL@GPKFPIPI@?$CKppPointer?5?$DN?$DN?5AlignToPowerOf2?$CI?$CKp@
	push	242					; 000000f2H
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN5@AddDataInt:
	xor	eax, eax
	jne	SHORT $LN6@AddDataInt

; 243  : 
; 244  :     if( bCopyData )

	xor	eax, eax
	je	SHORT $LN2@AddDataInt

; 245  :     {
; 246  :         memcpy(*ppPointer, pData, dwSize);

	mov	eax, DWORD PTR _dwSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ppPointer$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@AddDataInt:

; 247  :     }
; 248  :     m_dwSize = finalSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _finalSize$[ebp]
	mov	DWORD PTR [eax+8], ecx
$lExit$17:

; 249  : 
; 250  : lExit:
; 251  :     if (FAILED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@AddDataInt

; 252  :         *ppPointer = NULL;

	mov	eax, DWORD PTR _ppPointer$[ebp]
	mov	DWORD PTR [eax], 0
$LN1@AddDataInt:

; 253  : 
; 254  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 255  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@AddDataInt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN16@AddDataInt:
	DD	2
	DD	$LN15@AddDataInt
$LN15@AddDataInt:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN13@AddDataInt
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN14@AddDataInt
$LN14@AddDataInt:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN13@AddDataInt:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	107					; 0000006bH
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
??$AddDataInternal@$0A@@CEffectHeap@D3DX11Effects@@IAEJPBXIPAPAX@Z ENDP ; D3DX11Effects::CEffectHeap::AddDataInternal<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ??$AddDataInternal@$00@CEffectHeap@D3DX11Effects@@IAEJPBXIPAPAX@Z
_TEXT	SEGMENT
$T1 = -284						; size = 8
$T2 = -268						; size = 8
$T3 = -252						; size = 4
_hr$ = -48						; size = 4
_finalSize$ = -36					; size = 4
_chkFinalSize$ = -24					; size = 8
_this$ = -8						; size = 4
_pData$ = 8						; size = 4
_dwSize$ = 12						; size = 4
_ppPointer$ = 16					; size = 4
??$AddDataInternal@$00@CEffectHeap@D3DX11Effects@@IAEJPBXIPAPAX@Z PROC ; D3DX11Effects::CEffectHeap::AddDataInternal<1>, COMDAT
; _this$ = ecx

; 227  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 228  :     CCheckedDword chkFinalSize( m_dwSize );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	lea	ecx, DWORD PTR _chkFinalSize$[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>

; 229  :     UINT  finalSize;
; 230  :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 231  : 
; 232  :     chkFinalSize += dwSize;

	lea	eax, DWORD PTR _dwSize$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	lea	ecx, DWORD PTR _chkFinalSize$[ebp]
	call	??Y?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z ; CheckedNumber<unsigned int,4294967295>::operator+=

; 233  :     chkFinalSize += c_DataAlignment; // account for alignment

	mov	DWORD PTR $T3[ebp], 4
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	ecx, DWORD PTR _chkFinalSize$[ebp]
	call	??Y?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z ; CheckedNumber<unsigned int,4294967295>::operator+=

; 234  : 
; 235  :     VHD( chkFinalSize.GetValue(&finalSize), "Overflow while adding data to Effect heap."  );

	lea	eax, DWORD PTR _finalSize$[ebp]
	push	eax
	lea	ecx, DWORD PTR _chkFinalSize$[ebp]
	call	?GetValue@?$CheckedNumber@I$0PPPPPPPP@@@QAEJPAI@Z ; CheckedNumber<unsigned int,4294967295>::GetValue
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN10@AddDataInt
	jmp	$lExit$17
	jmp	$lExit$17
$LN10@AddDataInt:

; 236  :     
; 237  :     // align original value
; 238  :     finalSize = AlignToPowerOf2(finalSize - c_DataAlignment, c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _finalSize$[ebp]
	sub	eax, 4
	push	eax
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	DWORD PTR _finalSize$[ebp], eax

; 239  :     VBD( finalSize <= m_dwBufferSize, "Overflow adding data to Effect heap." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _finalSize$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jbe	SHORT $LN8@AddDataInt
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $lExit$17
	jmp	SHORT $lExit$17
$LN8@AddDataInt:

; 240  : 
; 241  :     *ppPointer = m_pData + m_dwSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _ppPointer$[ebp]
	mov	DWORD PTR [eax], ecx
$LN6@AddDataInt:

; 242  :     D3DXASSERT(*ppPointer == AlignToPowerOf2(*ppPointer, c_DataAlignment));

	push	4
	mov	eax, DWORD PTR _ppPointer$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?AlignToPowerOf2@@YAPAXPAXI@Z		; AlignToPowerOf2
	add	esp, 8
	mov	edx, DWORD PTR _ppPointer$[ebp]
	cmp	DWORD PTR [edx], eax
	je	SHORT $LN5@AddDataInt
	push	OFFSET ??_C@_0DL@GPKFPIPI@?$CKppPointer?5?$DN?$DN?5AlignToPowerOf2?$CI?$CKp@
	push	242					; 000000f2H
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN5@AddDataInt:
	xor	eax, eax
	jne	SHORT $LN6@AddDataInt

; 243  : 
; 244  :     if( bCopyData )

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@AddDataInt

; 245  :     {
; 246  :         memcpy(*ppPointer, pData, dwSize);

	mov	eax, DWORD PTR _dwSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ppPointer$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@AddDataInt:

; 247  :     }
; 248  :     m_dwSize = finalSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _finalSize$[ebp]
	mov	DWORD PTR [eax+8], ecx
$lExit$17:

; 249  : 
; 250  : lExit:
; 251  :     if (FAILED(hr))

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@AddDataInt

; 252  :         *ppPointer = NULL;

	mov	eax, DWORD PTR _ppPointer$[ebp]
	mov	DWORD PTR [eax], 0
$LN1@AddDataInt:

; 253  : 
; 254  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 255  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@AddDataInt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN16@AddDataInt:
	DD	2
	DD	$LN15@AddDataInt
$LN15@AddDataInt:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN13@AddDataInt
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN14@AddDataInt
$LN14@AddDataInt:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN13@AddDataInt:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	107					; 0000006bH
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
??$AddDataInternal@$00@CEffectHeap@D3DX11Effects@@IAEJPBXIPAPAX@Z ENDP ; D3DX11Effects::CEffectHeap::AddDataInternal<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ??__Eg_NullCS@D3DX11Effects@@YAXXZ
text$di	SEGMENT
??__Eg_NullCS@D3DX11Effects@@YAXXZ PROC			; D3DX11Effects::`dynamic initializer for 'g_NullCS'', COMDAT

; 89   : SShaderBlock g_NullCS(&g_vtCS);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	OFFSET ?g_vtCS@D3DX11Effects@@3USD3DShaderVTable@1@A ; D3DX11Effects::g_vtCS
	mov	ecx, OFFSET ?g_NullCS@D3DX11Effects@@3USShaderBlock@1@A ; D3DX11Effects::g_NullCS
	call	??0SShaderBlock@D3DX11Effects@@QAE@PAUSD3DShaderVTable@1@@Z ; D3DX11Effects::SShaderBlock::SShaderBlock
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eg_NullCS@D3DX11Effects@@YAXXZ ENDP			; D3DX11Effects::`dynamic initializer for 'g_NullCS''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ??__Eg_NullDS@D3DX11Effects@@YAXXZ
text$di	SEGMENT
??__Eg_NullDS@D3DX11Effects@@YAXXZ PROC			; D3DX11Effects::`dynamic initializer for 'g_NullDS'', COMDAT

; 88   : SShaderBlock g_NullDS(&g_vtDS);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	OFFSET ?g_vtDS@D3DX11Effects@@3USD3DShaderVTable@1@A ; D3DX11Effects::g_vtDS
	mov	ecx, OFFSET ?g_NullDS@D3DX11Effects@@3USShaderBlock@1@A ; D3DX11Effects::g_NullDS
	call	??0SShaderBlock@D3DX11Effects@@QAE@PAUSD3DShaderVTable@1@@Z ; D3DX11Effects::SShaderBlock::SShaderBlock
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eg_NullDS@D3DX11Effects@@YAXXZ ENDP			; D3DX11Effects::`dynamic initializer for 'g_NullDS''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ??__Eg_NullHS@D3DX11Effects@@YAXXZ
text$di	SEGMENT
??__Eg_NullHS@D3DX11Effects@@YAXXZ PROC			; D3DX11Effects::`dynamic initializer for 'g_NullHS'', COMDAT

; 87   : SShaderBlock g_NullHS(&g_vtHS);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	OFFSET ?g_vtHS@D3DX11Effects@@3USD3DShaderVTable@1@A ; D3DX11Effects::g_vtHS
	mov	ecx, OFFSET ?g_NullHS@D3DX11Effects@@3USShaderBlock@1@A ; D3DX11Effects::g_NullHS
	call	??0SShaderBlock@D3DX11Effects@@QAE@PAUSD3DShaderVTable@1@@Z ; D3DX11Effects::SShaderBlock::SShaderBlock
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eg_NullHS@D3DX11Effects@@YAXXZ ENDP			; D3DX11Effects::`dynamic initializer for 'g_NullHS''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ??__Eg_NullPS@D3DX11Effects@@YAXXZ
text$di	SEGMENT
??__Eg_NullPS@D3DX11Effects@@YAXXZ PROC			; D3DX11Effects::`dynamic initializer for 'g_NullPS'', COMDAT

; 86   : SShaderBlock g_NullPS(&g_vtPS);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	OFFSET ?g_vtPS@D3DX11Effects@@3USD3DShaderVTable@1@A ; D3DX11Effects::g_vtPS
	mov	ecx, OFFSET ?g_NullPS@D3DX11Effects@@3USShaderBlock@1@A ; D3DX11Effects::g_NullPS
	call	??0SShaderBlock@D3DX11Effects@@QAE@PAUSD3DShaderVTable@1@@Z ; D3DX11Effects::SShaderBlock::SShaderBlock
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eg_NullPS@D3DX11Effects@@YAXXZ ENDP			; D3DX11Effects::`dynamic initializer for 'g_NullPS''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ??__Eg_NullGS@D3DX11Effects@@YAXXZ
text$di	SEGMENT
??__Eg_NullGS@D3DX11Effects@@YAXXZ PROC			; D3DX11Effects::`dynamic initializer for 'g_NullGS'', COMDAT

; 85   : SShaderBlock g_NullGS(&g_vtGS);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	OFFSET ?g_vtGS@D3DX11Effects@@3USD3DShaderVTable@1@A ; D3DX11Effects::g_vtGS
	mov	ecx, OFFSET ?g_NullGS@D3DX11Effects@@3USShaderBlock@1@A ; D3DX11Effects::g_NullGS
	call	??0SShaderBlock@D3DX11Effects@@QAE@PAUSD3DShaderVTable@1@@Z ; D3DX11Effects::SShaderBlock::SShaderBlock
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eg_NullGS@D3DX11Effects@@YAXXZ ENDP			; D3DX11Effects::`dynamic initializer for 'g_NullGS''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ??__Eg_NullVS@D3DX11Effects@@YAXXZ
text$di	SEGMENT
??__Eg_NullVS@D3DX11Effects@@YAXXZ PROC			; D3DX11Effects::`dynamic initializer for 'g_NullVS'', COMDAT

; 84   : SShaderBlock g_NullVS(&g_vtVS);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	OFFSET ?g_vtVS@D3DX11Effects@@3USD3DShaderVTable@1@A ; D3DX11Effects::g_vtVS
	mov	ecx, OFFSET ?g_NullVS@D3DX11Effects@@3USShaderBlock@1@A ; D3DX11Effects::g_NullVS
	call	??0SShaderBlock@D3DX11Effects@@QAE@PAUSD3DShaderVTable@1@@Z ; D3DX11Effects::SShaderBlock::SShaderBlock
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eg_NullVS@D3DX11Effects@@YAXXZ ENDP			; D3DX11Effects::`dynamic initializer for 'g_NullVS''
text$di	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_9ID3D11Device@@$BEI@AG
_TEXT	SEGMENT
??_9ID3D11Device@@$BEI@AG PROC				; ID3D11Device::`vcall'{72}', COMDAT
	mov	eax, DWORD PTR [esp+4]
	mov	eax, DWORD PTR [eax]
	jmp	DWORD PTR [eax+72]
??_9ID3D11Device@@$BEI@AG ENDP				; ID3D11Device::`vcall'{72}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_9ID3D11DeviceContext@@$BBAM@AG
_TEXT	SEGMENT
??_9ID3D11DeviceContext@@$BBAM@AG PROC			; ID3D11DeviceContext::`vcall'{268}', COMDAT
	mov	eax, DWORD PTR [esp+4]
	mov	eax, DWORD PTR [eax]
	jmp	DWORD PTR [eax+268]
??_9ID3D11DeviceContext@@$BBAM@AG ENDP			; ID3D11DeviceContext::`vcall'{268}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_9ID3D11DeviceContext@@$BBBI@AG
_TEXT	SEGMENT
??_9ID3D11DeviceContext@@$BBBI@AG PROC			; ID3D11DeviceContext::`vcall'{280}', COMDAT
	mov	eax, DWORD PTR [esp+4]
	mov	eax, DWORD PTR [eax]
	jmp	DWORD PTR [eax+280]
??_9ID3D11DeviceContext@@$BBBI@AG ENDP			; ID3D11DeviceContext::`vcall'{280}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_9ID3D11DeviceContext@@$BBBM@AG
_TEXT	SEGMENT
??_9ID3D11DeviceContext@@$BBBM@AG PROC			; ID3D11DeviceContext::`vcall'{284}', COMDAT
	mov	eax, DWORD PTR [esp+4]
	mov	eax, DWORD PTR [eax]
	jmp	DWORD PTR [eax+284]
??_9ID3D11DeviceContext@@$BBBM@AG ENDP			; ID3D11DeviceContext::`vcall'{284}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_9ID3D11DeviceContext@@$BBBE@AG
_TEXT	SEGMENT
??_9ID3D11DeviceContext@@$BBBE@AG PROC			; ID3D11DeviceContext::`vcall'{276}', COMDAT
	mov	eax, DWORD PTR [esp+4]
	mov	eax, DWORD PTR [eax]
	jmp	DWORD PTR [eax+276]
??_9ID3D11DeviceContext@@$BBBE@AG ENDP			; ID3D11DeviceContext::`vcall'{276}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_9ID3D11Device@@$BEE@AG
_TEXT	SEGMENT
??_9ID3D11Device@@$BEE@AG PROC				; ID3D11Device::`vcall'{68}', COMDAT
	mov	eax, DWORD PTR [esp+4]
	mov	eax, DWORD PTR [eax]
	jmp	DWORD PTR [eax+68]
??_9ID3D11Device@@$BEE@AG ENDP				; ID3D11Device::`vcall'{68}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_9ID3D11DeviceContext@@$BPM@AG
_TEXT	SEGMENT
??_9ID3D11DeviceContext@@$BPM@AG PROC			; ID3D11DeviceContext::`vcall'{252}', COMDAT
	mov	eax, DWORD PTR [esp+4]
	mov	eax, DWORD PTR [eax]
	jmp	DWORD PTR [eax+252]
??_9ID3D11DeviceContext@@$BPM@AG ENDP			; ID3D11DeviceContext::`vcall'{252}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_9ID3D11DeviceContext@@$BBAE@AG
_TEXT	SEGMENT
??_9ID3D11DeviceContext@@$BBAE@AG PROC			; ID3D11DeviceContext::`vcall'{260}', COMDAT
	mov	eax, DWORD PTR [esp+4]
	mov	eax, DWORD PTR [eax]
	jmp	DWORD PTR [eax+260]
??_9ID3D11DeviceContext@@$BBAE@AG ENDP			; ID3D11DeviceContext::`vcall'{260}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_9ID3D11DeviceContext@@$BBAI@AG
_TEXT	SEGMENT
??_9ID3D11DeviceContext@@$BBAI@AG PROC			; ID3D11DeviceContext::`vcall'{264}', COMDAT
	mov	eax, DWORD PTR [esp+4]
	mov	eax, DWORD PTR [eax]
	jmp	DWORD PTR [eax+264]
??_9ID3D11DeviceContext@@$BBAI@AG ENDP			; ID3D11DeviceContext::`vcall'{264}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_9ID3D11DeviceContext@@$BBAA@AG
_TEXT	SEGMENT
??_9ID3D11DeviceContext@@$BBAA@AG PROC			; ID3D11DeviceContext::`vcall'{256}', COMDAT
	mov	eax, DWORD PTR [esp+4]
	mov	eax, DWORD PTR [eax]
	jmp	DWORD PTR [eax+256]
??_9ID3D11DeviceContext@@$BBAA@AG ENDP			; ID3D11DeviceContext::`vcall'{256}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_9ID3D11DeviceContext@@$BOM@AG
_TEXT	SEGMENT
??_9ID3D11DeviceContext@@$BOM@AG PROC			; ID3D11DeviceContext::`vcall'{236}', COMDAT
	mov	eax, DWORD PTR [esp+4]
	mov	eax, DWORD PTR [eax]
	jmp	DWORD PTR [eax+236]
??_9ID3D11DeviceContext@@$BOM@AG ENDP			; ID3D11DeviceContext::`vcall'{236}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_9ID3D11DeviceContext@@$BPE@AG
_TEXT	SEGMENT
??_9ID3D11DeviceContext@@$BPE@AG PROC			; ID3D11DeviceContext::`vcall'{244}', COMDAT
	mov	eax, DWORD PTR [esp+4]
	mov	eax, DWORD PTR [eax]
	jmp	DWORD PTR [eax+244]
??_9ID3D11DeviceContext@@$BPE@AG ENDP			; ID3D11DeviceContext::`vcall'{244}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_9ID3D11DeviceContext@@$BPI@AG
_TEXT	SEGMENT
??_9ID3D11DeviceContext@@$BPI@AG PROC			; ID3D11DeviceContext::`vcall'{248}', COMDAT
	mov	eax, DWORD PTR [esp+4]
	mov	eax, DWORD PTR [eax]
	jmp	DWORD PTR [eax+248]
??_9ID3D11DeviceContext@@$BPI@AG ENDP			; ID3D11DeviceContext::`vcall'{248}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_9ID3D11DeviceContext@@$BPA@AG
_TEXT	SEGMENT
??_9ID3D11DeviceContext@@$BPA@AG PROC			; ID3D11DeviceContext::`vcall'{240}', COMDAT
	mov	eax, DWORD PTR [esp+4]
	mov	eax, DWORD PTR [eax]
	jmp	DWORD PTR [eax+240]
??_9ID3D11DeviceContext@@$BPA@AG ENDP			; ID3D11DeviceContext::`vcall'{240}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_9ID3D11Device@@$BDE@AG
_TEXT	SEGMENT
??_9ID3D11Device@@$BDE@AG PROC				; ID3D11Device::`vcall'{52}', COMDAT
	mov	eax, DWORD PTR [esp+4]
	mov	eax, DWORD PTR [eax]
	jmp	DWORD PTR [eax+52]
??_9ID3D11Device@@$BDE@AG ENDP				; ID3D11Device::`vcall'{52}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_9ID3D11DeviceContext@@$BHM@AG
_TEXT	SEGMENT
??_9ID3D11DeviceContext@@$BHM@AG PROC			; ID3D11DeviceContext::`vcall'{124}', COMDAT
	mov	eax, DWORD PTR [esp+4]
	mov	eax, DWORD PTR [eax]
	jmp	DWORD PTR [eax+124]
??_9ID3D11DeviceContext@@$BHM@AG ENDP			; ID3D11DeviceContext::`vcall'{124}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_9ID3D11DeviceContext@@$BIA@AG
_TEXT	SEGMENT
??_9ID3D11DeviceContext@@$BIA@AG PROC			; ID3D11DeviceContext::`vcall'{128}', COMDAT
	mov	eax, DWORD PTR [esp+4]
	mov	eax, DWORD PTR [eax]
	jmp	DWORD PTR [eax+128]
??_9ID3D11DeviceContext@@$BIA@AG ENDP			; ID3D11DeviceContext::`vcall'{128}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_9ID3D11DeviceContext@@$BFI@AG
_TEXT	SEGMENT
??_9ID3D11DeviceContext@@$BFI@AG PROC			; ID3D11DeviceContext::`vcall'{88}', COMDAT
	mov	eax, DWORD PTR [esp+4]
	mov	eax, DWORD PTR [eax]
	jmp	DWORD PTR [eax+88]
??_9ID3D11DeviceContext@@$BFI@AG ENDP			; ID3D11DeviceContext::`vcall'{88}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_9ID3D11DeviceContext@@$BFM@AG
_TEXT	SEGMENT
??_9ID3D11DeviceContext@@$BFM@AG PROC			; ID3D11DeviceContext::`vcall'{92}', COMDAT
	mov	eax, DWORD PTR [esp+4]
	mov	eax, DWORD PTR [eax]
	jmp	DWORD PTR [eax+92]
??_9ID3D11DeviceContext@@$BFM@AG ENDP			; ID3D11DeviceContext::`vcall'{92}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_9ID3D11Device@@$BDA@AG
_TEXT	SEGMENT
??_9ID3D11Device@@$BDA@AG PROC				; ID3D11Device::`vcall'{48}', COMDAT
	mov	eax, DWORD PTR [esp+4]
	mov	eax, DWORD PTR [eax]
	jmp	DWORD PTR [eax+48]
??_9ID3D11Device@@$BDA@AG ENDP				; ID3D11Device::`vcall'{48}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_9ID3D11DeviceContext@@$BGE@AG
_TEXT	SEGMENT
??_9ID3D11DeviceContext@@$BGE@AG PROC			; ID3D11DeviceContext::`vcall'{100}', COMDAT
	mov	eax, DWORD PTR [esp+4]
	mov	eax, DWORD PTR [eax]
	jmp	DWORD PTR [eax+100]
??_9ID3D11DeviceContext@@$BGE@AG ENDP			; ID3D11DeviceContext::`vcall'{100}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_9ID3D11DeviceContext@@$BGI@AG
_TEXT	SEGMENT
??_9ID3D11DeviceContext@@$BGI@AG PROC			; ID3D11DeviceContext::`vcall'{104}', COMDAT
	mov	eax, DWORD PTR [esp+4]
	mov	eax, DWORD PTR [eax]
	jmp	DWORD PTR [eax+104]
??_9ID3D11DeviceContext@@$BGI@AG ENDP			; ID3D11DeviceContext::`vcall'{104}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_9ID3D11DeviceContext@@$BBM@AG
_TEXT	SEGMENT
??_9ID3D11DeviceContext@@$BBM@AG PROC			; ID3D11DeviceContext::`vcall'{28}', COMDAT
	mov	eax, DWORD PTR [esp+4]
	mov	eax, DWORD PTR [eax]
	jmp	DWORD PTR [eax+28]
??_9ID3D11DeviceContext@@$BBM@AG ENDP			; ID3D11DeviceContext::`vcall'{28}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_9ID3D11DeviceContext@@$BCM@AG
_TEXT	SEGMENT
??_9ID3D11DeviceContext@@$BCM@AG PROC			; ID3D11DeviceContext::`vcall'{44}', COMDAT
	mov	eax, DWORD PTR [esp+4]
	mov	eax, DWORD PTR [eax]
	jmp	DWORD PTR [eax+44]
??_9ID3D11DeviceContext@@$BCM@AG ENDP			; ID3D11DeviceContext::`vcall'{44}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_9ID3D11Device@@$BDM@AG
_TEXT	SEGMENT
??_9ID3D11Device@@$BDM@AG PROC				; ID3D11Device::`vcall'{60}', COMDAT
	mov	eax, DWORD PTR [esp+4]
	mov	eax, DWORD PTR [eax]
	jmp	DWORD PTR [eax+60]
??_9ID3D11Device@@$BDM@AG ENDP				; ID3D11Device::`vcall'{60}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_9ID3D11DeviceContext@@$BCA@AG
_TEXT	SEGMENT
??_9ID3D11DeviceContext@@$BCA@AG PROC			; ID3D11DeviceContext::`vcall'{32}', COMDAT
	mov	eax, DWORD PTR [esp+4]
	mov	eax, DWORD PTR [eax]
	jmp	DWORD PTR [eax+32]
??_9ID3D11DeviceContext@@$BCA@AG ENDP			; ID3D11DeviceContext::`vcall'{32}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_9ID3D11DeviceContext@@$BCI@AG
_TEXT	SEGMENT
??_9ID3D11DeviceContext@@$BCI@AG PROC			; ID3D11DeviceContext::`vcall'{40}', COMDAT
	mov	eax, DWORD PTR [esp+4]
	mov	eax, DWORD PTR [eax]
	jmp	DWORD PTR [eax+40]
??_9ID3D11DeviceContext@@$BCI@AG ENDP			; ID3D11DeviceContext::`vcall'{40}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_9ID3D11DeviceContext@@$BEA@AG
_TEXT	SEGMENT
??_9ID3D11DeviceContext@@$BEA@AG PROC			; ID3D11DeviceContext::`vcall'{64}', COMDAT
	mov	eax, DWORD PTR [esp+4]
	mov	eax, DWORD PTR [eax]
	jmp	DWORD PTR [eax+64]
??_9ID3D11DeviceContext@@$BEA@AG ENDP			; ID3D11DeviceContext::`vcall'{64}'
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_9ID3D11DeviceContext@@$BCE@AG
_TEXT	SEGMENT
??_9ID3D11DeviceContext@@$BCE@AG PROC			; ID3D11DeviceContext::`vcall'{36}', COMDAT
	mov	eax, DWORD PTR [esp+4]
	mov	eax, DWORD PTR [eax]
	jmp	DWORD PTR [eax+36]
??_9ID3D11DeviceContext@@$BCE@AG ENDP			; ID3D11DeviceContext::`vcall'{36}'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ??__Eg_NullDepthStencilView@D3DX11Effects@@YAXXZ
text$di	SEGMENT
??__Eg_NullDepthStencilView@D3DX11Effects@@YAXXZ PROC	; D3DX11Effects::`dynamic initializer for 'g_NullDepthStencilView'', COMDAT

; 28   : SDepthStencilView g_NullDepthStencilView;

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?g_NullDepthStencilView@D3DX11Effects@@3USDepthStencilView@1@A ; D3DX11Effects::g_NullDepthStencilView
	call	??0SDepthStencilView@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SDepthStencilView::SDepthStencilView
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eg_NullDepthStencilView@D3DX11Effects@@YAXXZ ENDP	; D3DX11Effects::`dynamic initializer for 'g_NullDepthStencilView''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ??__Eg_NullRenderTargetView@D3DX11Effects@@YAXXZ
text$di	SEGMENT
??__Eg_NullRenderTargetView@D3DX11Effects@@YAXXZ PROC	; D3DX11Effects::`dynamic initializer for 'g_NullRenderTargetView'', COMDAT

; 27   : SRenderTargetView g_NullRenderTargetView;

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?g_NullRenderTargetView@D3DX11Effects@@3USRenderTargetView@1@A ; D3DX11Effects::g_NullRenderTargetView
	call	??0SRenderTargetView@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SRenderTargetView::SRenderTargetView
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eg_NullRenderTargetView@D3DX11Effects@@YAXXZ ENDP	; D3DX11Effects::`dynamic initializer for 'g_NullRenderTargetView''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ??__Eg_NullUnorderedAccessView@D3DX11Effects@@YAXXZ
text$di	SEGMENT
??__Eg_NullUnorderedAccessView@D3DX11Effects@@YAXXZ PROC ; D3DX11Effects::`dynamic initializer for 'g_NullUnorderedAccessView'', COMDAT

; 26   : SUnorderedAccessView g_NullUnorderedAccessView;

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?g_NullUnorderedAccessView@D3DX11Effects@@3USUnorderedAccessView@1@A ; D3DX11Effects::g_NullUnorderedAccessView
	call	??0SUnorderedAccessView@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SUnorderedAccessView::SUnorderedAccessView
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eg_NullUnorderedAccessView@D3DX11Effects@@YAXXZ ENDP ; D3DX11Effects::`dynamic initializer for 'g_NullUnorderedAccessView''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ??__Eg_NullInterface@D3DX11Effects@@YAXXZ
text$di	SEGMENT
??__Eg_NullInterface@D3DX11Effects@@YAXXZ PROC		; D3DX11Effects::`dynamic initializer for 'g_NullInterface'', COMDAT

; 25   : SInterface g_NullInterface;

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?g_NullInterface@D3DX11Effects@@3USInterface@1@A ; D3DX11Effects::g_NullInterface
	call	??0SInterface@D3DX11Effects@@QAE@XZ	; D3DX11Effects::SInterface::SInterface
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eg_NullInterface@D3DX11Effects@@YAXXZ ENDP		; D3DX11Effects::`dynamic initializer for 'g_NullInterface''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ??__Eg_NullTexture@D3DX11Effects@@YAXXZ
text$di	SEGMENT
??__Eg_NullTexture@D3DX11Effects@@YAXXZ PROC		; D3DX11Effects::`dynamic initializer for 'g_NullTexture'', COMDAT

; 24   : SShaderResource g_NullTexture;

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?g_NullTexture@D3DX11Effects@@3USShaderResource@1@A ; D3DX11Effects::g_NullTexture
	call	??0SShaderResource@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SShaderResource::SShaderResource
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eg_NullTexture@D3DX11Effects@@YAXXZ ENDP		; D3DX11Effects::`dynamic initializer for 'g_NullTexture''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ??__Eg_NullBlend@D3DX11Effects@@YAXXZ
text$di	SEGMENT
??__Eg_NullBlend@D3DX11Effects@@YAXXZ PROC		; D3DX11Effects::`dynamic initializer for 'g_NullBlend'', COMDAT

; 23   : SBlendBlock g_NullBlend;

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?g_NullBlend@D3DX11Effects@@3USBlendBlock@1@A ; D3DX11Effects::g_NullBlend
	call	??0SBlendBlock@D3DX11Effects@@QAE@XZ	; D3DX11Effects::SBlendBlock::SBlendBlock
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eg_NullBlend@D3DX11Effects@@YAXXZ ENDP		; D3DX11Effects::`dynamic initializer for 'g_NullBlend''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ??__Eg_NullDepthStencil@D3DX11Effects@@YAXXZ
text$di	SEGMENT
??__Eg_NullDepthStencil@D3DX11Effects@@YAXXZ PROC	; D3DX11Effects::`dynamic initializer for 'g_NullDepthStencil'', COMDAT

; 22   : SDepthStencilBlock g_NullDepthStencil;

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?g_NullDepthStencil@D3DX11Effects@@3USDepthStencilBlock@1@A ; D3DX11Effects::g_NullDepthStencil
	call	??0SDepthStencilBlock@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SDepthStencilBlock::SDepthStencilBlock
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eg_NullDepthStencil@D3DX11Effects@@YAXXZ ENDP	; D3DX11Effects::`dynamic initializer for 'g_NullDepthStencil''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ??__Eg_NullRasterizer@D3DX11Effects@@YAXXZ
text$di	SEGMENT
??__Eg_NullRasterizer@D3DX11Effects@@YAXXZ PROC		; D3DX11Effects::`dynamic initializer for 'g_NullRasterizer'', COMDAT

; 21   : SRasterizerBlock g_NullRasterizer;

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?g_NullRasterizer@D3DX11Effects@@3USRasterizerBlock@1@A ; D3DX11Effects::g_NullRasterizer
	call	??0SRasterizerBlock@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SRasterizerBlock::SRasterizerBlock
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eg_NullRasterizer@D3DX11Effects@@YAXXZ ENDP		; D3DX11Effects::`dynamic initializer for 'g_NullRasterizer''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\binary\effectstates11.h
;	COMDAT ??__Eg_lvGeneral@D3DX11Effects@@YAXXZ
text$di	SEGMENT
??__Eg_lvGeneral@D3DX11Effects@@YAXXZ PROC		; D3DX11Effects::`dynamic initializer for 'g_lvGeneral'', COMDAT

; 229  : };

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, 8
	add	eax, 20					; 00000014H
	mov	ecx, 32					; 00000020H
	shl	ecx, 0
	add	eax, ecx
	mov	edx, 8
	add	edx, 20					; 00000014H
	mov	ecx, 32					; 00000020H
	imul	ecx, ecx, 0
	add	edx, ecx
	sub	eax, edx
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1516, eax
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1520, OFFSET ??_C@_08FHHACIOE@SrcBlend?$AA@
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1524, 2
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1528, 19 ; 00000013H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1532, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1536, 8
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1540, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1544, OFFSET _g_rvBLEND
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1548, 327682 ; 00050002H
	mov	eax, 8
	add	eax, 20					; 00000014H
	mov	ecx, 32					; 00000020H
	imul	edx, ecx, 0
	lea	eax, DWORD PTR [eax+edx+4]
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1552, eax
	mov	eax, 8
	add	eax, 20					; 00000014H
	mov	ecx, 32					; 00000020H
	shl	ecx, 0
	add	eax, ecx
	mov	edx, 8
	add	edx, 20					; 00000014H
	mov	ecx, 32					; 00000020H
	imul	ecx, ecx, 0
	add	edx, ecx
	sub	eax, edx
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1556, eax
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1560, OFFSET ??_C@_09PGFKOIGA@DestBlend?$AA@
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1564, 2
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1568, 19 ; 00000013H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1572, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1576, 8
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1580, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1584, OFFSET _g_rvBLEND
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1588, 327683 ; 00050003H
	mov	eax, 8
	add	eax, 20					; 00000014H
	mov	ecx, 32					; 00000020H
	imul	edx, ecx, 0
	lea	eax, DWORD PTR [eax+edx+8]
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1592, eax
	mov	eax, 8
	add	eax, 20					; 00000014H
	mov	ecx, 32					; 00000020H
	shl	ecx, 0
	add	eax, ecx
	mov	edx, 8
	add	edx, 20					; 00000014H
	mov	ecx, 32					; 00000020H
	imul	ecx, ecx, 0
	add	edx, ecx
	sub	eax, edx
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1596, eax
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1600, OFFSET ??_C@_07CDPFEHAN@BlendOp?$AA@
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1604, 2
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1608, 19 ; 00000013H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1612, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1616, 8
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1620, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1624, OFFSET _g_rvBLENDOP
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1628, 327684 ; 00050004H
	mov	eax, 8
	add	eax, 20					; 00000014H
	mov	ecx, 32					; 00000020H
	imul	edx, ecx, 0
	lea	eax, DWORD PTR [eax+edx+12]
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1632, eax
	mov	eax, 8
	add	eax, 20					; 00000014H
	mov	ecx, 32					; 00000020H
	shl	ecx, 0
	add	eax, ecx
	mov	edx, 8
	add	edx, 20					; 00000014H
	mov	ecx, 32					; 00000020H
	imul	ecx, ecx, 0
	add	edx, ecx
	sub	eax, edx
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1636, eax
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1640, OFFSET ??_C@_0O@NAACGGGK@SrcBlendAlpha?$AA@
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1644, 2
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1648, 19 ; 00000013H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1652, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1656, 8
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1660, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1664, OFFSET _g_rvBLEND
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1668, 327685 ; 00050005H
	mov	eax, 8
	add	eax, 20					; 00000014H
	mov	ecx, 32					; 00000020H
	imul	edx, ecx, 0
	lea	eax, DWORD PTR [eax+edx+16]
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1672, eax
	mov	eax, 8
	add	eax, 20					; 00000014H
	mov	ecx, 32					; 00000020H
	shl	ecx, 0
	add	eax, ecx
	mov	edx, 8
	add	edx, 20					; 00000014H
	mov	ecx, 32					; 00000020H
	imul	ecx, ecx, 0
	add	edx, ecx
	sub	eax, edx
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1676, eax
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1680, OFFSET ??_C@_0P@GAOPNAKA@DestBlendAlpha?$AA@
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1684, 2
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1688, 19 ; 00000013H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1692, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1696, 8
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1700, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1704, OFFSET _g_rvBLEND
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1708, 327686 ; 00050006H
	mov	eax, 8
	add	eax, 20					; 00000014H
	mov	ecx, 32					; 00000020H
	imul	edx, ecx, 0
	lea	eax, DWORD PTR [eax+edx+20]
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1712, eax
	mov	eax, 8
	add	eax, 20					; 00000014H
	mov	ecx, 32					; 00000020H
	shl	ecx, 0
	add	eax, ecx
	mov	edx, 8
	add	edx, 20					; 00000014H
	mov	ecx, 32					; 00000020H
	imul	ecx, ecx, 0
	add	edx, ecx
	sub	eax, edx
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1716, eax
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1720, OFFSET ??_C@_0N@DKCOEBAI@BlendOpAlpha?$AA@
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1724, 2
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1728, 19 ; 00000013H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1732, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1736, 8
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1740, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1744, OFFSET _g_rvBLENDOP
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1748, 327687 ; 00050007H
	mov	eax, 8
	add	eax, 20					; 00000014H
	mov	ecx, 32					; 00000020H
	imul	edx, ecx, 0
	lea	eax, DWORD PTR [eax+edx+24]
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1752, eax
	mov	eax, 8
	add	eax, 20					; 00000014H
	mov	ecx, 32					; 00000020H
	shl	ecx, 0
	add	eax, ecx
	mov	edx, 8
	add	edx, 20					; 00000014H
	mov	ecx, 32					; 00000020H
	imul	ecx, ecx, 0
	add	edx, ecx
	sub	eax, edx
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1756, eax
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1760, OFFSET ??_C@_0BG@GLNCJOAF@RenderTargetWriteMask?$AA@
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1764, 2
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1768, 20 ; 00000014H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1772, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1776, 8
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1780, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1784, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1788, 327688 ; 00050008H
	mov	eax, 8
	add	eax, 20					; 00000014H
	mov	ecx, 32					; 00000020H
	imul	edx, ecx, 0
	lea	eax, DWORD PTR [eax+edx+28]
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1792, eax
	mov	eax, 8
	add	eax, 20					; 00000014H
	mov	ecx, 32					; 00000020H
	shl	ecx, 0
	add	eax, ecx
	mov	edx, 8
	add	edx, 20					; 00000014H
	mov	ecx, 32					; 00000020H
	imul	ecx, ecx, 0
	add	edx, ecx
	sub	eax, edx
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1796, eax
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1800, OFFSET ??_C@_06IBDJIBGI@Filter?$AA@
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1804, 4
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1808, 19 ; 00000013H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1812, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1816, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1820, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1824, OFFSET _g_rvFILTER
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1828, 196608 ; 00030000H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1832, 20 ; 00000014H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1836, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1840, OFFSET ??_C@_08EIOBODP@AddressU?$AA@
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1844, 4
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1848, 19 ; 00000013H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1852, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1856, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1860, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1864, OFFSET _g_rvTADDRESS
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1868, 196609 ; 00030001H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1872, 24 ; 00000018H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1876, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1880, OFFSET ??_C@_08CPKDENPM@AddressV?$AA@
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1884, 4
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1888, 19 ; 00000013H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1892, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1896, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1900, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1904, OFFSET _g_rvTADDRESS
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1908, 196610 ; 00030002H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1912, 28 ; 0000001cH
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1916, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1920, OFFSET ??_C@_08DGLIHMLN@AddressW?$AA@
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1924, 4
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1928, 19 ; 00000013H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1932, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1936, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1940, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1944, OFFSET _g_rvTADDRESS
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1948, 196611 ; 00030003H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1952, 32 ; 00000020H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1956, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1960, OFFSET ??_C@_0L@CFFHFEFO@MipLODBias?$AA@
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1964, 4
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1968, 3
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1972, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1976, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1980, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1984, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1988, 196612 ; 00030004H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1992, 36 ; 00000024H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+1996, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2000, OFFSET ??_C@_0O@IEMFCLON@MaxAnisotropy?$AA@
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2004, 4
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2008, 19 ; 00000013H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2012, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2016, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2020, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2024, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2028, 196613 ; 00030005H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2032, 40 ; 00000028H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2036, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2040, OFFSET ??_C@_0P@DNEECBOJ@ComparisonFunc?$AA@
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2044, 4
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2048, 19 ; 00000013H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2052, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2056, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2060, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2064, OFFSET _g_rvCMP
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2068, 196614 ; 00030006H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2072, 44 ; 0000002cH
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2076, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2080, OFFSET ??_C@_0M@DGENNPFN@BorderColor?$AA@
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2084, 4
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2088, 3
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2092, 4
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2096, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2100, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2104, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2108, 196615 ; 00030007H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2112, 48 ; 00000030H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2116, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2120, OFFSET ??_C@_06HAKHAEPP@MinLOD?$AA@
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2124, 4
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2128, 3
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2132, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2136, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2140, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2144, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2148, 196616 ; 00030008H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2152, 64 ; 00000040H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2156, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2160, OFFSET ??_C@_06HDFEOELA@MaxLOD?$AA@
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2164, 4
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2168, 3
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2172, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2176, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2180, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2184, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2188, 196617 ; 00030009H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2192, 68 ; 00000044H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2196, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2200, OFFSET ??_C@_07GKACAEDJ@Texture?$AA@
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2204, 4
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2208, 5
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2212, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2216, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2220, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2224, OFFSET _g_rvNULL
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2228, 196618 ; 0003000aH
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2232, 72 ; 00000048H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2236, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2240, OFFSET ??_C@_0L@GABJGNCK@HullShader?$AA@
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2244, 5
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2248, 35 ; 00000023H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2252, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2256, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2260, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2264, OFFSET _g_rvNULL
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2268, 15 ; 0000000fH
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2272, 128 ; 00000080H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2276, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2280, OFFSET ??_C@_0N@PCCENCDF@DomainShader?$AA@
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2284, 5
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2288, 36 ; 00000024H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2292, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2296, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2300, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2304, OFFSET _g_rvNULL
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2308, 16 ; 00000010H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2312, 124 ; 0000007cH
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2316, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2320, OFFSET ??_C@_0O@OCHNEELN@ComputeShader?$AA@
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2324, 5
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2328, 38 ; 00000026H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2332, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2336, 1
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2340, 0
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2344, OFFSET _g_rvNULL
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2348, 14 ; 0000000eH
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2352, 120 ; 00000078H
	mov	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B+2356, 0
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eg_lvGeneral@D3DX11Effects@@YAXXZ ENDP		; D3DX11Effects::`dynamic initializer for 'g_lvGeneral''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1CEffectLoader@D3DX11Effects@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1CEffectLoader@D3DX11Effects@@QAE@XZ PROC		; D3DX11Effects::CEffectLoader::~CEffectLoader, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CEffectLoader@D3DX11Effects@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	??1?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAE@XZ ; CEffectVector<D3DX11Effects::SInterface *>::~CEffectVector<D3DX11Effects::SInterface *>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??1?$CEffectVector@E@@QAE@XZ		; CEffectVector<unsigned char>::~CEffectVector<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??1CMemoryStream@D3DX11Core@@QAE@XZ	; D3DX11Core::CMemoryStream::~CMemoryStream
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??1CMemoryStream@D3DX11Core@@QAE@XZ	; D3DX11Core::CMemoryStream::~CMemoryStream
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDataBlockStore@@QAE@XZ		; CDataBlockStore::~CDataBlockStore
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CEffectLoader@D3DX11Effects@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CDataBlockStore@@QAE@XZ		; CDataBlockStore::~CDataBlockStore
__unwindfunclet$??1CEffectLoader@D3DX11Effects@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1CMemoryStream@D3DX11Core@@QAE@XZ	; D3DX11Core::CMemoryStream::~CMemoryStream
__unwindfunclet$??1CEffectLoader@D3DX11Effects@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	??1CMemoryStream@D3DX11Core@@QAE@XZ	; D3DX11Core::CMemoryStream::~CMemoryStream
__unwindfunclet$??1CEffectLoader@D3DX11Effects@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	jmp	??1?$CEffectVector@E@@QAE@XZ		; CEffectVector<unsigned char>::~CEffectVector<unsigned char>
__ehhandler$??1CEffectLoader@D3DX11Effects@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CEffectLoader@D3DX11Effects@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CEffectLoader@D3DX11Effects@@QAE@XZ ENDP		; D3DX11Effects::CEffectLoader::~CEffectLoader
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0CEffectLoader@D3DX11Effects@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0CEffectLoader@D3DX11Effects@@QAE@XZ PROC		; D3DX11Effects::CEffectLoader::CEffectLoader, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CEffectLoader@D3DX11Effects@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CDataBlockStore@@QAE@XZ		; CDataBlockStore::CDataBlockStore
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0CMemoryStream@D3DX11Core@@QAE@XZ	; D3DX11Core::CMemoryStream::CMemoryStream
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??0CMemoryStream@D3DX11Core@@QAE@XZ	; D3DX11Core::CMemoryStream::CMemoryStream
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??0?$CEffectVector@E@@QAE@XZ		; CEffectVector<unsigned char>::CEffectVector<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	??0?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAE@XZ ; CEffectVector<D3DX11Effects::SInterface *>::CEffectVector<D3DX11Effects::SInterface *>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CEffectLoader@D3DX11Effects@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CDataBlockStore@@QAE@XZ		; CDataBlockStore::~CDataBlockStore
__unwindfunclet$??0CEffectLoader@D3DX11Effects@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1CMemoryStream@D3DX11Core@@QAE@XZ	; D3DX11Core::CMemoryStream::~CMemoryStream
__unwindfunclet$??0CEffectLoader@D3DX11Effects@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	??1CMemoryStream@D3DX11Core@@QAE@XZ	; D3DX11Core::CMemoryStream::~CMemoryStream
__unwindfunclet$??0CEffectLoader@D3DX11Effects@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	jmp	??1?$CEffectVector@E@@QAE@XZ		; CEffectVector<unsigned char>::~CEffectVector<unsigned char>
__ehhandler$??0CEffectLoader@D3DX11Effects@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CEffectLoader@D3DX11Effects@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CEffectLoader@D3DX11Effects@@QAE@XZ ENDP		; D3DX11Effects::CEffectLoader::CEffectLoader
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z
_TEXT	SEGMENT
tv817 = -1192						; size = 4
tv790 = -1192						; size = 4
tv751 = -1192						; size = 4
tv696 = -1192						; size = 4
tv673 = -1192						; size = 4
tv646 = -1192						; size = 4
tv619 = -1192						; size = 4
tv592 = -1192						; size = 4
tv569 = -1192						; size = 4
tv535 = -1192						; size = 4
tv508 = -1192						; size = 4
tv481 = -1192						; size = 4
tv454 = -1192						; size = 4
tv427 = -1192						; size = 4
tv161 = -1192						; size = 4
tv149 = -1192						; size = 4
tv137 = -1192						; size = 4
tv90 = -1192						; size = 4
$T2 = -1184						; size = 4
$T3 = -1172						; size = 4
$T4 = -1160						; size = 4
$T5 = -1148						; size = 4
$T6 = -1136						; size = 4
$T7 = -1124						; size = 4
$T8 = -1112						; size = 4
$T9 = -1100						; size = 4
$T10 = -1088						; size = 4
$T11 = -1076						; size = 8
$T12 = -1060						; size = 8
$T13 = -1044						; size = 8
$T14 = -1028						; size = 8
$T15 = -1012						; size = 4
$T16 = -1000						; size = 8
$T17 = -984						; size = 8
$T18 = -968						; size = 8
$T19 = -952						; size = 8
$T20 = -936						; size = 8
$T21 = -920						; size = 8
$T22 = -904						; size = 8
$T23 = -888						; size = 4
$T24 = -876						; size = 4
$T25 = -864						; size = 4
$T26 = -852						; size = 4
$T27 = -840						; size = 4
$T28 = -828						; size = 4
$T29 = -816						; size = 4
$T30 = -804						; size = 4
$T31 = -792						; size = 4
$T32 = -780						; size = 4
$T33 = -768						; size = 4
$T34 = -756						; size = 4
$T35 = -744						; size = 4
$T36 = -732						; size = 4
$T37 = -720						; size = 4
$T38 = -708						; size = 4
$T39 = -696						; size = 4
$T40 = -684						; size = 4
$T41 = -672						; size = 4
$T42 = -660						; size = 4
$T43 = -648						; size = 4
$T44 = -636						; size = 4
$T45 = -624						; size = 4
$T46 = -612						; size = 4
$T47 = -600						; size = 4
$T48 = -588						; size = 4
$T49 = -576						; size = 4
$T50 = -564						; size = 4
$T51 = -552						; size = 4
$T52 = -540						; size = 4
$T53 = -528						; size = 4
$T54 = -516						; size = 4
$T55 = -504						; size = 4
$T56 = -492						; size = 4
$T57 = -480						; size = 4
$T58 = -468						; size = 4
$T59 = -456						; size = 4
$T60 = -444						; size = 4
$T61 = -432						; size = 4
$T62 = -420						; size = 4
$T63 = -408						; size = 4
$T64 = -396						; size = 4
$T65 = -384						; size = 4
$T66 = -372						; size = 4
_pPass$67 = -168					; size = 4
_iPass$68 = -156					; size = 4
_pTech$69 = -144					; size = 4
_iTechnique$70 = -132					; size = 4
_pGroup$71 = -120					; size = 4
_iGroup$72 = -108					; size = 4
_oStructured$ = -96					; size = 4
_chkVariables$ = -84					; size = 8
_cMemberDataBlocks$ = -68				; size = 4
_varSize$ = -56						; size = 4
_i$ = -44						; size = 4
_hr$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pEffect$ = 8						; size = 4
_pEffectBuffer$ = 12					; size = 4
_cbEffectBuffer$ = 16					; size = 4
?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z PROC ; D3DX11Effects::CEffectLoader::LoadEffect, COMDAT
; _this$ = ecx

; 736  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1180				; 0000049cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1192]
	mov	ecx, 295				; 00000127H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 737  :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 738  :     UINT  i, varSize, cMemberDataBlocks;
; 739  :     CCheckedDword chkVariables = 0;

	mov	DWORD PTR $T2[ebp], 0
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR _chkVariables$[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>

; 740  : 
; 741  :     // Used for cloning
; 742  :     m_pvOldMemberInterfaces = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+172], 0

; 743  : 
; 744  :     m_BulkHeap.EnableAlignment();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EnableAlignment@CDataBlockStore@@QAEXXZ ; CDataBlockStore::EnableAlignment
$LN128@LoadEffect:

; 745  : 
; 746  :     D3DXASSERT(pEffect && pEffectBuffer);

	cmp	DWORD PTR _pEffect$[ebp], 0
	je	SHORT $LN124@LoadEffect
	cmp	DWORD PTR _pEffectBuffer$[ebp], 0
	jne	SHORT $LN127@LoadEffect
$LN124@LoadEffect:
	push	OFFSET ??_C@_0BJ@CKANEIJE@pEffect?5?$CG?$CG?5pEffectBuffer?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@3@PBXI@Z@4JA
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN127@LoadEffect:
	xor	eax, eax
	jne	SHORT $LN128@LoadEffect

; 747  :     m_pEffect = pEffect;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pEffect$[ebp]
	mov	DWORD PTR [eax+36], ecx

; 748  :     m_EffectMemory = m_ReflectionMemory = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+184], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+180], 0

; 749  : 
; 750  :     VN( m_pEffect->m_pReflection = NEW CEffectReflection() );

	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	push	12					; 0000000cH
	call	??2@YAPAXIABUnothrow_t@std@@@Z		; operator new
	add	esp, 8
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN131@LoadEffect
	mov	ecx, DWORD PTR $T4[ebp]
	call	??0CEffectReflection@D3DX11Effects@@QAE@XZ
	mov	DWORD PTR tv90[ebp], eax
	jmp	SHORT $LN132@LoadEffect
$LN131@LoadEffect:
	mov	DWORD PTR tv90[ebp], 0
$LN132@LoadEffect:
	mov	eax, DWORD PTR tv90[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR [edx+24], eax
	cmp	DWORD PTR $T3[ebp], 0
	jne	SHORT $LN123@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$191
$LN123@LoadEffect:

; 751  :     m_pReflection = m_pEffect->m_pReflection;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+24]
	mov	DWORD PTR [edx+40], eax

; 752  : 
; 753  :     // Begin effect load
; 754  :     VN( m_pEffect->m_pTypePool = NEW CEffect::CTypeHashTable );

	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	push	20					; 00000014H
	call	??2@YAPAXIABUnothrow_t@std@@@Z		; operator new
	add	esp, 8
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN133@LoadEffect
	mov	ecx, DWORD PTR $T6[ebp]
	call	??0?$CEffectHashTableWithPrivateHeap@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAE@XZ ; CEffectHashTableWithPrivateHeap<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::CEffectHashTableWithPrivateHeap<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>
	mov	DWORD PTR tv137[ebp], eax
	jmp	SHORT $LN134@LoadEffect
$LN133@LoadEffect:
	mov	DWORD PTR tv137[ebp], 0
$LN134@LoadEffect:
	mov	eax, DWORD PTR tv137[ebp]
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T5[ebp]
	mov	DWORD PTR [edx+224], eax
	cmp	DWORD PTR $T5[ebp], 0
	jne	SHORT $LN121@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$191
$LN121@LoadEffect:

; 755  :     VN( m_pEffect->m_pStringPool = NEW CEffect::CStringHashTable );

	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	push	20					; 00000014H
	call	??2@YAPAXIABUnothrow_t@std@@@Z		; operator new
	add	esp, 8
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN135@LoadEffect
	mov	ecx, DWORD PTR $T8[ebp]
	call	??0?$CEffectHashTableWithPrivateHeap@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAE@XZ ; CEffectHashTableWithPrivateHeap<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::CEffectHashTableWithPrivateHeap<char const *,&D3DX11Effects::CEffect::AreStringsEqual>
	mov	DWORD PTR tv149[ebp], eax
	jmp	SHORT $LN136@LoadEffect
$LN135@LoadEffect:
	mov	DWORD PTR tv149[ebp], 0
$LN136@LoadEffect:
	mov	eax, DWORD PTR tv149[ebp]
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T7[ebp]
	mov	DWORD PTR [edx+228], eax
	cmp	DWORD PTR $T7[ebp], 0
	jne	SHORT $LN119@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$191
$LN119@LoadEffect:

; 756  :     VN( m_pEffect->m_pPooledHeap = NEW CDataBlockStore );

	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	push	24					; 00000018H
	call	??2@YAPAXIABUnothrow_t@std@@@Z		; operator new
	add	esp, 8
	mov	DWORD PTR $T10[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN137@LoadEffect
	mov	ecx, DWORD PTR $T10[ebp]
	call	??0CDataBlockStore@@QAE@XZ		; CDataBlockStore::CDataBlockStore
	mov	DWORD PTR tv161[ebp], eax
	jmp	SHORT $LN138@LoadEffect
$LN137@LoadEffect:
	mov	DWORD PTR tv161[ebp], 0
$LN138@LoadEffect:
	mov	eax, DWORD PTR tv161[ebp]
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T9[ebp]
	mov	DWORD PTR [edx+232], eax
	cmp	DWORD PTR $T9[ebp], 0
	jne	SHORT $LN117@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$191
$LN117@LoadEffect:

; 757  :     m_pEffect->m_pPooledHeap->EnableAlignment();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR [ecx+232]
	call	?EnableAlignment@CDataBlockStore@@QAEXXZ ; CDataBlockStore::EnableAlignment

; 758  :     m_pEffect->m_pTypePool->SetPrivateHeap(m_pEffect->m_pPooledHeap);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+232]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR [ecx+224]
	call	?SetPrivateHeap@?$CEffectHashTableWithPrivateHeap@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEXPAVCDataBlockStore@@@Z ; CEffectHashTableWithPrivateHeap<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::SetPrivateHeap

; 759  :     m_pEffect->m_pStringPool->SetPrivateHeap(m_pEffect->m_pPooledHeap);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+232]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR [ecx+228]
	call	?SetPrivateHeap@?$CEffectHashTableWithPrivateHeap@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEXPAVCDataBlockStore@@@Z ; CEffectHashTableWithPrivateHeap<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::SetPrivateHeap

; 760  : 
; 761  :     VH( m_pEffect->m_pTypePool->AutoGrow() );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR [ecx+224]
	call	?AutoGrow@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEJXZ ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::AutoGrow
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN115@LoadEffect
	jmp	$lExit$191
$LN115@LoadEffect:

; 762  :     VH( m_pEffect->m_pStringPool->AutoGrow() );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR [ecx+228]
	call	?AutoGrow@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEJXZ ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::AutoGrow
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN113@LoadEffect
	jmp	$lExit$191
$LN113@LoadEffect:

; 763  : 
; 764  :     // Load from blob
; 765  :     m_pData = (BYTE*)pEffectBuffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pEffectBuffer$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 766  :     m_dwBufferSize = cbEffectBuffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cbEffectBuffer$[ebp]
	mov	DWORD PTR [eax+88], ecx

; 767  : 
; 768  :     VH( m_msStructured.SetData(m_pData, m_dwBufferSize) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?SetData@CMemoryStream@D3DX11Core@@QAEJPBXK@Z ; D3DX11Core::CMemoryStream::SetData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN111@LoadEffect
	jmp	$lExit$191
$LN111@LoadEffect:

; 769  : 
; 770  :     // At this point, we assume that the blob is valid
; 771  :     VHD( m_msStructured.Read((void**) &m_pHeader, sizeof(*m_pHeader)), "pEffectBuffer is too small." );

	push	96					; 00000060H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAPAXK@Z ; D3DX11Core::CMemoryStream::Read
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN109@LoadEffect
	jmp	$lExit$191
$LN109@LoadEffect:

; 772  : 
; 773  :     // Verify the version
; 774  :     if( FAILED( hr = GetEffectVersion( m_pHeader->Tag, &m_Version ) ) )

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?GetEffectVersion@D3DX11Effects@@YAJIPAK@Z ; D3DX11Effects::GetEffectVersion
	add	esp, 8
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN107@LoadEffect

; 775  :     {
; 776  :         DPF(0, "Effect version is unrecognized.  This runtime supports fx_5_0 to %s.", g_EffectVersions[NUM_EFFECT10_VERSIONS-1].m_pName );
; 777  :         VH( hr );

	mov	eax, DWORD PTR _hr$[ebp]
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN107@LoadEffect
	jmp	$lExit$191
$LN107@LoadEffect:

; 778  :     }
; 779  : 
; 780  :     if( m_pHeader->RequiresPool() || m_pHeader->Pool.cObjectVariables > 0 || m_pHeader->Pool.cNumericVariables > 0 )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	call	?RequiresPool@SBinaryHeader@D3DX11Effects@@QBE_NXZ ; D3DX11Effects::SBinaryHeader::RequiresPool
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN103@LoadEffect
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+24], 0
	ja	SHORT $LN103@LoadEffect
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+20], 0
	jbe	SHORT $LN104@LoadEffect
$LN103@LoadEffect:

; 781  :     {
; 782  :         DPF(0, "Effect11 does not support EffectPools." );
; 783  :         VH( E_FAIL );

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN104@LoadEffect
	jmp	$lExit$191
$LN104@LoadEffect:

; 784  :     }
; 785  : 
; 786  :     // Get shader block count
; 787  :     VBD( m_pHeader->cInlineShaders <= m_pHeader->cTotalShaders, "Invalid Effect header: cInlineShaders > cTotalShaders." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [ecx+72]
	cmp	ecx, DWORD PTR [eax+68]
	jbe	SHORT $LN100@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$191
$LN100@LoadEffect:

; 788  : 
; 789  :     // Make sure the counts for the Effect don't overflow
; 790  :     chkVariables = m_pHeader->Effect.cObjectVariables;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 12					; 0000000cH
	push	ecx
	lea	ecx, DWORD PTR $T11[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
	mov	edx, DWORD PTR $T11[ebp]
	mov	DWORD PTR _chkVariables$[ebp], edx
	mov	eax, DWORD PTR $T11[ebp+4]
	mov	DWORD PTR _chkVariables$[ebp+4], eax

; 791  :     chkVariables += m_pHeader->Effect.cNumericVariables;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 8
	push	ecx
	lea	ecx, DWORD PTR $T12[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
	lea	edx, DWORD PTR $T12[ebp]
	push	edx
	lea	ecx, DWORD PTR _chkVariables$[ebp]
	call	??Y?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z ; CheckedNumber<unsigned int,4294967295>::operator+=

; 792  :     chkVariables += m_pHeader->cInterfaceVariables;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 84					; 00000054H
	push	ecx
	lea	ecx, DWORD PTR $T13[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
	lea	edx, DWORD PTR $T13[ebp]
	push	edx
	lea	ecx, DWORD PTR _chkVariables$[ebp]
	call	??Y?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z ; CheckedNumber<unsigned int,4294967295>::operator+=

; 793  :     chkVariables *= sizeof(SGlobalVariable);

	mov	DWORD PTR $T15[ebp], 48			; 00000030H
	lea	eax, DWORD PTR $T15[ebp]
	push	eax
	lea	ecx, DWORD PTR $T14[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
	lea	ecx, DWORD PTR $T14[ebp]
	push	ecx
	lea	ecx, DWORD PTR _chkVariables$[ebp]
	call	??X?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z ; CheckedNumber<unsigned int,4294967295>::operator*=

; 794  :     VH( chkVariables.GetValue(&varSize) );

	lea	eax, DWORD PTR _varSize$[ebp]
	push	eax
	lea	ecx, DWORD PTR _chkVariables$[ebp]
	call	?GetValue@?$CheckedNumber@I$0PPPPPPPP@@@QAEJPAI@Z ; CheckedNumber<unsigned int,4294967295>::GetValue
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN98@LoadEffect
	jmp	$lExit$191
$LN98@LoadEffect:

; 795  : 
; 796  :     // Make sure the counts for the SMemberDataPointers don't overflow
; 797  :     chkVariables = m_pHeader->cClassInstanceElements;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 92					; 0000005cH
	push	ecx
	lea	ecx, DWORD PTR $T16[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
	mov	edx, DWORD PTR $T16[ebp]
	mov	DWORD PTR _chkVariables$[ebp], edx
	mov	eax, DWORD PTR $T16[ebp+4]
	mov	DWORD PTR _chkVariables$[ebp+4], eax

; 798  :     chkVariables += m_pHeader->cBlendStateBlocks;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 48					; 00000030H
	push	ecx
	lea	ecx, DWORD PTR $T17[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
	lea	edx, DWORD PTR $T17[ebp]
	push	edx
	lea	ecx, DWORD PTR _chkVariables$[ebp]
	call	??Y?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z ; CheckedNumber<unsigned int,4294967295>::operator+=

; 799  :     chkVariables += m_pHeader->cRasterizerStateBlocks;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 52					; 00000034H
	push	ecx
	lea	ecx, DWORD PTR $T18[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
	lea	edx, DWORD PTR $T18[ebp]
	push	edx
	lea	ecx, DWORD PTR _chkVariables$[ebp]
	call	??Y?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z ; CheckedNumber<unsigned int,4294967295>::operator+=

; 800  :     chkVariables += m_pHeader->cDepthStencilBlocks;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 44					; 0000002cH
	push	ecx
	lea	ecx, DWORD PTR $T19[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
	lea	edx, DWORD PTR $T19[ebp]
	push	edx
	lea	ecx, DWORD PTR _chkVariables$[ebp]
	call	??Y?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z ; CheckedNumber<unsigned int,4294967295>::operator+=

; 801  :     chkVariables += m_pHeader->cSamplers;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 56					; 00000038H
	push	ecx
	lea	ecx, DWORD PTR $T20[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
	lea	edx, DWORD PTR $T20[ebp]
	push	edx
	lea	ecx, DWORD PTR _chkVariables$[ebp]
	call	??Y?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z ; CheckedNumber<unsigned int,4294967295>::operator+=

; 802  :     chkVariables += m_pHeader->Effect.cCBs; // Buffer (for CBuffers and TBuffers)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 4
	push	ecx
	lea	ecx, DWORD PTR $T21[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
	lea	edx, DWORD PTR $T21[ebp]
	push	edx
	lea	ecx, DWORD PTR _chkVariables$[ebp]
	call	??Y?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z ; CheckedNumber<unsigned int,4294967295>::operator+=

; 803  :     chkVariables += m_pHeader->Effect.cCBs; // SRV (for TBuffers)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 4
	push	ecx
	lea	ecx, DWORD PTR $T22[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
	lea	edx, DWORD PTR $T22[ebp]
	push	edx
	lea	ecx, DWORD PTR _chkVariables$[ebp]
	call	??Y?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z ; CheckedNumber<unsigned int,4294967295>::operator+=

; 804  :     VHD( chkVariables.GetValue(&cMemberDataBlocks), "Overflow: too many Effect variables." );

	lea	eax, DWORD PTR _cMemberDataBlocks$[ebp]
	push	eax
	lea	ecx, DWORD PTR _chkVariables$[ebp]
	call	?GetValue@?$CheckedNumber@I$0PPPPPPPP@@@QAEJPAI@Z ; CheckedNumber<unsigned int,4294967295>::GetValue
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN96@LoadEffect
	jmp	$lExit$191
$LN96@LoadEffect:

; 805  : 
; 806  :     // Allocate effect resources
; 807  :     VN( m_pEffect->m_pCBs = PRIVATENEW SConstantBuffer[m_pHeader->Effect.cCBs] );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T23[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T23[ebp]
	mov	edx, 60					; 0000003cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T25[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T25[ebp], 0
	je	SHORT $LN139@LoadEffect
	push	OFFSET ??0SConstantBuffer@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SConstantBuffer::SConstantBuffer
	mov	eax, DWORD PTR $T23[ebp]
	push	eax
	push	60					; 0000003cH
	mov	ecx, DWORD PTR $T25[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T25[ebp]
	mov	DWORD PTR tv427[ebp], edx
	jmp	SHORT $LN140@LoadEffect
$LN139@LoadEffect:
	mov	DWORD PTR tv427[ebp], 0
$LN140@LoadEffect:
	mov	eax, DWORD PTR tv427[ebp]
	mov	DWORD PTR $T24[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T24[ebp]
	mov	DWORD PTR [edx+120], eax
	cmp	DWORD PTR $T24[ebp], 0
	jne	SHORT $LN94@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$191
$LN94@LoadEffect:

; 808  :     VN( m_pEffect->m_pDepthStencilBlocks = PRIVATENEW SDepthStencilBlock[m_pHeader->cDepthStencilBlocks] );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR $T26[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T26[ebp]
	mov	edx, 76					; 0000004cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T28[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T28[ebp], 0
	je	SHORT $LN141@LoadEffect
	push	OFFSET ??0SDepthStencilBlock@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SDepthStencilBlock::SDepthStencilBlock
	mov	eax, DWORD PTR $T26[ebp]
	push	eax
	push	76					; 0000004cH
	mov	ecx, DWORD PTR $T28[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T28[ebp]
	mov	DWORD PTR tv454[ebp], edx
	jmp	SHORT $LN142@LoadEffect
$LN141@LoadEffect:
	mov	DWORD PTR tv454[ebp], 0
$LN142@LoadEffect:
	mov	eax, DWORD PTR tv454[ebp]
	mov	DWORD PTR $T27[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T27[ebp]
	mov	DWORD PTR [edx+72], eax
	cmp	DWORD PTR $T27[ebp], 0
	jne	SHORT $LN92@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$191
$LN92@LoadEffect:

; 809  :     VN( m_pEffect->m_pRasterizerBlocks = PRIVATENEW SRasterizerBlock[m_pHeader->cRasterizerStateBlocks] );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR $T29[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T29[ebp]
	mov	edx, 64					; 00000040H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T31[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 6
	cmp	DWORD PTR $T31[ebp], 0
	je	SHORT $LN143@LoadEffect
	push	OFFSET ??0SRasterizerBlock@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SRasterizerBlock::SRasterizerBlock
	mov	eax, DWORD PTR $T29[ebp]
	push	eax
	push	64					; 00000040H
	mov	ecx, DWORD PTR $T31[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T31[ebp]
	mov	DWORD PTR tv481[ebp], edx
	jmp	SHORT $LN144@LoadEffect
$LN143@LoadEffect:
	mov	DWORD PTR tv481[ebp], 0
$LN144@LoadEffect:
	mov	eax, DWORD PTR tv481[ebp]
	mov	DWORD PTR $T30[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T30[ebp]
	mov	DWORD PTR [edx+88], eax
	cmp	DWORD PTR $T30[ebp], 0
	jne	SHORT $LN90@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$191
$LN90@LoadEffect:

; 810  :     VN( m_pEffect->m_pBlendBlocks = PRIVATENEW SBlendBlock[m_pHeader->cBlendStateBlocks] );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR $T32[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T32[ebp]
	mov	edx, 288				; 00000120H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T34[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 7
	cmp	DWORD PTR $T34[ebp], 0
	je	SHORT $LN145@LoadEffect
	push	OFFSET ??0SBlendBlock@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SBlendBlock::SBlendBlock
	mov	eax, DWORD PTR $T32[ebp]
	push	eax
	push	288					; 00000120H
	mov	ecx, DWORD PTR $T34[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T34[ebp]
	mov	DWORD PTR tv508[ebp], edx
	jmp	SHORT $LN146@LoadEffect
$LN145@LoadEffect:
	mov	DWORD PTR tv508[ebp], 0
$LN146@LoadEffect:
	mov	eax, DWORD PTR tv508[ebp]
	mov	DWORD PTR $T33[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T33[ebp]
	mov	DWORD PTR [edx+80], eax
	cmp	DWORD PTR $T33[ebp], 0
	jne	SHORT $LN88@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$191
$LN88@LoadEffect:

; 811  :     VN( m_pEffect->m_pSamplerBlocks = PRIVATENEW SSamplerBlock[m_pHeader->cSamplers] );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR $T35[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T35[ebp]
	mov	edx, 76					; 0000004cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T37[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 8
	cmp	DWORD PTR $T37[ebp], 0
	je	SHORT $LN147@LoadEffect
	push	OFFSET ??0SSamplerBlock@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SSamplerBlock::SSamplerBlock
	mov	eax, DWORD PTR $T35[ebp]
	push	eax
	push	76					; 0000004cH
	mov	ecx, DWORD PTR $T37[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T37[ebp]
	mov	DWORD PTR tv535[ebp], edx
	jmp	SHORT $LN148@LoadEffect
$LN147@LoadEffect:
	mov	DWORD PTR tv535[ebp], 0
$LN148@LoadEffect:
	mov	eax, DWORD PTR tv535[ebp]
	mov	DWORD PTR $T36[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T36[ebp]
	mov	DWORD PTR [edx+96], eax
	cmp	DWORD PTR $T36[ebp], 0
	jne	SHORT $LN86@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$191
$LN86@LoadEffect:

; 812  :     
; 813  :     // we allocate raw bytes for variables because they are polymorphic types that need to be placement new'ed
; 814  :     VN( m_pEffect->m_pVariables = (SGlobalVariable *)PRIVATENEW BYTE[varSize] );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _varSize$[ebp]
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T38[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR $T38[ebp]
	mov	DWORD PTR [eax+32], ecx
	cmp	DWORD PTR $T38[ebp], 0
	jne	SHORT $LN84@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$191
$LN84@LoadEffect:

; 815  :     VN( m_pEffect->m_pAnonymousShaders = PRIVATENEW SAnonymousShader[m_pHeader->cInlineShaders] );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR $T39[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T39[ebp]
	mov	edx, 12					; 0000000cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T41[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 9
	cmp	DWORD PTR $T41[ebp], 0
	je	SHORT $LN149@LoadEffect
	push	OFFSET ??_FSAnonymousShader@D3DX11Effects@@QAEXXZ
	mov	eax, DWORD PTR $T39[ebp]
	push	eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR $T41[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T41[ebp]
	mov	DWORD PTR tv569[ebp], edx
	jmp	SHORT $LN150@LoadEffect
$LN149@LoadEffect:
	mov	DWORD PTR tv569[ebp], 0
$LN150@LoadEffect:
	mov	eax, DWORD PTR tv569[ebp]
	mov	DWORD PTR $T40[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T40[ebp]
	mov	DWORD PTR [edx+40], eax
	cmp	DWORD PTR $T40[ebp], 0
	jne	SHORT $LN82@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$191
$LN82@LoadEffect:

; 816  : 
; 817  :     VN( m_pEffect->m_pGroups = PRIVATENEW SGroup[m_pHeader->cGroups] );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+76]
	mov	DWORD PTR $T42[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T42[ebp]
	mov	edx, 32					; 00000020H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T44[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 10		; 0000000aH
	cmp	DWORD PTR $T44[ebp], 0
	je	SHORT $LN151@LoadEffect
	push	OFFSET ??0SGroup@D3DX11Effects@@QAE@XZ	; D3DX11Effects::SGroup::SGroup
	mov	eax, DWORD PTR $T42[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR $T44[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T44[ebp]
	mov	DWORD PTR tv592[ebp], edx
	jmp	SHORT $LN152@LoadEffect
$LN151@LoadEffect:
	mov	DWORD PTR tv592[ebp], 0
$LN152@LoadEffect:
	mov	eax, DWORD PTR tv592[ebp]
	mov	DWORD PTR $T43[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T43[ebp]
	mov	DWORD PTR [edx+52], eax
	cmp	DWORD PTR $T43[ebp], 0
	jne	SHORT $LN80@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$191
$LN80@LoadEffect:

; 818  :     VN( m_pEffect->m_pShaderBlocks = PRIVATENEW SShaderBlock[m_pHeader->cTotalShaders] );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR $T45[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T45[ebp]
	mov	edx, 68					; 00000044H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T47[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 11		; 0000000bH
	cmp	DWORD PTR $T47[ebp], 0
	je	SHORT $LN153@LoadEffect
	push	OFFSET ??_FSShaderBlock@D3DX11Effects@@QAEXXZ
	mov	eax, DWORD PTR $T45[ebp]
	push	eax
	push	68					; 00000044H
	mov	ecx, DWORD PTR $T47[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T47[ebp]
	mov	DWORD PTR tv619[ebp], edx
	jmp	SHORT $LN154@LoadEffect
$LN153@LoadEffect:
	mov	DWORD PTR tv619[ebp], 0
$LN154@LoadEffect:
	mov	eax, DWORD PTR tv619[ebp]
	mov	DWORD PTR $T46[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T46[ebp]
	mov	DWORD PTR [edx+64], eax
	cmp	DWORD PTR $T46[ebp], 0
	jne	SHORT $LN78@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$191
$LN78@LoadEffect:

; 819  :     VN( m_pEffect->m_pStrings = PRIVATENEW SString[m_pHeader->cStrings] );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR $T48[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T48[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T50[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 12		; 0000000cH
	cmp	DWORD PTR $T50[ebp], 0
	je	SHORT $LN155@LoadEffect
	push	OFFSET ??0SString@D3DX11Effects@@QAE@XZ	; D3DX11Effects::SString::SString
	mov	eax, DWORD PTR $T48[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR $T50[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T50[ebp]
	mov	DWORD PTR tv646[ebp], edx
	jmp	SHORT $LN156@LoadEffect
$LN155@LoadEffect:
	mov	DWORD PTR tv646[ebp], 0
$LN156@LoadEffect:
	mov	eax, DWORD PTR tv646[ebp]
	mov	DWORD PTR $T49[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T49[ebp]
	mov	DWORD PTR [edx+128], eax
	cmp	DWORD PTR $T49[ebp], 0
	jne	SHORT $LN76@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$191
$LN76@LoadEffect:

; 820  :     VN( m_pEffect->m_pShaderResources = PRIVATENEW SShaderResource[m_pHeader->cShaderResources] );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR $T51[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T51[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T53[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 13		; 0000000dH
	cmp	DWORD PTR $T53[ebp], 0
	je	SHORT $LN157@LoadEffect
	push	OFFSET ??0SShaderResource@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SShaderResource::SShaderResource
	mov	eax, DWORD PTR $T51[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR $T53[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T53[ebp]
	mov	DWORD PTR tv673[ebp], edx
	jmp	SHORT $LN158@LoadEffect
$LN157@LoadEffect:
	mov	DWORD PTR tv673[ebp], 0
$LN158@LoadEffect:
	mov	eax, DWORD PTR tv673[ebp]
	mov	DWORD PTR $T52[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T52[ebp]
	mov	DWORD PTR [edx+136], eax
	cmp	DWORD PTR $T52[ebp], 0
	jne	SHORT $LN74@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$191
$LN74@LoadEffect:

; 821  :     VN( m_pEffect->m_pUnorderedAccessViews = PRIVATENEW SUnorderedAccessView[m_pHeader->cUnorderedAccessViews] );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR $T54[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T54[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T56[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 14		; 0000000eH
	cmp	DWORD PTR $T56[ebp], 0
	je	SHORT $LN159@LoadEffect
	push	OFFSET ??0SUnorderedAccessView@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SUnorderedAccessView::SUnorderedAccessView
	mov	eax, DWORD PTR $T54[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR $T56[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T56[ebp]
	mov	DWORD PTR tv696[ebp], edx
	jmp	SHORT $LN160@LoadEffect
$LN159@LoadEffect:
	mov	DWORD PTR tv696[ebp], 0
$LN160@LoadEffect:
	mov	eax, DWORD PTR tv696[ebp]
	mov	DWORD PTR $T55[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T55[ebp]
	mov	DWORD PTR [edx+144], eax
	cmp	DWORD PTR $T55[ebp], 0
	jne	SHORT $LN72@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$191
$LN72@LoadEffect:

; 822  :     VN( m_pEffect->m_pInterfaces = PRIVATENEW SInterface[m_pHeader->cInterfaceVariableElements] );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+88]
	mov	DWORD PTR $T57[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T57[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T59[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 15		; 0000000fH
	cmp	DWORD PTR $T59[ebp], 0
	je	SHORT $LN161@LoadEffect
	push	OFFSET ??0SInterface@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SInterface::SInterface
	mov	eax, DWORD PTR $T57[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR $T59[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T59[ebp]
	mov	DWORD PTR tv751[ebp], edx
	jmp	SHORT $LN162@LoadEffect
$LN161@LoadEffect:
	mov	DWORD PTR tv751[ebp], 0
$LN162@LoadEffect:
	mov	eax, DWORD PTR tv751[ebp]
	mov	DWORD PTR $T58[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T58[ebp]
	mov	DWORD PTR [edx+112], eax
	cmp	DWORD PTR $T58[ebp], 0
	jne	SHORT $LN70@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$191
$LN70@LoadEffect:

; 823  :     VN( m_pEffect->m_pMemberDataBlocks = PRIVATENEW SMemberDataPointer[cMemberDataBlocks] );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR _cMemberDataBlocks$[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T60[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR $T60[ebp]
	mov	DWORD PTR [ecx+104], edx
	cmp	DWORD PTR $T60[ebp], 0
	jne	SHORT $LN68@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$191
$LN68@LoadEffect:

; 824  :     VN( m_pEffect->m_pRenderTargetViews = PRIVATENEW SRenderTargetView[m_pHeader->cRenderTargetViews] );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR $T61[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T61[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T63[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 16		; 00000010H
	cmp	DWORD PTR $T63[ebp], 0
	je	SHORT $LN163@LoadEffect
	push	OFFSET ??0SRenderTargetView@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SRenderTargetView::SRenderTargetView
	mov	eax, DWORD PTR $T61[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR $T63[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T63[ebp]
	mov	DWORD PTR tv790[ebp], edx
	jmp	SHORT $LN164@LoadEffect
$LN163@LoadEffect:
	mov	DWORD PTR tv790[ebp], 0
$LN164@LoadEffect:
	mov	eax, DWORD PTR tv790[ebp]
	mov	DWORD PTR $T62[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T62[ebp]
	mov	DWORD PTR [edx+152], eax
	cmp	DWORD PTR $T62[ebp], 0
	jne	SHORT $LN66@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$191
$LN66@LoadEffect:

; 825  :     VN( m_pEffect->m_pDepthStencilViews = PRIVATENEW SDepthStencilView[m_pHeader->cDepthStencilViews] );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR $T64[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T64[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T66[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 17		; 00000011H
	cmp	DWORD PTR $T66[ebp], 0
	je	SHORT $LN165@LoadEffect
	push	OFFSET ??0SDepthStencilView@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SDepthStencilView::SDepthStencilView
	mov	eax, DWORD PTR $T64[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR $T66[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T66[ebp]
	mov	DWORD PTR tv817[ebp], edx
	jmp	SHORT $LN166@LoadEffect
$LN165@LoadEffect:
	mov	DWORD PTR tv817[ebp], 0
$LN166@LoadEffect:
	mov	eax, DWORD PTR tv817[ebp]
	mov	DWORD PTR $T65[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR $T65[ebp]
	mov	DWORD PTR [edx+160], eax
	cmp	DWORD PTR $T65[ebp], 0
	jne	SHORT $LN64@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$191
$LN64@LoadEffect:

; 826  : 
; 827  :     UINT oStructured = m_pHeader->cbUnstructured + sizeof(SBinaryHeader5);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+32]
	add	edx, 96					; 00000060H
	mov	DWORD PTR _oStructured$[ebp], edx

; 828  :     VHD( m_msStructured.Seek(oStructured), "Invalid pEffectBuffer: Missing structured data block." );

	mov	eax, DWORD PTR _oStructured$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Seek@CMemoryStream@D3DX11Core@@QAEJK@Z	; D3DX11Core::CMemoryStream::Seek
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN62@LoadEffect
	jmp	$lExit$191
$LN62@LoadEffect:

; 829  :     VH( m_msUnstructured.SetData(m_pData + sizeof(SBinaryHeader5), oStructured - sizeof(SBinaryHeader5)) );

	mov	eax, DWORD PTR _oStructured$[ebp]
	sub	eax, 96					; 00000060H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	add	edx, 96					; 00000060H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?SetData@CMemoryStream@D3DX11Core@@QAEJPBXK@Z ; D3DX11Core::CMemoryStream::SetData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN60@LoadEffect
	jmp	$lExit$191
$LN60@LoadEffect:

; 830  : 
; 831  :     VH( LoadCBs() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadCBs@CEffectLoader@D3DX11Effects@@IAEJXZ ; D3DX11Effects::CEffectLoader::LoadCBs
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN58@LoadEffect
	jmp	$lExit$191
$LN58@LoadEffect:

; 832  :     VH( LoadObjectVariables() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadObjectVariables@CEffectLoader@D3DX11Effects@@IAEJXZ ; D3DX11Effects::CEffectLoader::LoadObjectVariables
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN56@LoadEffect
	jmp	$lExit$191
$LN56@LoadEffect:

; 833  :     VH( LoadInterfaceVariables() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadInterfaceVariables@CEffectLoader@D3DX11Effects@@IAEJXZ ; D3DX11Effects::CEffectLoader::LoadInterfaceVariables
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN54@LoadEffect
	jmp	$lExit$191
$LN54@LoadEffect:

; 834  :     VH( LoadGroups() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadGroups@CEffectLoader@D3DX11Effects@@IAEJXZ ; D3DX11Effects::CEffectLoader::LoadGroups
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN52@LoadEffect
	jmp	$lExit$191
$LN52@LoadEffect:

; 835  : 
; 836  :     // Build shader dependencies
; 837  :     for (i=0; i<m_pEffect->m_ShaderBlockCount; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN50@LoadEffect
$LN49@LoadEffect:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN50@LoadEffect:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+60]
	jae	SHORT $LN48@LoadEffect

; 838  :     {
; 839  :         VH( BuildShaderBlock(&m_pEffect->m_pShaderBlocks[i]) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _i$[ebp], 68
	add	edx, DWORD PTR [ecx+64]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?BuildShaderBlock@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffectLoader::BuildShaderBlock
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN47@LoadEffect
	jmp	$lExit$191
$LN47@LoadEffect:

; 840  :     }

	jmp	SHORT $LN49@LoadEffect
$LN48@LoadEffect:

; 841  :     
; 842  :     for( UINT iGroup=0; iGroup<m_pHeader->cGroups; iGroup++ )

	mov	DWORD PTR _iGroup$72[ebp], 0
	jmp	SHORT $LN45@LoadEffect
$LN44@LoadEffect:
	mov	eax, DWORD PTR _iGroup$72[ebp]
	add	eax, 1
	mov	DWORD PTR _iGroup$72[ebp], eax
$LN45@LoadEffect:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _iGroup$72[ebp]
	cmp	edx, DWORD PTR [ecx+76]
	jae	$LN43@LoadEffect

; 843  :     {
; 844  :         SGroup *pGroup = &m_pEffect->m_pGroups[iGroup];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _iGroup$72[ebp]
	shl	edx, 5
	add	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _pGroup$71[ebp], edx

; 845  :         pGroup->HasDependencies = FALSE;

	mov	eax, DWORD PTR _pGroup$71[ebp]
	mov	DWORD PTR [eax+28], 0

; 846  : 
; 847  :         for( UINT iTechnique=0; iTechnique < pGroup->TechniqueCount; iTechnique++ )

	mov	DWORD PTR _iTechnique$70[ebp], 0
	jmp	SHORT $LN42@LoadEffect
$LN41@LoadEffect:
	mov	eax, DWORD PTR _iTechnique$70[ebp]
	add	eax, 1
	mov	DWORD PTR _iTechnique$70[ebp], eax
$LN42@LoadEffect:
	mov	eax, DWORD PTR _pGroup$71[ebp]
	mov	ecx, DWORD PTR _iTechnique$70[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	$LN40@LoadEffect

; 848  :         {
; 849  :             STechnique* pTech = &pGroup->pTechniques[iTechnique];

	mov	eax, DWORD PTR _iTechnique$70[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _pGroup$71[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _pTech$69[ebp], eax

; 850  :             pTech->HasDependencies = FALSE;

	mov	eax, DWORD PTR _pTech$69[ebp]
	mov	DWORD PTR [eax+28], 0

; 851  : 
; 852  :             for( UINT iPass=0; iPass < pTech->PassCount; iPass++ )

	mov	DWORD PTR _iPass$68[ebp], 0
	jmp	SHORT $LN39@LoadEffect
$LN38@LoadEffect:
	mov	eax, DWORD PTR _iPass$68[ebp]
	add	eax, 1
	mov	DWORD PTR _iPass$68[ebp], eax
$LN39@LoadEffect:
	mov	eax, DWORD PTR _pTech$69[ebp]
	mov	ecx, DWORD PTR _iPass$68[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN37@LoadEffect

; 853  :             {
; 854  :                 SPassBlock *pPass = &pTech->pPasses[iPass];

	imul	eax, DWORD PTR _iPass$68[ebp], 156
	mov	ecx, DWORD PTR _pTech$69[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _pPass$67[ebp], eax

; 855  : 
; 856  :                 pTech->HasDependencies |= pPass->CheckDependencies();

	mov	ecx, DWORD PTR _pPass$67[ebp]
	call	?CheckDependencies@SPassBlock@D3DX11Effects@@QAEHXZ ; D3DX11Effects::SPassBlock::CheckDependencies
	mov	ecx, DWORD PTR _pTech$69[ebp]
	or	eax, DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _pTech$69[ebp]
	mov	DWORD PTR [edx+28], eax

; 857  :             }

	jmp	SHORT $LN38@LoadEffect
$LN37@LoadEffect:

; 858  :             pGroup->HasDependencies |= pTech->HasDependencies;

	mov	eax, DWORD PTR _pGroup$71[ebp]
	mov	ecx, DWORD PTR _pTech$69[ebp]
	mov	edx, DWORD PTR [eax+28]
	or	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _pGroup$71[ebp]
	mov	DWORD PTR [eax+28], edx

; 859  :         }

	jmp	$LN41@LoadEffect
$LN40@LoadEffect:

; 860  :     }

	jmp	$LN44@LoadEffect
$LN43@LoadEffect:

; 861  : 
; 862  :     VH( InitializeReflectionDataAndMoveStrings() );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitializeReflectionDataAndMoveStrings@CEffectLoader@D3DX11Effects@@IAEJI@Z ; D3DX11Effects::CEffectLoader::InitializeReflectionDataAndMoveStrings
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN36@LoadEffect
	jmp	$lExit$191
$LN36@LoadEffect:

; 863  :     VH( ReallocateReflectionData() );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReallocateReflectionData@CEffectLoader@D3DX11Effects@@IAEJ_N@Z ; D3DX11Effects::CEffectLoader::ReallocateReflectionData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN34@LoadEffect
	jmp	$lExit$191
$LN34@LoadEffect:

; 864  :     VH( ReallocateEffectData() );

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReallocateEffectData@CEffectLoader@D3DX11Effects@@IAEJ_N@Z ; D3DX11Effects::CEffectLoader::ReallocateEffectData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN32@LoadEffect
	jmp	$lExit$191
$LN32@LoadEffect:

; 865  : 
; 866  :     VB( m_pReflection->m_Heap.GetSize() == m_ReflectionMemory );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	call	?GetSize@CEffectHeap@D3DX11Effects@@QAEIXZ ; D3DX11Effects::CEffectHeap::GetSize
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+184]
	je	SHORT $LN30@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$191
$LN30@LoadEffect:

; 867  :     
; 868  :     // Verify that all of the various block/variable types were loaded
; 869  :     VBD( m_pEffect->m_VariableCount == (m_pHeader->Effect.cObjectVariables + m_pHeader->Effect.cNumericVariables + m_pHeader->cInterfaceVariables), "Internal loading error: mismatched variable count." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+28]
	mov	eax, DWORD PTR [eax+12]
	add	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+28]
	add	eax, DWORD PTR [edx+84]
	cmp	DWORD PTR [ecx+28], eax
	je	SHORT $LN28@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$191
$LN28@LoadEffect:

; 870  :     VBD( m_pEffect->m_ShaderBlockCount == m_pHeader->cTotalShaders, "Internal loading error: mismatched shader block count." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [ecx+60]
	cmp	ecx, DWORD PTR [eax+68]
	je	SHORT $LN26@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$191
$LN26@LoadEffect:

; 871  :     VBD( m_pEffect->m_AnonymousShaderCount == m_pHeader->cInlineShaders, "Internal loading error: mismatched anonymous variable count." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [ecx+36]
	cmp	ecx, DWORD PTR [eax+72]
	je	SHORT $LN24@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$191
$LN24@LoadEffect:

; 872  :     VBD( m_pEffect->m_ShaderResourceCount == m_pHeader->cShaderResources, "Internal loading error: mismatched SRV count." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [ecx+132]
	cmp	ecx, DWORD PTR [eax+40]
	je	SHORT $LN22@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$191
$LN22@LoadEffect:

; 873  :     VBD( m_pEffect->m_InterfaceCount == m_pHeader->cInterfaceVariableElements + m_BackgroundInterfaces.GetSize(), "Internal loading error: mismatched interface count." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR [ecx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	?GetSize@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QBEIXZ ; CEffectVector<D3DX11Effects::SInterface *>::GetSize
	add	eax, DWORD PTR [edi+88]
	cmp	DWORD PTR [esi+108], eax
	je	SHORT $LN20@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$191
$LN20@LoadEffect:

; 874  :     VBD( m_pEffect->m_UnorderedAccessViewCount == m_pHeader->cUnorderedAccessViews, "Internal loading error: mismatched UAV count." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [ecx+140]
	cmp	ecx, DWORD PTR [eax+80]
	je	SHORT $LN18@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$191
$LN18@LoadEffect:

; 875  :     VBD( m_pEffect->m_MemberDataCount == cMemberDataBlocks, "Internal loading error: mismatched member data block count." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+100]
	cmp	edx, DWORD PTR _cMemberDataBlocks$[ebp]
	je	SHORT $LN16@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$191
$LN16@LoadEffect:

; 876  :     VBD( m_pEffect->m_RenderTargetViewCount == m_pHeader->cRenderTargetViews, "Internal loading error: mismatched RTV count." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [ecx+148]
	cmp	ecx, DWORD PTR [eax+60]
	je	SHORT $LN14@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$191
$LN14@LoadEffect:

; 877  :     VBD( m_pEffect->m_DepthStencilViewCount == m_pHeader->cDepthStencilViews, "Internal loading error: mismatched DSV count." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [ecx+156]
	cmp	ecx, DWORD PTR [eax+64]
	je	SHORT $LN12@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$191
$LN12@LoadEffect:

; 878  :     VBD( m_pEffect->m_DepthStencilBlockCount == m_pHeader->cDepthStencilBlocks, "Internal loading error: mismatched depth-stencil state count." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [ecx+68]
	cmp	ecx, DWORD PTR [eax+44]
	je	SHORT $LN10@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $lExit$191
$LN10@LoadEffect:

; 879  :     VBD( m_pEffect->m_BlendBlockCount == m_pHeader->cBlendStateBlocks, "Internal loading error: mismatched blend state count." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [ecx+76]
	cmp	ecx, DWORD PTR [eax+48]
	je	SHORT $LN8@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $lExit$191
$LN8@LoadEffect:

; 880  :     VBD( m_pEffect->m_RasterizerBlockCount == m_pHeader->cRasterizerStateBlocks, "Internal loading error: mismatched rasterizer state count." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [ecx+84]
	cmp	ecx, DWORD PTR [eax+52]
	je	SHORT $LN6@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $lExit$191
$LN6@LoadEffect:

; 881  :     VBD( m_pEffect->m_SamplerBlockCount == m_pHeader->cSamplers, "Internal loading error: mismatched sampler count." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [ecx+92]
	cmp	ecx, DWORD PTR [eax+56]
	je	SHORT $LN4@LoadEffect
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $lExit$191
$LN4@LoadEffect:

; 882  :     VBD( m_pEffect->m_StringCount == m_pHeader->cStrings, "Internal loading error: mismatched string count." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [ecx+124]
	cmp	ecx, DWORD PTR [eax+36]
	je	SHORT $lExit$191
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
$lExit$191:

; 883  : 
; 884  :     // Uncomment if you really need this information
; 885  :     // DPF(0, "Effect heap size: %d, reflection heap size: %d, allocations avoided: %d", m_EffectMemory, m_ReflectionMemory, m_BulkHeap.m_cAllocations);
; 886  :     
; 887  : lExit:
; 888  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 889  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN190@LoadEffect
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 1192				; 000004a8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN190@LoadEffect:
	DD	3
	DD	$LN189@LoadEffect
$LN189@LoadEffect:
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN185@LoadEffect
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN186@LoadEffect
	DD	-84					; ffffffacH
	DD	8
	DD	$LN187@LoadEffect
$LN187@LoadEffect:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	107					; 0000006bH
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN186@LoadEffect:
	DB	99					; 00000063H
	DB	77					; 0000004dH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	66					; 00000042H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	115					; 00000073H
	DB	0
$LN185@LoadEffect:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$54:
	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAXABUnothrow_t@std@@@Z		; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$55:
	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??3@YAXPAXABUnothrow_t@std@@@Z		; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$56:
	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAXABUnothrow_t@std@@@Z		; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$57:
	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	mov	eax, DWORD PTR $T10[ebp]
	push	eax
	call	??3@YAXPAXABUnothrow_t@std@@@Z		; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$58:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	eax, DWORD PTR $T25[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$59:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	eax, DWORD PTR $T28[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$60:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	eax, DWORD PTR $T31[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$61:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	eax, DWORD PTR $T34[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$62:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	eax, DWORD PTR $T37[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$63:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	eax, DWORD PTR $T41[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$64:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	eax, DWORD PTR $T44[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$65:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	eax, DWORD PTR $T47[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$66:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	eax, DWORD PTR $T50[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$67:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	eax, DWORD PTR $T53[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$68:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	eax, DWORD PTR $T56[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$69:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	eax, DWORD PTR $T59[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$70:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	eax, DWORD PTR $T63[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z$71:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	eax, DWORD PTR $T66[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__ehhandler$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1196]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z ENDP ; D3DX11Effects::CEffectLoader::LoadEffect
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?GetInterfaceParametersAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIIPAPAUSInterfaceParameter@SShaderBlock@2@@Z
_TEXT	SEGMENT
tv160 = -280						; size = 4
tv224 = -273						; size = 1
tv221 = -272						; size = 4
tv218 = -268						; size = 4
$T1 = -260						; size = 4
_i$2 = -56						; size = 4
_oldPos$ = -44						; size = 4
_pInterfaceInitializer$ = -32				; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_InterfaceCount$ = 8					; size = 4
_offset$ = 12						; size = 4
_ppInterfaces$ = 16					; size = 4
?GetInterfaceParametersAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIIPAPAUSInterfaceParameter@SShaderBlock@2@@Z PROC ; D3DX11Effects::CEffectLoader::GetInterfaceParametersAndAddToReflection, COMDAT
; _this$ = ecx

; 429  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 430  :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 431  :     SBinaryInterfaceInitializer* pInterfaceInitializer;
; 432  :     SIZE_T oldPos;
; 433  : 
; 434  :     if (offset == 0)

	cmp	DWORD PTR _offset$[ebp], 0
	jne	SHORT $LN17@GetInterfa

; 435  :     {
; 436  :         *ppInterfaces = NULL;

	mov	eax, DWORD PTR _ppInterfaces$[ebp]
	mov	DWORD PTR [eax], 0

; 437  :         goto lExit;

	jmp	$lExit$24
	jmp	$lExit$24
$LN17@GetInterfa:

; 438  :     }
; 439  : 
; 440  :     oldPos = m_msUnstructured.GetPosition();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?GetPosition@CMemoryStream@D3DX11Core@@QAEKXZ ; D3DX11Core::CMemoryStream::GetPosition
	mov	DWORD PTR _oldPos$[ebp], eax

; 441  : 
; 442  :     VBD( InterfaceCount <= D3D11_SHADER_MAX_INTERFACES, "Internal loading error: InterfaceCount > D3D11_SHADER_MAX_INTERFACES." );

	cmp	DWORD PTR _InterfaceCount$[ebp], 253	; 000000fdH
	jbe	SHORT $LN15@GetInterfa
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$24
	jmp	$lExit$24
$LN15@GetInterfa:

; 443  :     m_ReflectionMemory += AlignToPowerOf2(InterfaceCount * sizeof(SShaderBlock::SInterfaceParameter), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _InterfaceCount$[ebp]
	shl	eax, 3
	push	eax
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+184]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+184], eax
$LN13@GetInterfa:

; 444  :     D3DXASSERT( ppInterfaces );

	cmp	DWORD PTR _ppInterfaces$[ebp], 0
	jne	SHORT $LN12@GetInterfa
	push	OFFSET ??_C@_0N@FLMPGDAJ@ppInterfaces?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??GetInterfaceParametersAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIIPAPAUSInterfaceParameter@SShaderBlock@3@@Z@4JA
	add	eax, 15					; 0000000fH
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN12@GetInterfa:
	xor	eax, eax
	jne	SHORT $LN13@GetInterfa

; 445  :     (*ppInterfaces) = PRIVATENEW SShaderBlock::SInterfaceParameter[InterfaceCount];

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR _InterfaceCount$[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR _ppInterfaces$[ebp]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [eax], ecx

; 446  :     VN( *ppInterfaces );

	mov	eax, DWORD PTR _ppInterfaces$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN9@GetInterfa
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$24
	jmp	$lExit$24
$LN9@GetInterfa:

; 447  : 
; 448  :     VHD( m_msUnstructured.ReadAtOffset(offset, sizeof(SBinaryInterfaceInitializer) * InterfaceCount, (void**)&pInterfaceInitializer),
; 449  :          "Invalid pEffectBuffer: cannot read interface initializer." );

	lea	eax, DWORD PTR _pInterfaceInitializer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _InterfaceCount$[ebp]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _offset$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?ReadAtOffset@CMemoryStream@D3DX11Core@@QAEJKKPAPAX@Z ; D3DX11Core::CMemoryStream::ReadAtOffset
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN7@GetInterfa
	jmp	$lExit$24
	jmp	$lExit$24
$LN7@GetInterfa:

; 450  : 
; 451  :     for( UINT i=0; i < InterfaceCount; i++ )

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN5@GetInterfa
$LN4@GetInterfa:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN5@GetInterfa:
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR _InterfaceCount$[ebp]
	jae	$LN3@GetInterfa

; 452  :     {
; 453  :         (*ppInterfaces)[i].Index = pInterfaceInitializer[i].ArrayIndex;

	mov	eax, DWORD PTR _ppInterfaces$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR _i$2[ebp]
	mov	esi, DWORD PTR _pInterfaceInitializer$[ebp]
	mov	eax, DWORD PTR [esi+eax*8+4]
	mov	DWORD PTR [ecx+edx*8+4], eax

; 454  :         VHD( m_msUnstructured.ReadAtOffset(pInterfaceInitializer[i].oInstanceName, const_cast<LPCSTR*>(&(*ppInterfaces)[i].pName)),
; 455  :              "Invalid pEffectBuffer: cannot read interface initializer." );

	mov	eax, DWORD PTR _ppInterfaces$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$2[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	push	eax
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	edx, DWORD PTR _pInterfaceInitializer$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?ReadAtOffset@CMemoryStream@D3DX11Core@@QAEJKPAPBD@Z ; D3DX11Core::CMemoryStream::ReadAtOffset
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@GetInterfa
	jmp	$lExit$24
	jmp	$lExit$24
$LN2@GetInterfa:

; 456  :         m_ReflectionMemory += AlignToPowerOf2( (UINT)strlen((*ppInterfaces)[i].pName) + 1, c_DataAlignment);

	mov	eax, DWORD PTR _ppInterfaces$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	DWORD PTR tv218[ebp], eax
	mov	ecx, DWORD PTR tv218[ebp]
	add	ecx, 1
	mov	DWORD PTR tv221[ebp], ecx
$LL20@GetInterfa:
	mov	edx, DWORD PTR tv218[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv224[ebp], al
	add	DWORD PTR tv218[ebp], 1
	cmp	BYTE PTR tv224[ebp], 0
	jne	SHORT $LL20@GetInterfa
	mov	ecx, DWORD PTR tv218[ebp]
	sub	ecx, DWORD PTR tv221[ebp]
	mov	DWORD PTR tv160[ebp], ecx
	push	4
	mov	edx, DWORD PTR tv160[ebp]
	add	edx, 1
	push	edx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+184]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+184], eax

; 457  :     }

	jmp	$LN4@GetInterfa
$LN3@GetInterfa:

; 458  : 
; 459  :     m_msUnstructured.Seek(oldPos);

	mov	eax, DWORD PTR _oldPos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?Seek@CMemoryStream@D3DX11Core@@QAEJK@Z	; D3DX11Core::CMemoryStream::Seek
$lExit$24:

; 460  : 
; 461  : lExit:
; 462  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 463  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@GetInterfa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN23@GetInterfa:
	DD	1
	DD	$LN22@GetInterfa
$LN22@GetInterfa:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN21@GetInterfa
$LN21@GetInterfa:
	DB	112					; 00000070H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?GetInterfaceParametersAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIIPAPAUSInterfaceParameter@SShaderBlock@2@@Z ENDP ; D3DX11Effects::CEffectLoader::GetInterfaceParametersAndAddToReflection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?GetUnstructuredDataBlock@CEffectLoader@D3DX11Effects@@IAEJIPAIPAPAX@Z
_TEXT	SEGMENT
_pBlockSize$ = -32					; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_offset$ = 8						; size = 4
_pdwSize$ = 12						; size = 4
_ppData$ = 16						; size = 4
?GetUnstructuredDataBlock@CEffectLoader@D3DX11Effects@@IAEJIPAIPAPAX@Z PROC ; D3DX11Effects::CEffectLoader::GetUnstructuredDataBlock, COMDAT
; _this$ = ecx

; 381  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 382  :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 383  :     UINT  *pBlockSize;
; 384  : 
; 385  :     VH( m_msUnstructured.ReadAtOffset(offset, sizeof(*pBlockSize), (void**) &pBlockSize ) );

	lea	eax, DWORD PTR _pBlockSize$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?ReadAtOffset@CMemoryStream@D3DX11Core@@QAEJKKPAPAX@Z ; D3DX11Core::CMemoryStream::ReadAtOffset
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN4@GetUnstruc
	jmp	SHORT $lExit$10
	jmp	SHORT $lExit$10
$LN4@GetUnstruc:

; 386  :     *pdwSize = *pBlockSize;

	mov	eax, DWORD PTR _pdwSize$[ebp]
	mov	ecx, DWORD PTR _pBlockSize$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 387  : 
; 388  :     VH( m_msUnstructured.Read(ppData, *pdwSize) );

	mov	eax, DWORD PTR _pdwSize$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _ppData$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAPAXK@Z ; D3DX11Core::CMemoryStream::Read
	mov	DWORD PTR _hr$[ebp], eax
$lExit$10:

; 389  : 
; 390  : lExit:
; 391  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 392  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@GetUnstruc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN9@GetUnstruc:
	DD	1
	DD	$LN8@GetUnstruc
$LN8@GetUnstruc:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN7@GetUnstruc
$LN7@GetUnstruc:
	DB	112					; 00000070H
	DB	66					; 00000042H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
?GetUnstructuredDataBlock@CEffectLoader@D3DX11Effects@@IAEJIPAIPAPAX@Z ENDP ; D3DX11Effects::CEffectLoader::GetUnstructuredDataBlock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?GetStringAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIPAPAD@Z
_TEXT	SEGMENT
tv79 = -256						; size = 4
tv134 = -249						; size = 1
tv131 = -248						; size = 4
tv128 = -244						; size = 4
_oldPos$ = -44						; size = 4
_pName$ = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_offset$ = 8						; size = 4
_ppString$ = 12						; size = 4
?GetStringAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIPAPAD@Z PROC ; D3DX11Effects::CEffectLoader::GetStringAndAddToReflection, COMDAT
; _this$ = ecx

; 400  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 401  :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 402  :     LPCSTR pName;
; 403  :     SIZE_T oldPos;
; 404  :     
; 405  :     if (offset == 0)

	cmp	DWORD PTR _offset$[ebp], 0
	jne	SHORT $LN4@GetStringA

; 406  :     {
; 407  :         *ppString = NULL;

	mov	eax, DWORD PTR _ppString$[ebp]
	mov	DWORD PTR [eax], 0

; 408  :         goto lExit;

	jmp	$lExit$11
	jmp	$lExit$11
$LN4@GetStringA:

; 409  :     }
; 410  : 
; 411  :     oldPos = m_msUnstructured.GetPosition();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?GetPosition@CMemoryStream@D3DX11Core@@QAEKXZ ; D3DX11Core::CMemoryStream::GetPosition
	mov	DWORD PTR _oldPos$[ebp], eax

; 412  : 
; 413  :     VH( m_msUnstructured.ReadAtOffset(offset, &pName) );

	lea	eax, DWORD PTR _pName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?ReadAtOffset@CMemoryStream@D3DX11Core@@QAEJKPAPBD@Z ; D3DX11Core::CMemoryStream::ReadAtOffset
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@GetStringA
	jmp	$lExit$11
	jmp	$lExit$11
$LN2@GetStringA:

; 414  :     m_ReflectionMemory += AlignToPowerOf2( (UINT)strlen(pName) + 1, c_DataAlignment);

	mov	eax, DWORD PTR _pName$[ebp]
	mov	DWORD PTR tv128[ebp], eax
	mov	ecx, DWORD PTR tv128[ebp]
	add	ecx, 1
	mov	DWORD PTR tv131[ebp], ecx
$LL7@GetStringA:
	mov	edx, DWORD PTR tv128[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv134[ebp], al
	add	DWORD PTR tv128[ebp], 1
	cmp	BYTE PTR tv134[ebp], 0
	jne	SHORT $LL7@GetStringA
	mov	ecx, DWORD PTR tv128[ebp]
	sub	ecx, DWORD PTR tv131[ebp]
	mov	DWORD PTR tv79[ebp], ecx
	push	4
	mov	edx, DWORD PTR tv79[ebp]
	add	edx, 1
	push	edx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+184]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+184], eax

; 415  :     *ppString = const_cast<char*>(pName);

	mov	eax, DWORD PTR _ppString$[ebp]
	mov	ecx, DWORD PTR _pName$[ebp]
	mov	DWORD PTR [eax], ecx

; 416  :     
; 417  :     m_msUnstructured.Seek(oldPos);

	mov	eax, DWORD PTR _oldPos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?Seek@CMemoryStream@D3DX11Core@@QAEJK@Z	; D3DX11Core::CMemoryStream::Seek
$lExit$11:

; 418  : 
; 419  : lExit:
; 420  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 421  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@GetStringA
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN10@GetStringA:
	DD	1
	DD	$LN9@GetStringA
$LN9@GetStringA:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN8@GetStringA
$LN8@GetStringA:
	DB	112					; 00000070H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
?GetStringAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIPAPAD@Z ENDP ; D3DX11Effects::CEffectLoader::GetStringAndAddToReflection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?FixupGroupPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSGroup@2@@Z
_TEXT	SEGMENT
_index$1 = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_ppGroup$ = 8						; size = 4
?FixupGroupPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSGroup@2@@Z PROC ; D3DX11Effects::CEffectLoader::FixupGroupPointer, COMDAT
; _this$ = ecx

; 704  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 705  :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 706  :     if( *ppGroup != NULL )

	mov	eax, DWORD PTR _ppGroup$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $lExit$10

; 707  :     {
; 708  :         SIZE_T index = *ppGroup - m_pOldGroups;

	mov	eax, DWORD PTR _ppGroup$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx+176]
	sar	edx, 5
	mov	DWORD PTR _index$1[ebp], edx
$LN6@FixupGroup:

; 709  :         D3DXASSERT( index * sizeof(SGroup) == ((size_t)*ppGroup - (size_t)m_pOldGroups) );

	mov	eax, DWORD PTR _index$1[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _ppGroup$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	sub	ecx, DWORD PTR [edx+176]
	cmp	eax, ecx
	je	SHORT $LN5@FixupGroup
	push	OFFSET ??_C@_0EE@IAMBMFNL@index?5?$CK?5sizeof?$CISGroup?$CJ?5?$DN?$DN?5?$CI?$CIsize@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FixupGroupPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSGroup@3@@Z@4JA
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN5@FixupGroup:
	xor	eax, eax
	jne	SHORT $LN6@FixupGroup

; 710  :         VBD( index < m_pEffect->m_GroupCount, "Internal loading error: invalid group index." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _index$1[ebp]
	cmp	edx, DWORD PTR [ecx+48]
	jb	SHORT $LN2@FixupGroup
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $lExit$10
	jmp	SHORT $lExit$10
$LN2@FixupGroup:

; 711  :         *ppGroup = m_pEffect->m_pGroups + index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _index$1[ebp]
	shl	edx, 5
	add	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _ppGroup$[ebp]
	mov	DWORD PTR [eax], edx
$lExit$10:

; 712  :     }
; 713  : lExit:
; 714  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 715  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FixupGroupPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSGroup@2@@Z ENDP ; D3DX11Effects::CEffectLoader::FixupGroupPointer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?FixupMemberDataPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSMemberDataPointer@2@@Z
_TEXT	SEGMENT
_index$ = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_ppMemberData$ = 8					; size = 4
?FixupMemberDataPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSMemberDataPointer@2@@Z PROC ; D3DX11Effects::CEffectLoader::FixupMemberDataPointer, COMDAT
; _this$ = ecx

; 665  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 666  :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 667  :     SIZE_T index = *ppMemberData - m_pOldMemberDataBlocks;

	mov	eax, DWORD PTR _ppMemberData$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx+168]
	sar	edx, 3
	mov	DWORD PTR _index$[ebp], edx
$LN6@FixupMembe:

; 668  :     D3DXASSERT( index * sizeof(SMemberDataPointer) == ((size_t)*ppMemberData - (size_t)m_pOldMemberDataBlocks) );

	mov	eax, DWORD PTR _index$[ebp]
	shl	eax, 3
	mov	ecx, DWORD PTR _ppMemberData$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	sub	ecx, DWORD PTR [edx+168]
	cmp	eax, ecx
	je	SHORT $LN5@FixupMembe
	push	OFFSET ??_C@_0FP@HCBEHMGA@index?5?$CK?5sizeof?$CISMemberDataPointe@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FixupMemberDataPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSMemberDataPointer@3@@Z@4JA
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN5@FixupMembe:
	xor	eax, eax
	jne	SHORT $LN6@FixupMembe

; 669  :     VBD( index < m_pEffect->m_MemberDataCount, "Internal loading error: invalid member block index." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _index$[ebp]
	cmp	edx, DWORD PTR [ecx+100]
	jb	SHORT $LN2@FixupMembe
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $lExit$9
	jmp	SHORT $lExit$9
$LN2@FixupMembe:

; 670  :     *ppMemberData = m_pEffect->m_pMemberDataBlocks + index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+104]
	mov	eax, DWORD PTR _index$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	edx, DWORD PTR _ppMemberData$[ebp]
	mov	DWORD PTR [edx], ecx
$lExit$9:

; 671  : lExit:
; 672  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 673  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FixupMemberDataPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSMemberDataPointer@2@@Z ENDP ; D3DX11Effects::CEffectLoader::FixupMemberDataPointer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?FixupStringPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSString@2@@Z
_TEXT	SEGMENT
_index$ = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_ppString$ = 8						; size = 4
?FixupStringPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSString@2@@Z PROC ; D3DX11Effects::CEffectLoader::FixupStringPointer, COMDAT
; _this$ = ecx

; 654  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 655  :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 656  :     SIZE_T index = *ppString - m_pOldStrings;

	mov	eax, DWORD PTR _ppString$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx+164]
	sar	edx, 2
	mov	DWORD PTR _index$[ebp], edx
$LN6@FixupStrin:

; 657  :     D3DXASSERT( index * sizeof(SString) == ((size_t)*ppString - (size_t)m_pOldStrings) );

	mov	eax, DWORD PTR _index$[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _ppString$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	sub	ecx, DWORD PTR [edx+164]
	cmp	eax, ecx
	je	SHORT $LN5@FixupStrin
	push	OFFSET ??_C@_0EH@BOFKCOKB@index?5?$CK?5sizeof?$CISString?$CJ?5?$DN?$DN?5?$CI?$CIsiz@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FixupStringPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSString@3@@Z@4JA
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN5@FixupStrin:
	xor	eax, eax
	jne	SHORT $LN6@FixupStrin

; 658  :     VBD(index < m_pEffect->m_StringCount, "Internal loading error: invalid string index." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _index$[ebp]
	cmp	edx, DWORD PTR [ecx+124]
	jb	SHORT $LN2@FixupStrin
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $lExit$9
	jmp	SHORT $lExit$9
$LN2@FixupStrin:

; 659  :     *ppString = m_pEffect->m_pStrings + index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+128]
	mov	eax, DWORD PTR _index$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _ppString$[ebp]
	mov	DWORD PTR [edx], ecx
$lExit$9:

; 660  : lExit:
; 661  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 662  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FixupStringPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSString@2@@Z ENDP ; D3DX11Effects::CEffectLoader::FixupStringPointer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?FixupVariablePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSGlobalVariable@2@@Z
_TEXT	SEGMENT
_Members$1 = -44					; size = 4
_index$ = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_ppVar$ = 8						; size = 4
?FixupVariablePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSGlobalVariable@2@@Z PROC ; D3DX11Effects::CEffectLoader::FixupVariablePointer, COMDAT
; _this$ = ecx

; 676  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 677  :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 678  :     SIZE_T index = *ppVar - m_pOldVars;

	mov	eax, DWORD PTR _ppVar$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx+112]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	mov	DWORD PTR _index$[ebp], eax

; 679  : 
; 680  :     if( index < m_pEffect->m_VariableCount )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _index$[ebp]
	cmp	edx, DWORD PTR [ecx+28]
	jae	SHORT $LN13@FixupVaria
$LN12@FixupVaria:

; 681  :     {
; 682  :         D3DXASSERT( index * sizeof(SGlobalVariable) == ((size_t)*ppVar - (size_t)m_pOldVars) );

	imul	eax, DWORD PTR _index$[ebp], 48
	mov	ecx, DWORD PTR _ppVar$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	sub	ecx, DWORD PTR [edx+112]
	cmp	eax, ecx
	je	SHORT $LN11@FixupVaria
	push	OFFSET ??_C@_0EJ@ODBKDCBD@index?5?$CK?5sizeof?$CISGlobalVariable?$CJ?5@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FixupVariablePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSGlobalVariable@3@@Z@4JA
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN11@FixupVaria:
	xor	eax, eax
	jne	SHORT $LN12@FixupVaria

; 683  :         *ppVar = m_pEffect->m_pVariables + index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _index$[ebp], 48
	add	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _ppVar$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	$lExit$16
$LN13@FixupVaria:

; 684  :     }
; 685  :     else if( m_pvOldMemberInterfaces )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+172], 0
	je	SHORT $lExit$16

; 686  :     {
; 687  :         // When cloning, m_pvOldMemberInterfaces may be non-NULL, and *ppVar may point to a variable in it.
; 688  :         const SIZE_T Members = m_pvOldMemberInterfaces->GetSize();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	call	?GetSize@?$CEffectVector@PAUSMember@D3DX11Effects@@@@QBEIXZ ; CEffectVector<D3DX11Effects::SMember *>::GetSize
	mov	DWORD PTR _Members$1[ebp], eax

; 689  :         for( index=0; index < Members; index++ )

	mov	DWORD PTR _index$[ebp], 0
	jmp	SHORT $LN6@FixupVaria
$LN5@FixupVaria:
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	mov	DWORD PTR _index$[ebp], eax
$LN6@FixupVaria:
	mov	eax, DWORD PTR _index$[ebp]
	cmp	eax, DWORD PTR _Members$1[ebp]
	jae	SHORT $LN4@FixupVaria

; 690  :         {
; 691  :             if( (ID3DX11EffectVariable*)(*m_pvOldMemberInterfaces)[ (UINT)index] == (ID3DX11EffectVariable*)*ppVar )

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+172]
	call	??A?$CEffectVector@PAUSMember@D3DX11Effects@@@@QAEAAPAUSMember@D3DX11Effects@@I@Z ; CEffectVector<D3DX11Effects::SMember *>::operator[]
	mov	edx, DWORD PTR _ppVar$[ebp]
	mov	eax, DWORD PTR [eax]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN3@FixupVaria

; 692  :             {
; 693  :                 break;

	jmp	SHORT $LN4@FixupVaria
$LN3@FixupVaria:

; 694  :             }
; 695  :         }

	jmp	SHORT $LN5@FixupVaria
$LN4@FixupVaria:

; 696  :         VBD( index < Members, "Internal loading error: invalid member pointer." );

	mov	eax, DWORD PTR _index$[ebp]
	cmp	eax, DWORD PTR _Members$1[ebp]
	jb	SHORT $LN2@FixupVaria
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $lExit$16
	jmp	SHORT $lExit$16
$LN2@FixupVaria:

; 697  :         *ppVar = (SGlobalVariable*)m_pEffect->m_pMemberInterfaces[ (UINT)index];

	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, 204				; 000000ccH
	call	??A?$CEffectVector@PAUSMember@D3DX11Effects@@@@QAEAAPAUSMember@D3DX11Effects@@I@Z ; CEffectVector<D3DX11Effects::SMember *>::operator[]
	mov	edx, DWORD PTR _ppVar$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
$lExit$16:

; 698  :     }
; 699  : lExit:
; 700  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 701  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FixupVariablePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSGlobalVariable@2@@Z ENDP ; D3DX11Effects::CEffectLoader::FixupVariablePointer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?FixupSamplerPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSSamplerBlock@2@@Z
_TEXT	SEGMENT
_index$ = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_ppSampler$ = 8						; size = 4
?FixupSamplerPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSSamplerBlock@2@@Z PROC ; D3DX11Effects::CEffectLoader::FixupSamplerPointer, COMDAT
; _this$ = ecx

; 537  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 538  :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 539  :     SIZE_T index = *ppSampler - m_pOldSamplers;

	mov	eax, DWORD PTR _ppSampler$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx+136]
	cdq
	mov	ecx, 76					; 0000004cH
	idiv	ecx
	mov	DWORD PTR _index$[ebp], eax
$LN6@FixupSampl:

; 540  :     D3DXASSERT( index * sizeof(SSamplerBlock) == ((size_t)*ppSampler - (size_t)m_pOldSamplers) );

	imul	eax, DWORD PTR _index$[ebp], 76
	mov	ecx, DWORD PTR _ppSampler$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	sub	ecx, DWORD PTR [edx+136]
	cmp	eax, ecx
	je	SHORT $LN5@FixupSampl
	push	OFFSET ??_C@_0EP@DBMIHIDO@index?5?$CK?5sizeof?$CISSamplerBlock?$CJ?5?$DN?$DN@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FixupSamplerPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSSamplerBlock@3@@Z@4JA
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN5@FixupSampl:
	xor	eax, eax
	jne	SHORT $LN6@FixupSampl

; 541  :     VBD( index < m_pEffect->m_SamplerBlockCount, "Internal loading error: invalid sampler index." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _index$[ebp]
	cmp	edx, DWORD PTR [ecx+92]
	jb	SHORT $LN2@FixupSampl
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $lExit$9
	jmp	SHORT $lExit$9
$LN2@FixupSampl:

; 542  :     *ppSampler = m_pEffect->m_pSamplerBlocks + index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _index$[ebp], 76
	add	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR _ppSampler$[ebp]
	mov	DWORD PTR [eax], edx
$lExit$9:

; 543  : 
; 544  : lExit:
; 545  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 546  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FixupSamplerPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSSamplerBlock@2@@Z ENDP ; D3DX11Effects::CEffectLoader::FixupSamplerPointer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?FixupDepthStencilViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSDepthStencilView@2@@Z
_TEXT	SEGMENT
_index$1 = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_ppDepthStencilView$ = 8				; size = 4
?FixupDepthStencilViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSDepthStencilView@2@@Z PROC ; D3DX11Effects::CEffectLoader::FixupDepthStencilViewPointer, COMDAT
; _this$ = ecx

; 639  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 640  :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 641  :     if (*ppDepthStencilView != &g_NullDepthStencilView && *ppDepthStencilView != NULL)

	mov	eax, DWORD PTR _ppDepthStencilView$[ebp]
	cmp	DWORD PTR [eax], OFFSET ?g_NullDepthStencilView@D3DX11Effects@@3USDepthStencilView@1@A ; D3DX11Effects::g_NullDepthStencilView
	je	$lExit$10
	mov	eax, DWORD PTR _ppDepthStencilView$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $lExit$10

; 642  :     {
; 643  :         SIZE_T index = *ppDepthStencilView - m_pOldDepthStencilViews;

	mov	eax, DWORD PTR _ppDepthStencilView$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx+160]
	sar	edx, 2
	mov	DWORD PTR _index$1[ebp], edx
$LN6@FixupDepth:

; 644  :         D3DXASSERT( index * sizeof(SDepthStencilView) == ((size_t)*ppDepthStencilView - (size_t)m_pOldDepthStencilViews) );

	mov	eax, DWORD PTR _index$1[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _ppDepthStencilView$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	sub	ecx, DWORD PTR [edx+160]
	cmp	eax, ecx
	je	SHORT $LN5@FixupDepth
	push	OFFSET ??_C@_0GF@JFEJOMCF@index?5?$CK?5sizeof?$CISDepthStencilView@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FixupDepthStencilViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSDepthStencilView@3@@Z@4JA
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN5@FixupDepth:
	xor	eax, eax
	jne	SHORT $LN6@FixupDepth

; 645  :         VBD( index < m_pEffect->m_DepthStencilViewCount, "Internal loading error: invalid DSV index." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _index$1[ebp]
	cmp	edx, DWORD PTR [ecx+156]
	jb	SHORT $LN2@FixupDepth
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $lExit$10
	jmp	SHORT $lExit$10
$LN2@FixupDepth:

; 646  :         *ppDepthStencilView = m_pEffect->m_pDepthStencilViews + index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+160]
	mov	eax, DWORD PTR _index$1[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _ppDepthStencilView$[ebp]
	mov	DWORD PTR [edx], ecx
$lExit$10:

; 647  :     }
; 648  : 
; 649  : lExit:
; 650  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 651  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FixupDepthStencilViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSDepthStencilView@2@@Z ENDP ; D3DX11Effects::CEffectLoader::FixupDepthStencilViewPointer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?FixupRenderTargetViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSRenderTargetView@2@@Z
_TEXT	SEGMENT
_index$1 = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_ppRenderTargetView$ = 8				; size = 4
?FixupRenderTargetViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSRenderTargetView@2@@Z PROC ; D3DX11Effects::CEffectLoader::FixupRenderTargetViewPointer, COMDAT
; _this$ = ecx

; 624  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 625  :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 626  :     if (*ppRenderTargetView != &g_NullRenderTargetView && *ppRenderTargetView != NULL)

	mov	eax, DWORD PTR _ppRenderTargetView$[ebp]
	cmp	DWORD PTR [eax], OFFSET ?g_NullRenderTargetView@D3DX11Effects@@3USRenderTargetView@1@A ; D3DX11Effects::g_NullRenderTargetView
	je	$lExit$10
	mov	eax, DWORD PTR _ppRenderTargetView$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $lExit$10

; 627  :     {
; 628  :         SIZE_T index = *ppRenderTargetView - m_pOldRenderTargetViews;

	mov	eax, DWORD PTR _ppRenderTargetView$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx+156]
	sar	edx, 2
	mov	DWORD PTR _index$1[ebp], edx
$LN6@FixupRende:

; 629  :         D3DXASSERT( index * sizeof(SRenderTargetView) == ((size_t)*ppRenderTargetView - (size_t)m_pOldRenderTargetViews) );

	mov	eax, DWORD PTR _index$1[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _ppRenderTargetView$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	sub	ecx, DWORD PTR [edx+156]
	cmp	eax, ecx
	je	SHORT $LN5@FixupRende
	push	OFFSET ??_C@_0GF@BPLAAPBL@index?5?$CK?5sizeof?$CISRenderTargetView@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FixupRenderTargetViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSRenderTargetView@3@@Z@4JA
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN5@FixupRende:
	xor	eax, eax
	jne	SHORT $LN6@FixupRende

; 630  :         VBD( index < m_pEffect->m_RenderTargetViewCount, "Internal loading error: invalid RTV index." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _index$1[ebp]
	cmp	edx, DWORD PTR [ecx+148]
	jb	SHORT $LN2@FixupRende
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $lExit$10
	jmp	SHORT $lExit$10
$LN2@FixupRende:

; 631  :         *ppRenderTargetView = m_pEffect->m_pRenderTargetViews + index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+152]
	mov	eax, DWORD PTR _index$1[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _ppRenderTargetView$[ebp]
	mov	DWORD PTR [edx], ecx
$lExit$10:

; 632  :     }
; 633  : 
; 634  : lExit:
; 635  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 636  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FixupRenderTargetViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSRenderTargetView@2@@Z ENDP ; D3DX11Effects::CEffectLoader::FixupRenderTargetViewPointer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?FixupUnorderedAccessViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSUnorderedAccessView@2@@Z
_TEXT	SEGMENT
_index$1 = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_ppUnorderedAccessView$ = 8				; size = 4
?FixupUnorderedAccessViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSUnorderedAccessView@2@@Z PROC ; D3DX11Effects::CEffectLoader::FixupUnorderedAccessViewPointer, COMDAT
; _this$ = ecx

; 608  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 609  :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 610  :     if (*ppUnorderedAccessView != &g_NullUnorderedAccessView && *ppUnorderedAccessView != NULL)

	mov	eax, DWORD PTR _ppUnorderedAccessView$[ebp]
	cmp	DWORD PTR [eax], OFFSET ?g_NullUnorderedAccessView@D3DX11Effects@@3USUnorderedAccessView@1@A ; D3DX11Effects::g_NullUnorderedAccessView
	je	$lExit$10
	mov	eax, DWORD PTR _ppUnorderedAccessView$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $lExit$10

; 611  :     {
; 612  :         SIZE_T index = *ppUnorderedAccessView - m_pOldUnorderedAccessViews;

	mov	eax, DWORD PTR _ppUnorderedAccessView$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx+152]
	sar	edx, 2
	mov	DWORD PTR _index$1[ebp], edx
$LN6@FixupUnord:

; 613  :         D3DXASSERT( index * sizeof(SUnorderedAccessView) == ((size_t)*ppUnorderedAccessView - (size_t)m_pOldUnorderedAccessViews) );

	mov	eax, DWORD PTR _index$1[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _ppUnorderedAccessView$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	sub	ecx, DWORD PTR [edx+152]
	cmp	eax, ecx
	je	SHORT $LN5@FixupUnord
	push	OFFSET ??_C@_0GO@DKPEPIML@index?5?$CK?5sizeof?$CISUnorderedAccessV@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FixupUnorderedAccessViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSUnorderedAccessView@3@@Z@4JA
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN5@FixupUnord:
	xor	eax, eax
	jne	SHORT $LN6@FixupUnord

; 614  : 
; 615  :         VBD( index < m_pEffect->m_UnorderedAccessViewCount, "Internal loading error: invalid UAV index." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _index$1[ebp]
	cmp	edx, DWORD PTR [ecx+140]
	jb	SHORT $LN2@FixupUnord
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $lExit$10
	jmp	SHORT $lExit$10
$LN2@FixupUnord:

; 616  :         *ppUnorderedAccessView = m_pEffect->m_pUnorderedAccessViews + index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+144]
	mov	eax, DWORD PTR _index$1[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _ppUnorderedAccessView$[ebp]
	mov	DWORD PTR [edx], ecx
$lExit$10:

; 617  :     }
; 618  : 
; 619  : lExit:
; 620  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 621  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FixupUnorderedAccessViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSUnorderedAccessView@2@@Z ENDP ; D3DX11Effects::CEffectLoader::FixupUnorderedAccessViewPointer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?FixupShaderResourcePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderResource@2@@Z
_TEXT	SEGMENT
_index$1 = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_ppResource$ = 8					; size = 4
?FixupShaderResourcePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderResource@2@@Z PROC ; D3DX11Effects::CEffectLoader::FixupShaderResourcePointer, COMDAT
; _this$ = ecx

; 580  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 581  :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 582  :     if (*ppResource != &g_NullTexture && *ppResource != NULL)

	mov	eax, DWORD PTR _ppResource$[ebp]
	cmp	DWORD PTR [eax], OFFSET ?g_NullTexture@D3DX11Effects@@3USShaderResource@1@A ; D3DX11Effects::g_NullTexture
	je	$lExit$16
	mov	eax, DWORD PTR _ppResource$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$lExit$16

; 583  :     {
; 584  :         SIZE_T index = *ppResource - m_pOldShaderResources;

	mov	eax, DWORD PTR _ppResource$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx+148]
	sar	edx, 2
	mov	DWORD PTR _index$1[ebp], edx
$LN12@FixupShade:

; 585  :         D3DXASSERT( index * sizeof(SShaderResource) == ((size_t)*ppResource - (size_t)m_pOldShaderResources) );

	mov	eax, DWORD PTR _index$1[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _ppResource$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	sub	ecx, DWORD PTR [edx+148]
	cmp	eax, ecx
	je	SHORT $LN11@FixupShade
	push	OFFSET ??_C@_0FJ@HNIAAANN@index?5?$CK?5sizeof?$CISShaderResource?$CJ?5@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FixupShaderResourcePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderResource@3@@Z@4JA
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN11@FixupShade:
	xor	eax, eax
	jne	SHORT $LN12@FixupShade

; 586  :         
; 587  :         // could be a TBuffer or a texture; better check first
; 588  :         if (index < m_pEffect->m_ShaderResourceCount)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _index$1[ebp]
	cmp	edx, DWORD PTR [ecx+132]
	jae	SHORT $LN8@FixupShade

; 589  :         {
; 590  :             *ppResource = m_pEffect->m_pShaderResources + index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+136]
	mov	eax, DWORD PTR _index$1[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _ppResource$[ebp]
	mov	DWORD PTR [edx], ecx

; 591  :         }
; 592  :         else

	jmp	$lExit$16
$LN8@FixupShade:

; 593  :         {
; 594  :             // if this is a TBuffer, then the shader resource pointer
; 595  :             // actually points into a SConstantBuffer's TBuffer field
; 596  :             index = (SConstantBuffer*)*ppResource - (SConstantBuffer*)&m_pOldCBs->TBuffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _ppResource$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, ecx
	cdq
	mov	ecx, 60					; 0000003cH
	idiv	ecx
	mov	DWORD PTR _index$1[ebp], eax
$LN6@FixupShade:

; 597  :             D3DXASSERT( index * sizeof(SConstantBuffer) == ((size_t)(SConstantBuffer*)*ppResource - (size_t)(SConstantBuffer*)&m_pOldCBs->TBuffer) );

	imul	eax, DWORD PTR _index$1[ebp], 60
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	add	edx, 12					; 0000000cH
	mov	ecx, DWORD PTR _ppResource$[ebp]
	mov	ecx, DWORD PTR [ecx]
	sub	ecx, edx
	cmp	eax, ecx
	je	SHORT $LN5@FixupShade
	push	OFFSET ??_C@_0HL@CPLEJCIJ@index?5?$CK?5sizeof?$CISConstantBuffer?$CJ?5@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FixupShaderResourcePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderResource@3@@Z@4JA
	add	eax, 17					; 00000011H
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN5@FixupShade:
	xor	eax, eax
	jne	SHORT $LN6@FixupShade

; 598  :             VBD( index < m_pEffect->m_CBCount, "Internal loading error: invalid SRV index." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _index$1[ebp]
	cmp	edx, DWORD PTR [ecx+116]
	jb	SHORT $LN2@FixupShade
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $lExit$16
	jmp	SHORT $lExit$16
$LN2@FixupShade:

; 599  :             *ppResource = &m_pEffect->m_pCBs[index].TBuffer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _index$1[ebp], 60
	mov	eax, DWORD PTR [ecx+120]
	lea	ecx, DWORD PTR [eax+edx+12]
	mov	edx, DWORD PTR _ppResource$[ebp]
	mov	DWORD PTR [edx], ecx
$lExit$16:

; 600  :         }
; 601  :     }
; 602  :     
; 603  : lExit:
; 604  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 605  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FixupShaderResourcePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderResource@2@@Z ENDP ; D3DX11Effects::CEffectLoader::FixupShaderResourcePointer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?FixupInterfacePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSInterface@2@_N@Z
_TEXT	SEGMENT
_index$1 = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_ppInterface$ = 8					; size = 4
_CheckBackgroundInterfaces$ = 12			; size = 1
?FixupInterfacePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSInterface@2@_N@Z PROC ; D3DX11Effects::CEffectLoader::FixupInterfacePointer, COMDAT
; _this$ = ecx

; 549  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 550  :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 551  :     if (*ppInterface != &g_NullInterface && *ppInterface != NULL)

	mov	eax, DWORD PTR _ppInterface$[ebp]
	cmp	DWORD PTR [eax], OFFSET ?g_NullInterface@D3DX11Effects@@3USInterface@1@A ; D3DX11Effects::g_NullInterface
	je	$lExit$18
	mov	eax, DWORD PTR _ppInterface$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$lExit$18

; 552  :     {
; 553  :         SIZE_T index = *ppInterface - m_pOldInterfaces;

	mov	eax, DWORD PTR _ppInterface$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx+144]
	sar	edx, 2
	mov	DWORD PTR _index$1[ebp], edx

; 554  :         if(index < m_OldInterfaceCount)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$1[ebp]
	cmp	ecx, DWORD PTR [eax+140]
	jae	SHORT $LN14@FixupInter
$LN13@FixupInter:

; 555  :         {
; 556  :             D3DXASSERT( index * sizeof(SInterface) == ((size_t)*ppInterface - (size_t)m_pOldInterfaces) );

	mov	eax, DWORD PTR _index$1[ebp]
	shl	eax, 2
	mov	ecx, DWORD PTR _ppInterface$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	sub	ecx, DWORD PTR [edx+144]
	cmp	eax, ecx
	je	SHORT $LN12@FixupInter
	push	OFFSET ??_C@_0FA@JGMDEBIG@index?5?$CK?5sizeof?$CISInterface?$CJ?5?$DN?$DN?5?$CI?$CI@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FixupInterfacePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSInterface@3@_N@Z@4JA
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN12@FixupInter:
	xor	eax, eax
	jne	SHORT $LN13@FixupInter

; 557  :             *ppInterface = m_pEffect->m_pInterfaces + index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+112]
	mov	eax, DWORD PTR _index$1[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _ppInterface$[ebp]
	mov	DWORD PTR [edx], ecx

; 558  :         }
; 559  :         else

	jmp	$lExit$18
$LN14@FixupInter:

; 560  :         {
; 561  :             VBD( CheckBackgroundInterfaces, "Internal loading error: invalid interface pointer." );

	movzx	eax, BYTE PTR _CheckBackgroundInterfaces$[ebp]
	test	eax, eax
	jne	SHORT $LN8@FixupInter
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $lExit$18
	jmp	SHORT $lExit$18
$LN8@FixupInter:

; 562  :             for( index=0; index < m_BackgroundInterfaces.GetSize(); index++ )

	mov	DWORD PTR _index$1[ebp], 0
	jmp	SHORT $LN6@FixupInter
$LN5@FixupInter:
	mov	eax, DWORD PTR _index$1[ebp]
	add	eax, 1
	mov	DWORD PTR _index$1[ebp], eax
$LN6@FixupInter:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	?GetSize@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QBEIXZ ; CEffectVector<D3DX11Effects::SInterface *>::GetSize
	cmp	DWORD PTR _index$1[ebp], eax
	jae	SHORT $LN4@FixupInter

; 563  :             {
; 564  :                 if( *ppInterface == m_BackgroundInterfaces[ (UINT)index ] )

	mov	eax, DWORD PTR _index$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	??A?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAEAAPAUSInterface@D3DX11Effects@@I@Z ; CEffectVector<D3DX11Effects::SInterface *>::operator[]
	mov	ecx, DWORD PTR _ppInterface$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN3@FixupInter

; 565  :                 {
; 566  :                     // The interfaces m_BackgroundInterfaces were concatenated to the original ones in m_pEffect->m_pInterfaces
; 567  :                     *ppInterface = m_pEffect->m_pInterfaces + (m_OldInterfaceCount + index);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	add	eax, DWORD PTR _index$1[ebp]
	mov	ecx, DWORD PTR [ecx+112]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR _ppInterface$[ebp]
	mov	DWORD PTR [eax], edx

; 568  :                     break;

	jmp	SHORT $LN4@FixupInter
$LN3@FixupInter:

; 569  :                 }
; 570  :             }

	jmp	SHORT $LN5@FixupInter
$LN4@FixupInter:

; 571  :             VBD( index < m_BackgroundInterfaces.GetSize(), "Internal loading error: invalid interface pointer." );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	?GetSize@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QBEIXZ ; CEffectVector<D3DX11Effects::SInterface *>::GetSize
	cmp	DWORD PTR _index$1[ebp], eax
	jb	SHORT $lExit$18
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
$lExit$18:

; 572  :         }
; 573  :     }
; 574  : 
; 575  : lExit:
; 576  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 577  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?FixupInterfacePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSInterface@2@_N@Z ENDP ; D3DX11Effects::CEffectLoader::FixupInterfacePointer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?FixupRSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSRasterizerBlock@2@@Z
_TEXT	SEGMENT
_index$1 = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_ppRSBlock$ = 8						; size = 4
?FixupRSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSRasterizerBlock@2@@Z PROC ; D3DX11Effects::CEffectLoader::FixupRSPointer, COMDAT
; _this$ = ecx

; 523  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 524  :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 525  :     if (*ppRSBlock != &g_NullRasterizer && *ppRSBlock != NULL)

	mov	eax, DWORD PTR _ppRSBlock$[ebp]
	cmp	DWORD PTR [eax], OFFSET ?g_NullRasterizer@D3DX11Effects@@3USRasterizerBlock@1@A ; D3DX11Effects::g_NullRasterizer
	je	SHORT $lExit$10
	mov	eax, DWORD PTR _ppRSBlock$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $lExit$10

; 526  :     {
; 527  :         SIZE_T index = *ppRSBlock - m_pOldRS;

	mov	eax, DWORD PTR _ppRSBlock$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx+128]
	sar	edx, 6
	mov	DWORD PTR _index$1[ebp], edx
$LN6@FixupRSPoi:

; 528  :         D3DXASSERT( index * sizeof(SRasterizerBlock) == ((size_t)*ppRSBlock - (size_t)m_pOldRS) );

	mov	eax, DWORD PTR _index$1[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _ppRSBlock$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	sub	ecx, DWORD PTR [edx+128]
	cmp	eax, ecx
	je	SHORT $LN5@FixupRSPoi
	push	OFFSET ??_C@_0EM@COJALNDC@index?5?$CK?5sizeof?$CISRasterizerBlock?$CJ@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FixupRSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSRasterizerBlock@3@@Z@4JA
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN5@FixupRSPoi:
	xor	eax, eax
	jne	SHORT $LN6@FixupRSPoi

; 529  :         VBD( index < m_pEffect->m_RasterizerBlockCount, "Internal loading error: invalid rasterizer state index." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _index$1[ebp]
	cmp	edx, DWORD PTR [ecx+84]
	jb	SHORT $LN2@FixupRSPoi
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $lExit$10
	jmp	SHORT $lExit$10
$LN2@FixupRSPoi:

; 530  :         *ppRSBlock = m_pEffect->m_pRasterizerBlocks + index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _index$1[ebp]
	shl	edx, 6
	add	edx, DWORD PTR [ecx+88]
	mov	eax, DWORD PTR _ppRSBlock$[ebp]
	mov	DWORD PTR [eax], edx
$lExit$10:

; 531  :     }
; 532  : lExit:
; 533  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 534  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FixupRSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSRasterizerBlock@2@@Z ENDP ; D3DX11Effects::CEffectLoader::FixupRSPointer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?FixupABPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSBlendBlock@2@@Z
_TEXT	SEGMENT
_index$1 = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_ppABBlock$ = 8						; size = 4
?FixupABPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSBlendBlock@2@@Z PROC ; D3DX11Effects::CEffectLoader::FixupABPointer, COMDAT
; _this$ = ecx

; 509  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 510  :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 511  :     if (*ppABBlock != &g_NullBlend && *ppABBlock != NULL)

	mov	eax, DWORD PTR _ppABBlock$[ebp]
	cmp	DWORD PTR [eax], OFFSET ?g_NullBlend@D3DX11Effects@@3USBlendBlock@1@A ; D3DX11Effects::g_NullBlend
	je	SHORT $lExit$10
	mov	eax, DWORD PTR _ppABBlock$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $lExit$10

; 512  :     {
; 513  :         SIZE_T index = *ppABBlock - m_pOldAB;

	mov	eax, DWORD PTR _ppABBlock$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx+124]
	cdq
	mov	ecx, 288				; 00000120H
	idiv	ecx
	mov	DWORD PTR _index$1[ebp], eax
$LN6@FixupABPoi:

; 514  :         D3DXASSERT( index * sizeof(SBlendBlock) == ((size_t)*ppABBlock - (size_t)m_pOldAB) );

	imul	eax, DWORD PTR _index$1[ebp], 288
	mov	ecx, DWORD PTR _ppABBlock$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	sub	ecx, DWORD PTR [edx+124]
	cmp	eax, ecx
	je	SHORT $LN5@FixupABPoi
	push	OFFSET ??_C@_0EH@EEOKIBCN@index?5?$CK?5sizeof?$CISBlendBlock?$CJ?5?$DN?$DN?5?$CI@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FixupABPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSBlendBlock@3@@Z@4JA
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN5@FixupABPoi:
	xor	eax, eax
	jne	SHORT $LN6@FixupABPoi

; 515  :         VBD( index < m_pEffect->m_BlendBlockCount, "Internal loading error: invalid blend state index." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _index$1[ebp]
	cmp	edx, DWORD PTR [ecx+76]
	jb	SHORT $LN2@FixupABPoi
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $lExit$10
	jmp	SHORT $lExit$10
$LN2@FixupABPoi:

; 516  :         *ppABBlock = m_pEffect->m_pBlendBlocks + index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _index$1[ebp], 288
	add	edx, DWORD PTR [ecx+80]
	mov	eax, DWORD PTR _ppABBlock$[ebp]
	mov	DWORD PTR [eax], edx
$lExit$10:

; 517  :     }
; 518  : lExit:
; 519  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 520  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FixupABPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSBlendBlock@2@@Z ENDP ; D3DX11Effects::CEffectLoader::FixupABPointer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?FixupDSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSDepthStencilBlock@2@@Z
_TEXT	SEGMENT
_index$1 = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_ppDSBlock$ = 8						; size = 4
?FixupDSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSDepthStencilBlock@2@@Z PROC ; D3DX11Effects::CEffectLoader::FixupDSPointer, COMDAT
; _this$ = ecx

; 495  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 496  :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 497  :     if (*ppDSBlock != &g_NullDepthStencil && *ppDSBlock != NULL)

	mov	eax, DWORD PTR _ppDSBlock$[ebp]
	cmp	DWORD PTR [eax], OFFSET ?g_NullDepthStencil@D3DX11Effects@@3USDepthStencilBlock@1@A ; D3DX11Effects::g_NullDepthStencil
	je	SHORT $lExit$10
	mov	eax, DWORD PTR _ppDSBlock$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $lExit$10

; 498  :     {
; 499  :         SIZE_T index = *ppDSBlock - m_pOldDS;

	mov	eax, DWORD PTR _ppDSBlock$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx+120]
	cdq
	mov	ecx, 76					; 0000004cH
	idiv	ecx
	mov	DWORD PTR _index$1[ebp], eax
$LN6@FixupDSPoi:

; 500  :         D3DXASSERT( index * sizeof(SDepthStencilBlock) == ((size_t)*ppDSBlock - (size_t)m_pOldDS) );

	imul	eax, DWORD PTR _index$1[ebp], 76
	mov	ecx, DWORD PTR _ppDSBlock$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	sub	ecx, DWORD PTR [edx+120]
	cmp	eax, ecx
	je	SHORT $LN5@FixupDSPoi
	push	OFFSET ??_C@_0EO@EMFBLMHI@index?5?$CK?5sizeof?$CISDepthStencilBloc@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FixupDSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSDepthStencilBlock@3@@Z@4JA
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN5@FixupDSPoi:
	xor	eax, eax
	jne	SHORT $LN6@FixupDSPoi

; 501  :         VBD( index < m_pEffect->m_DepthStencilBlockCount, "Internal loading error: invalid depth-stencil state index." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _index$1[ebp]
	cmp	edx, DWORD PTR [ecx+68]
	jb	SHORT $LN2@FixupDSPoi
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $lExit$10
	jmp	SHORT $lExit$10
$LN2@FixupDSPoi:

; 502  :         *ppDSBlock = m_pEffect->m_pDepthStencilBlocks + index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _index$1[ebp], 76
	add	edx, DWORD PTR [ecx+72]
	mov	eax, DWORD PTR _ppDSBlock$[ebp]
	mov	DWORD PTR [eax], edx
$lExit$10:

; 503  :     }
; 504  : lExit:
; 505  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 506  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FixupDSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSDepthStencilBlock@2@@Z ENDP ; D3DX11Effects::CEffectLoader::FixupDSPointer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?FixupShaderPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderBlock@2@@Z
_TEXT	SEGMENT
_index$1 = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_ppShaderBlock$ = 8					; size = 4
?FixupShaderPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderBlock@2@@Z PROC ; D3DX11Effects::CEffectLoader::FixupShaderPointer, COMDAT
; _this$ = ecx

; 479  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 480  :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 481  :     if (*ppShaderBlock != &g_NullVS && *ppShaderBlock != &g_NullGS && *ppShaderBlock != &g_NullPS &&
; 482  :         *ppShaderBlock != &g_NullHS && *ppShaderBlock != &g_NullDS && *ppShaderBlock != &g_NullCS && 
; 483  :         *ppShaderBlock != NULL)

	mov	eax, DWORD PTR _ppShaderBlock$[ebp]
	cmp	DWORD PTR [eax], OFFSET ?g_NullVS@D3DX11Effects@@3USShaderBlock@1@A ; D3DX11Effects::g_NullVS
	je	$lExit$10
	mov	eax, DWORD PTR _ppShaderBlock$[ebp]
	cmp	DWORD PTR [eax], OFFSET ?g_NullGS@D3DX11Effects@@3USShaderBlock@1@A ; D3DX11Effects::g_NullGS
	je	$lExit$10
	mov	eax, DWORD PTR _ppShaderBlock$[ebp]
	cmp	DWORD PTR [eax], OFFSET ?g_NullPS@D3DX11Effects@@3USShaderBlock@1@A ; D3DX11Effects::g_NullPS
	je	$lExit$10
	mov	eax, DWORD PTR _ppShaderBlock$[ebp]
	cmp	DWORD PTR [eax], OFFSET ?g_NullHS@D3DX11Effects@@3USShaderBlock@1@A ; D3DX11Effects::g_NullHS
	je	$lExit$10
	mov	eax, DWORD PTR _ppShaderBlock$[ebp]
	cmp	DWORD PTR [eax], OFFSET ?g_NullDS@D3DX11Effects@@3USShaderBlock@1@A ; D3DX11Effects::g_NullDS
	je	$lExit$10
	mov	eax, DWORD PTR _ppShaderBlock$[ebp]
	cmp	DWORD PTR [eax], OFFSET ?g_NullCS@D3DX11Effects@@3USShaderBlock@1@A ; D3DX11Effects::g_NullCS
	je	SHORT $lExit$10
	mov	eax, DWORD PTR _ppShaderBlock$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $lExit$10

; 484  :     {
; 485  :         SIZE_T index = *ppShaderBlock - m_pOldShaders;

	mov	eax, DWORD PTR _ppShaderBlock$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx+116]
	cdq
	mov	ecx, 68					; 00000044H
	idiv	ecx
	mov	DWORD PTR _index$1[ebp], eax
$LN6@FixupShade:

; 486  :         D3DXASSERT( index * sizeof(SShaderBlock) == ((size_t)*ppShaderBlock - (size_t)m_pOldShaders) );

	imul	eax, DWORD PTR _index$1[ebp], 68
	mov	ecx, DWORD PTR _ppShaderBlock$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	sub	ecx, DWORD PTR [edx+116]
	cmp	eax, ecx
	je	SHORT $LN5@FixupShade
	push	OFFSET ??_C@_0FB@MDPFEFHI@index?5?$CK?5sizeof?$CISShaderBlock?$CJ?5?$DN?$DN?5@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FixupShaderPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderBlock@3@@Z@4JA
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN5@FixupShade:
	xor	eax, eax
	jne	SHORT $LN6@FixupShade

; 487  :         VBD( index < m_pEffect->m_ShaderBlockCount, "Internal loading error: invalid shader index."  );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _index$1[ebp]
	cmp	edx, DWORD PTR [ecx+60]
	jb	SHORT $LN2@FixupShade
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $lExit$10
	jmp	SHORT $lExit$10
$LN2@FixupShade:

; 488  :         *ppShaderBlock = m_pEffect->m_pShaderBlocks + index;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _index$1[ebp], 68
	add	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR _ppShaderBlock$[ebp]
	mov	DWORD PTR [eax], edx
$lExit$10:

; 489  :     }
; 490  : lExit:
; 491  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 492  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FixupShaderPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderBlock@2@@Z ENDP ; D3DX11Effects::CEffectLoader::FixupShaderPointer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?FixupCBPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSConstantBuffer@2@@Z
_TEXT	SEGMENT
_index$ = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_ppCB$ = 8						; size = 4
?FixupCBPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSConstantBuffer@2@@Z PROC ; D3DX11Effects::CEffectLoader::FixupCBPointer, COMDAT
; _this$ = ecx

; 466  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 467  :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 468  :     
; 469  :     SIZE_T index = (SConstantBuffer*)*ppCB - m_pOldCBs;

	mov	eax, DWORD PTR _ppCB$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx+132]
	cdq
	mov	ecx, 60					; 0000003cH
	idiv	ecx
	mov	DWORD PTR _index$[ebp], eax
$LN6@FixupCBPoi:

; 470  :     D3DXASSERT( index * sizeof(SConstantBuffer) == ((size_t)(SConstantBuffer*)*ppCB - (size_t)m_pOldCBs) );

	imul	eax, DWORD PTR _index$[ebp], 60
	mov	ecx, DWORD PTR _ppCB$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	sub	ecx, DWORD PTR [edx+132]
	cmp	eax, ecx
	je	SHORT $LN5@FixupCBPoi
	push	OFFSET ??_C@_0FJ@INHMCKEN@index?5?$CK?5sizeof?$CISConstantBuffer?$CJ?5@
	mov	eax, DWORD PTR ?__LINE__Var@?1??FixupCBPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSConstantBuffer@3@@Z@4JA
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN5@FixupCBPoi:
	xor	eax, eax
	jne	SHORT $LN6@FixupCBPoi

; 471  :     VBD( index < m_pEffect->m_CBCount, "Internal loading error: invalid constant buffer index." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _index$[ebp]
	cmp	edx, DWORD PTR [ecx+116]
	jb	SHORT $LN2@FixupCBPoi
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $lExit$9
	jmp	SHORT $lExit$9
$LN2@FixupCBPoi:

; 472  :     *ppCB = (SConstantBuffer*)(m_pEffect->m_pCBs + index);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _index$[ebp], 60
	add	edx, DWORD PTR [ecx+120]
	mov	eax, DWORD PTR _ppCB$[ebp]
	mov	DWORD PTR [eax], edx
$lExit$9:

; 473  :     
; 474  : lExit:
; 475  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 476  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FixupCBPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSConstantBuffer@2@@Z ENDP ; D3DX11Effects::CEffectLoader::FixupCBPointer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?CalculateShaderBlockSize@CEffectLoader@D3DX11Effects@@IAEIXZ
_TEXT	SEGMENT
_pUAVDeps$1 = -116					; size = 4
_pResourceDeps$2 = -104					; size = 4
_pInterfaceDeps$3 = -92					; size = 4
_pSampDeps$4 = -80					; size = 4
_pCBDeps$5 = -68					; size = 4
_pShader$6 = -56					; size = 4
_j$ = -44						; size = 4
_i$ = -32						; size = 4
_dwSize$ = -20						; size = 4
_this$ = -8						; size = 4
?CalculateShaderBlockSize@CEffectLoader@D3DX11Effects@@IAEIXZ PROC ; D3DX11Effects::CEffectLoader::CalculateShaderBlockSize, COMDAT
; _this$ = ecx

; 3539 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3540 :     UINT  dwSize = 0;

	mov	DWORD PTR _dwSize$[ebp], 0

; 3541 :     UINT  i, j;
; 3542 :     
; 3543 :     for (i=0; i<m_pEffect->m_ShaderBlockCount; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN18@CalculateS
$LN17@CalculateS:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN18@CalculateS:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+60]
	jae	$LN16@CalculateS

; 3544 :     {
; 3545 :         SShaderBlock *pShader = &m_pEffect->m_pShaderBlocks[i];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _i$[ebp], 68
	add	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR _pShader$6[ebp], edx

; 3546 : 
; 3547 :         dwSize += AlignToPowerOf2(pShader->CBDepCount * sizeof(SShaderCBDependency), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _pShader$6[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shl	ecx, 4
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	add	eax, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR _dwSize$[ebp], eax

; 3548 :         dwSize += AlignToPowerOf2(pShader->SampDepCount * sizeof(SShaderSamplerDependency), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _pShader$6[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shl	ecx, 4
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	add	eax, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR _dwSize$[ebp], eax

; 3549 :         dwSize += AlignToPowerOf2(pShader->InterfaceDepCount * sizeof(SInterfaceDependency), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _pShader$6[ebp]
	mov	ecx, DWORD PTR [eax+32]
	shl	ecx, 4
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	add	eax, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR _dwSize$[ebp], eax

; 3550 :         dwSize += AlignToPowerOf2(pShader->ResourceDepCount * sizeof(SShaderResourceDependency), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _pShader$6[ebp]
	mov	ecx, DWORD PTR [eax+40]
	shl	ecx, 4
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	add	eax, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR _dwSize$[ebp], eax

; 3551 :         dwSize += AlignToPowerOf2(pShader->UAVDepCount * sizeof(SUnorderedAccessViewDependency), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _pShader$6[ebp]
	mov	ecx, DWORD PTR [eax+48]
	shl	ecx, 4
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	add	eax, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR _dwSize$[ebp], eax

; 3552 :         dwSize += AlignToPowerOf2(pShader->TBufferDepCount * sizeof(SConstantBuffer*), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _pShader$6[ebp]
	mov	ecx, DWORD PTR [eax+56]
	shl	ecx, 2
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	add	eax, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR _dwSize$[ebp], eax

; 3553 : 
; 3554 :         for (j=0; j<pShader->CBDepCount; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN15@CalculateS
$LN14@CalculateS:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN15@CalculateS:
	mov	eax, DWORD PTR _pShader$6[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN13@CalculateS

; 3555 :         {
; 3556 :             SShaderCBDependency *pCBDeps = &pShader->pCBDeps[j];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _pShader$6[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR _pCBDeps$5[ebp], eax

; 3557 :             dwSize += AlignToPowerOf2(pCBDeps->Count * sizeof(ID3D11Buffer*), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _pCBDeps$5[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	add	eax, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR _dwSize$[ebp], eax

; 3558 :             dwSize += AlignToPowerOf2(pCBDeps->Count * sizeof(SConstantBuffer*), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _pCBDeps$5[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	add	eax, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR _dwSize$[ebp], eax

; 3559 :         }

	jmp	SHORT $LN14@CalculateS
$LN13@CalculateS:

; 3560 : 
; 3561 :         for (j=0; j<pShader->SampDepCount; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN12@CalculateS
$LN11@CalculateS:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN12@CalculateS:
	mov	eax, DWORD PTR _pShader$6[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jae	SHORT $LN10@CalculateS

; 3562 :         {
; 3563 :             SShaderSamplerDependency *pSampDeps = &pShader->pSampDeps[j];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _pShader$6[ebp]
	add	eax, DWORD PTR [ecx+28]
	mov	DWORD PTR _pSampDeps$4[ebp], eax

; 3564 :             dwSize += AlignToPowerOf2(pSampDeps->Count * sizeof(ID3D11SamplerState*), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _pSampDeps$4[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	add	eax, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR _dwSize$[ebp], eax

; 3565 :             dwSize += AlignToPowerOf2(pSampDeps->Count * sizeof(SSamplerBlock*), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _pSampDeps$4[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	add	eax, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR _dwSize$[ebp], eax

; 3566 :         }

	jmp	SHORT $LN11@CalculateS
$LN10@CalculateS:

; 3567 : 
; 3568 :         for (j=0; j<pShader->InterfaceDepCount; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN9@CalculateS
$LN8@CalculateS:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN9@CalculateS:
	mov	eax, DWORD PTR _pShader$6[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jae	SHORT $LN7@CalculateS

; 3569 :         {
; 3570 :             SInterfaceDependency *pInterfaceDeps = &pShader->pInterfaceDeps[j];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _pShader$6[ebp]
	add	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR _pInterfaceDeps$3[ebp], eax

; 3571 :             dwSize += AlignToPowerOf2(pInterfaceDeps->Count * sizeof(ID3D11ClassInstance*), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _pInterfaceDeps$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	add	eax, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR _dwSize$[ebp], eax

; 3572 :             dwSize += AlignToPowerOf2(pInterfaceDeps->Count * sizeof(SInterface*), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _pInterfaceDeps$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	add	eax, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR _dwSize$[ebp], eax

; 3573 :         }

	jmp	SHORT $LN8@CalculateS
$LN7@CalculateS:

; 3574 : 
; 3575 :         for (j=0; j<pShader->ResourceDepCount; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN6@CalculateS
$LN5@CalculateS:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN6@CalculateS:
	mov	eax, DWORD PTR _pShader$6[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+40]
	jae	SHORT $LN4@CalculateS

; 3576 :         {
; 3577 :             SShaderResourceDependency *pResourceDeps = &pShader->pResourceDeps[j];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _pShader$6[ebp]
	add	eax, DWORD PTR [ecx+44]
	mov	DWORD PTR _pResourceDeps$2[ebp], eax

; 3578 :             dwSize += AlignToPowerOf2(pResourceDeps->Count * sizeof(ID3D11ShaderResourceView*), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _pResourceDeps$2[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	add	eax, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR _dwSize$[ebp], eax

; 3579 :             dwSize += AlignToPowerOf2(pResourceDeps->Count * sizeof(SShaderResource*), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _pResourceDeps$2[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	add	eax, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR _dwSize$[ebp], eax

; 3580 :         }

	jmp	SHORT $LN5@CalculateS
$LN4@CalculateS:

; 3581 : 
; 3582 :         for (j=0; j<pShader->UAVDepCount; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN3@CalculateS
$LN2@CalculateS:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN3@CalculateS:
	mov	eax, DWORD PTR _pShader$6[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+48]
	jae	SHORT $LN1@CalculateS

; 3583 :         {
; 3584 :             SUnorderedAccessViewDependency *pUAVDeps = &pShader->pUAVDeps[j];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _pShader$6[ebp]
	add	eax, DWORD PTR [ecx+52]
	mov	DWORD PTR _pUAVDeps$1[ebp], eax

; 3585 :             dwSize += AlignToPowerOf2(pUAVDeps->Count * sizeof(ID3D11UnorderedAccessView*), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _pUAVDeps$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	add	eax, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR _dwSize$[ebp], eax

; 3586 :             dwSize += AlignToPowerOf2(pUAVDeps->Count * sizeof(SUnorderedAccessView*), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _pUAVDeps$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	add	eax, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR _dwSize$[ebp], eax

; 3587 :         }

	jmp	SHORT $LN2@CalculateS
$LN1@CalculateS:

; 3588 :     }

	jmp	$LN17@CalculateS
$LN16@CalculateS:

; 3589 : 
; 3590 :     return dwSize;

	mov	eax, DWORD PTR _dwSize$[ebp]

; 3591 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CalculateShaderBlockSize@CEffectLoader@D3DX11Effects@@IAEIXZ ENDP ; D3DX11Effects::CEffectLoader::CalculateShaderBlockSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?CalculateAnnotationSize@CEffectLoader@D3DX11Effects@@IAEJIPAUSAnnotation@2@@Z
_TEXT	SEGMENT
tv157 = -244						; size = 4
_cElements$1 = -44					; size = 4
_i$ = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_cAnnotations$ = 8					; size = 4
_pAnnotations$ = 12					; size = 4
?CalculateAnnotationSize@CEffectLoader@D3DX11Effects@@IAEJIPAUSAnnotation@2@@Z PROC ; D3DX11Effects::CEffectLoader::CalculateAnnotationSize, COMDAT
; _this$ = ecx

; 3094 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3095 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 3096 :     UINT  i;
; 3097 : 
; 3098 :     m_ReflectionMemory += AlignToPowerOf2(cAnnotations * sizeof(SAnnotation), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _cAnnotations$[ebp]
	shl	eax, 5
	push	eax
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+184]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+184], eax

; 3099 :     for (i=0; i<cAnnotations; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@CalculateA
$LN6@CalculateA:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@CalculateA:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _cAnnotations$[ebp]
	jae	$lExit$12

; 3100 :     {
; 3101 :         if (pAnnotations[i].pType->BelongsInConstantBuffer())

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _pAnnotations$[ebp]
	mov	ecx, DWORD PTR [ecx+eax+12]
	call	?BelongsInConstantBuffer@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::BelongsInConstantBuffer
	test	eax, eax
	je	SHORT $LN4@CalculateA

; 3102 :         {
; 3103 :             m_ReflectionMemory += AlignToPowerOf2(pAnnotations[i].pType->TotalSize, c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _pAnnotations$[ebp]
	mov	edx, DWORD PTR [ecx+eax+12]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+184]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+184], eax

; 3104 :         }
; 3105 :         else

	jmp	$LN3@CalculateA
$LN4@CalculateA:

; 3106 :         {
; 3107 :             VBD( pAnnotations[i].pType->IsObjectType(EOT_String), "Invalid pEffectBuffer: invalid annotation type." );

	push	1
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _pAnnotations$[ebp]
	mov	ecx, DWORD PTR [ecx+eax+12]
	call	?IsObjectType@SType@D3DX11Effects@@QBEHW4EObjectType@2@@Z ; D3DX11Effects::SType::IsObjectType
	test	eax, eax
	jne	SHORT $LN2@CalculateA
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $lExit$12
	jmp	SHORT $lExit$12
$LN2@CalculateA:

; 3108 : 
; 3109 :             UINT  cElements;
; 3110 :             cElements = max(1, pAnnotations[i].pType->Elements);

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _pAnnotations$[ebp]
	mov	edx, DWORD PTR [ecx+eax+12]
	cmp	DWORD PTR [edx+8], 1
	jae	SHORT $LN10@CalculateA
	mov	DWORD PTR tv157[ebp], 1
	jmp	SHORT $LN11@CalculateA
$LN10@CalculateA:
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _pAnnotations$[ebp]
	mov	edx, DWORD PTR [ecx+eax+12]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv157[ebp], eax
$LN11@CalculateA:
	mov	ecx, DWORD PTR tv157[ebp]
	mov	DWORD PTR _cElements$1[ebp], ecx

; 3111 :             
; 3112 :             m_ReflectionMemory += AlignToPowerOf2(cElements * sizeof(SString), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _cElements$1[ebp]
	shl	eax, 2
	push	eax
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+184]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+184], eax
$LN3@CalculateA:

; 3113 :             
; 3114 :         }
; 3115 :     }

	jmp	$LN6@CalculateA
$lExit$12:

; 3116 : 
; 3117 : lExit:
; 3118 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 3119 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?CalculateAnnotationSize@CEffectLoader@D3DX11Effects@@IAEJIPAUSAnnotation@2@@Z ENDP ; D3DX11Effects::CEffectLoader::CalculateAnnotationSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?ReallocateAnnotationData@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAnnotation@2@@Z
_TEXT	SEGMENT
tv176 = -280						; size = 4
_cElements$1 = -80					; size = 4
_j$2 = -68						; size = 4
_pAn$3 = -56						; size = 4
_pAnnotations$ = -44					; size = 4
_i$ = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_cAnnotations$ = 8					; size = 4
_ppAnnotations$ = 12					; size = 4
?ReallocateAnnotationData@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAnnotation@2@@Z PROC ; D3DX11Effects::CEffectLoader::ReallocateAnnotationData, COMDAT
; _this$ = ecx

; 3122 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3123 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 3124 :     UINT  i;
; 3125 :     SAnnotation *pAnnotations;
; 3126 : 
; 3127 :     VHD( m_pReflection->m_Heap.MoveData((void**) ppAnnotations, cAnnotations * sizeof(SAnnotation)),
; 3128 :          "Internal loading error: cannot move annotation data." );

	mov	eax, DWORD PTR _cAnnotations$[ebp]
	shl	eax, 5
	push	eax
	mov	ecx, DWORD PTR _ppAnnotations$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+40]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN22@Reallocate
	jmp	$lExit$27
	jmp	$lExit$27
$LN22@Reallocate:

; 3129 :     pAnnotations = *ppAnnotations;

	mov	eax, DWORD PTR _ppAnnotations$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pAnnotations$[ebp], ecx

; 3130 : 
; 3131 :     for (i=0; i<cAnnotations; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN20@Reallocate
$LN19@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN20@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _cAnnotations$[ebp]
	jae	$lExit$27

; 3132 :     {
; 3133 :         SAnnotation *pAn = &pAnnotations[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, DWORD PTR _pAnnotations$[ebp]
	mov	DWORD PTR _pAn$3[ebp], eax

; 3134 :         pAn->pEffect = m_pEffect;

	mov	eax, DWORD PTR _pAn$3[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+28], edx

; 3135 : 
; 3136 :         VHD( m_pReflection->m_Heap.MoveString(&pAn->pName), "Internal loading error: cannot move annotation name." );

	mov	eax, DWORD PTR _pAn$3[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+40]
	call	?MoveString@CEffectHeap@D3DX11Effects@@QAEJPAPAD@Z ; D3DX11Effects::CEffectHeap::MoveString
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN17@Reallocate
	jmp	$lExit$27
	jmp	$lExit$27
$LN17@Reallocate:

; 3137 : 
; 3138 :         // Reallocate type later
; 3139 :         if (pAn->pType->BelongsInConstantBuffer())

	mov	eax, DWORD PTR _pAn$3[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?BelongsInConstantBuffer@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::BelongsInConstantBuffer
	test	eax, eax
	je	SHORT $LN15@Reallocate

; 3140 :         {
; 3141 :             VHD( m_pReflection->m_Heap.MoveData( &pAn->Data.pGeneric, pAn->pType->TotalSize ), "Internal loading error: cannot move annotation data." );

	mov	eax, DWORD PTR _pAn$3[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _pAn$3[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+40]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN14@Reallocate
	jmp	$lExit$27
	jmp	$lExit$27
$LN14@Reallocate:
	jmp	$LN12@Reallocate
$LN15@Reallocate:

; 3142 :         }
; 3143 :         else if (pAnnotations[i].pType->IsObjectType(EOT_String))

	push	1
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _pAnnotations$[ebp]
	mov	ecx, DWORD PTR [ecx+eax+12]
	call	?IsObjectType@SType@D3DX11Effects@@QBEHW4EObjectType@2@@Z ; D3DX11Effects::SType::IsObjectType
	test	eax, eax
	je	$LN11@Reallocate

; 3144 :         {
; 3145 :             UINT  j;
; 3146 :             UINT  cElements = max(1, pAn->pType->Elements);

	mov	eax, DWORD PTR _pAn$3[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx+8], 1
	jae	SHORT $LN25@Reallocate
	mov	DWORD PTR tv176[ebp], 1
	jmp	SHORT $LN26@Reallocate
$LN25@Reallocate:
	mov	edx, DWORD PTR _pAn$3[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv176[ebp], ecx
$LN26@Reallocate:
	mov	edx, DWORD PTR tv176[ebp]
	mov	DWORD PTR _cElements$1[ebp], edx

; 3147 :                         
; 3148 :             VHD( m_pReflection->m_Heap.MoveData((void**) &pAn->Data.pString, cElements * sizeof(SString)), "Internal loading error: cannot move annotation string." );

	mov	eax, DWORD PTR _cElements$1[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _pAn$3[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+40]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN10@Reallocate
	jmp	SHORT $lExit$27
	jmp	SHORT $lExit$27
$LN10@Reallocate:

; 3149 :             for (j = 0; j < cElements; ++ j)

	mov	DWORD PTR _j$2[ebp], 0
	jmp	SHORT $LN8@Reallocate
$LN7@Reallocate:
	mov	eax, DWORD PTR _j$2[ebp]
	add	eax, 1
	mov	DWORD PTR _j$2[ebp], eax
$LN8@Reallocate:
	mov	eax, DWORD PTR _j$2[ebp]
	cmp	eax, DWORD PTR _cElements$1[ebp]
	jae	SHORT $LN6@Reallocate

; 3150 :             {
; 3151 :                 VHD( m_pReflection->m_Heap.MoveString(&pAn->Data.pString[j].pString), "Internal loading error: cannot move annotation string element." );

	mov	eax, DWORD PTR _pAn$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _j$2[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+40]
	call	?MoveString@CEffectHeap@D3DX11Effects@@QAEJPAPAD@Z ; D3DX11Effects::CEffectHeap::MoveString
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN5@Reallocate
	jmp	SHORT $lExit$27
	jmp	SHORT $lExit$27
$LN5@Reallocate:

; 3152 :             }

	jmp	SHORT $LN7@Reallocate
$LN6@Reallocate:

; 3153 :         }
; 3154 :         else

	jmp	SHORT $LN12@Reallocate
$LN11@Reallocate:

; 3155 :         {
; 3156 :             VHD( E_FAIL, "Invalid pEffectBuffer: invalid annotation type." );

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN12@Reallocate
	jmp	SHORT $lExit$27
	jmp	SHORT $lExit$27
$LN12@Reallocate:

; 3157 :         }
; 3158 :     }

	jmp	$LN19@Reallocate
$lExit$27:

; 3159 : 
; 3160 : lExit:
; 3161 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 3162 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ReallocateAnnotationData@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAnnotation@2@@Z ENDP ; D3DX11Effects::CEffectLoader::ReallocateAnnotationData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?ReallocateShaderBlocks@CEffectLoader@D3DX11Effects@@IAEJXZ
_TEXT	SEGMENT
_pUAVDeps$1 = -152					; size = 4
_pResourceDeps$2 = -140					; size = 4
_pInterfaceDeps$3 = -128				; size = 4
_pSampDeps$4 = -116					; size = 4
_pCBDeps$5 = -104					; size = 4
_pShader$6 = -92					; size = 4
_pError$ = -80						; size = 4
_pHeap$ = -68						; size = 4
_k$ = -56						; size = 4
_j$ = -44						; size = 4
_i$ = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
?ReallocateShaderBlocks@CEffectLoader@D3DX11Effects@@IAEJXZ PROC ; D3DX11Effects::CEffectLoader::ReallocateShaderBlocks, COMDAT
; _this$ = ecx

; 3449 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 348				; 0000015cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-348]
	mov	ecx, 87					; 00000057H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3450 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 3451 :     UINT  i, j, k;
; 3452 :     CEffectHeap *pHeap = &m_pEffect->m_Heap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _pHeap$[ebp], ecx

; 3453 :     const char* pError = "Internal loading error: cannot move shader data.";

	mov	DWORD PTR _pError$[ebp], OFFSET ??_C@_0DB@CCEAMAH@Internal?5loading?5error?3?5cannot?5m@

; 3454 :     
; 3455 :     for (i=0; i<m_pEffect->m_ShaderBlockCount; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN80@Reallocate
$LN79@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN80@Reallocate:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+60]
	jae	$LN78@Reallocate

; 3456 :     {
; 3457 :         SShaderBlock *pShader = &m_pEffect->m_pShaderBlocks[i];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _i$[ebp], 68
	add	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR _pShader$6[ebp], edx

; 3458 : 
; 3459 :         // pShader->pReflection data and all of its members (bytecode, SO decl, etc.) are handled by ReallocateReflectionData()
; 3460 :         VHD( pHeap->MoveData((void**) &pShader->pCBDeps, pShader->CBDepCount * sizeof(SShaderCBDependency)), pError );

	mov	eax, DWORD PTR _pShader$6[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shl	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _pShader$6[ebp]
	add	edx, 20					; 00000014H
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN77@Reallocate
	jmp	$lExit$83
	jmp	$lExit$83
$LN77@Reallocate:

; 3461 :         VHD( pHeap->MoveData((void**) &pShader->pSampDeps, pShader->SampDepCount * sizeof(SShaderSamplerDependency)), pError );

	mov	eax, DWORD PTR _pShader$6[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shl	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _pShader$6[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN75@Reallocate
	jmp	$lExit$83
	jmp	$lExit$83
$LN75@Reallocate:

; 3462 :         VHD( pHeap->MoveData((void**) &pShader->pInterfaceDeps, pShader->InterfaceDepCount * sizeof(SInterfaceDependency)), pError );

	mov	eax, DWORD PTR _pShader$6[ebp]
	mov	ecx, DWORD PTR [eax+32]
	shl	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _pShader$6[ebp]
	add	edx, 36					; 00000024H
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN73@Reallocate
	jmp	$lExit$83
	jmp	$lExit$83
$LN73@Reallocate:

; 3463 :         VHD( pHeap->MoveData((void**) &pShader->pResourceDeps, pShader->ResourceDepCount * sizeof(SShaderResourceDependency)), pError );

	mov	eax, DWORD PTR _pShader$6[ebp]
	mov	ecx, DWORD PTR [eax+40]
	shl	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _pShader$6[ebp]
	add	edx, 44					; 0000002cH
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN71@Reallocate
	jmp	$lExit$83
	jmp	$lExit$83
$LN71@Reallocate:

; 3464 :         VHD( pHeap->MoveData((void**) &pShader->pUAVDeps, pShader->UAVDepCount * sizeof(SUnorderedAccessViewDependency)), pError );

	mov	eax, DWORD PTR _pShader$6[ebp]
	mov	ecx, DWORD PTR [eax+48]
	shl	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _pShader$6[ebp]
	add	edx, 52					; 00000034H
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN69@Reallocate
	jmp	$lExit$83
	jmp	$lExit$83
$LN69@Reallocate:

; 3465 :         VHD( pHeap->MoveData((void**) &pShader->ppTbufDeps, pShader->TBufferDepCount * sizeof(SConstantBuffer*)), pError );

	mov	eax, DWORD PTR _pShader$6[ebp]
	mov	ecx, DWORD PTR [eax+56]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _pShader$6[ebp]
	add	edx, 60					; 0000003cH
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN67@Reallocate
	jmp	$lExit$83
	jmp	$lExit$83
$LN67@Reallocate:

; 3466 :         
; 3467 :         for (j=0; j<pShader->CBDepCount; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN65@Reallocate
$LN64@Reallocate:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN65@Reallocate:
	mov	eax, DWORD PTR _pShader$6[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	$LN63@Reallocate

; 3468 :         {
; 3469 :             SShaderCBDependency *pCBDeps = &pShader->pCBDeps[j];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _pShader$6[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR _pCBDeps$5[ebp], eax

; 3470 :             VHD( pHeap->MoveData((void**) &pCBDeps->ppD3DObjects, pCBDeps->Count * sizeof(ID3D11Buffer*)), pError );

	mov	eax, DWORD PTR _pCBDeps$5[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _pCBDeps$5[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN62@Reallocate
	jmp	$lExit$83
	jmp	$lExit$83
$LN62@Reallocate:

; 3471 :             VHD( pHeap->MoveData((void**) &pCBDeps->ppFXPointers, pCBDeps->Count * sizeof(SConstantBuffer*)), pError );

	mov	eax, DWORD PTR _pCBDeps$5[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _pCBDeps$5[ebp]
	add	edx, 8
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN60@Reallocate
	jmp	$lExit$83
	jmp	$lExit$83
$LN60@Reallocate:

; 3472 : 
; 3473 :             for (k=0; k<pCBDeps->Count; k++)

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN58@Reallocate
$LN57@Reallocate:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN58@Reallocate:
	mov	eax, DWORD PTR _pCBDeps$5[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN56@Reallocate

; 3474 :             {
; 3475 :                 VH( FixupCBPointer( &pCBDeps->ppFXPointers[k] ) );

	mov	eax, DWORD PTR _pCBDeps$5[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _k$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupCBPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSConstantBuffer@2@@Z ; D3DX11Effects::CEffectLoader::FixupCBPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN55@Reallocate
	jmp	$lExit$83
	jmp	$lExit$83
$LN55@Reallocate:

; 3476 :             }

	jmp	SHORT $LN57@Reallocate
$LN56@Reallocate:

; 3477 :         }

	jmp	$LN64@Reallocate
$LN63@Reallocate:

; 3478 : 
; 3479 :         for (j=0; j<pShader->SampDepCount; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN53@Reallocate
$LN52@Reallocate:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN53@Reallocate:
	mov	eax, DWORD PTR _pShader$6[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jae	$LN51@Reallocate

; 3480 :         {
; 3481 :             SShaderSamplerDependency *pSampDeps = &pShader->pSampDeps[j];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _pShader$6[ebp]
	add	eax, DWORD PTR [ecx+28]
	mov	DWORD PTR _pSampDeps$4[ebp], eax

; 3482 :             VHD( pHeap->MoveData((void**) &pSampDeps->ppD3DObjects, pSampDeps->Count * sizeof(ID3D11SamplerState*)), pError );

	mov	eax, DWORD PTR _pSampDeps$4[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _pSampDeps$4[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN50@Reallocate
	jmp	$lExit$83
	jmp	$lExit$83
$LN50@Reallocate:

; 3483 :             VHD( pHeap->MoveData((void**) &pSampDeps->ppFXPointers, pSampDeps->Count * sizeof(SSamplerBlock*)), pError );

	mov	eax, DWORD PTR _pSampDeps$4[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _pSampDeps$4[ebp]
	add	edx, 8
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN48@Reallocate
	jmp	$lExit$83
	jmp	$lExit$83
$LN48@Reallocate:

; 3484 : 
; 3485 :             for (k=0; k<pSampDeps->Count; k++)

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN46@Reallocate
$LN45@Reallocate:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN46@Reallocate:
	mov	eax, DWORD PTR _pSampDeps$4[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN44@Reallocate

; 3486 :             {
; 3487 :                 VH( FixupSamplerPointer(&pSampDeps->ppFXPointers[k]) );

	mov	eax, DWORD PTR _pSampDeps$4[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _k$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupSamplerPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSSamplerBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupSamplerPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN43@Reallocate
	jmp	$lExit$83
	jmp	$lExit$83
$LN43@Reallocate:

; 3488 :             }

	jmp	SHORT $LN45@Reallocate
$LN44@Reallocate:

; 3489 :         }

	jmp	$LN52@Reallocate
$LN51@Reallocate:

; 3490 : 
; 3491 :         for (j=0; j<pShader->InterfaceDepCount; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN41@Reallocate
$LN40@Reallocate:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN41@Reallocate:
	mov	eax, DWORD PTR _pShader$6[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jae	$LN39@Reallocate

; 3492 :         {
; 3493 :             SInterfaceDependency *pInterfaceDeps = &pShader->pInterfaceDeps[j];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _pShader$6[ebp]
	add	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR _pInterfaceDeps$3[ebp], eax

; 3494 :             VHD( pHeap->MoveData((void**) &pInterfaceDeps->ppD3DObjects, pInterfaceDeps->Count * sizeof(ID3D11ClassInstance*)), pError );

	mov	eax, DWORD PTR _pInterfaceDeps$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _pInterfaceDeps$3[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN38@Reallocate
	jmp	$lExit$83
	jmp	$lExit$83
$LN38@Reallocate:

; 3495 :             VHD( pHeap->MoveData((void**) &pInterfaceDeps->ppFXPointers, pInterfaceDeps->Count * sizeof(SInterface*)), pError );

	mov	eax, DWORD PTR _pInterfaceDeps$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _pInterfaceDeps$3[ebp]
	add	edx, 8
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN36@Reallocate
	jmp	$lExit$83
	jmp	$lExit$83
$LN36@Reallocate:

; 3496 : 
; 3497 :             for (k=0; k<pInterfaceDeps->Count; k++)

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN34@Reallocate
$LN33@Reallocate:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN34@Reallocate:
	mov	eax, DWORD PTR _pInterfaceDeps$3[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN32@Reallocate

; 3498 :             {
; 3499 :                 VH( FixupInterfacePointer(&pInterfaceDeps->ppFXPointers[k], true) );

	push	1
	mov	eax, DWORD PTR _pInterfaceDeps$3[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _k$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupInterfacePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSInterface@2@_N@Z ; D3DX11Effects::CEffectLoader::FixupInterfacePointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN31@Reallocate
	jmp	$lExit$83
	jmp	$lExit$83
$LN31@Reallocate:

; 3500 :             }

	jmp	SHORT $LN33@Reallocate
$LN32@Reallocate:

; 3501 :         }

	jmp	$LN40@Reallocate
$LN39@Reallocate:

; 3502 : 
; 3503 :         for (j=0; j<pShader->ResourceDepCount; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN29@Reallocate
$LN28@Reallocate:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN29@Reallocate:
	mov	eax, DWORD PTR _pShader$6[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+40]
	jae	$LN27@Reallocate

; 3504 :         {
; 3505 :             SShaderResourceDependency *pResourceDeps = &pShader->pResourceDeps[j];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _pShader$6[ebp]
	add	eax, DWORD PTR [ecx+44]
	mov	DWORD PTR _pResourceDeps$2[ebp], eax

; 3506 :             VHD( pHeap->MoveData((void**) &pResourceDeps->ppD3DObjects, pResourceDeps->Count * sizeof(ID3D11ShaderResourceView*)), pError );

	mov	eax, DWORD PTR _pResourceDeps$2[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _pResourceDeps$2[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN26@Reallocate
	jmp	$lExit$83
	jmp	$lExit$83
$LN26@Reallocate:

; 3507 :             VHD( pHeap->MoveData((void**) &pResourceDeps->ppFXPointers, pResourceDeps->Count * sizeof(SShaderResource*)), pError );

	mov	eax, DWORD PTR _pResourceDeps$2[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _pResourceDeps$2[ebp]
	add	edx, 8
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN24@Reallocate
	jmp	$lExit$83
	jmp	$lExit$83
$LN24@Reallocate:

; 3508 : 
; 3509 :             for (k=0; k<pResourceDeps->Count; k++)

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN22@Reallocate
$LN21@Reallocate:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN22@Reallocate:
	mov	eax, DWORD PTR _pResourceDeps$2[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN20@Reallocate

; 3510 :             {
; 3511 :                 VH( FixupShaderResourcePointer(&pResourceDeps->ppFXPointers[k]) );

	mov	eax, DWORD PTR _pResourceDeps$2[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _k$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupShaderResourcePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderResource@2@@Z ; D3DX11Effects::CEffectLoader::FixupShaderResourcePointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN19@Reallocate
	jmp	$LN18@Reallocate
	jmp	$lExit$83
$LN19@Reallocate:

; 3512 :             }

	jmp	SHORT $LN21@Reallocate
$LN20@Reallocate:

; 3513 :         }

	jmp	$LN28@Reallocate
$LN27@Reallocate:

; 3514 : 
; 3515 :         for (j=0; j<pShader->UAVDepCount; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN17@Reallocate
$LN16@Reallocate:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN17@Reallocate:
	mov	eax, DWORD PTR _pShader$6[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+48]
	jae	$LN15@Reallocate

; 3516 :         {
; 3517 :             SUnorderedAccessViewDependency *pUAVDeps = &pShader->pUAVDeps[j];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _pShader$6[ebp]
	add	eax, DWORD PTR [ecx+52]
	mov	DWORD PTR _pUAVDeps$1[ebp], eax

; 3518 :             VHD( pHeap->MoveData((void**) &pUAVDeps->ppD3DObjects, pUAVDeps->Count * sizeof(ID3D11UnorderedAccessView*)), pError );

	mov	eax, DWORD PTR _pUAVDeps$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _pUAVDeps$1[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN14@Reallocate
	jmp	$LN13@Reallocate
	jmp	$lExit$83
$LN14@Reallocate:

; 3519 :             VHD( pHeap->MoveData((void**) &pUAVDeps->ppFXPointers, pUAVDeps->Count * sizeof(SUnorderedAccessView*)), pError );

	mov	eax, DWORD PTR _pUAVDeps$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _pUAVDeps$1[ebp]
	add	edx, 8
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN12@Reallocate
	jmp	$LN11@Reallocate
	jmp	$lExit$83
$LN12@Reallocate:

; 3520 : 
; 3521 :             for (k=0; k<pUAVDeps->Count; k++)

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN10@Reallocate
$LN9@Reallocate:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN10@Reallocate:
	mov	eax, DWORD PTR _pUAVDeps$1[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN8@Reallocate

; 3522 :             {
; 3523 :                 VH( FixupUnorderedAccessViewPointer(&pUAVDeps->ppFXPointers[k]) );

	mov	eax, DWORD PTR _pUAVDeps$1[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _k$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupUnorderedAccessViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSUnorderedAccessView@2@@Z ; D3DX11Effects::CEffectLoader::FixupUnorderedAccessViewPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN7@Reallocate
	jmp	SHORT $LN6@Reallocate
	jmp	SHORT $lExit$83
$LN7@Reallocate:

; 3524 :             }

	jmp	SHORT $LN9@Reallocate
$LN8@Reallocate:

; 3525 :         }

	jmp	$LN16@Reallocate
$LN15@Reallocate:

; 3526 : 
; 3527 :         for (j=0; j<pShader->TBufferDepCount; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN5@Reallocate
$LN4@Reallocate:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN5@Reallocate:
	mov	eax, DWORD PTR _pShader$6[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+56]
	jae	SHORT $LN3@Reallocate

; 3528 :         {
; 3529 :             VH( FixupCBPointer( &pShader->ppTbufDeps[j] ) );

	mov	eax, DWORD PTR _pShader$6[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	edx, DWORD PTR _j$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupCBPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSConstantBuffer@2@@Z ; D3DX11Effects::CEffectLoader::FixupCBPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@Reallocate
	jmp	SHORT $LN1@Reallocate
	jmp	SHORT $lExit$83
$LN2@Reallocate:

; 3530 :         }

	jmp	SHORT $LN4@Reallocate
$LN3@Reallocate:

; 3531 :     }

	jmp	$LN79@Reallocate
$LN78@Reallocate:
	jmp	SHORT $lExit$83
$LN1@Reallocate:
	jmp	SHORT $lExit$83
$LN6@Reallocate:
	jmp	SHORT $lExit$83
$LN11@Reallocate:
	jmp	SHORT $lExit$83
$LN13@Reallocate:
	jmp	SHORT $lExit$83
$LN18@Reallocate:
	jmp	SHORT $lExit$83
$lExit$83:

; 3532 : 
; 3533 : lExit:
; 3534 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 3535 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 348				; 0000015cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReallocateShaderBlocks@CEffectLoader@D3DX11Effects@@IAEJXZ ENDP ; D3DX11Effects::CEffectLoader::ReallocateShaderBlocks
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?ReallocateEffectData@CEffectLoader@D3DX11Effects@@IAEJ_N@Z
_TEXT	SEGMENT
tv1249 = -688						; size = 4
tv907 = -688						; size = 4
tv742 = -688						; size = 4
tv718 = -688						; size = 4
tv694 = -688						; size = 4
tv670 = -688						; size = 4
_pAnonymousShader$1 = -488				; size = 4
_iRT$2 = -476						; size = 4
_pOldPasses$3 = -464					; size = 4
_iPass$4 = -452						; size = 4
_cbPass$5 = -440					; size = 4
_pTech$6 = -428						; size = 4
_cbTechniques$7 = -416					; size = 4
_pGroup$8 = -404					; size = 4
_bGlobalMemberDataBlock$9 = -389			; size = 1
_ppTopLevelEntity$10 = -380				; size = 4
_pMember$11 = -368					; size = 4
_pVar$12 = -356						; size = 4
_pInterface$13 = -344					; size = 4
_pDst$14 = -332						; size = 4
_pCB$15 = -320						; size = 4
_pVar$16 = -308						; size = 4
_pCB$17 = -296						; size = 4
_pTech$18 = -284					; size = 4
_pGroup$19 = -272					; size = 4
_pCB$20 = -260						; size = 4
_cbAnonymousShaders$ = -248				; size = 4
_cbDepthStencilViews$ = -236				; size = 4
_cbRenderTargetViews$ = -224				; size = 4
_cbUnorderedAccessViews$ = -212				; size = 4
_cbShaderResources$ = -200				; size = 4
_cbBackgroundInterfaces$ = -188				; size = 4
_cbInterfaces$ = -176					; size = 4
_cbMemberDatas$ = -164					; size = 4
_cbSamplers$ = -152					; size = 4
_cbRS$ = -140						; size = 4
_cbAB$ = -128						; size = 4
_cbDS$ = -116						; size = 4
_cbShaders$ = -104					; size = 4
_cbGroups$ = -92					; size = 4
_cbVariables$ = -80					; size = 4
_cbCBs$ = -68						; size = 4
_pHeap$ = -56						; size = 4
_j$ = -44						; size = 4
_i$ = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_Cloning$ = 8						; size = 1
?ReallocateEffectData@CEffectLoader@D3DX11Effects@@IAEJ_N@Z PROC ; D3DX11Effects::CEffectLoader::ReallocateEffectData, COMDAT
; _this$ = ecx

; 3595 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 688				; 000002b0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-688]
	mov	ecx, 172				; 000000acH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3596 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 3597 :     UINT i, j;
; 3598 :     CEffectHeap *pHeap = &m_pEffect->m_Heap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR _pHeap$[ebp], ecx

; 3599 :     UINT cbCBs = sizeof(SConstantBuffer) * m_pEffect->m_CBCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR [ecx+116], 60
	mov	DWORD PTR _cbCBs$[ebp], edx

; 3600 :     UINT cbVariables = sizeof(SGlobalVariable) * m_pEffect->m_VariableCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR [ecx+28], 48
	mov	DWORD PTR _cbVariables$[ebp], edx

; 3601 :     UINT cbGroups = sizeof(STechnique) * m_pEffect->m_GroupCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+48]
	shl	edx, 5
	mov	DWORD PTR _cbGroups$[ebp], edx

; 3602 :     UINT cbShaders = sizeof(SShaderBlock) * m_pEffect->m_ShaderBlockCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR [ecx+60], 68
	mov	DWORD PTR _cbShaders$[ebp], edx

; 3603 :     UINT cbDS = sizeof(SDepthStencilBlock) * m_pEffect->m_DepthStencilBlockCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR [ecx+68], 76
	mov	DWORD PTR _cbDS$[ebp], edx

; 3604 :     UINT cbAB = sizeof(SBlendBlock) * m_pEffect->m_BlendBlockCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR [ecx+76], 288
	mov	DWORD PTR _cbAB$[ebp], edx

; 3605 :     UINT cbRS = sizeof(SRasterizerBlock) * m_pEffect->m_RasterizerBlockCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+84]
	shl	edx, 6
	mov	DWORD PTR _cbRS$[ebp], edx

; 3606 :     UINT cbSamplers = sizeof(SSamplerBlock) * m_pEffect->m_SamplerBlockCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR [ecx+92], 76
	mov	DWORD PTR _cbSamplers$[ebp], edx

; 3607 :     UINT cbMemberDatas = sizeof(SMemberDataPointer) * m_pEffect->m_MemberDataCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+100]
	shl	edx, 3
	mov	DWORD PTR _cbMemberDatas$[ebp], edx

; 3608 :     UINT cbInterfaces = sizeof(SInterface) * m_pEffect->m_InterfaceCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+108]
	shl	edx, 2
	mov	DWORD PTR _cbInterfaces$[ebp], edx

; 3609 :     UINT cbBackgroundInterfaces = sizeof(SInterface) * m_BackgroundInterfaces.GetSize();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	?GetSize@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QBEIXZ ; CEffectVector<D3DX11Effects::SInterface *>::GetSize
	shl	eax, 2
	mov	DWORD PTR _cbBackgroundInterfaces$[ebp], eax

; 3610 :     UINT cbShaderResources = sizeof(SShaderResource) * m_pEffect->m_ShaderResourceCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+132]
	shl	edx, 2
	mov	DWORD PTR _cbShaderResources$[ebp], edx

; 3611 :     UINT cbUnorderedAccessViews = sizeof(SUnorderedAccessView) * m_pEffect->m_UnorderedAccessViewCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+140]
	shl	edx, 2
	mov	DWORD PTR _cbUnorderedAccessViews$[ebp], edx

; 3612 :     UINT cbRenderTargetViews = sizeof(SRenderTargetView) * m_pEffect->m_RenderTargetViewCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+148]
	shl	edx, 2
	mov	DWORD PTR _cbRenderTargetViews$[ebp], edx

; 3613 :     UINT cbDepthStencilViews = sizeof(SDepthStencilView) * m_pEffect->m_DepthStencilViewCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+156]
	shl	edx, 2
	mov	DWORD PTR _cbDepthStencilViews$[ebp], edx

; 3614 :     UINT cbAnonymousShaders = sizeof(SAnonymousShader) * m_pEffect->m_AnonymousShaderCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR [ecx+36], 12
	mov	DWORD PTR _cbAnonymousShaders$[ebp], edx

; 3615 : 
; 3616 :     // Calculate memory needed
; 3617 :     m_EffectMemory += AlignToPowerOf2(cbCBs, c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _cbCBs$[ebp]
	push	eax
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+180]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+180], eax

; 3618 :     m_EffectMemory += AlignToPowerOf2(cbVariables, c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _cbVariables$[ebp]
	push	eax
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+180]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+180], eax

; 3619 :     m_EffectMemory += AlignToPowerOf2(cbGroups, c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _cbGroups$[ebp]
	push	eax
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+180]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+180], eax

; 3620 :     m_EffectMemory += AlignToPowerOf2(cbShaders, c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _cbShaders$[ebp]
	push	eax
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+180]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+180], eax

; 3621 :     m_EffectMemory += AlignToPowerOf2(cbMemberDatas, c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _cbMemberDatas$[ebp]
	push	eax
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+180]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+180], eax

; 3622 :     m_EffectMemory += AlignToPowerOf2(cbInterfaces + cbBackgroundInterfaces, c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _cbInterfaces$[ebp]
	add	eax, DWORD PTR _cbBackgroundInterfaces$[ebp]
	push	eax
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+180]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+180], eax

; 3623 :     m_EffectMemory += AlignToPowerOf2(cbShaderResources, c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _cbShaderResources$[ebp]
	push	eax
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+180]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+180], eax

; 3624 :     m_EffectMemory += AlignToPowerOf2(cbUnorderedAccessViews, c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _cbUnorderedAccessViews$[ebp]
	push	eax
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+180]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+180], eax

; 3625 :     m_EffectMemory += AlignToPowerOf2(cbRenderTargetViews, c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _cbRenderTargetViews$[ebp]
	push	eax
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+180]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+180], eax

; 3626 :     m_EffectMemory += AlignToPowerOf2(cbDepthStencilViews, c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _cbDepthStencilViews$[ebp]
	push	eax
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+180]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+180], eax

; 3627 :     m_EffectMemory += AlignToPowerOf2(cbDS, c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _cbDS$[ebp]
	push	eax
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+180]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+180], eax

; 3628 :     m_EffectMemory += AlignToPowerOf2(cbAB, c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _cbAB$[ebp]
	push	eax
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+180]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+180], eax

; 3629 :     m_EffectMemory += AlignToPowerOf2(cbRS, c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _cbRS$[ebp]
	push	eax
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+180]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+180], eax

; 3630 :     m_EffectMemory += AlignToPowerOf2(cbSamplers, c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _cbSamplers$[ebp]
	push	eax
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+180]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+180], eax

; 3631 :     m_EffectMemory += AlignToPowerOf2(cbAnonymousShaders, c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _cbAnonymousShaders$[ebp]
	push	eax
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+180]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+180], eax

; 3632 : 
; 3633 :     m_EffectMemory += CalculateShaderBlockSize();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateShaderBlockSize@CEffectLoader@D3DX11Effects@@IAEIXZ ; D3DX11Effects::CEffectLoader::CalculateShaderBlockSize
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+180]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+180], eax

; 3634 : 
; 3635 :     for (i=0; i<m_pEffect->m_CBCount; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN225@Reallocate
$LN224@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN225@Reallocate:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+116]
	jae	SHORT $LN223@Reallocate

; 3636 :     {
; 3637 :         SConstantBuffer *pCB = &m_pEffect->m_pCBs[i];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _i$[ebp], 60
	add	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR _pCB$20[ebp], edx

; 3638 : 
; 3639 :         m_EffectMemory += AlignToPowerOf2(pCB->Size, c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _pCB$20[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+180]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+180], eax

; 3640 :     }

	jmp	SHORT $LN224@Reallocate
$LN223@Reallocate:

; 3641 : 
; 3642 :     for (i=0; i<m_pEffect->m_GroupCount; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN222@Reallocate
$LN221@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN222@Reallocate:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+48]
	jae	$LN220@Reallocate

; 3643 :     {
; 3644 :         SGroup *pGroup = &m_pEffect->m_pGroups[i];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	add	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _pGroup$19[ebp], edx

; 3645 : 
; 3646 :         m_EffectMemory += AlignToPowerOf2(pGroup->TechniqueCount * sizeof(STechnique), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _pGroup$19[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 5
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+180]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+180], eax

; 3647 : 
; 3648 :         for (j=0; j<pGroup->TechniqueCount; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN219@Reallocate
$LN218@Reallocate:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN219@Reallocate:
	mov	eax, DWORD PTR _pGroup$19[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	SHORT $LN217@Reallocate

; 3649 :         {
; 3650 :             STechnique *pTech = &pGroup->pTechniques[j];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _pGroup$19[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _pTech$18[ebp], eax

; 3651 : 
; 3652 :             m_EffectMemory += AlignToPowerOf2(pTech->PassCount * sizeof(SPassBlock), c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _pTech$18[ebp]
	imul	ecx, DWORD PTR [eax+8], 156
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+180]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+180], eax

; 3653 :             m_EffectMemory += CalculateBlockAssignmentSize(pTech->pPasses, pTech->PassCount);

	mov	eax, DWORD PTR _pTech$18[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _pTech$18[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$CalculateBlockAssignmentSize@USPassBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEIAAPAUSPassBlock@1@I@Z ; D3DX11Effects::CEffectLoader::CalculateBlockAssignmentSize<D3DX11Effects::SPassBlock>
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+180]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+180], eax

; 3654 :         }

	jmp	$LN218@Reallocate
$LN217@Reallocate:

; 3655 :     };

	jmp	$LN221@Reallocate
$LN220@Reallocate:

; 3656 : 
; 3657 :     m_EffectMemory += CalculateBlockAssignmentSize(m_pEffect->m_pBlendBlocks, m_pEffect->m_BlendBlockCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+76]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 80					; 00000050H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$CalculateBlockAssignmentSize@USBlendBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEIAAPAUSBlendBlock@1@I@Z ; D3DX11Effects::CEffectLoader::CalculateBlockAssignmentSize<D3DX11Effects::SBlendBlock>
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+180]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+180], eax

; 3658 :     m_EffectMemory += CalculateBlockAssignmentSize(m_pEffect->m_pDepthStencilBlocks, m_pEffect->m_DepthStencilBlockCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 72					; 00000048H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$CalculateBlockAssignmentSize@USDepthStencilBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEIAAPAUSDepthStencilBlock@1@I@Z ; D3DX11Effects::CEffectLoader::CalculateBlockAssignmentSize<D3DX11Effects::SDepthStencilBlock>
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+180]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+180], eax

; 3659 :     m_EffectMemory += CalculateBlockAssignmentSize(m_pEffect->m_pRasterizerBlocks, m_pEffect->m_RasterizerBlockCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 88					; 00000058H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$CalculateBlockAssignmentSize@USRasterizerBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEIAAPAUSRasterizerBlock@1@I@Z ; D3DX11Effects::CEffectLoader::CalculateBlockAssignmentSize<D3DX11Effects::SRasterizerBlock>
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+180]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+180], eax

; 3660 :     m_EffectMemory += CalculateBlockAssignmentSize(m_pEffect->m_pSamplerBlocks, m_pEffect->m_SamplerBlockCount);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+92]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 96					; 00000060H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$CalculateBlockAssignmentSize@USSamplerBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEIAAPAUSSamplerBlock@1@I@Z ; D3DX11Effects::CEffectLoader::CalculateBlockAssignmentSize<D3DX11Effects::SSamplerBlock>
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+180]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+180], eax

; 3661 : 
; 3662 :     // Reserve memory
; 3663 :     VHD( pHeap->ReserveMemory(m_EffectMemory), "Internal loading error: cannot reserve effect memory." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+180]
	push	ecx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?ReserveMemory@CEffectHeap@D3DX11Effects@@QAEJI@Z ; D3DX11Effects::CEffectHeap::ReserveMemory
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN216@Reallocate
	jmp	$lExit$240
	jmp	$lExit$240
$LN216@Reallocate:

; 3664 : 
; 3665 :     // Move DataMemberPointer blocks
; 3666 :     m_pOldMemberDataBlocks = m_pEffect->m_pMemberDataBlocks;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+104]
	mov	DWORD PTR [edx+168], eax

; 3667 :     VHD( pHeap->MoveData((void**) &m_pEffect->m_pMemberDataBlocks, cbMemberDatas), "Internal loading error: cannot move member data blocks." );

	mov	eax, DWORD PTR _cbMemberDatas$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	add	edx, 104				; 00000068H
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN214@Reallocate
	jmp	$lExit$240
	jmp	$lExit$240
$LN214@Reallocate:

; 3668 : 
; 3669 :     // Move CBs
; 3670 :     m_pOldCBs = m_pEffect->m_pCBs;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+120]
	mov	DWORD PTR [edx+132], eax

; 3671 :     VHD( pHeap->MoveData((void**) &m_pEffect->m_pCBs, cbCBs), "Internal loading error: cannot move CB count." );

	mov	eax, DWORD PTR _cbCBs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	add	edx, 120				; 00000078H
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN212@Reallocate
	jmp	$lExit$240
	jmp	$lExit$240
$LN212@Reallocate:

; 3672 :     for (i=0; i<m_pEffect->m_CBCount; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN210@Reallocate
$LN209@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN210@Reallocate:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+116]
	jae	$LN208@Reallocate

; 3673 :     {
; 3674 :         SConstantBuffer *pCB = &m_pEffect->m_pCBs[i];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _i$[ebp], 60
	add	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR _pCB$17[ebp], edx

; 3675 : 
; 3676 :         VHD( pHeap->MoveData((void**) &pCB->pBackingStore, pCB->Size), "Internal loading error: cannot move CB backing store." );

	mov	eax, DWORD PTR _pCB$17[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _pCB$17[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN207@Reallocate
	jmp	$lExit$240
	jmp	$lExit$240
$LN207@Reallocate:

; 3677 : 
; 3678 :         if( !Cloning )

	movzx	eax, BYTE PTR _Cloning$[ebp]
	test	eax, eax
	jne	SHORT $LN205@Reallocate

; 3679 :         {
; 3680 :             // When creating the effect, MemberDataOffsetPlus4 is used, not pMemberData
; 3681 :             if( pCB->MemberDataOffsetPlus4 )

	mov	eax, DWORD PTR _pCB$17[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN204@Reallocate

; 3682 :             {
; 3683 :                 pCB->pMemberData = (SMemberDataPointer*)( (BYTE*)m_pEffect->m_pMemberDataBlocks + ( pCB->MemberDataOffsetPlus4 - 4 ) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _pCB$17[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	ecx, DWORD PTR [ecx+104]
	lea	edx, DWORD PTR [eax+ecx-4]
	mov	eax, DWORD PTR _pCB$17[ebp]
	mov	DWORD PTR [eax+52], edx
$LN204@Reallocate:

; 3684 :             }
; 3685 :         }

	jmp	SHORT $LN203@Reallocate
$LN205@Reallocate:

; 3686 :         else if (pCB->pMemberData)

	mov	eax, DWORD PTR _pCB$17[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN203@Reallocate

; 3687 :         {
; 3688 :             // When cloning an effect, pMemberData points to valid data in the original effect
; 3689 :             VH( FixupMemberDataPointer( &pCB->pMemberData ) );

	mov	eax, DWORD PTR _pCB$17[ebp]
	add	eax, 52					; 00000034H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupMemberDataPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSMemberDataPointer@2@@Z ; D3DX11Effects::CEffectLoader::FixupMemberDataPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN203@Reallocate
	jmp	$lExit$240
	jmp	$lExit$240
$LN203@Reallocate:

; 3690 :         }
; 3691 :     }

	jmp	$LN209@Reallocate
$LN208@Reallocate:

; 3692 : 
; 3693 :     // Move numeric variables; move all variable types
; 3694 :     m_pOldVars = m_pEffect->m_pVariables;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+32]
	mov	DWORD PTR [edx+112], eax

; 3695 :     VHD( pHeap->MoveData((void**) &m_pEffect->m_pVariables, cbVariables), "Internal loading error: cannot move variable count." );

	mov	eax, DWORD PTR _cbVariables$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	add	edx, 32					; 00000020H
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN199@Reallocate
	jmp	$lExit$240
	jmp	$lExit$240
$LN199@Reallocate:

; 3696 :     for (i=0; i<m_pEffect->m_VariableCount; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN197@Reallocate
$LN196@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN197@Reallocate:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+28]
	jae	$LN195@Reallocate

; 3697 :     {
; 3698 :         SGlobalVariable *pVar = &m_pEffect->m_pVariables[i];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _i$[ebp], 48
	add	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _pVar$16[ebp], edx

; 3699 :         pVar->pEffect = m_pEffect;

	mov	eax, DWORD PTR _pVar$16[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+28], edx

; 3700 : 
; 3701 :         if( Cloning && pVar->pType->BelongsInConstantBuffer())

	movzx	eax, BYTE PTR _Cloning$[ebp]
	test	eax, eax
	je	SHORT $LN194@Reallocate
	mov	eax, DWORD PTR _pVar$16[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?BelongsInConstantBuffer@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::BelongsInConstantBuffer
	test	eax, eax
	je	SHORT $LN194@Reallocate

; 3702 :         {
; 3703 :             // Convert pointer back to offset
; 3704 :             // pVar->pCB refers to the old CB
; 3705 :             pVar->Data.Offset = (UINT_PTR)pVar->Data.pGeneric - (UINT_PTR)pVar->pCB->pBackingStore;

	mov	eax, DWORD PTR _pVar$16[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _pVar$16[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR _pVar$16[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN194@Reallocate:

; 3706 :         }
; 3707 : 
; 3708 :         if (pVar->pCB)

	mov	eax, DWORD PTR _pVar$16[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN193@Reallocate

; 3709 :         {
; 3710 :             VH( FixupCBPointer( &pVar->pCB ) );

	mov	eax, DWORD PTR _pVar$16[ebp]
	add	eax, 36					; 00000024H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupCBPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSConstantBuffer@2@@Z ; D3DX11Effects::CEffectLoader::FixupCBPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN193@Reallocate
	jmp	$lExit$240
	jmp	$lExit$240
$LN193@Reallocate:

; 3711 :         }
; 3712 : 
; 3713 :         if( !Cloning )

	movzx	eax, BYTE PTR _Cloning$[ebp]
	test	eax, eax
	jne	SHORT $LN190@Reallocate

; 3714 :         {
; 3715 :             // When creating the effect, MemberDataOffsetPlus4 is used, not pMemberData
; 3716 :             if( pVar->MemberDataOffsetPlus4 )

	mov	eax, DWORD PTR _pVar$16[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN189@Reallocate

; 3717 :             {
; 3718 :                 pVar->pMemberData = (SMemberDataPointer*)( (BYTE*)m_pEffect->m_pMemberDataBlocks + ( pVar->MemberDataOffsetPlus4 - 4 ) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _pVar$16[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+104]
	lea	edx, DWORD PTR [eax+ecx-4]
	mov	eax, DWORD PTR _pVar$16[ebp]
	mov	DWORD PTR [eax+8], edx
$LN189@Reallocate:

; 3719 :             }
; 3720 :         }

	jmp	SHORT $LN188@Reallocate
$LN190@Reallocate:

; 3721 :         else if (pVar->pMemberData)

	mov	eax, DWORD PTR _pVar$16[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN188@Reallocate

; 3722 :         {
; 3723 :             // When cloning an effect, pMemberData points to valid data in the original effect
; 3724 :             VH( FixupMemberDataPointer( &pVar->pMemberData ) );

	mov	eax, DWORD PTR _pVar$16[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupMemberDataPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSMemberDataPointer@2@@Z ; D3DX11Effects::CEffectLoader::FixupMemberDataPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN188@Reallocate
	jmp	$lExit$240
	jmp	$lExit$240
$LN188@Reallocate:

; 3725 :         }
; 3726 : 
; 3727 :         if (pVar->pType->BelongsInConstantBuffer())

	mov	eax, DWORD PTR _pVar$16[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?BelongsInConstantBuffer@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::BelongsInConstantBuffer
	test	eax, eax
	je	SHORT $LN184@Reallocate

; 3728 :         {
; 3729 :             // Convert from offsets to pointers
; 3730 :             pVar->Data.pGeneric = pVar->pCB->pBackingStore + pVar->Data.Offset;

	mov	eax, DWORD PTR _pVar$16[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _pVar$16[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _pVar$16[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN184@Reallocate:

; 3731 :         }
; 3732 :     }

	jmp	$LN196@Reallocate
$LN195@Reallocate:

; 3733 : 
; 3734 :     // Fixup each CB's array of child variable pointers
; 3735 :     for (i=0; i<m_pEffect->m_CBCount; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN183@Reallocate
$LN182@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN183@Reallocate:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+116]
	jae	SHORT $LN181@Reallocate

; 3736 :     {
; 3737 :         SConstantBuffer *pCB = &m_pEffect->m_pCBs[i];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _i$[ebp], 60
	add	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR _pCB$15[ebp], edx

; 3738 :         pCB->pEffect = m_pEffect;

	mov	eax, DWORD PTR _pCB$15[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+56], edx

; 3739 : 
; 3740 :         if (pCB->pVariables != NULL)

	mov	eax, DWORD PTR _pCB$15[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN180@Reallocate

; 3741 :         {
; 3742 :             VH( FixupVariablePointer(&pCB->pVariables) );

	mov	eax, DWORD PTR _pCB$15[ebp]
	add	eax, 40					; 00000028H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupVariablePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSGlobalVariable@2@@Z ; D3DX11Effects::CEffectLoader::FixupVariablePointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN180@Reallocate
	jmp	$lExit$240
	jmp	$lExit$240
$LN180@Reallocate:

; 3743 :         }
; 3744 :     }

	jmp	SHORT $LN182@Reallocate
$LN181@Reallocate:

; 3745 : 
; 3746 :     // Move shaders
; 3747 :     m_pOldShaders = m_pEffect->m_pShaderBlocks;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+64]
	mov	DWORD PTR [edx+116], eax

; 3748 :     VHD( pHeap->MoveData((void**) &m_pEffect->m_pShaderBlocks, cbShaders), "Internal loading error: cannot move shader count." );

	mov	eax, DWORD PTR _cbShaders$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	add	edx, 64					; 00000040H
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN177@Reallocate
	jmp	$lExit$240
	jmp	$lExit$240
$LN177@Reallocate:

; 3749 : 
; 3750 :     // Move interfaces, combining global interfaces and those that were created during shader initialization
; 3751 :     m_pOldInterfaces = m_pEffect->m_pInterfaces;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+112]
	mov	DWORD PTR [edx+144], eax

; 3752 :     m_OldInterfaceCount = m_pEffect->m_InterfaceCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+108]
	mov	DWORD PTR [edx+140], eax

; 3753 :     VHD( pHeap->MoveEmptyDataBlock((void**) &m_pEffect->m_pInterfaces, cbInterfaces + cbBackgroundInterfaces), "Internal loading error: cannot move shader." );

	mov	eax, DWORD PTR _cbInterfaces$[ebp]
	add	eax, DWORD PTR _cbBackgroundInterfaces$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	add	edx, 112				; 00000070H
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveEmptyDataBlock@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveEmptyDataBlock
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN175@Reallocate
	jmp	$lExit$240
	jmp	$lExit$240
$LN175@Reallocate:

; 3754 :     memcpy( m_pEffect->m_pInterfaces, m_pOldInterfaces, cbInterfaces );

	mov	eax, DWORD PTR _cbInterfaces$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+112]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 3755 :     for( i=0; i < m_BackgroundInterfaces.GetSize(); i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN173@Reallocate
$LN172@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN173@Reallocate:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	?GetSize@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QBEIXZ ; CEffectVector<D3DX11Effects::SInterface *>::GetSize
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN171@Reallocate
$LN170@Reallocate:

; 3756 :     {
; 3757 :         D3DXASSERT( m_BackgroundInterfaces[i] != NULL );

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	??A?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAEAAPAUSInterface@D3DX11Effects@@I@Z ; CEffectVector<D3DX11Effects::SInterface *>::operator[]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN169@Reallocate
	push	OFFSET ??_C@_0CC@JJDOBLOA@m_BackgroundInterfaces?$FLi?$FN?5?$CB?$DN?5NUL@
	mov	eax, DWORD PTR ?__LINE__Var@?1??ReallocateEffectData@CEffectLoader@D3DX11Effects@@IAEJ_N@Z@4JA
	add	eax, 162				; 000000a2H
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN169@Reallocate:
	xor	eax, eax
	jne	SHORT $LN170@Reallocate

; 3758 :         BYTE* pDst = (BYTE*)m_pEffect->m_pInterfaces  + ( m_pEffect->m_InterfaceCount * sizeof(SInterface) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	edx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR [ecx+112]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _pDst$14[ebp], ecx

; 3759 :         memcpy( pDst, m_BackgroundInterfaces[i], sizeof(SInterface) );

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	??A?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAEAAPAUSInterface@D3DX11Effects@@I@Z ; CEffectVector<D3DX11Effects::SInterface *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pDst$14[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 3760 :         m_pEffect->m_InterfaceCount++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+108]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [ecx+108], edx

; 3761 :     }

	jmp	$LN172@Reallocate
$LN171@Reallocate:

; 3762 : 
; 3763 :     m_pOldShaderResources = m_pEffect->m_pShaderResources;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+136]
	mov	DWORD PTR [edx+148], eax

; 3764 :     VHD( pHeap->MoveData((void**) &m_pEffect->m_pShaderResources, cbShaderResources), "Internal loading error: cannot move SRVs." );

	mov	eax, DWORD PTR _cbShaderResources$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	add	edx, 136				; 00000088H
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN166@Reallocate
	jmp	$lExit$240
	jmp	$lExit$240
$LN166@Reallocate:

; 3765 : 
; 3766 :     m_pOldUnorderedAccessViews = m_pEffect->m_pUnorderedAccessViews;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+144]
	mov	DWORD PTR [edx+152], eax

; 3767 :     VHD( pHeap->MoveData((void**) &m_pEffect->m_pUnorderedAccessViews, cbUnorderedAccessViews), "Internal loading error: cannot move UAVS." );

	mov	eax, DWORD PTR _cbUnorderedAccessViews$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	add	edx, 144				; 00000090H
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN164@Reallocate
	jmp	$lExit$240
	jmp	$lExit$240
$LN164@Reallocate:

; 3768 : 
; 3769 :     m_pOldRenderTargetViews = m_pEffect->m_pRenderTargetViews;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+152]
	mov	DWORD PTR [edx+156], eax

; 3770 :     VHD( pHeap->MoveData((void**) &m_pEffect->m_pRenderTargetViews, cbRenderTargetViews), "Internal loading error: cannot move RTVs." );

	mov	eax, DWORD PTR _cbRenderTargetViews$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	add	edx, 152				; 00000098H
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN162@Reallocate
	jmp	$lExit$240
	jmp	$lExit$240
$LN162@Reallocate:

; 3771 : 
; 3772 :     m_pOldDepthStencilViews = m_pEffect->m_pDepthStencilViews;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+160]
	mov	DWORD PTR [edx+160], eax

; 3773 :     VHD( pHeap->MoveData((void**) &m_pEffect->m_pDepthStencilViews, cbDepthStencilViews), "Internal loading error: cannot move DSVs." );

	mov	eax, DWORD PTR _cbDepthStencilViews$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	add	edx, 160				; 000000a0H
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN160@Reallocate
	jmp	$lExit$240
	jmp	$lExit$240
$LN160@Reallocate:

; 3774 : 
; 3775 :     m_pOldDS = m_pEffect->m_pDepthStencilBlocks;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	mov	DWORD PTR [edx+120], eax

; 3776 :     VHD( pHeap->MoveData((void**) &m_pEffect->m_pDepthStencilBlocks, cbDS), "Internal loading error: cannot move depth-stencil state blocks." );

	mov	eax, DWORD PTR _cbDS$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	add	edx, 72					; 00000048H
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN158@Reallocate
	jmp	$lExit$240
	jmp	$lExit$240
$LN158@Reallocate:

; 3777 :     VH( ReallocateBlockAssignments(m_pEffect->m_pDepthStencilBlocks, m_pEffect->m_DepthStencilBlockCount, Cloning ? m_pOldDS : NULL) );

	movzx	eax, BYTE PTR _Cloning$[ebp]
	test	eax, eax
	je	SHORT $LN228@Reallocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR tv670[ebp], edx
	jmp	SHORT $LN229@Reallocate
$LN228@Reallocate:
	mov	DWORD PTR tv670[ebp], 0
$LN229@Reallocate:
	mov	eax, DWORD PTR tv670[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	add	edx, 72					; 00000048H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$ReallocateBlockAssignments@USDepthStencilBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEJAAPAUSDepthStencilBlock@1@IPAU21@@Z ; D3DX11Effects::CEffectLoader::ReallocateBlockAssignments<D3DX11Effects::SDepthStencilBlock>
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN156@Reallocate
	jmp	$lExit$240
	jmp	$lExit$240
$LN156@Reallocate:

; 3778 :     
; 3779 :     m_pOldAB = m_pEffect->m_pBlendBlocks;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+80]
	mov	DWORD PTR [edx+124], eax

; 3780 :     VHD( pHeap->MoveData((void**) &m_pEffect->m_pBlendBlocks, cbAB), "Internal loading error: cannot move blend state blocks." );

	mov	eax, DWORD PTR _cbAB$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	add	edx, 80					; 00000050H
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN154@Reallocate
	jmp	$LN153@Reallocate
	jmp	$lExit$240
$LN154@Reallocate:

; 3781 :     VH( ReallocateBlockAssignments(m_pEffect->m_pBlendBlocks, m_pEffect->m_BlendBlockCount, Cloning ? m_pOldAB : NULL) );

	movzx	eax, BYTE PTR _Cloning$[ebp]
	test	eax, eax
	je	SHORT $LN230@Reallocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+124]
	mov	DWORD PTR tv694[ebp], edx
	jmp	SHORT $LN231@Reallocate
$LN230@Reallocate:
	mov	DWORD PTR tv694[ebp], 0
$LN231@Reallocate:
	mov	eax, DWORD PTR tv694[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	add	edx, 80					; 00000050H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$ReallocateBlockAssignments@USBlendBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEJAAPAUSBlendBlock@1@IPAU21@@Z ; D3DX11Effects::CEffectLoader::ReallocateBlockAssignments<D3DX11Effects::SBlendBlock>
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN152@Reallocate
	jmp	$LN151@Reallocate
	jmp	$lExit$240
$LN152@Reallocate:

; 3782 : 
; 3783 :     m_pOldRS = m_pEffect->m_pRasterizerBlocks;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+88]
	mov	DWORD PTR [edx+128], eax

; 3784 :     VHD( pHeap->MoveData((void**) &m_pEffect->m_pRasterizerBlocks, cbRS), "Internal loading error: cannot move rasterizer state blocks." );

	mov	eax, DWORD PTR _cbRS$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	add	edx, 88					; 00000058H
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN150@Reallocate
	jmp	$LN149@Reallocate
	jmp	$lExit$240
$LN150@Reallocate:

; 3785 :     VH( ReallocateBlockAssignments(m_pEffect->m_pRasterizerBlocks, m_pEffect->m_RasterizerBlockCount, Cloning ? m_pOldRS : NULL) );

	movzx	eax, BYTE PTR _Cloning$[ebp]
	test	eax, eax
	je	SHORT $LN232@Reallocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	DWORD PTR tv718[ebp], edx
	jmp	SHORT $LN233@Reallocate
$LN232@Reallocate:
	mov	DWORD PTR tv718[ebp], 0
$LN233@Reallocate:
	mov	eax, DWORD PTR tv718[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	add	edx, 88					; 00000058H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$ReallocateBlockAssignments@USRasterizerBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEJAAPAUSRasterizerBlock@1@IPAU21@@Z ; D3DX11Effects::CEffectLoader::ReallocateBlockAssignments<D3DX11Effects::SRasterizerBlock>
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN148@Reallocate
	jmp	$LN147@Reallocate
	jmp	$lExit$240
$LN148@Reallocate:

; 3786 : 
; 3787 :     m_pOldSamplers = m_pEffect->m_pSamplerBlocks;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+96]
	mov	DWORD PTR [edx+136], eax

; 3788 :     VHD( pHeap->MoveData((void**) &m_pEffect->m_pSamplerBlocks, cbSamplers), "Internal loading error: cannot move samplers." );

	mov	eax, DWORD PTR _cbSamplers$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	add	edx, 96					; 00000060H
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN146@Reallocate
	jmp	$LN145@Reallocate
	jmp	$lExit$240
$LN146@Reallocate:

; 3789 :     VH( ReallocateBlockAssignments(m_pEffect->m_pSamplerBlocks, m_pEffect->m_SamplerBlockCount, Cloning ? m_pOldSamplers : NULL) );

	movzx	eax, BYTE PTR _Cloning$[ebp]
	test	eax, eax
	je	SHORT $LN234@Reallocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	mov	DWORD PTR tv742[ebp], edx
	jmp	SHORT $LN235@Reallocate
$LN234@Reallocate:
	mov	DWORD PTR tv742[ebp], 0
$LN235@Reallocate:
	mov	eax, DWORD PTR tv742[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+92]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	add	edx, 96					; 00000060H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$ReallocateBlockAssignments@USSamplerBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEJAAPAUSSamplerBlock@1@IPAU21@@Z ; D3DX11Effects::CEffectLoader::ReallocateBlockAssignments<D3DX11Effects::SSamplerBlock>
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN144@Reallocate
	jmp	$LN143@Reallocate
	jmp	$lExit$240
$LN144@Reallocate:

; 3790 :     
; 3791 :     // Fixup sampler backing stores
; 3792 :     for (i=0; i<m_pEffect->m_SamplerBlockCount; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN142@Reallocate
$LN141@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN142@Reallocate:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+92]
	jae	SHORT $LN140@Reallocate

; 3793 :     {
; 3794 :         VH( FixupShaderResourcePointer(&m_pEffect->m_pSamplerBlocks[i].BackingStore.pTexture) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _i$[ebp], 76
	mov	eax, DWORD PTR [ecx+96]
	lea	ecx, DWORD PTR [eax+edx+72]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupShaderResourcePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderResource@2@@Z ; D3DX11Effects::CEffectLoader::FixupShaderResourcePointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN139@Reallocate
	jmp	$LN138@Reallocate
	jmp	$lExit$240
$LN139@Reallocate:

; 3795 :     }

	jmp	SHORT $LN141@Reallocate
$LN140@Reallocate:

; 3796 : 
; 3797 :     // Fixup each interface's class instance variable pointer
; 3798 :     for (i=0; i<m_pEffect->m_InterfaceCount; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN137@Reallocate
$LN136@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN137@Reallocate:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+108]
	jae	SHORT $LN135@Reallocate

; 3799 :     {
; 3800 :         SInterface *pInterface = &m_pEffect->m_pInterfaces[i];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+112]
	mov	eax, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _pInterface$13[ebp], ecx

; 3801 : 
; 3802 :         if (pInterface->pClassInstance != NULL)

	mov	eax, DWORD PTR _pInterface$13[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN134@Reallocate

; 3803 :         {
; 3804 :             VH( FixupVariablePointer( (SGlobalVariable**)&pInterface->pClassInstance ) );

	mov	eax, DWORD PTR _pInterface$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupVariablePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSGlobalVariable@2@@Z ; D3DX11Effects::CEffectLoader::FixupVariablePointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN134@Reallocate
	jmp	$LN132@Reallocate
	jmp	$lExit$240
$LN134@Reallocate:

; 3805 :         }
; 3806 :     }

	jmp	SHORT $LN136@Reallocate
$LN135@Reallocate:

; 3807 : 
; 3808 :     // Fixup pointers for non-numeric variables
; 3809 :     for (i=0; i<m_pEffect->m_VariableCount; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN131@Reallocate
$LN130@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN131@Reallocate:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+28]
	jae	$LN129@Reallocate

; 3810 :     {
; 3811 :         SGlobalVariable *pVar = &m_pEffect->m_pVariables[i];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _i$[ebp], 48
	add	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _pVar$12[ebp], edx

; 3812 : 
; 3813 :         if (pVar->pType->IsShader())

	mov	eax, DWORD PTR _pVar$12[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?IsShader@SType@D3DX11Effects@@QBEHXZ	; D3DX11Effects::SType::IsShader
	test	eax, eax
	je	SHORT $LN128@Reallocate

; 3814 :         {
; 3815 :             VH( FixupShaderPointer(&pVar->Data.pShader) );

	mov	eax, DWORD PTR _pVar$12[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupShaderPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupShaderPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN127@Reallocate
	jmp	$LN126@Reallocate
	jmp	$lExit$240
$LN127@Reallocate:
	jmp	$LN125@Reallocate
$LN128@Reallocate:

; 3816 :         }
; 3817 :         else if (pVar->pType->IsShaderResource())

	mov	eax, DWORD PTR _pVar$12[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?IsShaderResource@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::IsShaderResource
	test	eax, eax
	je	SHORT $LN124@Reallocate

; 3818 :         {
; 3819 :             VH( FixupShaderResourcePointer(&pVar->Data.pShaderResource) );

	mov	eax, DWORD PTR _pVar$12[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupShaderResourcePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderResource@2@@Z ; D3DX11Effects::CEffectLoader::FixupShaderResourcePointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN123@Reallocate
	jmp	$LN122@Reallocate
	jmp	$lExit$240
$LN123@Reallocate:
	jmp	$LN125@Reallocate
$LN124@Reallocate:

; 3820 :         }
; 3821 :         else if (pVar->pType->IsUnorderedAccessView())

	mov	eax, DWORD PTR _pVar$12[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?IsUnorderedAccessView@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::IsUnorderedAccessView
	test	eax, eax
	je	SHORT $LN120@Reallocate

; 3822 :         {
; 3823 :             VH( FixupUnorderedAccessViewPointer(&pVar->Data.pUnorderedAccessView) );

	mov	eax, DWORD PTR _pVar$12[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupUnorderedAccessViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSUnorderedAccessView@2@@Z ; D3DX11Effects::CEffectLoader::FixupUnorderedAccessViewPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN119@Reallocate
	jmp	$LN118@Reallocate
	jmp	$lExit$240
$LN119@Reallocate:
	jmp	$LN125@Reallocate
$LN120@Reallocate:

; 3824 :         }
; 3825 :         else if (pVar->pType->IsInterface())

	mov	eax, DWORD PTR _pVar$12[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?IsInterface@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::IsInterface
	test	eax, eax
	je	SHORT $LN116@Reallocate

; 3826 :         {
; 3827 :             VH( FixupInterfacePointer(&pVar->Data.pInterface, false) );

	push	0
	mov	eax, DWORD PTR _pVar$12[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupInterfacePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSInterface@2@_N@Z ; D3DX11Effects::CEffectLoader::FixupInterfacePointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN115@Reallocate
	jmp	$LN114@Reallocate
	jmp	$lExit$240
$LN115@Reallocate:
	jmp	$LN125@Reallocate
$LN116@Reallocate:

; 3828 :         }
; 3829 :         else if (pVar->pType->IsObjectType(EOT_String))

	push	1
	mov	eax, DWORD PTR _pVar$12[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?IsObjectType@SType@D3DX11Effects@@QBEHW4EObjectType@2@@Z ; D3DX11Effects::SType::IsObjectType
	test	eax, eax
	je	SHORT $LN112@Reallocate

; 3830 :         {
; 3831 :             if( !m_pEffect->IsOptimized() )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+72]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN111@Reallocate

; 3832 :             {
; 3833 :                 VH( FixupStringPointer(&pVar->Data.pString) );

	mov	eax, DWORD PTR _pVar$12[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupStringPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSString@2@@Z ; D3DX11Effects::CEffectLoader::FixupStringPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN111@Reallocate
	jmp	$LN109@Reallocate
	jmp	$lExit$240
$LN111@Reallocate:

; 3834 :             }
; 3835 :         }

	jmp	$LN125@Reallocate
$LN112@Reallocate:

; 3836 :         else if (pVar->pType->IsStateBlockObject())

	mov	eax, DWORD PTR _pVar$12[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?IsStateBlockObject@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::IsStateBlockObject
	test	eax, eax
	je	$LN107@Reallocate

; 3837 :         {
; 3838 :             switch(pVar->pType->ObjectType)

	mov	eax, DWORD PTR _pVar$12[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR tv907[ebp], edx
	mov	eax, DWORD PTR tv907[ebp]
	sub	eax, 2
	mov	DWORD PTR tv907[ebp], eax
	cmp	DWORD PTR tv907[ebp], 19		; 00000013H
	ja	$LN90@Reallocate
	mov	ecx, DWORD PTR tv907[ebp]
	movzx	edx, BYTE PTR $LN238@Reallocate[ecx]
	jmp	DWORD PTR $LN239@Reallocate[edx*4]
$LN104@Reallocate:

; 3839 :             {
; 3840 :                 case EOT_DepthStencil:
; 3841 :                     VH( FixupDSPointer((SDepthStencilBlock**) &pVar->Data.pBlock) );

	mov	eax, DWORD PTR _pVar$12[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupDSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSDepthStencilBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupDSPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN103@Reallocate
	jmp	$LN102@Reallocate
	jmp	$lExit$240
$LN103@Reallocate:

; 3842 :                     break;

	jmp	$LN105@Reallocate
$LN101@Reallocate:

; 3843 :                 case EOT_Blend:
; 3844 :                     VH( FixupABPointer((SBlendBlock**) &pVar->Data.pBlock) );

	mov	eax, DWORD PTR _pVar$12[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupABPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSBlendBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupABPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN100@Reallocate
	jmp	$LN99@Reallocate
	jmp	$lExit$240
$LN100@Reallocate:

; 3845 :                     break;

	jmp	$LN105@Reallocate
$LN98@Reallocate:

; 3846 :                 case EOT_Rasterizer:
; 3847 :                     VH( FixupRSPointer((SRasterizerBlock**) &pVar->Data.pBlock) );

	mov	eax, DWORD PTR _pVar$12[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupRSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSRasterizerBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupRSPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN97@Reallocate
	jmp	$LN96@Reallocate
	jmp	$lExit$240
$LN97@Reallocate:

; 3848 :                     break;

	jmp	SHORT $LN105@Reallocate
$LN95@Reallocate:

; 3849 :                 case EOT_Sampler:
; 3850 :                     VB(pVar->pType->IsSampler());

	mov	eax, DWORD PTR _pVar$12[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?IsSampler@SType@D3DX11Effects@@QBEHXZ	; D3DX11Effects::SType::IsSampler
	test	eax, eax
	jne	SHORT $LN94@Reallocate
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$LN93@Reallocate
	jmp	$lExit$240
$LN94@Reallocate:

; 3851 :                     VH( FixupSamplerPointer((SSamplerBlock**) &pVar->Data.pBlock) );

	mov	eax, DWORD PTR _pVar$12[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupSamplerPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSSamplerBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupSamplerPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN92@Reallocate
	jmp	$LN91@Reallocate
	jmp	$lExit$240
$LN92@Reallocate:

; 3852 :                     break;

	jmp	SHORT $LN105@Reallocate
$LN90@Reallocate:

; 3853 :                 default:
; 3854 :                     VH( E_FAIL );

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN105@Reallocate
	jmp	$LN88@Reallocate
	jmp	$lExit$240
$LN105@Reallocate:

; 3855 :             }
; 3856 :         }
; 3857 :         else if (pVar->pType->VarType == EVT_Struct || pVar->pType->VarType == EVT_Numeric)

	jmp	$LN125@Reallocate
$LN107@Reallocate:
	mov	eax, DWORD PTR _pVar$12[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx+4], 3
	je	SHORT $LN85@Reallocate
	mov	eax, DWORD PTR _pVar$12[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx+4], 1
	jne	SHORT $LN86@Reallocate
$LN85@Reallocate:

; 3858 :         {
; 3859 :             if( pVar->pType->IsClassInstance() )

	mov	eax, DWORD PTR _pVar$12[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?IsClassInstance@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::IsClassInstance

; 3860 :             {
; 3861 :                 // do nothing
; 3862 :             }
; 3863 :             else
; 3864 :             {
; 3865 :                 // do nothing
; 3866 :             }

	jmp	$LN125@Reallocate
$LN86@Reallocate:

; 3867 :         }
; 3868 :         else if (pVar->pType->IsRenderTargetView())

	mov	eax, DWORD PTR _pVar$12[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?IsRenderTargetView@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::IsRenderTargetView
	test	eax, eax
	je	SHORT $LN81@Reallocate

; 3869 :         {
; 3870 :             VH( FixupRenderTargetViewPointer(&pVar->Data.pRenderTargetView) );

	mov	eax, DWORD PTR _pVar$12[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupRenderTargetViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSRenderTargetView@2@@Z ; D3DX11Effects::CEffectLoader::FixupRenderTargetViewPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN80@Reallocate
	jmp	$LN79@Reallocate
	jmp	$lExit$240
$LN80@Reallocate:
	jmp	SHORT $LN125@Reallocate
$LN81@Reallocate:

; 3871 :         } 
; 3872 :         else if (pVar->pType->IsDepthStencilView())

	mov	eax, DWORD PTR _pVar$12[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?IsDepthStencilView@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::IsDepthStencilView
	test	eax, eax
	je	SHORT $LN77@Reallocate

; 3873 :         {
; 3874 :             VH( FixupDepthStencilViewPointer(&pVar->Data.pDepthStencilView) );

	mov	eax, DWORD PTR _pVar$12[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupDepthStencilViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSDepthStencilView@2@@Z ; D3DX11Effects::CEffectLoader::FixupDepthStencilViewPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN76@Reallocate
	jmp	$LN75@Reallocate
	jmp	$lExit$240
$LN76@Reallocate:

; 3875 :         }
; 3876 :         else

	jmp	SHORT $LN125@Reallocate
$LN77@Reallocate:

; 3877 :         {
; 3878 :             VHD( E_FAIL, "Internal loading error: Invalid variable type." );

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN125@Reallocate
	jmp	$LN72@Reallocate
	jmp	$lExit$240
$LN125@Reallocate:

; 3879 :         }
; 3880 :     }

	jmp	$LN130@Reallocate
$LN129@Reallocate:

; 3881 : 
; 3882 :     // Fixup created members
; 3883 :     for (i = 0; i < m_pEffect->m_pMemberInterfaces.GetSize(); ++ i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN71@Reallocate
$LN70@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN71@Reallocate:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 204				; 000000ccH
	call	?GetSize@?$CEffectVector@PAUSMember@D3DX11Effects@@@@QBEIXZ ; CEffectVector<D3DX11Effects::SMember *>::GetSize
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN69@Reallocate

; 3884 :     {
; 3885 :         SMember* pMember = m_pEffect->m_pMemberInterfaces[i];

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, 204				; 000000ccH
	call	??A?$CEffectVector@PAUSMember@D3DX11Effects@@@@QAEAAPAUSMember@D3DX11Effects@@I@Z ; CEffectVector<D3DX11Effects::SMember *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _pMember$11[ebp], edx

; 3886 :         SGlobalVariable** ppTopLevelEntity = (SGlobalVariable**)&pMember->pTopLevelEntity;

	mov	eax, DWORD PTR _pMember$11[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _ppTopLevelEntity$10[ebp], eax

; 3887 :         VN( *ppTopLevelEntity );

	mov	eax, DWORD PTR _ppTopLevelEntity$10[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN68@Reallocate
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$LN67@Reallocate
	jmp	$lExit$240
$LN68@Reallocate:

; 3888 : 
; 3889 :         // This might be set to false later, for supporting textures inside classes
; 3890 :         const bool bGlobalMemberDataBlock = true;

	mov	BYTE PTR _bGlobalMemberDataBlock$9[ebp], 1

; 3891 : 
; 3892 :         if( Cloning )

	movzx	eax, BYTE PTR _Cloning$[ebp]
	test	eax, eax
	je	$LN66@Reallocate

; 3893 :         {
; 3894 :             if( pMember->pType->BelongsInConstantBuffer() )

	mov	eax, DWORD PTR _pMember$11[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?BelongsInConstantBuffer@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::BelongsInConstantBuffer
	test	eax, eax
	je	SHORT $LN65@Reallocate
$LN64@Reallocate:

; 3895 :             {
; 3896 :                 D3DXASSERT( pMember->Data.pGeneric == NULL || (*ppTopLevelEntity)->pEffect->m_Heap.IsInHeap(pMember->Data.pGeneric) );

	mov	eax, DWORD PTR _pMember$11[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN63@Reallocate
	mov	eax, DWORD PTR _pMember$11[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _ppTopLevelEntity$10[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 12					; 0000000cH
	call	?IsInHeap@CEffectHeap@D3DX11Effects@@QBEHPAX@Z ; D3DX11Effects::CEffectHeap::IsInHeap
	test	eax, eax
	jne	SHORT $LN63@Reallocate
	push	OFFSET ??_C@_0GI@CBPKGJFM@pMember?9?$DOData?4pGeneric?5?$DN?$DN?5NULL?5?$HM@
	mov	eax, DWORD PTR ?__LINE__Var@?1??ReallocateEffectData@CEffectLoader@D3DX11Effects@@IAEJ_N@Z@4JA
	add	eax, 301				; 0000012dH
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN63@Reallocate:
	xor	eax, eax
	jne	SHORT $LN64@Reallocate

; 3897 :                 pMember->Data.Offset = (UINT)( (BYTE*)pMember->Data.pGeneric - (BYTE*)(*ppTopLevelEntity)->pCB->pBackingStore );

	mov	eax, DWORD PTR _ppTopLevelEntity$10[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _pMember$11[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _pMember$11[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN65@Reallocate:

; 3898 :             }
; 3899 :             if( bGlobalMemberDataBlock && pMember->pMemberData )

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN66@Reallocate
	mov	eax, DWORD PTR _pMember$11[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN66@Reallocate

; 3900 :             {
; 3901 :                 pMember->MemberDataOffsetPlus4 = (UINT)( (BYTE*)pMember->pMemberData - (BYTE*)(*ppTopLevelEntity)->pEffect->m_pMemberDataBlocks ) + 4;

	mov	eax, DWORD PTR _ppTopLevelEntity$10[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _pMember$11[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR [edx+104]
	add	ecx, 4
	mov	edx, DWORD PTR _pMember$11[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN66@Reallocate:

; 3902 :             }
; 3903 :         }
; 3904 : 
; 3905 :         VH( FixupVariablePointer( ppTopLevelEntity ) );

	mov	eax, DWORD PTR _ppTopLevelEntity$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupVariablePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSGlobalVariable@2@@Z ; D3DX11Effects::CEffectLoader::FixupVariablePointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN59@Reallocate
	jmp	$LN58@Reallocate
	jmp	$lExit$240
$LN59@Reallocate:

; 3906 : 
; 3907 :         if (pMember->pType->BelongsInConstantBuffer())

	mov	eax, DWORD PTR _pMember$11[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?BelongsInConstantBuffer@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::BelongsInConstantBuffer
	test	eax, eax
	je	SHORT $LN57@Reallocate

; 3908 :         {
; 3909 :             // Convert from offsets to pointers
; 3910 :             pMember->Data.pGeneric = (*ppTopLevelEntity)->pCB->pBackingStore + pMember->Data.Offset;

	mov	eax, DWORD PTR _ppTopLevelEntity$10[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _pMember$11[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _pMember$11[ebp]
	mov	DWORD PTR [edx+4], eax
$LN57@Reallocate:

; 3911 :         }
; 3912 :         if( bGlobalMemberDataBlock && pMember->MemberDataOffsetPlus4 )

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN56@Reallocate
	mov	eax, DWORD PTR _pMember$11[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN56@Reallocate

; 3913 :         {
; 3914 :             pMember->pMemberData = (SMemberDataPointer*)( (BYTE*)m_pEffect->m_pMemberDataBlocks + ( pMember->MemberDataOffsetPlus4 - 4 ) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _pMember$11[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+104]
	lea	edx, DWORD PTR [eax+ecx-4]
	mov	eax, DWORD PTR _pMember$11[ebp]
	mov	DWORD PTR [eax+8], edx
$LN56@Reallocate:

; 3915 :         }
; 3916 :     }

	jmp	$LN70@Reallocate
$LN69@Reallocate:

; 3917 : 
; 3918 :     // Fixup shader data
; 3919 :     VH( ReallocateShaderBlocks() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReallocateShaderBlocks@CEffectLoader@D3DX11Effects@@IAEJXZ ; D3DX11Effects::CEffectLoader::ReallocateShaderBlocks
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN55@Reallocate
	jmp	$LN54@Reallocate
	jmp	$lExit$240
$LN55@Reallocate:

; 3920 : 
; 3921 :     // Move groups, techniques, and passes
; 3922 :     m_pOldGroups = m_pEffect->m_pGroups;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+52]
	mov	DWORD PTR [edx+176], eax

; 3923 :     VHD( pHeap->MoveData((void**) &m_pEffect->m_pGroups, cbGroups), "Internal loading error: cannot move groups." );

	mov	eax, DWORD PTR _cbGroups$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	add	edx, 52					; 00000034H
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN53@Reallocate
	jmp	$LN52@Reallocate
	jmp	$lExit$240
$LN53@Reallocate:

; 3924 :     for (i=0; i<m_pEffect->m_GroupCount; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN51@Reallocate
$LN50@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN51@Reallocate:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+48]
	jae	$LN49@Reallocate

; 3925 :     {
; 3926 :         SGroup *pGroup = &m_pEffect->m_pGroups[i];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	add	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _pGroup$8[ebp], edx

; 3927 :         UINT  cbTechniques;
; 3928 : 
; 3929 :         cbTechniques = pGroup->TechniqueCount * sizeof(STechnique);

	mov	eax, DWORD PTR _pGroup$8[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 5
	mov	DWORD PTR _cbTechniques$7[ebp], ecx

; 3930 :         VHD( pHeap->MoveData((void**) &pGroup->pTechniques, cbTechniques), "Internal loading error: cannot move techniques." );

	mov	eax, DWORD PTR _cbTechniques$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _pGroup$8[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN48@Reallocate
	jmp	$LN47@Reallocate
	jmp	$lExit$240
$LN48@Reallocate:

; 3931 : 
; 3932 :         for (j=0; j<pGroup->TechniqueCount; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN46@Reallocate
$LN45@Reallocate:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN46@Reallocate:
	mov	eax, DWORD PTR _pGroup$8[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	$LN44@Reallocate

; 3933 :         {
; 3934 :             STechnique *pTech = &pGroup->pTechniques[j];

	mov	eax, DWORD PTR _j$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _pGroup$8[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _pTech$6[ebp], eax

; 3935 :             UINT  cbPass;
; 3936 :             UINT  iPass;
; 3937 : 
; 3938 :             cbPass = pTech->PassCount * sizeof(SPassBlock);

	mov	eax, DWORD PTR _pTech$6[ebp]
	imul	ecx, DWORD PTR [eax+8], 156
	mov	DWORD PTR _cbPass$5[ebp], ecx

; 3939 :             SPassBlock* pOldPasses = Cloning ? pTech->pPasses : NULL;

	movzx	eax, BYTE PTR _Cloning$[ebp]
	test	eax, eax
	je	SHORT $LN236@Reallocate
	mov	ecx, DWORD PTR _pTech$6[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR tv1249[ebp], edx
	jmp	SHORT $LN237@Reallocate
$LN236@Reallocate:
	mov	DWORD PTR tv1249[ebp], 0
$LN237@Reallocate:
	mov	eax, DWORD PTR tv1249[ebp]
	mov	DWORD PTR _pOldPasses$3[ebp], eax

; 3940 :             VHD( pHeap->MoveData((void**) &pTech->pPasses, cbPass), "Internal loading error: cannot move passes." );

	mov	eax, DWORD PTR _cbPass$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTech$6[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN43@Reallocate
	jmp	$LN42@Reallocate
	jmp	$lExit$240
$LN43@Reallocate:

; 3941 : 
; 3942 :             for (iPass = 0; iPass < pTech->PassCount; ++ iPass)

	mov	DWORD PTR _iPass$4[ebp], 0
	jmp	SHORT $LN41@Reallocate
$LN40@Reallocate:
	mov	eax, DWORD PTR _iPass$4[ebp]
	add	eax, 1
	mov	DWORD PTR _iPass$4[ebp], eax
$LN41@Reallocate:
	mov	eax, DWORD PTR _pTech$6[ebp]
	mov	ecx, DWORD PTR _iPass$4[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jae	$LN39@Reallocate

; 3943 :             {
; 3944 :                 pTech->pPasses[iPass].pEffect = m_pEffect;

	imul	eax, DWORD PTR _iPass$4[ebp], 156
	mov	ecx, DWORD PTR _pTech$6[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	mov	DWORD PTR [edx+eax+144], ecx

; 3945 : 
; 3946 :                 // Fixup backing store pointers in passes
; 3947 :                 VH( FixupABPointer((SBlendBlock**) &pTech->pPasses[iPass].BackingStore.pBlendBlock) );

	imul	eax, DWORD PTR _iPass$4[ebp], 156
	mov	ecx, DWORD PTR _pTech$6[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax+56]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupABPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSBlendBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupABPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN38@Reallocate
	jmp	$LN37@Reallocate
	jmp	$lExit$240
$LN38@Reallocate:

; 3948 :                 VH( FixupDSPointer((SDepthStencilBlock**) &pTech->pPasses[iPass].BackingStore.pDepthStencilBlock) );

	imul	eax, DWORD PTR _iPass$4[ebp], 156
	mov	ecx, DWORD PTR _pTech$6[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax+60]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupDSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSDepthStencilBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupDSPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN36@Reallocate
	jmp	$LN35@Reallocate
	jmp	$lExit$240
$LN36@Reallocate:

; 3949 :                 VH( FixupRSPointer((SRasterizerBlock**) &pTech->pPasses[iPass].BackingStore.pRasterizerBlock) );

	imul	eax, DWORD PTR _iPass$4[ebp], 156
	mov	ecx, DWORD PTR _pTech$6[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax+64]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupRSPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSRasterizerBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupRSPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN34@Reallocate
	jmp	$LN33@Reallocate
	jmp	$lExit$240
$LN34@Reallocate:

; 3950 :                 VH( FixupShaderPointer((SShaderBlock**) &pTech->pPasses[iPass].BackingStore.pVertexShaderBlock) );

	imul	eax, DWORD PTR _iPass$4[ebp], 156
	mov	ecx, DWORD PTR _pTech$6[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax+108]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupShaderPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupShaderPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN32@Reallocate
	jmp	$LN31@Reallocate
	jmp	$lExit$240
$LN32@Reallocate:

; 3951 :                 VH( FixupShaderPointer((SShaderBlock**) &pTech->pPasses[iPass].BackingStore.pPixelShaderBlock) );

	imul	eax, DWORD PTR _iPass$4[ebp], 156
	mov	ecx, DWORD PTR _pTech$6[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax+112]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupShaderPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupShaderPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN30@Reallocate
	jmp	$LN29@Reallocate
	jmp	$lExit$240
$LN30@Reallocate:

; 3952 :                 VH( FixupShaderPointer((SShaderBlock**) &pTech->pPasses[iPass].BackingStore.pGeometryShaderBlock) );

	imul	eax, DWORD PTR _iPass$4[ebp], 156
	mov	ecx, DWORD PTR _pTech$6[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax+116]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupShaderPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupShaderPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN28@Reallocate
	jmp	$LN27@Reallocate
	jmp	$lExit$240
$LN28@Reallocate:

; 3953 :                 VH( FixupShaderPointer((SShaderBlock**) &pTech->pPasses[iPass].BackingStore.pHullShaderBlock) );

	imul	eax, DWORD PTR _iPass$4[ebp], 156
	mov	ecx, DWORD PTR _pTech$6[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax+128]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupShaderPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupShaderPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN26@Reallocate
	jmp	$LN25@Reallocate
	jmp	$lExit$240
$LN26@Reallocate:

; 3954 :                 VH( FixupShaderPointer((SShaderBlock**) &pTech->pPasses[iPass].BackingStore.pDomainShaderBlock) );

	imul	eax, DWORD PTR _iPass$4[ebp], 156
	mov	ecx, DWORD PTR _pTech$6[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax+124]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupShaderPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupShaderPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN24@Reallocate
	jmp	$LN23@Reallocate
	jmp	$lExit$240
$LN24@Reallocate:

; 3955 :                 VH( FixupShaderPointer((SShaderBlock**) &pTech->pPasses[iPass].BackingStore.pComputeShaderBlock) );

	imul	eax, DWORD PTR _iPass$4[ebp], 156
	mov	ecx, DWORD PTR _pTech$6[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax+120]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupShaderPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupShaderPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN22@Reallocate
	jmp	$LN21@Reallocate
	jmp	$lExit$240
$LN22@Reallocate:

; 3956 :                 VH( FixupDepthStencilViewPointer( &pTech->pPasses[iPass].BackingStore.pDepthStencilView) );

	imul	eax, DWORD PTR _iPass$4[ebp], 156
	mov	ecx, DWORD PTR _pTech$6[ebp]
	mov	edx, DWORD PTR [ecx+12]
	lea	eax, DWORD PTR [edx+eax+104]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupDepthStencilViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSDepthStencilView@2@@Z ; D3DX11Effects::CEffectLoader::FixupDepthStencilViewPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN20@Reallocate
	jmp	$LN19@Reallocate
	jmp	$lExit$240
$LN20@Reallocate:

; 3957 :                 for (UINT iRT = 0; iRT < D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT; iRT++)

	mov	DWORD PTR _iRT$2[ebp], 0
	jmp	SHORT $LN18@Reallocate
$LN17@Reallocate:
	mov	eax, DWORD PTR _iRT$2[ebp]
	add	eax, 1
	mov	DWORD PTR _iRT$2[ebp], eax
$LN18@Reallocate:
	cmp	DWORD PTR _iRT$2[ebp], 8
	jae	SHORT $LN16@Reallocate

; 3958 :                 {
; 3959 :                     VH( FixupRenderTargetViewPointer( &pTech->pPasses[iPass].BackingStore.pRenderTargetViews[iRT] ) );

	imul	eax, DWORD PTR _iPass$4[ebp], 156
	mov	ecx, DWORD PTR _pTech$6[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, eax
	mov	eax, DWORD PTR _iRT$2[ebp]
	lea	ecx, DWORD PTR [edx+eax*4+72]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupRenderTargetViewPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSRenderTargetView@2@@Z ; D3DX11Effects::CEffectLoader::FixupRenderTargetViewPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN15@Reallocate
	jmp	$LN14@Reallocate
	jmp	$lExit$240
$LN15@Reallocate:

; 3960 :                 }

	jmp	SHORT $LN17@Reallocate
$LN16@Reallocate:

; 3961 :             }        

	jmp	$LN40@Reallocate
$LN39@Reallocate:

; 3962 : 
; 3963 :             VH( ReallocateBlockAssignments( pTech->pPasses, pTech->PassCount, pOldPasses ) );

	mov	eax, DWORD PTR _pOldPasses$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _pTech$6[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _pTech$6[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$ReallocateBlockAssignments@USPassBlock@D3DX11Effects@@@CEffectLoader@D3DX11Effects@@IAEJAAPAUSPassBlock@1@IPAU21@@Z ; D3DX11Effects::CEffectLoader::ReallocateBlockAssignments<D3DX11Effects::SPassBlock>
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN13@Reallocate
	jmp	$LN12@Reallocate
	jmp	$lExit$240
$LN13@Reallocate:

; 3964 :         }

	jmp	$LN45@Reallocate
$LN44@Reallocate:

; 3965 :     }

	jmp	$LN50@Reallocate
$LN49@Reallocate:

; 3966 :     VH( FixupGroupPointer( &m_pEffect->m_pNullGroup ) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 56					; 00000038H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupGroupPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSGroup@2@@Z ; D3DX11Effects::CEffectLoader::FixupGroupPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN11@Reallocate
	jmp	$LN10@Reallocate
	jmp	$lExit$240
$LN11@Reallocate:

; 3967 : 
; 3968 :     // Move anonymous shader variables
; 3969 :     VHD( pHeap->MoveData((void **) &m_pEffect->m_pAnonymousShaders, cbAnonymousShaders), "Internal loading error: cannot move anonymous shaders." );

	mov	eax, DWORD PTR _cbAnonymousShaders$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	add	edx, 40					; 00000028H
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN9@Reallocate
	jmp	SHORT $LN8@Reallocate
	jmp	$lExit$240
$LN9@Reallocate:

; 3970 :     for (i=0; i<m_pEffect->m_AnonymousShaderCount; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@Reallocate
$LN6@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@Reallocate:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+36]
	jae	SHORT $LN5@Reallocate

; 3971 :     {
; 3972 :         SAnonymousShader *pAnonymousShader = m_pEffect->m_pAnonymousShaders + i;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _i$[ebp], 12
	add	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _pAnonymousShader$1[ebp], edx

; 3973 :         VH( FixupShaderPointer((SShaderBlock**) &pAnonymousShader->pShaderBlock) );

	mov	eax, DWORD PTR _pAnonymousShader$1[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupShaderPointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffectLoader::FixupShaderPointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN4@Reallocate
	jmp	SHORT $LN3@Reallocate
	jmp	SHORT $lExit$240
$LN4@Reallocate:

; 3974 :     }

	jmp	SHORT $LN6@Reallocate
$LN5@Reallocate:

; 3975 : 
; 3976 :     VBD( pHeap->GetSize() == m_EffectMemory, "Loading error: effect size mismatch." );

	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?GetSize@CEffectHeap@D3DX11Effects@@QAEIXZ ; D3DX11Effects::CEffectHeap::GetSize
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+180]
	je	SHORT $LN2@Reallocate
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $LN1@Reallocate
	jmp	SHORT $lExit$240
$LN2@Reallocate:
	jmp	SHORT $lExit$240
$LN1@Reallocate:
	jmp	SHORT $lExit$240
$LN3@Reallocate:
	jmp	SHORT $lExit$240
$LN8@Reallocate:
	jmp	SHORT $lExit$240
$LN10@Reallocate:
	jmp	SHORT $lExit$240
$LN12@Reallocate:
	jmp	SHORT $lExit$240
$LN14@Reallocate:
	jmp	SHORT $lExit$240
$LN19@Reallocate:
	jmp	SHORT $lExit$240
$LN21@Reallocate:
	jmp	SHORT $lExit$240
$LN23@Reallocate:
	jmp	SHORT $lExit$240
$LN25@Reallocate:
	jmp	SHORT $lExit$240
$LN27@Reallocate:
	jmp	SHORT $lExit$240
$LN29@Reallocate:
	jmp	SHORT $lExit$240
$LN31@Reallocate:
	jmp	SHORT $lExit$240
$LN33@Reallocate:
	jmp	SHORT $lExit$240
$LN35@Reallocate:
	jmp	SHORT $lExit$240
$LN37@Reallocate:
	jmp	SHORT $lExit$240
$LN42@Reallocate:
	jmp	SHORT $lExit$240
$LN47@Reallocate:
	jmp	SHORT $lExit$240
$LN52@Reallocate:
	jmp	SHORT $lExit$240
$LN54@Reallocate:
	jmp	SHORT $lExit$240
$LN58@Reallocate:
	jmp	SHORT $lExit$240
$LN67@Reallocate:
	jmp	SHORT $lExit$240
$LN72@Reallocate:
	jmp	SHORT $lExit$240
$LN75@Reallocate:
	jmp	SHORT $lExit$240
$LN79@Reallocate:
	jmp	SHORT $lExit$240
$LN88@Reallocate:
	jmp	SHORT $lExit$240
$LN91@Reallocate:
	jmp	SHORT $lExit$240
$LN93@Reallocate:
	jmp	SHORT $lExit$240
$LN96@Reallocate:
	jmp	SHORT $lExit$240
$LN99@Reallocate:
	jmp	SHORT $lExit$240
$LN102@Reallocate:
	jmp	SHORT $lExit$240
$LN109@Reallocate:
	jmp	SHORT $lExit$240
$LN114@Reallocate:
	jmp	SHORT $lExit$240
$LN118@Reallocate:
	jmp	SHORT $lExit$240
$LN122@Reallocate:
	jmp	SHORT $lExit$240
$LN126@Reallocate:
	jmp	SHORT $lExit$240
$LN132@Reallocate:
	jmp	SHORT $lExit$240
$LN138@Reallocate:
	jmp	SHORT $lExit$240
$LN143@Reallocate:
	jmp	SHORT $lExit$240
$LN145@Reallocate:
	jmp	SHORT $lExit$240
$LN147@Reallocate:
	jmp	SHORT $lExit$240
$LN149@Reallocate:
	jmp	SHORT $lExit$240
$LN151@Reallocate:
	jmp	SHORT $lExit$240
$LN153@Reallocate:
	jmp	SHORT $lExit$240
$lExit$240:

; 3977 : 
; 3978 : lExit:
; 3979 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 3980 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 688				; 000002b0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN239@Reallocate:
	DD	$LN101@Reallocate
	DD	$LN104@Reallocate
	DD	$LN98@Reallocate
	DD	$LN95@Reallocate
	DD	$LN90@Reallocate
$LN238@Reallocate:
	DB	0
	DB	1
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
?ReallocateEffectData@CEffectLoader@D3DX11Effects@@IAEJ_N@Z ENDP ; D3DX11Effects::CEffectLoader::ReallocateEffectData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?ReallocateReflectionData@CEffectLoader@D3DX11Effects@@IAEJ_N@Z
_TEXT	SEGMENT
_iDecl$1 = -104						; size = 4
_pTopLevelEntity$2 = -92				; size = 4
_pMember$3 = -80					; size = 4
_pHeap$ = -68						; size = 4
_k$ = -56						; size = 4
_j$ = -44						; size = 4
_i$ = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_Cloning$ = 8						; size = 1
?ReallocateReflectionData@CEffectLoader@D3DX11Effects@@IAEJ_N@Z PROC ; D3DX11Effects::CEffectLoader::ReallocateReflectionData, COMDAT
; _this$ = ecx

; 3235 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3236 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 3237 :     UINT  i, j, k;
; 3238 :     CEffectHeap *pHeap = &m_pReflection->m_Heap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _pHeap$[ebp], ecx

; 3239 : 
; 3240 :     for(i=0; i<m_pEffect->m_CBCount; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN58@Reallocate
$LN57@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN58@Reallocate:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+116]
	jae	SHORT $LN56@Reallocate

; 3241 :     {
; 3242 :         VHD( pHeap->MoveString( &m_pEffect->m_pCBs[i].pName ), "Internal loading error: cannot move CB name." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _i$[ebp], 60
	mov	eax, DWORD PTR [ecx+120]
	lea	ecx, DWORD PTR [eax+edx+24]
	push	ecx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveString@CEffectHeap@D3DX11Effects@@QAEJPAPAD@Z ; D3DX11Effects::CEffectHeap::MoveString
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN55@Reallocate
	jmp	$lExit$64
	jmp	$lExit$64
$LN55@Reallocate:

; 3243 :         VH( ReallocateAnnotationData(m_pEffect->m_pCBs[i].AnnotationCount, &m_pEffect->m_pCBs[i].pAnnotations) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _i$[ebp], 60
	mov	eax, DWORD PTR [ecx+120]
	lea	ecx, DWORD PTR [eax+edx+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	imul	ecx, DWORD PTR _i$[ebp], 60
	mov	edx, DWORD PTR [eax+120]
	mov	eax, DWORD PTR [edx+ecx+28]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReallocateAnnotationData@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAnnotation@2@@Z ; D3DX11Effects::CEffectLoader::ReallocateAnnotationData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN53@Reallocate
	jmp	$lExit$64
	jmp	$lExit$64
$LN53@Reallocate:

; 3244 :     }

	jmp	$LN57@Reallocate
$LN56@Reallocate:

; 3245 : 
; 3246 :     for(i=0; i<m_pEffect->m_VariableCount; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN51@Reallocate
$LN50@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN51@Reallocate:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+28]
	jae	$LN49@Reallocate

; 3247 :     {
; 3248 :         VHD( pHeap->MoveString( &m_pEffect->m_pVariables[i].pName ), "Internal loading error: cannot move variable name." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _i$[ebp], 48
	mov	eax, DWORD PTR [ecx+32]
	lea	ecx, DWORD PTR [eax+edx+16]
	push	ecx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveString@CEffectHeap@D3DX11Effects@@QAEJPAPAD@Z ; D3DX11Effects::CEffectHeap::MoveString
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN48@Reallocate
	jmp	$lExit$64
	jmp	$lExit$64
$LN48@Reallocate:

; 3249 :         VHD( pHeap->MoveString( &m_pEffect->m_pVariables[i].pSemantic ), "Internal loading error: cannot move variable semantic." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _i$[ebp], 48
	mov	eax, DWORD PTR [ecx+32]
	lea	ecx, DWORD PTR [eax+edx+20]
	push	ecx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveString@CEffectHeap@D3DX11Effects@@QAEJPAPAD@Z ; D3DX11Effects::CEffectHeap::MoveString
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN46@Reallocate
	jmp	$lExit$64
	jmp	$lExit$64
$LN46@Reallocate:

; 3250 :         VH( ReallocateAnnotationData(m_pEffect->m_pVariables[i].AnnotationCount, &m_pEffect->m_pVariables[i].pAnnotations) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _i$[ebp], 48
	mov	eax, DWORD PTR [ecx+32]
	lea	ecx, DWORD PTR [eax+edx+44]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	imul	ecx, DWORD PTR _i$[ebp], 48
	mov	edx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR [edx+ecx+40]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReallocateAnnotationData@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAnnotation@2@@Z ; D3DX11Effects::CEffectLoader::ReallocateAnnotationData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN44@Reallocate
	jmp	$lExit$64
	jmp	$lExit$64
$LN44@Reallocate:

; 3251 :     }

	jmp	$LN50@Reallocate
$LN49@Reallocate:

; 3252 : 
; 3253 :     for(i=0; i<m_pEffect->m_GroupCount; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN42@Reallocate
$LN41@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN42@Reallocate:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+48]
	jae	$LN40@Reallocate

; 3254 :     {
; 3255 :         VHD( pHeap->MoveString( &m_pEffect->m_pGroups[i].pName ), "Internal loading error: cannot move group name." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+52]
	lea	ecx, DWORD PTR [eax+edx+4]
	push	ecx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveString@CEffectHeap@D3DX11Effects@@QAEJPAPAD@Z ; D3DX11Effects::CEffectHeap::MoveString
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN39@Reallocate
	jmp	$lExit$64
	jmp	$lExit$64
$LN39@Reallocate:

; 3256 :         VH( ReallocateAnnotationData(m_pEffect->m_pGroups[i].AnnotationCount, &m_pEffect->m_pGroups[i].pAnnotations) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+52]
	lea	ecx, DWORD PTR [eax+edx+20]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR [edx+ecx+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReallocateAnnotationData@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAnnotation@2@@Z ; D3DX11Effects::CEffectLoader::ReallocateAnnotationData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN37@Reallocate
	jmp	$lExit$64
	jmp	$lExit$64
$LN37@Reallocate:

; 3257 : 
; 3258 :         for(j=0; j<m_pEffect->m_pGroups[i].TechniqueCount; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN35@Reallocate
$LN34@Reallocate:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN35@Reallocate:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+edx+8]
	jae	$LN33@Reallocate

; 3259 :         {
; 3260 :             VHD( pHeap->MoveString( &m_pEffect->m_pGroups[i].pTechniques[j].pName ), "Internal loading error: cannot move technique name." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [eax+edx+12]
	lea	eax, DWORD PTR [edx+ecx+4]
	push	eax
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveString@CEffectHeap@D3DX11Effects@@QAEJPAPAD@Z ; D3DX11Effects::CEffectHeap::MoveString
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN32@Reallocate
	jmp	$lExit$64
	jmp	$lExit$64
$LN32@Reallocate:

; 3261 :             VH( ReallocateAnnotationData(m_pEffect->m_pGroups[i].pTechniques[j].AnnotationCount, &m_pEffect->m_pGroups[i].pTechniques[j].pAnnotations) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [eax+edx+12]
	lea	eax, DWORD PTR [edx+ecx+20]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR [edx+52]
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+eax+12]
	mov	ecx, DWORD PTR [eax+edx+16]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReallocateAnnotationData@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAnnotation@2@@Z ; D3DX11Effects::CEffectLoader::ReallocateAnnotationData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN30@Reallocate
	jmp	$lExit$64
	jmp	$lExit$64
$LN30@Reallocate:

; 3262 :             
; 3263 :             for(k=0; k<m_pEffect->m_pGroups[i].pTechniques[j].PassCount; k++)

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN28@Reallocate
$LN27@Reallocate:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN28@Reallocate:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [eax+edx+12]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	eax, DWORD PTR [edx+ecx+8]
	jae	$LN26@Reallocate

; 3264 :             {
; 3265 :                 VHD( pHeap->MoveString( &m_pEffect->m_pGroups[i].pTechniques[j].pPasses[k].pName ), "Internal loading error: cannot move pass name." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [eax+edx+12]
	imul	eax, DWORD PTR _k$[ebp], 156
	mov	ecx, DWORD PTR [edx+ecx+12]
	lea	edx, DWORD PTR [ecx+eax+132]
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveString@CEffectHeap@D3DX11Effects@@QAEJPAPAD@Z ; D3DX11Effects::CEffectHeap::MoveString
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN25@Reallocate
	jmp	$lExit$64
	jmp	$lExit$64
$LN25@Reallocate:

; 3266 :                 VH( ReallocateAnnotationData(m_pEffect->m_pGroups[i].pTechniques[j].pPasses[k].AnnotationCount, &m_pEffect->m_pGroups[i].pTechniques[j].pPasses[k].pAnnotations) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [eax+edx+12]
	imul	eax, DWORD PTR _k$[ebp], 156
	mov	ecx, DWORD PTR [edx+ecx+12]
	lea	edx, DWORD PTR [ecx+eax+140]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [eax+edx+12]
	imul	eax, DWORD PTR _k$[ebp], 156
	mov	ecx, DWORD PTR [edx+ecx+12]
	mov	edx, DWORD PTR [ecx+eax+136]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReallocateAnnotationData@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAnnotation@2@@Z ; D3DX11Effects::CEffectLoader::ReallocateAnnotationData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN23@Reallocate
	jmp	$lExit$64
	jmp	$lExit$64
$LN23@Reallocate:

; 3267 :             }

	jmp	$LN27@Reallocate
$LN26@Reallocate:

; 3268 :         }

	jmp	$LN34@Reallocate
$LN33@Reallocate:

; 3269 :     }

	jmp	$LN41@Reallocate
$LN40@Reallocate:

; 3270 : 
; 3271 :     if( !Cloning )

	movzx	eax, BYTE PTR _Cloning$[ebp]
	test	eax, eax
	jne	$LN21@Reallocate

; 3272 :     {
; 3273 :         // When not cloning, every member in m_pMemberInterfaces is from a global variable, so we can take pName and pSemantic
; 3274 :         // from the parent variable, which were updated above
; 3275 :         for (i = 0; i < m_pEffect->m_pMemberInterfaces.GetSize(); ++ i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN20@Reallocate
$LN19@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN20@Reallocate:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 204				; 000000ccH
	call	?GetSize@?$CEffectVector@PAUSMember@D3DX11Effects@@@@QBEIXZ ; CEffectVector<D3DX11Effects::SMember *>::GetSize
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN21@Reallocate

; 3276 :         {
; 3277 :             SMember* pMember = m_pEffect->m_pMemberInterfaces[i];

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	add	ecx, 204				; 000000ccH
	call	??A?$CEffectVector@PAUSMember@D3DX11Effects@@@@QAEAAPAUSMember@D3DX11Effects@@I@Z ; CEffectVector<D3DX11Effects::SMember *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _pMember$3[ebp], edx

; 3278 :             SGlobalVariable* pTopLevelEntity = (SGlobalVariable*)pMember->pTopLevelEntity;

	mov	eax, DWORD PTR _pMember$3[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _pTopLevelEntity$2[ebp], ecx

; 3279 :             VH( FixupVariablePointer( &pTopLevelEntity ) );

	lea	eax, DWORD PTR _pTopLevelEntity$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FixupVariablePointer@CEffectLoader@D3DX11Effects@@IAEJPAPAUSGlobalVariable@2@@Z ; D3DX11Effects::CEffectLoader::FixupVariablePointer
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN17@Reallocate
	jmp	$lExit$64
	jmp	$lExit$64
$LN17@Reallocate:

; 3280 :             pMember->pName = pTopLevelEntity->pName;

	mov	eax, DWORD PTR _pMember$3[ebp]
	mov	ecx, DWORD PTR _pTopLevelEntity$2[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx

; 3281 :             pMember->pSemantic = pTopLevelEntity->pSemantic;

	mov	eax, DWORD PTR _pMember$3[ebp]
	mov	ecx, DWORD PTR _pTopLevelEntity$2[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 3282 :         }

	jmp	SHORT $LN19@Reallocate
$LN21@Reallocate:

; 3283 :     }
; 3284 : 
; 3285 :     // Move shader bytecode
; 3286 :     for (i=0; i<m_pEffect->m_ShaderBlockCount; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN15@Reallocate
$LN14@Reallocate:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN15@Reallocate:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+60]
	jae	$lExit$64

; 3287 :     {
; 3288 :         if (NULL != m_pEffect->m_pShaderBlocks[i].pReflectionData)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _i$[ebp], 68
	mov	eax, DWORD PTR [ecx+64]
	cmp	DWORD PTR [eax+edx+8], 0
	je	$LN12@Reallocate

; 3289 :         {
; 3290 :             VHD( pHeap->MoveData((void**)&m_pEffect->m_pShaderBlocks[i].pReflectionData, sizeof(SShaderBlock::SReflectionData)),
; 3291 :                  "Internal loading error: cannot move shader reflection block." );

	push	44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _i$[ebp], 68
	mov	eax, DWORD PTR [ecx+64]
	lea	ecx, DWORD PTR [eax+edx+8]
	push	ecx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN11@Reallocate
	jmp	$lExit$64
	jmp	$lExit$64
$LN11@Reallocate:

; 3292 :             VHD( pHeap->MoveData((void**)&m_pEffect->m_pShaderBlocks[i].pReflectionData->pBytecode, m_pEffect->m_pShaderBlocks[i].pReflectionData->BytecodeLength),
; 3293 :                  "Internal loading error: cannot move shader bytecode.");

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _i$[ebp], 68
	mov	eax, DWORD PTR [ecx+64]
	mov	ecx, DWORD PTR [eax+edx+8]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _i$[ebp], 68
	mov	eax, DWORD PTR [ecx+64]
	mov	ecx, DWORD PTR [eax+edx+8]
	push	ecx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN9@Reallocate
	jmp	$lExit$64
	jmp	$lExit$64
$LN9@Reallocate:

; 3294 :             for( UINT iDecl=0; iDecl < D3D11_SO_STREAM_COUNT; ++iDecl )

	mov	DWORD PTR _iDecl$1[ebp], 0
	jmp	SHORT $LN7@Reallocate
$LN6@Reallocate:
	mov	eax, DWORD PTR _iDecl$1[ebp]
	add	eax, 1
	mov	DWORD PTR _iDecl$1[ebp], eax
$LN7@Reallocate:
	cmp	DWORD PTR _iDecl$1[ebp], 4
	jae	SHORT $LN5@Reallocate

; 3295 :             {
; 3296 :                 VHD( pHeap->MoveString(&m_pEffect->m_pShaderBlocks[i].pReflectionData->pStreamOutDecls[iDecl]), "Internal loading error: cannot move SO decl." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _i$[ebp], 68
	mov	eax, DWORD PTR [ecx+64]
	mov	ecx, DWORD PTR [eax+edx+8]
	mov	edx, DWORD PTR _iDecl$1[ebp]
	lea	eax, DWORD PTR [ecx+edx*4+8]
	push	eax
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveString@CEffectHeap@D3DX11Effects@@QAEJPAPAD@Z ; D3DX11Effects::CEffectHeap::MoveString
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN4@Reallocate
	jmp	SHORT $lExit$64
	jmp	SHORT $lExit$64
$LN4@Reallocate:

; 3297 :             }

	jmp	SHORT $LN6@Reallocate
$LN5@Reallocate:

; 3298 :             VH( pHeap->MoveInterfaceParameters(m_pEffect->m_pShaderBlocks[i].pReflectionData->InterfaceParameterCount, &m_pEffect->m_pShaderBlocks[i].pReflectionData->pInterfaceParameters ) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _i$[ebp], 68
	mov	eax, DWORD PTR [ecx+64]
	mov	ecx, DWORD PTR [eax+edx+8]
	add	ecx, 40					; 00000028H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	imul	ecx, DWORD PTR _i$[ebp], 68
	mov	edx, DWORD PTR [eax+64]
	mov	eax, DWORD PTR [edx+ecx+8]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveInterfaceParameters@CEffectHeap@D3DX11Effects@@QAEJIPAPAUSInterfaceParameter@SShaderBlock@2@@Z ; D3DX11Effects::CEffectHeap::MoveInterfaceParameters
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN12@Reallocate
	jmp	SHORT $lExit$64
	jmp	SHORT $lExit$64
$LN12@Reallocate:

; 3299 :         }
; 3300 :         
; 3301 :     }

	jmp	$LN14@Reallocate
$lExit$64:

; 3302 : 
; 3303 : lExit:
; 3304 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 3305 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN63@Reallocate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN63@Reallocate:
	DD	1
	DD	$LN62@Reallocate
$LN62@Reallocate:
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN61@Reallocate
$LN61@Reallocate:
	DB	112					; 00000070H
	DB	84					; 00000054H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	69					; 00000045H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	0
?ReallocateReflectionData@CEffectLoader@D3DX11Effects@@IAEJ_N@Z ENDP ; D3DX11Effects::CEffectLoader::ReallocateReflectionData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?InitializeReflectionDataAndMoveStrings@CEffectLoader@D3DX11Effects@@IAEJI@Z
_TEXT	SEGMENT
_pHeap$ = -80						; size = 4
_cbStrings$ = -68					; size = 4
_k$ = -56						; size = 4
_j$ = -44						; size = 4
_i$ = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_KnownSize$ = 8						; size = 4
?InitializeReflectionDataAndMoveStrings@CEffectLoader@D3DX11Effects@@IAEJI@Z PROC ; D3DX11Effects::CEffectLoader::InitializeReflectionDataAndMoveStrings, COMDAT
; _this$ = ecx

; 3165 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3166 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 3167 :     UINT  i, j, k;
; 3168 :     UINT  cbStrings;
; 3169 :     CEffectHeap *pHeap = &m_pReflection->m_Heap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _pHeap$[ebp], ecx

; 3170 : 
; 3171 :     // Get byte counts
; 3172 :     cbStrings = m_pEffect->m_StringCount * sizeof( SString );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+124]
	shl	edx, 2
	mov	DWORD PTR _cbStrings$[ebp], edx

; 3173 : 
; 3174 :     if( KnownSize )

	cmp	DWORD PTR _KnownSize$[ebp], 0
	je	SHORT $LN40@Initialize

; 3175 :     {
; 3176 :         m_ReflectionMemory = KnownSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _KnownSize$[ebp]
	mov	DWORD PTR [eax+184], ecx

; 3177 :     }
; 3178 :     else

	jmp	$LN39@Initialize
$LN40@Initialize:

; 3179 :     {
; 3180 :         m_ReflectionMemory += AlignToPowerOf2(cbStrings, c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _cbStrings$[ebp]
	push	eax
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+184]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+184], eax

; 3181 : 
; 3182 :         for (i=0; i<m_pEffect->m_CBCount; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN38@Initialize
$LN37@Initialize:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN38@Initialize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+116]
	jae	SHORT $LN36@Initialize

; 3183 :         {
; 3184 :             VH( CalculateAnnotationSize(m_pEffect->m_pCBs[i].AnnotationCount, m_pEffect->m_pCBs[i].pAnnotations) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _i$[ebp], 60
	mov	eax, DWORD PTR [ecx+120]
	mov	ecx, DWORD PTR [eax+edx+32]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	imul	ecx, DWORD PTR _i$[ebp], 60
	mov	edx, DWORD PTR [eax+120]
	mov	eax, DWORD PTR [edx+ecx+28]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateAnnotationSize@CEffectLoader@D3DX11Effects@@IAEJIPAUSAnnotation@2@@Z ; D3DX11Effects::CEffectLoader::CalculateAnnotationSize
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN35@Initialize
	jmp	$lExit$43
	jmp	$lExit$43
$LN35@Initialize:

; 3185 :         }

	jmp	SHORT $LN37@Initialize
$LN36@Initialize:

; 3186 : 
; 3187 :         for (i=0; i<m_pEffect->m_VariableCount; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN33@Initialize
$LN32@Initialize:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN33@Initialize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+28]
	jae	SHORT $LN31@Initialize

; 3188 :         {
; 3189 :             VH( CalculateAnnotationSize(m_pEffect->m_pVariables[i].AnnotationCount, m_pEffect->m_pVariables[i].pAnnotations) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _i$[ebp], 48
	mov	eax, DWORD PTR [ecx+32]
	mov	ecx, DWORD PTR [eax+edx+44]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	imul	ecx, DWORD PTR _i$[ebp], 48
	mov	edx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR [edx+ecx+40]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateAnnotationSize@CEffectLoader@D3DX11Effects@@IAEJIPAUSAnnotation@2@@Z ; D3DX11Effects::CEffectLoader::CalculateAnnotationSize
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN30@Initialize
	jmp	$lExit$43
	jmp	$lExit$43
$LN30@Initialize:

; 3190 :         }

	jmp	SHORT $LN32@Initialize
$LN31@Initialize:

; 3191 : 
; 3192 :         for (i=0; i<m_pEffect->m_GroupCount; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN28@Initialize
$LN27@Initialize:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN28@Initialize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+48]
	jae	$LN26@Initialize

; 3193 :         {
; 3194 :             VH( CalculateAnnotationSize(m_pEffect->m_pGroups[i].AnnotationCount, m_pEffect->m_pGroups[i].pAnnotations) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR [eax+edx+20]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR [edx+ecx+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateAnnotationSize@CEffectLoader@D3DX11Effects@@IAEJIPAUSAnnotation@2@@Z ; D3DX11Effects::CEffectLoader::CalculateAnnotationSize
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN25@Initialize
	jmp	$lExit$43
	jmp	$lExit$43
$LN25@Initialize:

; 3195 : 
; 3196 :             for (j=0; j<m_pEffect->m_pGroups[i].TechniqueCount; j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN23@Initialize
$LN22@Initialize:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN23@Initialize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+edx+8]
	jae	$LN21@Initialize

; 3197 :             {
; 3198 :                 VH( CalculateAnnotationSize(m_pEffect->m_pGroups[i].pTechniques[j].AnnotationCount, m_pEffect->m_pGroups[i].pTechniques[j].pAnnotations) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [eax+edx+12]
	mov	eax, DWORD PTR [edx+ecx+20]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR [edx+52]
	mov	edx, DWORD PTR _j$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+eax+12]
	mov	ecx, DWORD PTR [eax+edx+16]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateAnnotationSize@CEffectLoader@D3DX11Effects@@IAEJIPAUSAnnotation@2@@Z ; D3DX11Effects::CEffectLoader::CalculateAnnotationSize
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN20@Initialize
	jmp	$lExit$43
	jmp	$lExit$43
$LN20@Initialize:

; 3199 : 
; 3200 :                 for (k=0; k<m_pEffect->m_pGroups[i].pTechniques[j].PassCount; k++)

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN18@Initialize
$LN17@Initialize:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN18@Initialize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [eax+edx+12]
	mov	eax, DWORD PTR _k$[ebp]
	cmp	eax, DWORD PTR [edx+ecx+8]
	jae	SHORT $LN16@Initialize

; 3201 :                 {
; 3202 :                     VH( CalculateAnnotationSize(m_pEffect->m_pGroups[i].pTechniques[j].pPasses[k].AnnotationCount, m_pEffect->m_pGroups[i].pTechniques[j].pPasses[k].pAnnotations) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [eax+edx+12]
	imul	eax, DWORD PTR _k$[ebp], 156
	mov	ecx, DWORD PTR [edx+ecx+12]
	mov	edx, DWORD PTR [ecx+eax+140]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 5
	mov	eax, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _j$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR [eax+edx+12]
	imul	eax, DWORD PTR _k$[ebp], 156
	mov	ecx, DWORD PTR [edx+ecx+12]
	mov	edx, DWORD PTR [ecx+eax+136]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CalculateAnnotationSize@CEffectLoader@D3DX11Effects@@IAEJIPAUSAnnotation@2@@Z ; D3DX11Effects::CEffectLoader::CalculateAnnotationSize
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN15@Initialize
	jmp	$lExit$43
	jmp	$lExit$43
$LN15@Initialize:

; 3203 :                 }

	jmp	$LN17@Initialize
$LN16@Initialize:

; 3204 :             }

	jmp	$LN22@Initialize
$LN21@Initialize:

; 3205 :         }

	jmp	$LN27@Initialize
$LN26@Initialize:

; 3206 : 
; 3207 :         // Calculate shader reflection data size
; 3208 :         for (i=0; i<m_pEffect->m_ShaderBlockCount; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@Initialize
$LN12@Initialize:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN13@Initialize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+60]
	jae	SHORT $LN39@Initialize

; 3209 :         {
; 3210 :             if (NULL != m_pEffect->m_pShaderBlocks[i].pReflectionData)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _i$[ebp], 68
	mov	eax, DWORD PTR [ecx+64]
	cmp	DWORD PTR [eax+edx+8], 0
	je	SHORT $LN10@Initialize

; 3211 :             {
; 3212 :                 m_ReflectionMemory += AlignToPowerOf2(sizeof(SShaderBlock::SReflectionData), c_DataAlignment);

	push	4
	push	44					; 0000002cH
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+184]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+184], eax

; 3213 :                 m_ReflectionMemory += AlignToPowerOf2(m_pEffect->m_pShaderBlocks[i].pReflectionData->BytecodeLength, c_DataAlignment);

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _i$[ebp], 68
	mov	eax, DWORD PTR [ecx+64]
	mov	ecx, DWORD PTR [eax+edx+8]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+184]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+184], eax
$LN10@Initialize:

; 3214 :                 // stream out decl is handled as a string, and thus its size is already factored because of GetStringAndAddToReflection
; 3215 :             }
; 3216 :         }

	jmp	SHORT $LN12@Initialize
$LN39@Initialize:

; 3217 :     }
; 3218 : 
; 3219 :     VHD( pHeap->ReserveMemory(m_ReflectionMemory), "Internal loading error: failed to reserve reflection memory." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+184]
	push	ecx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?ReserveMemory@CEffectHeap@D3DX11Effects@@QAEJI@Z ; D3DX11Effects::CEffectHeap::ReserveMemory
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN9@Initialize
	jmp	$lExit$43
	jmp	$lExit$43
$LN9@Initialize:

; 3220 : 
; 3221 :     // Strings are handled separately because we are moving them to reflection
; 3222 :     m_pOldStrings = m_pEffect->m_pStrings;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+128]
	mov	DWORD PTR [edx+164], eax

; 3223 :     VHD( pHeap->MoveData((void**) &m_pEffect->m_pStrings, cbStrings), "Internal loading error: cannot move string data." );

	mov	eax, DWORD PTR _cbStrings$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	add	edx, 128				; 00000080H
	push	edx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ; D3DX11Effects::CEffectHeap::MoveData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN7@Initialize
	jmp	SHORT $lExit$43
	jmp	SHORT $lExit$43
$LN7@Initialize:

; 3224 :     for(i=0; i<m_pEffect->m_StringCount; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@Initialize
$LN4@Initialize:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@Initialize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+124]
	jae	SHORT $lExit$43

; 3225 :     {
; 3226 :         VHD( pHeap->MoveString( &m_pEffect->m_pStrings[i].pString), "Internal loading error: cannot move string pointer." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+128]
	mov	eax, DWORD PTR _i$[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	ecx, DWORD PTR _pHeap$[ebp]
	call	?MoveString@CEffectHeap@D3DX11Effects@@QAEJPAPAD@Z ; D3DX11Effects::CEffectHeap::MoveString
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@Initialize
	jmp	SHORT $lExit$43
	jmp	SHORT $lExit$43
$LN2@Initialize:

; 3227 :     }

	jmp	SHORT $LN4@Initialize
$lExit$43:

; 3228 : 
; 3229 : lExit:
; 3230 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 3231 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?InitializeReflectionDataAndMoveStrings@CEffectLoader@D3DX11Effects@@IAEJI@Z ENDP ; D3DX11Effects::CEffectLoader::InitializeReflectionDataAndMoveStrings
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?BuildShaderBlock@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z
_TEXT	SEGMENT
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_pShaderBlock$ = 8					; size = 4
?BuildShaderBlock@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z PROC ; D3DX11Effects::CEffectLoader::BuildShaderBlock, COMDAT
; _this$ = ecx

; 3037 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3038 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 3039 : 
; 3040 :     // unused shader block? that's not right
; 3041 :     VBD( pShaderBlock->pVT != NULL, "Internal loading error: NULL shader vtable." );

	mov	eax, DWORD PTR _pShaderBlock$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN16@BuildShade
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$21
	jmp	$lExit$21
$LN16@BuildShade:

; 3042 : 
; 3043 :     D3DXASSERT(pShaderBlock->pD3DObject == NULL);

	mov	eax, DWORD PTR _pShaderBlock$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN15@BuildShade
	push	OFFSET ??_C@_0CB@OFFCFNOA@pShaderBlock?9?$DOpD3DObject?5?$DN?$DN?5NULL@
	mov	eax, DWORD PTR ?__LINE__Var@?1??BuildShaderBlock@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@3@@Z@4JA
	add	eax, 6
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN15@BuildShade:
	xor	eax, eax
	jne	SHORT $LN16@BuildShade

; 3044 : 
; 3045 :     if (NULL == pShaderBlock->pReflectionData)

	mov	eax, DWORD PTR _pShaderBlock$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN12@BuildShade

; 3046 :     {
; 3047 :         // File contains a shader variable without an assigned shader, or this is a null assignment.
; 3048 :         // Usually, this is called by one of these guys:
; 3049 :         // SetVertexShader( NULL );
; 3050 :         // or 
; 3051 :         // vertexshader g_VS = NULL;
; 3052 :         return S_OK;

	xor	eax, eax
	jmp	$LN19@BuildShade
$LN12@BuildShade:

; 3053 :     }
; 3054 : 
; 3055 :     // Initialize the reflection interface
; 3056 :     VHD( D3DReflect( pShaderBlock->pReflectionData->pBytecode, pShaderBlock->pReflectionData->BytecodeLength, IID_ID3D11ShaderReflection, (void**)&pShaderBlock->pReflectionData->pReflection ),
; 3057 :          "Internal loading error: cannot create shader reflection object." );

	mov	eax, DWORD PTR _pShaderBlock$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 32					; 00000020H
	push	ecx
	push	OFFSET _IID_ID3D11ShaderReflection
	mov	edx, DWORD PTR _pShaderBlock$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _pShaderBlock$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_D3DReflect@16
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN11@BuildShade
	jmp	SHORT $lExit$21
	jmp	SHORT $lExit$21
$LN11@BuildShade:

; 3058 : 
; 3059 :     // Get dependencies
; 3060 :     VH( GrabShaderData( pShaderBlock ) );

	mov	eax, DWORD PTR _pShaderBlock$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z ; D3DX11Effects::CEffectLoader::GrabShaderData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN9@BuildShade
	jmp	SHORT $lExit$21
	jmp	SHORT $lExit$21
$LN9@BuildShade:

; 3061 : 
; 3062 :     // Grab input signatures for VS
; 3063 :     if( EOT_VertexShader == pShaderBlock->GetShaderType() )

	mov	ecx, DWORD PTR _pShaderBlock$[ebp]
	call	?GetShaderType@SShaderBlock@D3DX11Effects@@QAE?AW4EObjectType@2@XZ ; D3DX11Effects::SShaderBlock::GetShaderType
	cmp	eax, 6
	jne	SHORT $lExit$21
$LN6@BuildShade:

; 3064 :     {
; 3065 :         D3DXASSERT( pShaderBlock->pInputSignatureBlob == NULL );

	mov	eax, DWORD PTR _pShaderBlock$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN5@BuildShade
	push	OFFSET ??_C@_0CK@DHOBBOIG@pShaderBlock?9?$DOpInputSignatureBlo@
	mov	eax, DWORD PTR ?__LINE__Var@?1??BuildShaderBlock@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@3@@Z@4JA
	add	eax, 28					; 0000001cH
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN5@BuildShade:
	xor	eax, eax
	jne	SHORT $LN6@BuildShade

; 3066 :         VHD( D3DGetInputSignatureBlob( pShaderBlock->pReflectionData->pBytecode, pShaderBlock->pReflectionData->BytecodeLength, &pShaderBlock->pInputSignatureBlob ),
; 3067 :              "Internal loading error: cannot get input signature." );

	mov	eax, DWORD PTR _pShaderBlock$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	mov	ecx, DWORD PTR _pShaderBlock$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _pShaderBlock$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_D3DGetInputSignatureBlob@12
	mov	DWORD PTR _hr$[ebp], eax
$lExit$21:

; 3068 :     }
; 3069 : 
; 3070 : lExit:
; 3071 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]
$LN19@BuildShade:

; 3072 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?BuildShaderBlock@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z ENDP ; D3DX11Effects::CEffectLoader::BuildShaderBlock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z
_TEXT	SEGMENT
tv795 = -1580						; size = 4
tv774 = -1580						; size = 4
tv753 = -1580						; size = 4
tv732 = -1580						; size = 4
tv711 = -1580						; size = 4
tv556 = -1580						; size = 4
tv514 = -1580						; size = 4
tv305 = -1580						; size = 4
tv258 = -1580						; size = 4
tv240 = -1580						; size = 4
tv173 = -1580						; size = 4
tv143 = -1580						; size = 4
$T2 = -1572						; size = 4
$T3 = -1560						; size = 4
$T4 = -1548						; size = 4
$T5 = -1536						; size = 4
$T6 = -1524						; size = 4
$T7 = -1512						; size = 4
$T8 = -1500						; size = 4
$T9 = -1488						; size = 4
$T10 = -1476						; size = 4
$T11 = -1464						; size = 4
$T12 = -1452						; size = 4
$T13 = -1440						; size = 4
$T14 = -1428						; size = 4
$T15 = -1416						; size = 4
$T16 = -1404						; size = 4
$T17 = -1392						; size = 4
$T18 = -1380						; size = 4
$T19 = -1368						; size = 4
$T20 = -1356						; size = 4
$T21 = -1344						; size = 4
$T22 = -1332						; size = 4
$T23 = -1320						; size = 4
$T24 = -1308						; size = 4
$T25 = -1296						; size = 4
$T26 = -1284						; size = 4
$T27 = -1272						; size = 4
$T28 = -1260						; size = 4
$T29 = -1248						; size = 4
$T30 = -1236						; size = 4
$T31 = -1224						; size = 4
$T32 = -1212						; size = 4
$T33 = -1200						; size = 4
$T34 = -1188						; size = 4
$T35 = -1176						; size = 4
$T36 = -1164						; size = 4
$T37 = -1152						; size = 4
$T38 = -1140						; size = 4
$T39 = -1128						; size = 4
$T40 = -1116						; size = 4
$T41 = -1104						; size = 4
$T42 = -1092						; size = 4
_pDep$43 = -888						; size = 4
_pDep$44 = -876						; size = 4
_pDep$45 = -864						; size = 4
_pDep$46 = -852						; size = 4
_pDep$47 = -840						; size = 4
_rangeCount$48 = -828					; size = 4
_pElement$49 = -816					; size = 4
_iElement$50 = -804					; size = 4
_pParent$51 = -792					; size = 4
_pInterfaceInfo$52 = -780				; size = 4
_VariableElements$53 = -768				; size = 4
_pInterface$54 = -756					; size = 4
_pVariable$55 = -744					; size = 4
_size$56 = -732						; size = 4
_bindPoint$57 = -720					; size = 4
_pName$58 = -708					; size = 4
_InterfaceDesc$59 = -696				; size = 36
_pInterfaceVar$60 = -652				; size = 4
_iVar$61 = -640						; size = 4
_CBDesc$62 = -628					; size = 20
_pCB$63 = -600						; size = 4
_CurInterfaceParameter$ = -588				; size = 4
_NumInterfaces$ = -576					; size = 4
_rangeCount$64 = -564					; size = 4
_elements$65 = -552					; size = 4
_ResourceDesc$66 = -540					; size = 32
_isFX9TextureLoad$67 = -500				; size = 4
_pVariable$68 = -488					; size = 4
_pCB$69 = -476						; size = 4
_pSampler$70 = -464					; size = 4
_pUnorderedAccessView$71 = -452				; size = 4
_pShaderResource$72 = -440				; size = 4
_eRange$73 = -428					; size = 4
_size$74 = -416						; size = 4
_bindPoint$75 = -404					; size = 4
_pName$76 = -392					; size = 4
_ShaderDesc$ = -380					; size = 152
_vTBuffers$ = -220					; size = 20
_pRange$ = -192						; size = 4
_pvRange$ = -180					; size = 4
_vRanges$ = -168					; size = 100
_j$ = -60						; size = 4
_i$ = -48						; size = 4
_hr$ = -36						; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pShaderBlock$ = 8					; size = 4
?GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z PROC ; D3DX11Effects::CEffectLoader::GrabShaderData, COMDAT
; _this$ = ecx

; 2501 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 1568				; 00000620H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1580]
	mov	ecx, 392				; 00000188H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2502 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 2503 :     UINT  i, j;
; 2504 :     CEffectVector<SRange> vRanges[ER_Count], *pvRange;

	push	OFFSET ??1?$CEffectVector@USRange@D3DX11Effects@@@@QAE@XZ ; CEffectVector<D3DX11Effects::SRange>::~CEffectVector<D3DX11Effects::SRange>
	push	OFFSET ??0?$CEffectVector@USRange@D3DX11Effects@@@@QAE@XZ ; CEffectVector<D3DX11Effects::SRange>::CEffectVector<D3DX11Effects::SRange>
	push	5
	push	20					; 00000014H
	lea	eax, DWORD PTR _vRanges$[ebp]
	push	eax
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2505 :     SRange *pRange = NULL;

	mov	DWORD PTR _pRange$[ebp], 0

; 2506 :     CEffectVector<SConstantBuffer*> vTBuffers;

	lea	ecx, DWORD PTR _vTBuffers$[ebp]
	call	??0?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAE@XZ ; CEffectVector<D3DX11Effects::SConstantBuffer *>::CEffectVector<D3DX11Effects::SConstantBuffer *>
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 2507 :     
; 2508 :     //////////////////////////////////////////////////////////////////////////
; 2509 :     // Step 1: iterate through the resource binding structures and build
; 2510 :     // an "optimized" list of all of the dependencies
; 2511 : 
; 2512 :     D3D11_SHADER_DESC ShaderDesc;
; 2513 :     pShaderBlock->pReflectionData->pReflection->GetDesc( &ShaderDesc );

	mov	esi, esp
	lea	eax, DWORD PTR _ShaderDesc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pShaderBlock$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _pShaderBlock$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [eax]
	push	ecx
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2514 : 
; 2515 :     // Since we have the shader desc, let's find out if this is a NULL GS
; 2516 :     if( D3D11_SHVER_GET_TYPE( ShaderDesc.Version ) == D3D11_SHVER_VERTEX_SHADER && pShaderBlock->GetShaderType() == EOT_GeometryShader )

	mov	eax, DWORD PTR _ShaderDesc$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	cmp	eax, 1
	jne	SHORT $LN256@GrabShader
	mov	ecx, DWORD PTR _pShaderBlock$[ebp]
	call	?GetShaderType@SShaderBlock@D3DX11Effects@@QAE?AW4EObjectType@2@XZ ; D3DX11Effects::SShaderBlock::GetShaderType
	cmp	eax, 7
	jne	SHORT $LN256@GrabShader

; 2517 :     {
; 2518 :         pShaderBlock->pReflectionData->IsNullGS = TRUE;

	mov	eax, DWORD PTR _pShaderBlock$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+28], 1
$LN256@GrabShader:

; 2519 :     }
; 2520 : 
; 2521 :     pShaderBlock->CBDepCount = pShaderBlock->ResourceDepCount = pShaderBlock->TBufferDepCount = pShaderBlock->SampDepCount = 0;

	mov	eax, DWORD PTR _pShaderBlock$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	ecx, DWORD PTR _pShaderBlock$[ebp]
	mov	DWORD PTR [ecx+56], 0
	mov	edx, DWORD PTR _pShaderBlock$[ebp]
	mov	DWORD PTR [edx+40], 0
	mov	eax, DWORD PTR _pShaderBlock$[ebp]
	mov	DWORD PTR [eax+16], 0

; 2522 :     pShaderBlock->UAVDepCount = pShaderBlock->InterfaceDepCount = 0;

	mov	eax, DWORD PTR _pShaderBlock$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	ecx, DWORD PTR _pShaderBlock$[ebp]
	mov	DWORD PTR [ecx+48], 0

; 2523 : 
; 2524 :     for(i = 0; i < ShaderDesc.BoundResources; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN255@GrabShader
$LN254@GrabShader:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN255@GrabShader:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ShaderDesc$[ebp+16]
	jae	$LN253@GrabShader

; 2525 :     {
; 2526 :         LPCSTR pName;
; 2527 :         UINT bindPoint, size;
; 2528 :         ERanges eRange;
; 2529 :         SShaderResource *pShaderResource = NULL;

	mov	DWORD PTR _pShaderResource$72[ebp], 0

; 2530 :         SUnorderedAccessView *pUnorderedAccessView = NULL;

	mov	DWORD PTR _pUnorderedAccessView$71[ebp], 0

; 2531 :         SSamplerBlock *pSampler = NULL;

	mov	DWORD PTR _pSampler$70[ebp], 0

; 2532 :         SConstantBuffer *pCB = NULL;

	mov	DWORD PTR _pCB$69[ebp], 0

; 2533 :         SVariable *pVariable = NULL;

	mov	DWORD PTR _pVariable$68[ebp], 0

; 2534 :         BOOL isFX9TextureLoad = FALSE;

	mov	DWORD PTR _isFX9TextureLoad$67[ebp], 0

; 2535 :         D3D11_SHADER_INPUT_BIND_DESC ResourceDesc;
; 2536 : 
; 2537 :         pShaderBlock->pReflectionData->pReflection->GetResourceBindingDesc( i, &ResourceDesc );

	mov	esi, esp
	lea	eax, DWORD PTR _ResourceDesc$66[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pShaderBlock$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _pShaderBlock$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [eax+32]
	mov	eax, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2538 : 
; 2539 :         // HUGE ASSUMPTION: the bindpoints we read in the shader metadata are sorted;
; 2540 :         // i.e. bindpoints are steadily increasing
; 2541 :         // If this assumption is not met, then we will hit an assert below
; 2542 : 
; 2543 :         pName = ResourceDesc.Name;

	mov	eax, DWORD PTR _ResourceDesc$66[ebp]
	mov	DWORD PTR _pName$76[ebp], eax

; 2544 :         bindPoint = ResourceDesc.BindPoint;

	mov	eax, DWORD PTR _ResourceDesc$66[ebp+8]
	mov	DWORD PTR _bindPoint$75[ebp], eax

; 2545 :         size = ResourceDesc.BindCount;

	mov	eax, DWORD PTR _ResourceDesc$66[ebp+12]
	mov	DWORD PTR _size$74[ebp], eax

; 2546 : 
; 2547 :         switch( ResourceDesc.Type )

	mov	eax, DWORD PTR _ResourceDesc$66[ebp+4]
	mov	DWORD PTR tv143[ebp], eax
	cmp	DWORD PTR tv143[ebp], 11		; 0000000bH
	ja	$LN207@GrabShader
	mov	ecx, DWORD PTR tv143[ebp]
	movzx	edx, BYTE PTR $LN287@GrabShader[ecx]
	jmp	DWORD PTR $LN299@GrabShader[edx*4]
$LN250@GrabShader:

; 2548 :         {
; 2549 :         case D3D10_SIT_CBUFFER:
; 2550 :             eRange = ER_CBuffer;

	mov	DWORD PTR _eRange$73[ebp], 0

; 2551 :             
; 2552 :             pCB = m_pEffect->FindCB(pName);

	mov	eax, DWORD PTR _pName$76[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	call	?FindCB@CEffect@D3DX11Effects@@IAEPAUSConstantBuffer@2@PBD@Z ; D3DX11Effects::CEffect::FindCB
	mov	DWORD PTR _pCB$69[ebp], eax

; 2553 :             VBD( NULL != pCB, "Loading error: cannot find cbuffer." );

	cmp	DWORD PTR _pCB$69[ebp], 0
	jne	SHORT $LN249@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$301
$LN249@GrabShader:

; 2554 :             VBD( size == 1, "Loading error: cbuffer arrays are not supported." );

	cmp	DWORD PTR _size$74[ebp], 1
	je	SHORT $LN247@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$301
$LN247@GrabShader:

; 2555 :             break;

	jmp	$LN251@GrabShader
$LN245@GrabShader:

; 2556 : 
; 2557 :         case D3D10_SIT_TBUFFER:
; 2558 :             eRange = ER_Texture;

	mov	DWORD PTR _eRange$73[ebp], 1

; 2559 :             
; 2560 :             pCB = m_pEffect->FindCB(pName);

	mov	eax, DWORD PTR _pName$76[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	call	?FindCB@CEffect@D3DX11Effects@@IAEPAUSConstantBuffer@2@PBD@Z ; D3DX11Effects::CEffect::FindCB
	mov	DWORD PTR _pCB$69[ebp], eax

; 2561 :             VBD( NULL != pCB, "Loading error: cannot find tbuffer." );

	cmp	DWORD PTR _pCB$69[ebp], 0
	jne	SHORT $LN244@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$301
$LN244@GrabShader:

; 2562 :             VBD( FALSE != pCB->IsTBuffer, "Loading error: cbuffer found where tbuffer is expected." );

	mov	eax, DWORD PTR _pCB$69[ebp]
	mov	ecx, DWORD PTR [eax+48]
	shl	ecx, 30					; 0000001eH
	sar	ecx, 31					; 0000001fH
	test	ecx, ecx
	jne	SHORT $LN242@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$301
$LN242@GrabShader:

; 2563 :             VBD( size == 1, "Loading error: tbuffer arrays are not supported." );

	cmp	DWORD PTR _size$74[ebp], 1
	je	SHORT $LN240@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$301
$LN240@GrabShader:

; 2564 :             pShaderResource = &pCB->TBuffer;

	mov	eax, DWORD PTR _pCB$69[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _pShaderResource$72[ebp], eax

; 2565 :             break;

	jmp	$LN251@GrabShader
$LN238@GrabShader:

; 2566 : 
; 2567 :         case D3D10_SIT_TEXTURE: 
; 2568 :         case D3D11_SIT_STRUCTURED:
; 2569 :         case D3D11_SIT_BYTEADDRESS:
; 2570 :             eRange = ER_Texture;

	mov	DWORD PTR _eRange$73[ebp], 1

; 2571 : 
; 2572 :             pVariable = m_pEffect->FindVariableByNameWithParsing(pName);

	mov	eax, DWORD PTR _pName$76[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	call	?FindVariableByNameWithParsing@CEffect@D3DX11Effects@@IAEPAUSVariable@2@PBD@Z ; D3DX11Effects::CEffect::FindVariableByNameWithParsing
	mov	DWORD PTR _pVariable$68[ebp], eax

; 2573 :             VBD( pVariable != NULL, "Loading error: cannot find SRV variable." );

	cmp	DWORD PTR _pVariable$68[ebp], 0
	jne	SHORT $LN237@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$301
$LN237@GrabShader:

; 2574 :             UINT elements;
; 2575 :             elements = max(1, pVariable->pType->Elements);

	mov	eax, DWORD PTR _pVariable$68[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+8], 1
	jae	SHORT $LN259@GrabShader
	mov	DWORD PTR tv173[ebp], 1
	jmp	SHORT $LN260@GrabShader
$LN259@GrabShader:
	mov	edx, DWORD PTR _pVariable$68[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv173[ebp], ecx
$LN260@GrabShader:
	mov	edx, DWORD PTR tv173[ebp]
	mov	DWORD PTR _elements$65[ebp], edx

; 2576 :             VBD( size <= elements, "Loading error: SRV array size mismatch." );

	mov	eax, DWORD PTR _size$74[ebp]
	cmp	eax, DWORD PTR _elements$65[ebp]
	jbe	SHORT $LN235@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$301
$LN235@GrabShader:

; 2577 : 
; 2578 :             if (pVariable->pType->IsShaderResource())

	mov	eax, DWORD PTR _pVariable$68[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?IsShaderResource@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::IsShaderResource
	test	eax, eax
	je	SHORT $LN233@GrabShader

; 2579 :             {
; 2580 :                 // this is just a straight texture assignment
; 2581 :                 pShaderResource = pVariable->Data.pShaderResource;

	mov	eax, DWORD PTR _pVariable$68[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pShaderResource$72[ebp], ecx

; 2582 :             }
; 2583 :             else

	jmp	SHORT $LN232@GrabShader
$LN233@GrabShader:

; 2584 :             {
; 2585 :                 // This is a FX9/HLSL9-style texture load instruction that specifies only a sampler
; 2586 :                 VBD( pVariable->pType->IsSampler(), "Loading error: shader dependency is neither an SRV nor sampler.");

	mov	eax, DWORD PTR _pVariable$68[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?IsSampler@SType@D3DX11Effects@@QBEHXZ	; D3DX11Effects::SType::IsSampler
	test	eax, eax
	jne	SHORT $LN231@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$301
$LN231@GrabShader:

; 2587 :                 isFX9TextureLoad = TRUE;

	mov	DWORD PTR _isFX9TextureLoad$67[ebp], 1

; 2588 :                 pSampler = pVariable->Data.pSampler;

	mov	eax, DWORD PTR _pVariable$68[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pSampler$70[ebp], ecx

; 2589 :                 // validate that all samplers actually used (i.e. based on size, not elements) in this variable have a valid TEXTURE assignment
; 2590 :                 for (j = 0; j < size; ++ j)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN229@GrabShader
$LN228@GrabShader:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN229@GrabShader:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _size$74[ebp]
	jae	SHORT $LN232@GrabShader

; 2591 :                 {
; 2592 :                     if (NULL == pSampler[j].BackingStore.pTexture)

	imul	eax, DWORD PTR _j$[ebp], 76
	mov	ecx, DWORD PTR _pSampler$70[ebp]
	cmp	DWORD PTR [ecx+eax+72], 0
	jne	SHORT $LN226@GrabShader

; 2593 :                     {
; 2594 :                         // print spew appropriately for samplers vs sampler arrays
; 2595 :                         if (0 == pVariable->pType->Elements)
; 2596 :                         {
; 2597 :                             DPF(0, "%s: Sampler %s does not have a texture bound to it, even though the sampler is used in a DX9-style texture load instruction", g_szEffectLoadArea, pName);
; 2598 :                         }
; 2599 :                         else
; 2600 :                         {
; 2601 :                             DPF(0, "%s: Sampler %s[%d] does not have a texture bound to it, even though the sampler array is used in a DX9-style texture load instruction", g_szEffectLoadArea, pName, j);
; 2602 :                         }
; 2603 :                         
; 2604 :                         VH( E_FAIL );

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN226@GrabShader
	jmp	$lExit$301
$LN226@GrabShader:

; 2605 :                     }
; 2606 :                 }

	jmp	SHORT $LN228@GrabShader
$LN232@GrabShader:

; 2607 :             }
; 2608 :             break;

	jmp	$LN251@GrabShader
$LN221@GrabShader:

; 2609 : 
; 2610 :         case D3D11_SIT_UAV_RWTYPED:
; 2611 :         case D3D11_SIT_UAV_RWSTRUCTURED:
; 2612 :         case D3D11_SIT_UAV_RWBYTEADDRESS:
; 2613 :         case D3D11_SIT_UAV_APPEND_STRUCTURED:
; 2614 :         case D3D11_SIT_UAV_CONSUME_STRUCTURED:
; 2615 :         case D3D11_SIT_UAV_RWSTRUCTURED_WITH_COUNTER:
; 2616 :             eRange = ER_UnorderedAccessView;

	mov	DWORD PTR _eRange$73[ebp], 3

; 2617 : 
; 2618 :             pVariable = m_pEffect->FindVariableByNameWithParsing(pName);

	mov	eax, DWORD PTR _pName$76[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	call	?FindVariableByNameWithParsing@CEffect@D3DX11Effects@@IAEPAUSVariable@2@PBD@Z ; D3DX11Effects::CEffect::FindVariableByNameWithParsing
	mov	DWORD PTR _pVariable$68[ebp], eax

; 2619 :             VBD( pVariable != NULL, "Loading error: cannot find UAV variable." );

	cmp	DWORD PTR _pVariable$68[ebp], 0
	jne	SHORT $LN220@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$301
$LN220@GrabShader:

; 2620 :             VBD( size <= max(1, pVariable->pType->Elements), "Loading error: UAV array index out of range." );

	mov	eax, DWORD PTR _pVariable$68[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+8], 1
	jae	SHORT $LN261@GrabShader
	mov	DWORD PTR tv240[ebp], 1
	jmp	SHORT $LN262@GrabShader
$LN261@GrabShader:
	mov	edx, DWORD PTR _pVariable$68[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv240[ebp], ecx
$LN262@GrabShader:
	mov	edx, DWORD PTR _size$74[ebp]
	cmp	edx, DWORD PTR tv240[ebp]
	jbe	SHORT $LN218@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$301
$LN218@GrabShader:

; 2621 :             VBD( pVariable->pType->IsUnorderedAccessView(), "Loading error: UAV variable expected." );

	mov	eax, DWORD PTR _pVariable$68[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?IsUnorderedAccessView@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::IsUnorderedAccessView
	test	eax, eax
	jne	SHORT $LN216@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$301
$LN216@GrabShader:

; 2622 :             pUnorderedAccessView = pVariable->Data.pUnorderedAccessView;

	mov	eax, DWORD PTR _pVariable$68[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pUnorderedAccessView$71[ebp], ecx

; 2623 :             break;

	jmp	$LN251@GrabShader
$LN214@GrabShader:

; 2624 : 
; 2625 :         case D3D10_SIT_SAMPLER:
; 2626 :             eRange = ER_Sampler;

	mov	DWORD PTR _eRange$73[ebp], 2

; 2627 : 
; 2628 :             pVariable = m_pEffect->FindVariableByNameWithParsing(pName);

	mov	eax, DWORD PTR _pName$76[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	call	?FindVariableByNameWithParsing@CEffect@D3DX11Effects@@IAEPAUSVariable@2@PBD@Z ; D3DX11Effects::CEffect::FindVariableByNameWithParsing
	mov	DWORD PTR _pVariable$68[ebp], eax

; 2629 :             VBD( pVariable != NULL, "Loading error: cannot find sampler variable." );

	cmp	DWORD PTR _pVariable$68[ebp], 0
	jne	SHORT $LN213@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$301
$LN213@GrabShader:

; 2630 :             VBD( size <= max(1, pVariable->pType->Elements), "Loading error: sampler array index out of range." );

	mov	eax, DWORD PTR _pVariable$68[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+8], 1
	jae	SHORT $LN263@GrabShader
	mov	DWORD PTR tv258[ebp], 1
	jmp	SHORT $LN264@GrabShader
$LN263@GrabShader:
	mov	edx, DWORD PTR _pVariable$68[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv258[ebp], ecx
$LN264@GrabShader:
	mov	edx, DWORD PTR _size$74[ebp]
	cmp	edx, DWORD PTR tv258[ebp]
	jbe	SHORT $LN211@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$301
$LN211@GrabShader:

; 2631 :             VBD( pVariable->pType->IsSampler(), "Loading error: sampler variable expected." );

	mov	eax, DWORD PTR _pVariable$68[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?IsSampler@SType@D3DX11Effects@@QBEHXZ	; D3DX11Effects::SType::IsSampler
	test	eax, eax
	jne	SHORT $LN209@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$301
$LN209@GrabShader:

; 2632 :             pSampler = pVariable->Data.pSampler;

	mov	eax, DWORD PTR _pVariable$68[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pSampler$70[ebp], ecx

; 2633 :             break;

	jmp	SHORT $LN251@GrabShader
$LN207@GrabShader:

; 2634 : 
; 2635 :         default:
; 2636 :             VHD( E_FAIL, "Internal loading error: unexpected shader dependency type." );

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN251@GrabShader
	jmp	$lExit$301
$LN251@GrabShader:

; 2637 :         };
; 2638 : 
; 2639 :         //
; 2640 :         // Here's where the "optimized" part comes in; whenever there's
; 2641 :         // a resource dependency, see if it's located contiguous to
; 2642 :         // an existing resource dependency and merge them together
; 2643 :         // if possible
; 2644 :         //
; 2645 :         UINT  rangeCount;
; 2646 :         pvRange = &vRanges[eRange];

	imul	eax, DWORD PTR _eRange$73[ebp], 20
	lea	ecx, DWORD PTR _vRanges$[ebp+eax]
	mov	DWORD PTR _pvRange$[ebp], ecx

; 2647 :         rangeCount = pvRange->GetSize();

	mov	ecx, DWORD PTR _pvRange$[ebp]
	call	?GetSize@?$CEffectVector@USRange@D3DX11Effects@@@@QBEIXZ ; CEffectVector<D3DX11Effects::SRange>::GetSize
	mov	DWORD PTR _rangeCount$64[ebp], eax

; 2648 : 
; 2649 :         if ( rangeCount > 0 )

	cmp	DWORD PTR _rangeCount$64[ebp], 0
	jbe	$LN204@GrabShader

; 2650 :         {
; 2651 :             // Can we continue an existing range?
; 2652 :             pRange = &( (*pvRange)[rangeCount - 1] );

	mov	eax, DWORD PTR _rangeCount$64[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pvRange$[ebp]
	call	??A?$CEffectVector@USRange@D3DX11Effects@@@@QAEAAUSRange@D3DX11Effects@@I@Z ; CEffectVector<D3DX11Effects::SRange>::operator[]
	mov	DWORD PTR _pRange$[ebp], eax
$LN203@GrabShader:

; 2653 : 
; 2654 :             // Make sure that bind points are strictly increasing,
; 2655 :             // otherwise this algorithm breaks and we'd get worse runtime performance
; 2656 :             D3DXASSERT(pRange->last <= bindPoint);

	mov	eax, DWORD PTR _pRange$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _bindPoint$75[ebp]
	jbe	SHORT $LN202@GrabShader
	push	OFFSET ??_C@_0BK@FLKFENGC@pRange?9?$DOlast?5?$DM?$DN?5bindPoint?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@3@@Z@4JA
	add	eax, 155				; 0000009bH
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN202@GrabShader:
	xor	eax, eax
	jne	SHORT $LN203@GrabShader

; 2657 : 
; 2658 :             if ( pRange->last != bindPoint )

	mov	eax, DWORD PTR _pRange$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _bindPoint$75[ebp]
	je	SHORT $LN204@GrabShader

; 2659 :             {
; 2660 :                 if( eRange != ER_UnorderedAccessView )

	cmp	DWORD PTR _eRange$73[ebp], 3
	je	SHORT $LN196@GrabShader

; 2661 :                 {
; 2662 :                     // No we can't. Begin a new range by setting rangeCount to 0 and triggering the next IF
; 2663 :                     rangeCount = 0;

	mov	DWORD PTR _rangeCount$64[ebp], 0

; 2664 :                 }
; 2665 :                 else

	jmp	SHORT $LN204@GrabShader
$LN196@GrabShader:

; 2666 :                 {
; 2667 :                     // UAVs will always be located in one range, as they are more expensive to set
; 2668 :                     while(pRange->last < bindPoint)

	mov	eax, DWORD PTR _pRange$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _bindPoint$75[ebp]
	jae	SHORT $LN204@GrabShader

; 2669 :                     {
; 2670 :                         VHD( pRange->vResources.Add(&g_NullUnorderedAccessView), "Internal loading error: cannot add UAV to range." );

	mov	DWORD PTR $T2[ebp], OFFSET ?g_NullUnorderedAccessView@D3DX11Effects@@3USUnorderedAccessView@1@A ; D3DX11Effects::g_NullUnorderedAccessView
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRange$[ebp]
	add	ecx, 8
	call	?Add@?$CEffectVector@PAX@@QAEJABQAX@Z	; CEffectVector<void *>::Add
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN194@GrabShader
	jmp	$lExit$301
$LN194@GrabShader:

; 2671 :                         pRange->last++;

	mov	eax, DWORD PTR _pRange$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _pRange$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2672 :                     }

	jmp	SHORT $LN196@GrabShader
$LN204@GrabShader:

; 2673 :                 }
; 2674 :             }
; 2675 :         }
; 2676 : 
; 2677 :         if ( rangeCount == 0 )

	cmp	DWORD PTR _rangeCount$64[ebp], 0
	jne	SHORT $LN192@GrabShader

; 2678 :         {
; 2679 :             VN( pRange = pvRange->Add() );

	mov	ecx, DWORD PTR _pvRange$[ebp]
	call	?Add@?$CEffectVector@USRange@D3DX11Effects@@@@QAEPAUSRange@D3DX11Effects@@XZ ; CEffectVector<D3DX11Effects::SRange>::Add
	mov	DWORD PTR _pRange$[ebp], eax
	cmp	DWORD PTR _pRange$[ebp], 0
	jne	SHORT $LN191@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$301
$LN191@GrabShader:

; 2680 :             pRange->start = bindPoint;

	mov	eax, DWORD PTR _pRange$[ebp]
	mov	ecx, DWORD PTR _bindPoint$75[ebp]
	mov	DWORD PTR [eax], ecx
$LN192@GrabShader:

; 2681 :         }
; 2682 : 
; 2683 :         pRange->last = bindPoint + size;

	mov	eax, DWORD PTR _bindPoint$75[ebp]
	add	eax, DWORD PTR _size$74[ebp]
	mov	ecx, DWORD PTR _pRange$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2684 : 
; 2685 :         switch( ResourceDesc.Type )

	mov	eax, DWORD PTR _ResourceDesc$66[ebp+4]
	mov	DWORD PTR tv305[ebp], eax
	cmp	DWORD PTR tv305[ebp], 11		; 0000000bH
	ja	$LN154@GrabShader
	mov	ecx, DWORD PTR tv305[ebp]
	movzx	edx, BYTE PTR $LN288@GrabShader[ecx]
	jmp	DWORD PTR $LN300@GrabShader[edx*4]
$LN187@GrabShader:

; 2686 :         {
; 2687 :         case D3D10_SIT_CBUFFER:
; 2688 :             VHD( pRange->vResources.Add(pCB), "Internal loading error: cannot add cbuffer to range." );

	mov	eax, DWORD PTR _pCB$69[ebp]
	mov	DWORD PTR $T3[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pRange$[ebp]
	add	ecx, 8
	call	?Add@?$CEffectVector@PAX@@QAEJABQAX@Z	; CEffectVector<void *>::Add
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN186@GrabShader
	jmp	$lExit$301
$LN186@GrabShader:

; 2689 :             break;

	jmp	$LN188@GrabShader
$LN184@GrabShader:

; 2690 :         case D3D10_SIT_TBUFFER:
; 2691 :             VHD( pRange->vResources.Add(pShaderResource), "Internal loading error: cannot add tbuffer to range." );

	mov	eax, DWORD PTR _pShaderResource$72[ebp]
	mov	DWORD PTR $T4[ebp], eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pRange$[ebp]
	add	ecx, 8
	call	?Add@?$CEffectVector@PAX@@QAEJABQAX@Z	; CEffectVector<void *>::Add
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN183@GrabShader
	jmp	$lExit$301
$LN183@GrabShader:

; 2692 :             VHD( vTBuffers.Add( (SConstantBuffer*)pCB ), "Internal loading error: cannot add tbuffer to vector." );

	lea	eax, DWORD PTR _pCB$69[ebp]
	push	eax
	lea	ecx, DWORD PTR _vTBuffers$[ebp]
	call	?Add@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAEJABQAUSConstantBuffer@D3DX11Effects@@@Z ; CEffectVector<D3DX11Effects::SConstantBuffer *>::Add
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN181@GrabShader
	jmp	$lExit$301
$LN181@GrabShader:

; 2693 :             break;

	jmp	$LN188@GrabShader
$LN179@GrabShader:

; 2694 :         case D3D10_SIT_TEXTURE:
; 2695 :         case D3D11_SIT_STRUCTURED:
; 2696 :         case D3D11_SIT_BYTEADDRESS:
; 2697 :             if (isFX9TextureLoad)

	cmp	DWORD PTR _isFX9TextureLoad$67[ebp], 0
	je	SHORT $LN178@GrabShader

; 2698 :             {
; 2699 :                 // grab all of the textures from each sampler
; 2700 :                 for (j = 0; j < size; ++ j)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN177@GrabShader
$LN176@GrabShader:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN177@GrabShader:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _size$74[ebp]
	jae	SHORT $LN175@GrabShader

; 2701 :                 {
; 2702 :                     VHD( pRange->vResources.Add(pSampler[j].BackingStore.pTexture), "Internal loading error: cannot add SRV to range." );

	imul	eax, DWORD PTR _j$[ebp], 76
	mov	ecx, DWORD PTR _pSampler$70[ebp]
	mov	edx, DWORD PTR [ecx+eax+72]
	mov	DWORD PTR $T5[ebp], edx
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRange$[ebp]
	add	ecx, 8
	call	?Add@?$CEffectVector@PAX@@QAEJABQAX@Z	; CEffectVector<void *>::Add
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN174@GrabShader
	jmp	$lExit$301
$LN174@GrabShader:

; 2703 :                 }

	jmp	SHORT $LN176@GrabShader
$LN175@GrabShader:

; 2704 :             }
; 2705 :             else

	jmp	SHORT $LN172@GrabShader
$LN178@GrabShader:

; 2706 :             {
; 2707 :                 // add the whole array
; 2708 :                 for (j = 0; j < size; ++ j)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN171@GrabShader
$LN170@GrabShader:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN171@GrabShader:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _size$74[ebp]
	jae	SHORT $LN172@GrabShader

; 2709 :                 {
; 2710 :                     VHD( pRange->vResources.Add(pShaderResource + j), "Internal loading error: cannot add SRV to range." );

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _pShaderResource$72[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR $T6[ebp], edx
	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRange$[ebp]
	add	ecx, 8
	call	?Add@?$CEffectVector@PAX@@QAEJABQAX@Z	; CEffectVector<void *>::Add
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN168@GrabShader
	jmp	$lExit$301
$LN168@GrabShader:

; 2711 :                 }

	jmp	SHORT $LN170@GrabShader
$LN172@GrabShader:

; 2712 :             }
; 2713 :             break;

	jmp	$LN188@GrabShader
$LN166@GrabShader:

; 2714 :         case D3D11_SIT_UAV_RWTYPED:
; 2715 :         case D3D11_SIT_UAV_RWSTRUCTURED:
; 2716 :         case D3D11_SIT_UAV_RWBYTEADDRESS:
; 2717 :         case D3D11_SIT_UAV_APPEND_STRUCTURED:
; 2718 :         case D3D11_SIT_UAV_CONSUME_STRUCTURED:
; 2719 :         case D3D11_SIT_UAV_RWSTRUCTURED_WITH_COUNTER:
; 2720 :             // add the whole array
; 2721 :             for (j = 0; j < size; ++ j)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN165@GrabShader
$LN164@GrabShader:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN165@GrabShader:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _size$74[ebp]
	jae	SHORT $LN163@GrabShader

; 2722 :             {
; 2723 :                 VHD( pRange->vResources.Add(pUnorderedAccessView + j), "Internal loading error: cannot add UAV to range." );

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _pUnorderedAccessView$71[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR $T7[ebp], edx
	lea	eax, DWORD PTR $T7[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRange$[ebp]
	add	ecx, 8
	call	?Add@?$CEffectVector@PAX@@QAEJABQAX@Z	; CEffectVector<void *>::Add
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN162@GrabShader
	jmp	$lExit$301
$LN162@GrabShader:

; 2724 :             }

	jmp	SHORT $LN164@GrabShader
$LN163@GrabShader:

; 2725 :             break;

	jmp	SHORT $LN188@GrabShader
$LN160@GrabShader:

; 2726 :         case D3D10_SIT_SAMPLER:
; 2727 :             // add the whole array
; 2728 :             for (j = 0; j < size; ++ j)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN159@GrabShader
$LN158@GrabShader:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN159@GrabShader:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _size$74[ebp]
	jae	SHORT $LN157@GrabShader

; 2729 :             {
; 2730 :                 VHD( pRange->vResources.Add(pSampler + j), "Internal loading error: cannot add sampler to range." );

	imul	eax, DWORD PTR _j$[ebp], 76
	add	eax, DWORD PTR _pSampler$70[ebp]
	mov	DWORD PTR $T8[ebp], eax
	lea	ecx, DWORD PTR $T8[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pRange$[ebp]
	add	ecx, 8
	call	?Add@?$CEffectVector@PAX@@QAEJABQAX@Z	; CEffectVector<void *>::Add
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN156@GrabShader
	jmp	$lExit$301
$LN156@GrabShader:

; 2731 :             }

	jmp	SHORT $LN158@GrabShader
$LN157@GrabShader:

; 2732 :             break;

	jmp	SHORT $LN188@GrabShader
$LN154@GrabShader:

; 2733 :         default:
; 2734 :             VHD( E_FAIL, "Internal loading error: unexpected shader dependency type." );

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN188@GrabShader
	jmp	$lExit$301
$LN188@GrabShader:

; 2735 :         }
; 2736 :     }

	jmp	$LN254@GrabShader
$LN253@GrabShader:

; 2737 : 
; 2738 : 
; 2739 :     //////////////////////////////////////////////////////////////////////////
; 2740 :     // Step 2: iterate through the interfaces and build
; 2741 :     // an "optimized" list of all of the dependencies
; 2742 : 
; 2743 :     UINT NumInterfaces = pShaderBlock->pReflectionData->pReflection->GetNumInterfaceSlots();

	mov	eax, DWORD PTR _pShaderBlock$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _pShaderBlock$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [ecx+32]
	mov	ecx, DWORD PTR [edx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+72]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _NumInterfaces$[ebp], eax

; 2744 :     UINT CurInterfaceParameter = 0;

	mov	DWORD PTR _CurInterfaceParameter$[ebp], 0

; 2745 :     if( NumInterfaces > 0 )

	cmp	DWORD PTR _NumInterfaces$[ebp], 0
	jbe	$LN151@GrabShader
$LN150@GrabShader:

; 2746 :     {
; 2747 :         D3DXASSERT( ShaderDesc.ConstantBuffers > 0 );

	cmp	DWORD PTR _ShaderDesc$[ebp+12], 0
	ja	SHORT $LN149@GrabShader
	push	OFFSET ??_C@_0BP@KPGDMHCO@ShaderDesc?4ConstantBuffers?5?$DO?50?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@3@@Z@4JA
	add	eax, 246				; 000000f6H
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN149@GrabShader:
	xor	eax, eax
	jne	SHORT $LN150@GrabShader

; 2748 : 
; 2749 :         for( i=0; i < ShaderDesc.ConstantBuffers; i++ )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN146@GrabShader
$LN145@GrabShader:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN146@GrabShader:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ShaderDesc$[ebp+12]
	jae	$LN151@GrabShader

; 2750 :         {
; 2751 :             ID3D11ShaderReflectionConstantBuffer* pCB = pShaderBlock->pReflectionData->pReflection->GetConstantBufferByIndex(i);

	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pShaderBlock$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _pShaderBlock$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR [edx+32]
	mov	edx, DWORD PTR [eax]
	push	ecx
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pCB$63[ebp], eax

; 2752 :             VN( pCB );

	cmp	DWORD PTR _pCB$63[ebp], 0
	jne	SHORT $LN143@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$301
$LN143@GrabShader:

; 2753 :             D3D11_SHADER_BUFFER_DESC CBDesc;
; 2754 :             VHD( pCB->GetDesc( &CBDesc ), "Internal loading error: cannot get CB desc." );

	mov	esi, esp
	lea	eax, DWORD PTR _CBDesc$62[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCB$63[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pCB$63[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN141@GrabShader
	jmp	$lExit$301
$LN141@GrabShader:

; 2755 :             if( CBDesc.Type != D3D11_CT_INTERFACE_POINTERS )

	cmp	DWORD PTR _CBDesc$62[ebp+4], 2
	je	SHORT $LN139@GrabShader

; 2756 :             {
; 2757 :                 continue;

	jmp	$LN145@GrabShader
$LN139@GrabShader:

; 2758 :             }
; 2759 : 
; 2760 :             for( UINT iVar=0; iVar < CBDesc.Variables; iVar++ )

	mov	DWORD PTR _iVar$61[ebp], 0
	jmp	SHORT $LN138@GrabShader
$LN137@GrabShader:
	mov	eax, DWORD PTR _iVar$61[ebp]
	add	eax, 1
	mov	DWORD PTR _iVar$61[ebp], eax
$LN138@GrabShader:
	mov	eax, DWORD PTR _iVar$61[ebp]
	cmp	eax, DWORD PTR _CBDesc$62[ebp+8]
	jae	$LN136@GrabShader

; 2761 :             {
; 2762 :                 ID3D11ShaderReflectionVariable* pInterfaceVar = pCB->GetVariableByIndex( iVar );

	mov	esi, esp
	mov	eax, DWORD PTR _iVar$61[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCB$63[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pCB$63[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+4]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pInterfaceVar$60[ebp], eax

; 2763 :                 VN( pInterfaceVar );

	cmp	DWORD PTR _pInterfaceVar$60[ebp], 0
	jne	SHORT $LN135@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$301
$LN135@GrabShader:

; 2764 :                 D3D11_SHADER_VARIABLE_DESC InterfaceDesc;
; 2765 :                 pInterfaceVar->GetDesc( &InterfaceDesc );

	mov	esi, esp
	lea	eax, DWORD PTR _InterfaceDesc$59[ebp]
	push	eax
	mov	ecx, DWORD PTR _pInterfaceVar$60[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pInterfaceVar$60[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2766 : 
; 2767 :                 LPCSTR pName;
; 2768 :                 UINT bindPoint, size;
; 2769 :                 SGlobalVariable *pVariable = NULL;

	mov	DWORD PTR _pVariable$55[ebp], 0

; 2770 :                 SInterface *pInterface = NULL;

	mov	DWORD PTR _pInterface$54[ebp], 0

; 2771 :                 UINT VariableElements;
; 2772 : 
; 2773 :                 pName = InterfaceDesc.Name;

	mov	eax, DWORD PTR _InterfaceDesc$59[ebp]
	mov	DWORD PTR _pName$58[ebp], eax

; 2774 :                 bindPoint = InterfaceDesc.StartOffset;

	mov	eax, DWORD PTR _InterfaceDesc$59[ebp+4]
	mov	DWORD PTR _bindPoint$57[ebp], eax

; 2775 :                 size = InterfaceDesc.Size;

	mov	eax, DWORD PTR _InterfaceDesc$59[ebp+8]
	mov	DWORD PTR _size$56[ebp], eax

; 2776 : 
; 2777 :                 if( bindPoint == (UINT)-1 )

	cmp	DWORD PTR _bindPoint$57[ebp], -1
	jne	SHORT $LN132@GrabShader

; 2778 :                 {
; 2779 :                     continue;

	jmp	$LN137@GrabShader
$LN132@GrabShader:

; 2780 :                 }
; 2781 : 
; 2782 :                 D3DXASSERT( InterfaceDesc.uFlags & D3D11_SVF_INTERFACE_POINTER );

	mov	eax, DWORD PTR _InterfaceDesc$59[ebp+12]
	and	eax, 4
	jne	SHORT $LN131@GrabShader
	push	OFFSET ??_C@_0DD@KDJDPJGM@InterfaceDesc?4uFlags?5?$CG?5D3D11_SVF@
	mov	eax, DWORD PTR ?__LINE__Var@?1??GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@3@@Z@4JA
	add	eax, 281				; 00000119H
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN131@GrabShader:
	xor	eax, eax
	jne	SHORT $LN132@GrabShader

; 2783 :                 if( InterfaceDesc.uFlags & D3D11_SVF_INTERFACE_PARAMETER )

	mov	eax, DWORD PTR _InterfaceDesc$59[ebp+12]
	and	eax, 8
	je	$LN128@GrabShader

; 2784 :                 {
; 2785 :                     // This interface pointer is a parameter to the shader
; 2786 :                     if( pShaderBlock->pReflectionData->InterfaceParameterCount == 0 )

	mov	eax, DWORD PTR _pShaderBlock$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+36], 0
	jne	SHORT $LN127@GrabShader

; 2787 :                     {
; 2788 :                         // There may be no interface parameters in this shader if it was compiled but had no interfaced bound to it.
; 2789 :                         // The shader cannot be set (correctly) in any pass.
; 2790 :                         continue;

	jmp	$LN137@GrabShader

; 2791 :                     }
; 2792 :                     else

	jmp	$LN126@GrabShader
$LN127@GrabShader:

; 2793 :                     {
; 2794 :                         VBD( CurInterfaceParameter < pShaderBlock->pReflectionData->InterfaceParameterCount,
; 2795 :                              "Internal loading error: interface count mismatch.");

	mov	eax, DWORD PTR _pShaderBlock$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _CurInterfaceParameter$[ebp]
	cmp	edx, DWORD PTR [ecx+36]
	jb	SHORT $LN125@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$301
$LN125@GrabShader:

; 2796 :                         SShaderBlock::SInterfaceParameter* pInterfaceInfo;
; 2797 :                         pInterfaceInfo = &pShaderBlock->pReflectionData->pInterfaceParameters[CurInterfaceParameter];

	mov	eax, DWORD PTR _pShaderBlock$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+40]
	mov	eax, DWORD PTR _CurInterfaceParameter$[ebp]
	lea	ecx, DWORD PTR [edx+eax*8]
	mov	DWORD PTR _pInterfaceInfo$52[ebp], ecx

; 2798 :                         ++CurInterfaceParameter;

	mov	eax, DWORD PTR _CurInterfaceParameter$[ebp]
	add	eax, 1
	mov	DWORD PTR _CurInterfaceParameter$[ebp], eax

; 2799 :                         SGlobalVariable *pParent = m_pEffect->FindVariableByName(pInterfaceInfo->pName);

	mov	eax, DWORD PTR _pInterfaceInfo$52[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+36]
	call	?FindVariableByName@CEffect@D3DX11Effects@@IAEPAUSGlobalVariable@2@PBD@Z ; D3DX11Effects::CEffect::FindVariableByName
	mov	DWORD PTR _pParent$51[ebp], eax

; 2800 :                         VBD( pParent != NULL, "Loading error: cannot find parent type." );

	cmp	DWORD PTR _pParent$51[ebp], 0
	jne	SHORT $LN123@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$301
$LN123@GrabShader:

; 2801 :                         if( pInterfaceInfo->Index == (UINT)-1 )

	mov	eax, DWORD PTR _pInterfaceInfo$52[ebp]
	cmp	DWORD PTR [eax+4], -1
	jne	SHORT $LN121@GrabShader

; 2802 :                         {
; 2803 :                             pVariable = pParent;

	mov	eax, DWORD PTR _pParent$51[ebp]
	mov	DWORD PTR _pVariable$55[ebp], eax

; 2804 :                             VariableElements = pVariable->pType->Elements;

	mov	eax, DWORD PTR _pVariable$55[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _VariableElements$53[ebp], edx

; 2805 :                         }
; 2806 :                         else

	jmp	SHORT $LN126@GrabShader
$LN121@GrabShader:

; 2807 :                         {
; 2808 :                             // We want a specific index of the variable (ex. "MyVar[2]")
; 2809 :                             VBD( size == 1, "Loading error: interface array type mismatch." );

	cmp	DWORD PTR _size$56[ebp], 1
	je	SHORT $LN119@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$301
$LN119@GrabShader:

; 2810 :                             pVariable = (SGlobalVariable*)pParent->GetElement( pInterfaceInfo->Index );

	mov	esi, esp
	mov	eax, DWORD PTR _pInterfaceInfo$52[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _pParent$51[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pParent$51[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pVariable$55[ebp], eax

; 2811 :                             VBD( pVariable->IsValid(), "Loading error: interface array index out of range." );

	mov	eax, DWORD PTR _pVariable$55[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pVariable$55[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN117@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$301
$LN117@GrabShader:

; 2812 :                             VariableElements = 0;

	mov	DWORD PTR _VariableElements$53[ebp], 0
$LN126@GrabShader:

; 2813 :                         }
; 2814 :                     }
; 2815 :                 }
; 2816 :                 else

	jmp	SHORT $LN115@GrabShader
$LN128@GrabShader:

; 2817 :                 {
; 2818 :                     // This interface pointer is a global interface used in the shader
; 2819 :                     pVariable = m_pEffect->FindVariableByName(pName);

	mov	eax, DWORD PTR _pName$58[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	call	?FindVariableByName@CEffect@D3DX11Effects@@IAEPAUSGlobalVariable@2@PBD@Z ; D3DX11Effects::CEffect::FindVariableByName
	mov	DWORD PTR _pVariable$55[ebp], eax

; 2820 :                     VBD( pVariable != NULL, "Loading error: cannot find interface variable." );

	cmp	DWORD PTR _pVariable$55[ebp], 0
	jne	SHORT $LN114@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$301
$LN114@GrabShader:

; 2821 :                     VariableElements = pVariable->pType->Elements;

	mov	eax, DWORD PTR _pVariable$55[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _VariableElements$53[ebp], edx
$LN115@GrabShader:

; 2822 :                 }
; 2823 :                 VBD( size <= max(1, VariableElements), "Loading error: interface array size mismatch." );

	cmp	DWORD PTR _VariableElements$53[ebp], 1
	jae	SHORT $LN265@GrabShader
	mov	DWORD PTR tv514[ebp], 1
	jmp	SHORT $LN266@GrabShader
$LN265@GrabShader:
	mov	eax, DWORD PTR _VariableElements$53[ebp]
	mov	DWORD PTR tv514[ebp], eax
$LN266@GrabShader:
	mov	ecx, DWORD PTR _size$56[ebp]
	cmp	ecx, DWORD PTR tv514[ebp]
	jbe	SHORT $LN112@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$301
$LN112@GrabShader:

; 2824 :                 if( pVariable->pType->IsInterface() )

	mov	eax, DWORD PTR _pVariable$55[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?IsInterface@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::IsInterface
	test	eax, eax
	je	SHORT $LN110@GrabShader

; 2825 :                 {
; 2826 :                     pInterface = pVariable->Data.pInterface;

	mov	eax, DWORD PTR _pVariable$55[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _pInterface$54[ebp], ecx
	jmp	$LN109@GrabShader
$LN110@GrabShader:

; 2827 :                 }
; 2828 :                 else if( pVariable->pType->IsClassInstance() )

	mov	eax, DWORD PTR _pVariable$55[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?IsClassInstance@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::IsClassInstance
	test	eax, eax
	je	$LN108@GrabShader

; 2829 :                 {
; 2830 :                     // For class instances, we create background interfaces which point to the class instance.  This is done so
; 2831 :                     // the shader can always expect SInterface dependencies, rather than a mix of SInterfaces and class instances
; 2832 :                     VN( pInterface = PRIVATENEW SInterface[size] );

	mov	eax, DWORD PTR _size$56[ebp]
	mov	DWORD PTR $T9[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T9[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T11[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN267@GrabShader
	push	OFFSET ??0SInterface@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SInterface::SInterface
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR $T11[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T11[ebp]
	mov	DWORD PTR tv556[ebp], edx
	jmp	SHORT $LN268@GrabShader
$LN267@GrabShader:
	mov	DWORD PTR tv556[ebp], 0
$LN268@GrabShader:
	mov	eax, DWORD PTR tv556[ebp]
	mov	DWORD PTR $T10[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR $T10[ebp]
	mov	DWORD PTR _pInterface$54[ebp], ecx
	cmp	DWORD PTR _pInterface$54[ebp], 0
	jne	SHORT $LN107@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$301
$LN107@GrabShader:

; 2833 :                     if( VariableElements == 0 )

	cmp	DWORD PTR _VariableElements$53[ebp], 0
	jne	SHORT $LN105@GrabShader
$LN104@GrabShader:

; 2834 :                     {
; 2835 :                         D3DXASSERT( size == 1 );

	cmp	DWORD PTR _size$56[ebp], 1
	je	SHORT $LN103@GrabShader
	push	OFFSET ??_C@_09LHJJGINI@size?5?$DN?$DN?51?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@3@@Z@4JA
	add	eax, 334				; 0000014eH
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN103@GrabShader:
	xor	eax, eax
	jne	SHORT $LN104@GrabShader

; 2836 :                         pInterface[0].pClassInstance = (SClassInstanceGlobalVariable*)pVariable;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pInterface$54[ebp]
	mov	eax, DWORD PTR _pVariable$55[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 2837 :                         m_BackgroundInterfaces.Add( &pInterface[0] );

	mov	eax, 4
	imul	ecx, eax, 0
	add	ecx, DWORD PTR _pInterface$54[ebp]
	mov	DWORD PTR $T12[ebp], ecx
	lea	edx, DWORD PTR $T12[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	?Add@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAEJABQAUSInterface@D3DX11Effects@@@Z ; CEffectVector<D3DX11Effects::SInterface *>::Add

; 2838 :                     }
; 2839 :                     else

	jmp	$LN100@GrabShader
$LN105@GrabShader:

; 2840 :                     {
; 2841 :                         // Fill each element of the SInstance array individually
; 2842 :                         VBD( size == VariableElements, "Loading error: class instance array size mismatch." );

	mov	eax, DWORD PTR _size$56[ebp]
	cmp	eax, DWORD PTR _VariableElements$53[ebp]
	je	SHORT $LN99@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$301
$LN99@GrabShader:

; 2843 :                         for( UINT iElement=0; iElement < size; iElement++ )

	mov	DWORD PTR _iElement$50[ebp], 0
	jmp	SHORT $LN97@GrabShader
$LN96@GrabShader:
	mov	eax, DWORD PTR _iElement$50[ebp]
	add	eax, 1
	mov	DWORD PTR _iElement$50[ebp], eax
$LN97@GrabShader:
	mov	eax, DWORD PTR _iElement$50[ebp]
	cmp	eax, DWORD PTR _size$56[ebp]
	jae	$LN100@GrabShader

; 2844 :                         {
; 2845 :                             SGlobalVariable *pElement = (SGlobalVariable*)pVariable->GetElement( iElement );

	mov	esi, esp
	mov	eax, DWORD PTR _iElement$50[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVariable$55[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pVariable$55[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+32]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pElement$49[ebp], eax

; 2846 :                             VBD( pElement->IsValid(), "Internal loading error: class instance array index out of range." );

	mov	eax, DWORD PTR _pElement$49[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pElement$49[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN94@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$301
$LN94@GrabShader:

; 2847 :                             pInterface[iElement].pClassInstance = (SClassInstanceGlobalVariable*)pElement;

	mov	eax, DWORD PTR _iElement$50[ebp]
	mov	ecx, DWORD PTR _pInterface$54[ebp]
	mov	edx, DWORD PTR _pElement$49[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 2848 :                             m_BackgroundInterfaces.Add( &pInterface[iElement] );

	mov	eax, DWORD PTR _iElement$50[ebp]
	mov	ecx, DWORD PTR _pInterface$54[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR $T13[ebp], edx
	lea	eax, DWORD PTR $T13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 92					; 0000005cH
	call	?Add@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAEJABQAUSInterface@D3DX11Effects@@@Z ; CEffectVector<D3DX11Effects::SInterface *>::Add

; 2849 :                         }

	jmp	$LN96@GrabShader
$LN100@GrabShader:

; 2850 :                     }
; 2851 :                 }
; 2852 :                 else

	jmp	SHORT $LN109@GrabShader
$LN108@GrabShader:

; 2853 :                 {
; 2854 :                     VHD( E_FAIL, "Loading error: invalid interface initializer variable type.");

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN109@GrabShader
	jmp	$lExit$301
$LN109@GrabShader:

; 2855 :                 }
; 2856 : 
; 2857 :                 //
; 2858 :                 // Here's where the "optimized" part comes in; whenever there's
; 2859 :                 // a resource dependency, see if it's located contiguous to
; 2860 :                 // an existing resource dependency and merge them together
; 2861 :                 // if possible
; 2862 :                 //
; 2863 :                 UINT  rangeCount;
; 2864 :                 pvRange = &vRanges[ER_Interfaces];

	mov	eax, 20					; 00000014H
	shl	eax, 2
	lea	ecx, DWORD PTR _vRanges$[ebp+eax]
	mov	DWORD PTR _pvRange$[ebp], ecx

; 2865 :                 rangeCount = pvRange->GetSize();

	mov	ecx, DWORD PTR _pvRange$[ebp]
	call	?GetSize@?$CEffectVector@USRange@D3DX11Effects@@@@QBEIXZ ; CEffectVector<D3DX11Effects::SRange>::GetSize
	mov	DWORD PTR _rangeCount$48[ebp], eax

; 2866 : 
; 2867 :                 VBD( rangeCount <= 1, "Internal loading error: invalid range count." );

	cmp	DWORD PTR _rangeCount$48[ebp], 1
	jbe	SHORT $LN89@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$301
$LN89@GrabShader:

; 2868 : 
; 2869 :                 if ( rangeCount == 0 )

	cmp	DWORD PTR _rangeCount$48[ebp], 0
	jne	SHORT $LN87@GrabShader

; 2870 :                 {
; 2871 :                     VN( pRange = pvRange->Add() );

	mov	ecx, DWORD PTR _pvRange$[ebp]
	call	?Add@?$CEffectVector@USRange@D3DX11Effects@@@@QAEPAUSRange@D3DX11Effects@@XZ ; CEffectVector<D3DX11Effects::SRange>::Add
	mov	DWORD PTR _pRange$[ebp], eax
	cmp	DWORD PTR _pRange$[ebp], 0
	jne	SHORT $LN86@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$301
$LN86@GrabShader:

; 2872 :                     pRange->start = pRange->last = 0;

	mov	eax, DWORD PTR _pRange$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _pRange$[ebp]
	mov	DWORD PTR [ecx], 0

; 2873 :                 }
; 2874 :                 else

	jmp	SHORT $LN84@GrabShader
$LN87@GrabShader:

; 2875 :                 {
; 2876 :                     pRange = &( (*pvRange)[0] );

	push	0
	mov	ecx, DWORD PTR _pvRange$[ebp]
	call	??A?$CEffectVector@USRange@D3DX11Effects@@@@QAEAAUSRange@D3DX11Effects@@I@Z ; CEffectVector<D3DX11Effects::SRange>::operator[]
	mov	DWORD PTR _pRange$[ebp], eax
$LN84@GrabShader:

; 2877 :                 }
; 2878 : 
; 2879 :                 if( bindPoint < pRange->last )

	mov	eax, DWORD PTR _pRange$[ebp]
	mov	ecx, DWORD PTR _bindPoint$57[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN76@GrabShader

; 2880 :                 {
; 2881 :                     // add interfaces into the range that already exists
; 2882 :                     VBD( bindPoint + size < pRange->last, "Internal loading error: range overlap." );

	mov	eax, DWORD PTR _bindPoint$57[ebp]
	add	eax, DWORD PTR _size$56[ebp]
	mov	ecx, DWORD PTR _pRange$[ebp]
	cmp	eax, DWORD PTR [ecx+4]
	jb	SHORT $LN82@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$301
$LN82@GrabShader:

; 2883 :                     for( j = 0; j < size; ++ j )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN80@GrabShader
$LN79@GrabShader:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN80@GrabShader:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _size$56[ebp]
	jae	SHORT $LN78@GrabShader

; 2884 :                     {
; 2885 :                         pRange->vResources[j + bindPoint] = pInterface + j;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _pInterface$54[ebp]
	lea	esi, DWORD PTR [ecx+eax*4]
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, DWORD PTR _bindPoint$57[ebp]
	push	edx
	mov	ecx, DWORD PTR _pRange$[ebp]
	add	ecx, 8
	call	??A?$CEffectVector@PAX@@QAEAAPAXI@Z	; CEffectVector<void *>::operator[]
	mov	DWORD PTR [eax], esi

; 2886 :                     }

	jmp	SHORT $LN79@GrabShader
$LN78@GrabShader:

; 2887 :                 }
; 2888 :                 else

	jmp	$LN77@GrabShader
$LN76@GrabShader:

; 2889 :                 {
; 2890 :                     // add interfaces to the end of the range
; 2891 : 
; 2892 :                     // add missing interface slots, if necessary
; 2893 :                     while(pRange->last < bindPoint)

	mov	eax, DWORD PTR _pRange$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _bindPoint$57[ebp]
	jae	SHORT $LN72@GrabShader

; 2894 :                     {
; 2895 :                         VHD( pRange->vResources.Add(&g_NullInterface), "Internal loading error: cannot add NULL interface to range." );

	mov	DWORD PTR $T14[ebp], OFFSET ?g_NullInterface@D3DX11Effects@@3USInterface@1@A ; D3DX11Effects::g_NullInterface
	lea	eax, DWORD PTR $T14[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRange$[ebp]
	add	ecx, 8
	call	?Add@?$CEffectVector@PAX@@QAEJABQAX@Z	; CEffectVector<void *>::Add
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN74@GrabShader
	jmp	$lExit$301
$LN74@GrabShader:

; 2896 :                         pRange->last++;

	mov	eax, DWORD PTR _pRange$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _pRange$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2897 :                     }

	jmp	SHORT $LN76@GrabShader
$LN72@GrabShader:

; 2898 : 
; 2899 :                     D3DXASSERT( bindPoint == pRange->last );

	mov	eax, DWORD PTR _pRange$[ebp]
	mov	ecx, DWORD PTR _bindPoint$57[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	je	SHORT $LN71@GrabShader
	push	OFFSET ??_C@_0BK@HKMDMOLB@bindPoint?5?$DN?$DN?5pRange?9?$DOlast?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@3@@Z@4JA
	add	eax, 398				; 0000018eH
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN71@GrabShader:
	xor	eax, eax
	jne	SHORT $LN72@GrabShader

; 2900 :                     for( j=0; j < size; ++ j )

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN68@GrabShader
$LN67@GrabShader:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN68@GrabShader:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _size$56[ebp]
	jae	SHORT $LN66@GrabShader

; 2901 :                     {
; 2902 :                         VHD( pRange->vResources.Add(pInterface + j), "Internal loading error: cannot at interface to range." );

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _pInterface$54[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR $T15[ebp], edx
	lea	eax, DWORD PTR $T15[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRange$[ebp]
	add	ecx, 8
	call	?Add@?$CEffectVector@PAX@@QAEJABQAX@Z	; CEffectVector<void *>::Add
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN65@GrabShader
	jmp	$lExit$301
$LN65@GrabShader:

; 2903 :                     }

	jmp	SHORT $LN67@GrabShader
$LN66@GrabShader:

; 2904 :                     pRange->last = bindPoint + size;

	mov	eax, DWORD PTR _bindPoint$57[ebp]
	add	eax, DWORD PTR _size$56[ebp]
	mov	ecx, DWORD PTR _pRange$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN77@GrabShader:

; 2905 :                 }
; 2906 :             }

	jmp	$LN137@GrabShader
$LN136@GrabShader:

; 2907 : 
; 2908 :             // There is only one interface cbuffer
; 2909 :             break;

	jmp	SHORT $LN151@GrabShader

; 2910 :         }

	jmp	$LN145@GrabShader
$LN151@GrabShader:

; 2911 :     }
; 2912 : 
; 2913 :     //////////////////////////////////////////////////////////////////////////
; 2914 :     // Step 3: allocate room in pShaderBlock for all of the dependency 
; 2915 :     // pointers and then hook them up
; 2916 : 
; 2917 :     pShaderBlock->SampDepCount = vRanges[ ER_Sampler ].GetSize();

	mov	eax, 20					; 00000014H
	shl	eax, 1
	lea	ecx, DWORD PTR _vRanges$[ebp+eax]
	call	?GetSize@?$CEffectVector@USRange@D3DX11Effects@@@@QBEIXZ ; CEffectVector<D3DX11Effects::SRange>::GetSize
	mov	ecx, DWORD PTR _pShaderBlock$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 2918 :     pShaderBlock->CBDepCount = vRanges[ ER_CBuffer ].GetSize();

	mov	eax, 20					; 00000014H
	imul	ecx, eax, 0
	lea	ecx, DWORD PTR _vRanges$[ebp+ecx]
	call	?GetSize@?$CEffectVector@USRange@D3DX11Effects@@@@QBEIXZ ; CEffectVector<D3DX11Effects::SRange>::GetSize
	mov	edx, DWORD PTR _pShaderBlock$[ebp]
	mov	DWORD PTR [edx+16], eax

; 2919 :     pShaderBlock->InterfaceDepCount = vRanges[ ER_Interfaces ].GetSize();

	mov	eax, 20					; 00000014H
	shl	eax, 2
	lea	ecx, DWORD PTR _vRanges$[ebp+eax]
	call	?GetSize@?$CEffectVector@USRange@D3DX11Effects@@@@QBEIXZ ; CEffectVector<D3DX11Effects::SRange>::GetSize
	mov	ecx, DWORD PTR _pShaderBlock$[ebp]
	mov	DWORD PTR [ecx+32], eax

; 2920 :     pShaderBlock->ResourceDepCount = vRanges[ ER_Texture ].GetSize();

	mov	eax, 20					; 00000014H
	shl	eax, 0
	lea	ecx, DWORD PTR _vRanges$[ebp+eax]
	call	?GetSize@?$CEffectVector@USRange@D3DX11Effects@@@@QBEIXZ ; CEffectVector<D3DX11Effects::SRange>::GetSize
	mov	ecx, DWORD PTR _pShaderBlock$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 2921 :     pShaderBlock->UAVDepCount = vRanges[ ER_UnorderedAccessView ].GetSize();

	mov	eax, 20					; 00000014H
	imul	ecx, eax, 3
	lea	ecx, DWORD PTR _vRanges$[ebp+ecx]
	call	?GetSize@?$CEffectVector@USRange@D3DX11Effects@@@@QBEIXZ ; CEffectVector<D3DX11Effects::SRange>::GetSize
	mov	edx, DWORD PTR _pShaderBlock$[ebp]
	mov	DWORD PTR [edx+48], eax

; 2922 :     pShaderBlock->TBufferDepCount = vTBuffers.GetSize();

	lea	ecx, DWORD PTR _vTBuffers$[ebp]
	call	?GetSize@?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QBEIXZ ; CEffectVector<D3DX11Effects::SConstantBuffer *>::GetSize
	mov	ecx, DWORD PTR _pShaderBlock$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 2923 : 
; 2924 :     VN( pShaderBlock->pSampDeps = PRIVATENEW SShaderSamplerDependency[pShaderBlock->SampDepCount] );

	mov	eax, DWORD PTR _pShaderBlock$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR $T16[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T16[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T18[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T18[ebp], 0
	je	SHORT $LN269@GrabShader
	push	OFFSET ??0?$SShaderDependency@PAUSSamplerBlock@D3DX11Effects@@PAUID3D11SamplerState@@@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SShaderDependency<D3DX11Effects::SSamplerBlock *,ID3D11SamplerState *>::SShaderDependency<D3DX11Effects::SSamplerBlock *,ID3D11SamplerState *>
	mov	eax, DWORD PTR $T16[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR $T18[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T18[ebp]
	mov	DWORD PTR tv711[ebp], edx
	jmp	SHORT $LN270@GrabShader
$LN269@GrabShader:
	mov	DWORD PTR tv711[ebp], 0
$LN270@GrabShader:
	mov	eax, DWORD PTR tv711[ebp]
	mov	DWORD PTR $T17[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _pShaderBlock$[ebp]
	mov	edx, DWORD PTR $T17[ebp]
	mov	DWORD PTR [ecx+28], edx
	cmp	DWORD PTR $T17[ebp], 0
	jne	SHORT $LN63@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$301
$LN63@GrabShader:

; 2925 :     VN( pShaderBlock->pCBDeps = PRIVATENEW SShaderCBDependency[pShaderBlock->CBDepCount] );

	mov	eax, DWORD PTR _pShaderBlock$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR $T19[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T19[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T21[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T21[ebp], 0
	je	SHORT $LN271@GrabShader
	push	OFFSET ??0?$SShaderDependency@PAUSConstantBuffer@D3DX11Effects@@PAUID3D11Buffer@@@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SShaderDependency<D3DX11Effects::SConstantBuffer *,ID3D11Buffer *>::SShaderDependency<D3DX11Effects::SConstantBuffer *,ID3D11Buffer *>
	mov	eax, DWORD PTR $T19[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR $T21[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T21[ebp]
	mov	DWORD PTR tv732[ebp], edx
	jmp	SHORT $LN272@GrabShader
$LN271@GrabShader:
	mov	DWORD PTR tv732[ebp], 0
$LN272@GrabShader:
	mov	eax, DWORD PTR tv732[ebp]
	mov	DWORD PTR $T20[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _pShaderBlock$[ebp]
	mov	edx, DWORD PTR $T20[ebp]
	mov	DWORD PTR [ecx+20], edx
	cmp	DWORD PTR $T20[ebp], 0
	jne	SHORT $LN61@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$301
$LN61@GrabShader:

; 2926 :     VN( pShaderBlock->pInterfaceDeps = PRIVATENEW SInterfaceDependency[pShaderBlock->InterfaceDepCount] );

	mov	eax, DWORD PTR _pShaderBlock$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR $T22[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T22[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T24[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T24[ebp], 0
	je	SHORT $LN273@GrabShader
	push	OFFSET ??0?$SShaderDependency@PAUSInterface@D3DX11Effects@@PAUID3D11ClassInstance@@@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SShaderDependency<D3DX11Effects::SInterface *,ID3D11ClassInstance *>::SShaderDependency<D3DX11Effects::SInterface *,ID3D11ClassInstance *>
	mov	eax, DWORD PTR $T22[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR $T24[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T24[ebp]
	mov	DWORD PTR tv753[ebp], edx
	jmp	SHORT $LN274@GrabShader
$LN273@GrabShader:
	mov	DWORD PTR tv753[ebp], 0
$LN274@GrabShader:
	mov	eax, DWORD PTR tv753[ebp]
	mov	DWORD PTR $T23[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _pShaderBlock$[ebp]
	mov	edx, DWORD PTR $T23[ebp]
	mov	DWORD PTR [ecx+36], edx
	cmp	DWORD PTR $T23[ebp], 0
	jne	SHORT $LN59@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$301
$LN59@GrabShader:

; 2927 :     VN( pShaderBlock->pResourceDeps = PRIVATENEW SShaderResourceDependency[pShaderBlock->ResourceDepCount] );

	mov	eax, DWORD PTR _pShaderBlock$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR $T25[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T25[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T27[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	cmp	DWORD PTR $T27[ebp], 0
	je	SHORT $LN275@GrabShader
	push	OFFSET ??0?$SShaderDependency@PAUSShaderResource@D3DX11Effects@@PAUID3D11ShaderResourceView@@@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SShaderDependency<D3DX11Effects::SShaderResource *,ID3D11ShaderResourceView *>::SShaderDependency<D3DX11Effects::SShaderResource *,ID3D11ShaderResourceView *>
	mov	eax, DWORD PTR $T25[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR $T27[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T27[ebp]
	mov	DWORD PTR tv774[ebp], edx
	jmp	SHORT $LN276@GrabShader
$LN275@GrabShader:
	mov	DWORD PTR tv774[ebp], 0
$LN276@GrabShader:
	mov	eax, DWORD PTR tv774[ebp]
	mov	DWORD PTR $T26[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _pShaderBlock$[ebp]
	mov	edx, DWORD PTR $T26[ebp]
	mov	DWORD PTR [ecx+44], edx
	cmp	DWORD PTR $T26[ebp], 0
	jne	SHORT $LN57@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$301
$LN57@GrabShader:

; 2928 :     VN( pShaderBlock->pUAVDeps = PRIVATENEW SUnorderedAccessViewDependency[pShaderBlock->UAVDepCount] );

	mov	eax, DWORD PTR _pShaderBlock$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR $T28[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T28[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T30[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	cmp	DWORD PTR $T30[ebp], 0
	je	SHORT $LN277@GrabShader
	push	OFFSET ??0?$SShaderDependency@PAUSUnorderedAccessView@D3DX11Effects@@PAUID3D11UnorderedAccessView@@@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SShaderDependency<D3DX11Effects::SUnorderedAccessView *,ID3D11UnorderedAccessView *>::SShaderDependency<D3DX11Effects::SUnorderedAccessView *,ID3D11UnorderedAccessView *>
	mov	eax, DWORD PTR $T28[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR $T30[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T30[ebp]
	mov	DWORD PTR tv795[ebp], edx
	jmp	SHORT $LN278@GrabShader
$LN277@GrabShader:
	mov	DWORD PTR tv795[ebp], 0
$LN278@GrabShader:
	mov	eax, DWORD PTR tv795[ebp]
	mov	DWORD PTR $T29[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _pShaderBlock$[ebp]
	mov	edx, DWORD PTR $T29[ebp]
	mov	DWORD PTR [ecx+52], edx
	cmp	DWORD PTR $T29[ebp], 0
	jne	SHORT $LN55@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$301
$LN55@GrabShader:

; 2929 :     VN( pShaderBlock->ppTbufDeps = PRIVATENEW SConstantBuffer*[pShaderBlock->TBufferDepCount] );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	xor	ecx, ecx
	mov	edx, DWORD PTR _pShaderBlock$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T31[ebp], eax
	mov	eax, DWORD PTR _pShaderBlock$[ebp]
	mov	ecx, DWORD PTR $T31[ebp]
	mov	DWORD PTR [eax+60], ecx
	cmp	DWORD PTR $T31[ebp], 0
	jne	SHORT $LN53@GrabShader
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$301
$LN53@GrabShader:

; 2930 : 
; 2931 :     for (i=0; i<pShaderBlock->CBDepCount; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN51@GrabShader
$LN50@GrabShader:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN51@GrabShader:
	mov	eax, DWORD PTR _pShaderBlock$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	$LN49@GrabShader

; 2932 :     {
; 2933 :         SShaderCBDependency *pDep = &pShaderBlock->pCBDeps[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _pShaderBlock$[ebp]
	add	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR _pDep$47[ebp], eax

; 2934 : 
; 2935 :         pRange = &vRanges[ER_CBuffer][i];

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, 20					; 00000014H
	imul	edx, ecx, 0
	lea	ecx, DWORD PTR _vRanges$[ebp+edx]
	call	??A?$CEffectVector@USRange@D3DX11Effects@@@@QAEAAUSRange@D3DX11Effects@@I@Z ; CEffectVector<D3DX11Effects::SRange>::operator[]
	mov	DWORD PTR _pRange$[ebp], eax

; 2936 : 
; 2937 :         pDep->StartIndex = pRange->start;

	mov	eax, DWORD PTR _pDep$47[ebp]
	mov	ecx, DWORD PTR _pRange$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 2938 :         pDep->Count = pRange->last - pDep->StartIndex;

	mov	eax, DWORD PTR _pRange$[ebp]
	mov	ecx, DWORD PTR _pDep$47[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pDep$47[ebp]
	mov	DWORD PTR [eax+4], edx

; 2939 :         pDep->ppFXPointers = PRIVATENEW SConstantBuffer*[ pDep->Count ];

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	xor	ecx, ecx
	mov	edx, DWORD PTR _pDep$47[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T32[ebp], eax
	mov	eax, DWORD PTR _pDep$47[ebp]
	mov	ecx, DWORD PTR $T32[ebp]
	mov	DWORD PTR [eax+8], ecx

; 2940 :         pDep->ppD3DObjects = PRIVATENEW ID3D11Buffer*[ pDep->Count ];

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	xor	ecx, ecx
	mov	edx, DWORD PTR _pDep$47[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T33[ebp], eax
	mov	eax, DWORD PTR _pDep$47[ebp]
	mov	ecx, DWORD PTR $T33[ebp]
	mov	DWORD PTR [eax+12], ecx
$LN48@GrabShader:

; 2941 : 
; 2942 :         D3DXASSERT(pDep->Count == pRange->vResources.GetSize());

	mov	ecx, DWORD PTR _pRange$[ebp]
	add	ecx, 8
	call	?GetSize@?$CEffectVector@PAX@@QBEIXZ	; CEffectVector<void *>::GetSize
	mov	ecx, DWORD PTR _pDep$47[ebp]
	cmp	DWORD PTR [ecx+4], eax
	je	SHORT $LN47@GrabShader
	push	OFFSET ??_C@_0CM@MAFMDAKC@pDep?9?$DOCount?5?$DN?$DN?5pRange?9?$DOvResource@
	mov	eax, DWORD PTR ?__LINE__Var@?1??GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@3@@Z@4JA
	add	eax, 441				; 000001b9H
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN47@GrabShader:
	xor	eax, eax
	jne	SHORT $LN48@GrabShader

; 2943 :         for (j=0; j<pDep->Count; ++j)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN44@GrabShader
$LN43@GrabShader:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN44@GrabShader:
	mov	eax, DWORD PTR _pDep$47[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN42@GrabShader

; 2944 :         {
; 2945 :             pDep->ppFXPointers[j] = (SConstantBuffer *)pRange->vResources[j];

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRange$[ebp]
	add	ecx, 8
	call	??A?$CEffectVector@PAX@@QAEAAPAXI@Z	; CEffectVector<void *>::operator[]
	mov	ecx, DWORD PTR _pDep$47[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 2946 :             pDep->ppD3DObjects[j] = NULL;

	mov	eax, DWORD PTR _pDep$47[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR [ecx+edx*4], 0

; 2947 :         }

	jmp	SHORT $LN43@GrabShader
$LN42@GrabShader:

; 2948 :     }

	jmp	$LN50@GrabShader
$LN49@GrabShader:

; 2949 : 
; 2950 :     for (i=0; i<pShaderBlock->SampDepCount; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN41@GrabShader
$LN40@GrabShader:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN41@GrabShader:
	mov	eax, DWORD PTR _pShaderBlock$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jae	$LN39@GrabShader

; 2951 :     {
; 2952 :         SShaderSamplerDependency *pDep = &pShaderBlock->pSampDeps[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _pShaderBlock$[ebp]
	add	eax, DWORD PTR [ecx+28]
	mov	DWORD PTR _pDep$46[ebp], eax

; 2953 : 
; 2954 :         pRange = &vRanges[ER_Sampler][i];

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, 20					; 00000014H
	shl	ecx, 1
	lea	ecx, DWORD PTR _vRanges$[ebp+ecx]
	call	??A?$CEffectVector@USRange@D3DX11Effects@@@@QAEAAUSRange@D3DX11Effects@@I@Z ; CEffectVector<D3DX11Effects::SRange>::operator[]
	mov	DWORD PTR _pRange$[ebp], eax

; 2955 : 
; 2956 :         pDep->StartIndex = pRange->start;

	mov	eax, DWORD PTR _pDep$46[ebp]
	mov	ecx, DWORD PTR _pRange$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 2957 :         pDep->Count = pRange->last - pDep->StartIndex;

	mov	eax, DWORD PTR _pRange$[ebp]
	mov	ecx, DWORD PTR _pDep$46[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pDep$46[ebp]
	mov	DWORD PTR [eax+4], edx

; 2958 :         pDep->ppFXPointers = PRIVATENEW SSamplerBlock*[ pDep->Count ];

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	xor	ecx, ecx
	mov	edx, DWORD PTR _pDep$46[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T34[ebp], eax
	mov	eax, DWORD PTR _pDep$46[ebp]
	mov	ecx, DWORD PTR $T34[ebp]
	mov	DWORD PTR [eax+8], ecx

; 2959 :         pDep->ppD3DObjects = PRIVATENEW ID3D11SamplerState*[ pDep->Count ];

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	xor	ecx, ecx
	mov	edx, DWORD PTR _pDep$46[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T35[ebp], eax
	mov	eax, DWORD PTR _pDep$46[ebp]
	mov	ecx, DWORD PTR $T35[ebp]
	mov	DWORD PTR [eax+12], ecx
$LN38@GrabShader:

; 2960 : 
; 2961 :         D3DXASSERT(pDep->Count == pRange->vResources.GetSize());

	mov	ecx, DWORD PTR _pRange$[ebp]
	add	ecx, 8
	call	?GetSize@?$CEffectVector@PAX@@QBEIXZ	; CEffectVector<void *>::GetSize
	mov	ecx, DWORD PTR _pDep$46[ebp]
	cmp	DWORD PTR [ecx+4], eax
	je	SHORT $LN37@GrabShader
	push	OFFSET ??_C@_0CM@MAFMDAKC@pDep?9?$DOCount?5?$DN?$DN?5pRange?9?$DOvResource@
	mov	eax, DWORD PTR ?__LINE__Var@?1??GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@3@@Z@4JA
	add	eax, 460				; 000001ccH
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN37@GrabShader:
	xor	eax, eax
	jne	SHORT $LN38@GrabShader

; 2962 :         for (j=0; j<pDep->Count; ++j)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN34@GrabShader
$LN33@GrabShader:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN34@GrabShader:
	mov	eax, DWORD PTR _pDep$46[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN32@GrabShader

; 2963 :         {
; 2964 :             pDep->ppFXPointers[j] = (SSamplerBlock *) pRange->vResources[j];

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRange$[ebp]
	add	ecx, 8
	call	??A?$CEffectVector@PAX@@QAEAAPAXI@Z	; CEffectVector<void *>::operator[]
	mov	ecx, DWORD PTR _pDep$46[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 2965 :             pDep->ppD3DObjects[j] = NULL;

	mov	eax, DWORD PTR _pDep$46[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR [ecx+edx*4], 0

; 2966 :         }

	jmp	SHORT $LN33@GrabShader
$LN32@GrabShader:

; 2967 :     }

	jmp	$LN40@GrabShader
$LN39@GrabShader:

; 2968 : 
; 2969 :     for (i=0; i<pShaderBlock->InterfaceDepCount; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN31@GrabShader
$LN30@GrabShader:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN31@GrabShader:
	mov	eax, DWORD PTR _pShaderBlock$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jae	$LN29@GrabShader

; 2970 :     {
; 2971 :         SInterfaceDependency *pDep = &pShaderBlock->pInterfaceDeps[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _pShaderBlock$[ebp]
	add	eax, DWORD PTR [ecx+36]
	mov	DWORD PTR _pDep$45[ebp], eax

; 2972 : 
; 2973 :         pRange = &vRanges[ER_Interfaces][i];

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, 20					; 00000014H
	shl	ecx, 2
	lea	ecx, DWORD PTR _vRanges$[ebp+ecx]
	call	??A?$CEffectVector@USRange@D3DX11Effects@@@@QAEAAUSRange@D3DX11Effects@@I@Z ; CEffectVector<D3DX11Effects::SRange>::operator[]
	mov	DWORD PTR _pRange$[ebp], eax

; 2974 : 
; 2975 :         pDep->StartIndex = pRange->start;

	mov	eax, DWORD PTR _pDep$45[ebp]
	mov	ecx, DWORD PTR _pRange$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 2976 :         pDep->Count = pRange->last - pDep->StartIndex;

	mov	eax, DWORD PTR _pRange$[ebp]
	mov	ecx, DWORD PTR _pDep$45[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pDep$45[ebp]
	mov	DWORD PTR [eax+4], edx

; 2977 :         pDep->ppFXPointers = PRIVATENEW SInterface*[ pDep->Count ];

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	xor	ecx, ecx
	mov	edx, DWORD PTR _pDep$45[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T36[ebp], eax
	mov	eax, DWORD PTR _pDep$45[ebp]
	mov	ecx, DWORD PTR $T36[ebp]
	mov	DWORD PTR [eax+8], ecx

; 2978 :         pDep->ppD3DObjects = PRIVATENEW ID3D11ClassInstance*[ pDep->Count ];

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	xor	ecx, ecx
	mov	edx, DWORD PTR _pDep$45[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T37[ebp], eax
	mov	eax, DWORD PTR _pDep$45[ebp]
	mov	ecx, DWORD PTR $T37[ebp]
	mov	DWORD PTR [eax+12], ecx
$LN28@GrabShader:

; 2979 : 
; 2980 :         D3DXASSERT(pDep->Count == pRange->vResources.GetSize());

	mov	ecx, DWORD PTR _pRange$[ebp]
	add	ecx, 8
	call	?GetSize@?$CEffectVector@PAX@@QBEIXZ	; CEffectVector<void *>::GetSize
	mov	ecx, DWORD PTR _pDep$45[ebp]
	cmp	DWORD PTR [ecx+4], eax
	je	SHORT $LN27@GrabShader
	push	OFFSET ??_C@_0CM@MAFMDAKC@pDep?9?$DOCount?5?$DN?$DN?5pRange?9?$DOvResource@
	mov	eax, DWORD PTR ?__LINE__Var@?1??GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@3@@Z@4JA
	add	eax, 479				; 000001dfH
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN27@GrabShader:
	xor	eax, eax
	jne	SHORT $LN28@GrabShader

; 2981 :         for (j=0; j<pDep->Count; ++j)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN24@GrabShader
$LN23@GrabShader:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN24@GrabShader:
	mov	eax, DWORD PTR _pDep$45[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN22@GrabShader

; 2982 :         {
; 2983 :             pDep->ppFXPointers[j] = (SInterface *) pRange->vResources[j];

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRange$[ebp]
	add	ecx, 8
	call	??A?$CEffectVector@PAX@@QAEAAPAXI@Z	; CEffectVector<void *>::operator[]
	mov	ecx, DWORD PTR _pDep$45[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 2984 :             pDep->ppD3DObjects[j] = NULL;

	mov	eax, DWORD PTR _pDep$45[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR [ecx+edx*4], 0

; 2985 :         }

	jmp	SHORT $LN23@GrabShader
$LN22@GrabShader:

; 2986 :     }

	jmp	$LN30@GrabShader
$LN29@GrabShader:

; 2987 : 
; 2988 :     for (i=0; i<pShaderBlock->ResourceDepCount; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN21@GrabShader
$LN20@GrabShader:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN21@GrabShader:
	mov	eax, DWORD PTR _pShaderBlock$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+40]
	jae	$LN19@GrabShader

; 2989 :     {
; 2990 :         SShaderResourceDependency *pDep = &pShaderBlock->pResourceDeps[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _pShaderBlock$[ebp]
	add	eax, DWORD PTR [ecx+44]
	mov	DWORD PTR _pDep$44[ebp], eax

; 2991 : 
; 2992 :         pRange = &vRanges[ER_Texture][i];

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, 20					; 00000014H
	shl	ecx, 0
	lea	ecx, DWORD PTR _vRanges$[ebp+ecx]
	call	??A?$CEffectVector@USRange@D3DX11Effects@@@@QAEAAUSRange@D3DX11Effects@@I@Z ; CEffectVector<D3DX11Effects::SRange>::operator[]
	mov	DWORD PTR _pRange$[ebp], eax

; 2993 : 
; 2994 :         pDep->StartIndex = pRange->start;

	mov	eax, DWORD PTR _pDep$44[ebp]
	mov	ecx, DWORD PTR _pRange$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 2995 :         pDep->Count = pRange->last - pDep->StartIndex;

	mov	eax, DWORD PTR _pRange$[ebp]
	mov	ecx, DWORD PTR _pDep$44[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pDep$44[ebp]
	mov	DWORD PTR [eax+4], edx

; 2996 :         pDep->ppFXPointers = PRIVATENEW SShaderResource*[ pDep->Count ];

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	xor	ecx, ecx
	mov	edx, DWORD PTR _pDep$44[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T38[ebp], eax
	mov	eax, DWORD PTR _pDep$44[ebp]
	mov	ecx, DWORD PTR $T38[ebp]
	mov	DWORD PTR [eax+8], ecx

; 2997 :         pDep->ppD3DObjects = PRIVATENEW ID3D11ShaderResourceView*[ pDep->Count ];

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	xor	ecx, ecx
	mov	edx, DWORD PTR _pDep$44[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T39[ebp], eax
	mov	eax, DWORD PTR _pDep$44[ebp]
	mov	ecx, DWORD PTR $T39[ebp]
	mov	DWORD PTR [eax+12], ecx
$LN18@GrabShader:

; 2998 : 
; 2999 :         D3DXASSERT(pDep->Count == pRange->vResources.GetSize());

	mov	ecx, DWORD PTR _pRange$[ebp]
	add	ecx, 8
	call	?GetSize@?$CEffectVector@PAX@@QBEIXZ	; CEffectVector<void *>::GetSize
	mov	ecx, DWORD PTR _pDep$44[ebp]
	cmp	DWORD PTR [ecx+4], eax
	je	SHORT $LN17@GrabShader
	push	OFFSET ??_C@_0CM@MAFMDAKC@pDep?9?$DOCount?5?$DN?$DN?5pRange?9?$DOvResource@
	mov	eax, DWORD PTR ?__LINE__Var@?1??GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@3@@Z@4JA
	add	eax, 498				; 000001f2H
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN17@GrabShader:
	xor	eax, eax
	jne	SHORT $LN18@GrabShader

; 3000 :         for (j=0; j<pDep->Count; ++j)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN14@GrabShader
$LN13@GrabShader:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN14@GrabShader:
	mov	eax, DWORD PTR _pDep$44[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN12@GrabShader

; 3001 :         {
; 3002 :             pDep->ppFXPointers[j] = (SShaderResource *) pRange->vResources[j];

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRange$[ebp]
	add	ecx, 8
	call	??A?$CEffectVector@PAX@@QAEAAPAXI@Z	; CEffectVector<void *>::operator[]
	mov	ecx, DWORD PTR _pDep$44[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 3003 :             pDep->ppD3DObjects[j] = NULL;

	mov	eax, DWORD PTR _pDep$44[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR [ecx+edx*4], 0

; 3004 :         }

	jmp	SHORT $LN13@GrabShader
$LN12@GrabShader:

; 3005 :     }

	jmp	$LN20@GrabShader
$LN19@GrabShader:

; 3006 : 
; 3007 :     for (i=0; i<pShaderBlock->UAVDepCount; ++i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@GrabShader
$LN10@GrabShader:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@GrabShader:
	mov	eax, DWORD PTR _pShaderBlock$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+48]
	jae	$LN9@GrabShader

; 3008 :     {
; 3009 :         SUnorderedAccessViewDependency *pDep = &pShaderBlock->pUAVDeps[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _pShaderBlock$[ebp]
	add	eax, DWORD PTR [ecx+52]
	mov	DWORD PTR _pDep$43[ebp], eax

; 3010 : 
; 3011 :         pRange = &vRanges[ER_UnorderedAccessView][i];

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, 20					; 00000014H
	imul	edx, ecx, 3
	lea	ecx, DWORD PTR _vRanges$[ebp+edx]
	call	??A?$CEffectVector@USRange@D3DX11Effects@@@@QAEAAUSRange@D3DX11Effects@@I@Z ; CEffectVector<D3DX11Effects::SRange>::operator[]
	mov	DWORD PTR _pRange$[ebp], eax

; 3012 : 
; 3013 :         pDep->StartIndex = pRange->start;

	mov	eax, DWORD PTR _pDep$43[ebp]
	mov	ecx, DWORD PTR _pRange$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 3014 :         pDep->Count = pRange->last - pDep->StartIndex;

	mov	eax, DWORD PTR _pRange$[ebp]
	mov	ecx, DWORD PTR _pDep$43[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pDep$43[ebp]
	mov	DWORD PTR [eax+4], edx

; 3015 :         pDep->ppFXPointers = PRIVATENEW SUnorderedAccessView*[ pDep->Count ];

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	xor	ecx, ecx
	mov	edx, DWORD PTR _pDep$43[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T40[ebp], eax
	mov	eax, DWORD PTR _pDep$43[ebp]
	mov	ecx, DWORD PTR $T40[ebp]
	mov	DWORD PTR [eax+8], ecx

; 3016 :         pDep->ppD3DObjects = PRIVATENEW ID3D11UnorderedAccessView*[ pDep->Count ];

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	xor	ecx, ecx
	mov	edx, DWORD PTR _pDep$43[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T41[ebp], eax
	mov	eax, DWORD PTR _pDep$43[ebp]
	mov	ecx, DWORD PTR $T41[ebp]
	mov	DWORD PTR [eax+12], ecx
$LN8@GrabShader:

; 3017 : 
; 3018 :         D3DXASSERT(pDep->Count == pRange->vResources.GetSize());

	mov	ecx, DWORD PTR _pRange$[ebp]
	add	ecx, 8
	call	?GetSize@?$CEffectVector@PAX@@QBEIXZ	; CEffectVector<void *>::GetSize
	mov	ecx, DWORD PTR _pDep$43[ebp]
	cmp	DWORD PTR [ecx+4], eax
	je	SHORT $LN7@GrabShader
	push	OFFSET ??_C@_0CM@MAFMDAKC@pDep?9?$DOCount?5?$DN?$DN?5pRange?9?$DOvResource@
	mov	eax, DWORD PTR ?__LINE__Var@?1??GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@3@@Z@4JA
	add	eax, 517				; 00000205H
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN7@GrabShader:
	xor	eax, eax
	jne	SHORT $LN8@GrabShader

; 3019 :         for (j=0; j<pDep->Count; ++j)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN4@GrabShader
$LN3@GrabShader:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN4@GrabShader:
	mov	eax, DWORD PTR _pDep$43[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN2@GrabShader

; 3020 :         {
; 3021 :             pDep->ppFXPointers[j] = (SUnorderedAccessView *) pRange->vResources[j];

	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pRange$[ebp]
	add	ecx, 8
	call	??A?$CEffectVector@PAX@@QAEAAPAXI@Z	; CEffectVector<void *>::operator[]
	mov	ecx, DWORD PTR _pDep$43[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+ecx*4], eax

; 3022 :             pDep->ppD3DObjects[j] = NULL;

	mov	eax, DWORD PTR _pDep$43[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _j$[ebp]
	mov	DWORD PTR [ecx+edx*4], 0

; 3023 :         }

	jmp	SHORT $LN3@GrabShader
$LN2@GrabShader:

; 3024 :     }

	jmp	$LN10@GrabShader
$LN9@GrabShader:

; 3025 : 
; 3026 :     if (pShaderBlock->TBufferDepCount > 0)

	mov	eax, DWORD PTR _pShaderBlock$[ebp]
	cmp	DWORD PTR [eax+56], 0
	jbe	SHORT $lExit$301

; 3027 :     {
; 3028 :         memcpy(pShaderBlock->ppTbufDeps, &vTBuffers[0], pShaderBlock->TBufferDepCount * sizeof(SConstantBuffer*));

	mov	eax, DWORD PTR _pShaderBlock$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	shl	ecx, 2
	push	ecx
	push	0
	lea	ecx, DWORD PTR _vTBuffers$[ebp]
	call	??A?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAEAAPAUSConstantBuffer@D3DX11Effects@@I@Z ; CEffectVector<D3DX11Effects::SConstantBuffer *>::operator[]
	push	eax
	mov	edx, DWORD PTR _pShaderBlock$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$lExit$301:

; 3029 :     }
; 3030 : 
; 3031 : lExit:
; 3032 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T42[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _vTBuffers$[ebp]
	call	??1?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAE@XZ ; CEffectVector<D3DX11Effects::SConstantBuffer *>::~CEffectVector<D3DX11Effects::SConstantBuffer *>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	push	OFFSET ??1?$CEffectVector@USRange@D3DX11Effects@@@@QAE@XZ ; CEffectVector<D3DX11Effects::SRange>::~CEffectVector<D3DX11Effects::SRange>
	push	5
	push	20					; 00000014H
	lea	ecx, DWORD PTR _vRanges$[ebp]
	push	ecx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR $T42[ebp]

; 3033 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN298@GrabShader
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1580				; 0000062cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN298@GrabShader:
	DD	7
	DD	$LN297@GrabShader
$LN297@GrabShader:
	DD	-168					; ffffff58H
	DD	100					; 00000064H
	DD	$LN289@GrabShader
	DD	-220					; ffffff24H
	DD	20					; 00000014H
	DD	$LN290@GrabShader
	DD	-380					; fffffe84H
	DD	152					; 00000098H
	DD	$LN291@GrabShader
	DD	-476					; fffffe24H
	DD	4
	DD	$LN292@GrabShader
	DD	-540					; fffffde4H
	DD	32					; 00000020H
	DD	$LN293@GrabShader
	DD	-628					; fffffd8cH
	DD	20					; 00000014H
	DD	$LN294@GrabShader
	DD	-696					; fffffd48H
	DD	36					; 00000024H
	DD	$LN295@GrabShader
$LN295@GrabShader:
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	0
$LN294@GrabShader:
	DB	67					; 00000043H
	DB	66					; 00000042H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	0
$LN293@GrabShader:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	0
$LN292@GrabShader:
	DB	112					; 00000070H
	DB	67					; 00000043H
	DB	66					; 00000042H
	DB	0
$LN291@GrabShader:
	DB	83					; 00000053H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	0
$LN290@GrabShader:
	DB	118					; 00000076H
	DB	84					; 00000054H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
$LN289@GrabShader:
	DB	118					; 00000076H
	DB	82					; 00000052H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
	npad	1
$LN299@GrabShader:
	DD	$LN250@GrabShader
	DD	$LN245@GrabShader
	DD	$LN238@GrabShader
	DD	$LN214@GrabShader
	DD	$LN221@GrabShader
$LN287@GrabShader:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	4
	DB	2
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
$LN300@GrabShader:
	DD	$LN187@GrabShader
	DD	$LN184@GrabShader
	DD	$LN179@GrabShader
	DD	$LN160@GrabShader
	DD	$LN166@GrabShader
$LN288@GrabShader:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	4
	DB	2
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z$50:
	push	OFFSET ??1?$CEffectVector@USRange@D3DX11Effects@@@@QAE@XZ ; CEffectVector<D3DX11Effects::SRange>::~CEffectVector<D3DX11Effects::SRange>
	push	5
	push	20					; 00000014H
	lea	eax, DWORD PTR _vRanges$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	ret	0
__unwindfunclet$?GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z$51:
	lea	ecx, DWORD PTR _vTBuffers$[ebp]
	jmp	??1?$CEffectVector@PAUSConstantBuffer@D3DX11Effects@@@@QAE@XZ ; CEffectVector<D3DX11Effects::SConstantBuffer *>::~CEffectVector<D3DX11Effects::SConstantBuffer *>
__unwindfunclet$?GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z$52:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	eax, DWORD PTR $T11[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z$53:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	eax, DWORD PTR $T18[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z$54:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	eax, DWORD PTR $T21[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z$55:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	eax, DWORD PTR $T24[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z$56:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	eax, DWORD PTR $T27[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z$57:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	eax, DWORD PTR $T30[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__ehhandler$?GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-1584]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GrabShaderData@CEffectLoader@D3DX11Effects@@IAEJPAUSShaderBlock@2@@Z ENDP ; D3DX11Effects::CEffectLoader::GrabShaderData
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?UnpackData@CEffectLoader@D3DX11Effects@@IAEIPAE0IPAUSType@2@PAI@Z
_TEXT	SEGMENT
tv69 = -328						; size = 4
tv67 = -328						; size = 4
_bytesToCopy$1 = -128					; size = 4
_br$2 = -116						; size = 4
_elementsToCopy$ = -104					; size = 4
_hr$ = -92						; size = 4
_entries$ = -80						; size = 4
_registers$ = -68					; size = 4
_k$ = -56						; size = 4
_j$ = -44						; size = 4
_i$ = -32						; size = 4
_bytesRead$ = -20					; size = 4
_this$ = -8						; size = 4
_pDestData$ = 8						; size = 4
_pSrcData$ = 12						; size = 4
_PackedDataSize$ = 16					; size = 4
_pType$ = 20						; size = 4
_pBytesRead$ = 24					; size = 4
?UnpackData@CEffectLoader@D3DX11Effects@@IAEIPAE0IPAUSType@2@PAI@Z PROC ; D3DX11Effects::CEffectLoader::UnpackData, COMDAT
; _this$ = ecx

; 1122 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1123 :     UINT  bytesRead = 0;

	mov	DWORD PTR _bytesRead$[ebp], 0

; 1124 :     UINT  i, j, k;
; 1125 :     UINT  registers, entries;
; 1126 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 1127 :     UINT  elementsToCopy = max(pType->Elements, 1);

	mov	eax, DWORD PTR _pType$[ebp]
	cmp	DWORD PTR [eax+8], 1
	jbe	SHORT $LN55@UnpackData
	mov	ecx, DWORD PTR _pType$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv67[ebp], edx
	jmp	SHORT $LN56@UnpackData
$LN55@UnpackData:
	mov	DWORD PTR tv67[ebp], 1
$LN56@UnpackData:
	mov	eax, DWORD PTR tv67[ebp]
	mov	DWORD PTR _elementsToCopy$[ebp], eax

; 1128 : 
; 1129 :     switch (pType->VarType)

	mov	eax, DWORD PTR _pType$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv69[ebp], ecx
	cmp	DWORD PTR tv69[ebp], 1
	je	$LN33@UnpackData
	cmp	DWORD PTR tv69[ebp], 3
	je	SHORT $LN50@UnpackData
	jmp	$LN6@UnpackData
$LN50@UnpackData:

; 1130 :     {
; 1131 :     case EVT_Struct:
; 1132 :         for (i = 0; i < elementsToCopy; ++ i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN49@UnpackData
$LN48@UnpackData:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN49@UnpackData:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _elementsToCopy$[ebp]
	jae	$LN47@UnpackData

; 1133 :         {
; 1134 :             for (j = 0; j < pType->StructType.Members; ++ j)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN46@UnpackData
$LN45@UnpackData:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN46@UnpackData:
	mov	eax, DWORD PTR _pType$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jae	$LN44@UnpackData
$LN43@UnpackData:

; 1135 :             {
; 1136 :                 UINT  br;
; 1137 :                 D3DXASSERT((UINT_PTR)pType->StructType.pMembers[j].pType == (UINT)(UINT_PTR)pType->StructType.pMembers[j].pType);

	imul	eax, DWORD PTR _j$[ebp], 24
	mov	ecx, DWORD PTR _pType$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	imul	ecx, DWORD PTR _j$[ebp], 24
	mov	esi, DWORD PTR _pType$[ebp]
	mov	esi, DWORD PTR [esi+28]
	mov	edx, DWORD PTR [edx+eax+8]
	cmp	edx, DWORD PTR [esi+ecx+8]
	je	SHORT $LN42@UnpackData
	push	OFFSET ??_C@_0GF@KAFJAGGJ@?$CIUINT_PTR?$CJpType?9?$DOStructType?4pMem@
	mov	eax, DWORD PTR ?__LINE__Var@?1??UnpackData@CEffectLoader@D3DX11Effects@@IAEIPAE0IPAUSType@3@PAI@Z@4JA
	add	eax, 15					; 0000000fH
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN42@UnpackData:
	xor	eax, eax
	jne	SHORT $LN43@UnpackData
$LN39@UnpackData:

; 1138 :                 D3DXASSERT(PackedDataSize > bytesRead);                    

	mov	eax, DWORD PTR _PackedDataSize$[ebp]
	cmp	eax, DWORD PTR _bytesRead$[ebp]
	ja	SHORT $LN38@UnpackData
	push	OFFSET ??_C@_0BL@MBHMPHIB@PackedDataSize?5?$DO?5bytesRead?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??UnpackData@CEffectLoader@D3DX11Effects@@IAEIPAE0IPAUSType@3@PAI@Z@4JA
	add	eax, 16					; 00000010H
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN38@UnpackData:
	xor	eax, eax
	jne	SHORT $LN39@UnpackData

; 1139 : 
; 1140 :                 VH( UnpackData(pDestData + pType->StructType.pMembers[j].Data.Offset, 
; 1141 :                     pSrcData + bytesRead, PackedDataSize - bytesRead, 
; 1142 :                     pType->StructType.pMembers[j].pType, &br) );

	lea	eax, DWORD PTR _br$2[ebp]
	push	eax
	imul	ecx, DWORD PTR _j$[ebp], 24
	mov	edx, DWORD PTR _pType$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [eax+ecx+8]
	push	ecx
	mov	edx, DWORD PTR _PackedDataSize$[ebp]
	sub	edx, DWORD PTR _bytesRead$[ebp]
	push	edx
	mov	eax, DWORD PTR _pSrcData$[ebp]
	add	eax, DWORD PTR _bytesRead$[ebp]
	push	eax
	imul	ecx, DWORD PTR _j$[ebp], 24
	mov	edx, DWORD PTR _pType$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	edx, DWORD PTR _pDestData$[ebp]
	add	edx, DWORD PTR [eax+ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UnpackData@CEffectLoader@D3DX11Effects@@IAEIPAE0IPAUSType@2@PAI@Z ; D3DX11Effects::CEffectLoader::UnpackData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN35@UnpackData
	jmp	$lExit$60
	jmp	$lExit$60
$LN35@UnpackData:

; 1143 :                 
; 1144 :                 bytesRead += br;

	mov	eax, DWORD PTR _bytesRead$[ebp]
	add	eax, DWORD PTR _br$2[ebp]
	mov	DWORD PTR _bytesRead$[ebp], eax

; 1145 :             }

	jmp	$LN45@UnpackData
$LN44@UnpackData:

; 1146 :             pDestData += pType->Stride;

	mov	eax, DWORD PTR _pType$[ebp]
	mov	ecx, DWORD PTR _pDestData$[ebp]
	add	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _pDestData$[ebp], ecx

; 1147 :         }

	jmp	$LN48@UnpackData
$LN47@UnpackData:

; 1148 :         break;

	jmp	$lExit$60
$LN33@UnpackData:

; 1149 : 
; 1150 :     case EVT_Numeric:
; 1151 :         if (pType->NumericType.IsPackedArray)

	mov	eax, DWORD PTR _pType$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	shr	ecx, 15					; 0000000fH
	and	ecx, 1
	je	SHORT $LN32@UnpackData
$LN31@UnpackData:

; 1152 :         {
; 1153 :             // No support for packed arrays
; 1154 :             D3DXASSERT(0);

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN30@UnpackData
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??UnpackData@CEffectLoader@D3DX11Effects@@IAEIPAE0IPAUSType@3@PAI@Z@4JA
	add	eax, 32					; 00000020H
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN30@UnpackData:
	xor	eax, eax
	jne	SHORT $LN31@UnpackData

; 1155 :             VHD(E_FAIL, "Internal loading error: packed arrays are not supported." );

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN27@UnpackData
	jmp	$lExit$60
	jmp	$lExit$60
$LN27@UnpackData:

; 1156 :         }
; 1157 :         else

	jmp	$LN25@UnpackData
$LN32@UnpackData:

; 1158 :         {
; 1159 :             UINT  bytesToCopy;
; 1160 : 
; 1161 :             if (pType->NumericType.IsColumnMajor)

	mov	eax, DWORD PTR _pType$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	shr	ecx, 14					; 0000000eH
	and	ecx, 1
	je	$LN24@UnpackData

; 1162 :             {
; 1163 :                 registers = pType->NumericType.Columns;

	mov	eax, DWORD PTR _pType$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	shr	ecx, 11					; 0000000bH
	and	ecx, 7
	mov	DWORD PTR _registers$[ebp], ecx

; 1164 :                 entries = pType->NumericType.Rows;

	mov	eax, DWORD PTR _pType$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	shr	ecx, 8
	and	ecx, 7
	mov	DWORD PTR _entries$[ebp], ecx

; 1165 :                 bytesToCopy = entries * registers * SType::c_ScalarSize;

	mov	eax, DWORD PTR _entries$[ebp]
	imul	eax, DWORD PTR _registers$[ebp]
	shl	eax, 2
	mov	DWORD PTR _bytesToCopy$1[ebp], eax

; 1166 : 
; 1167 :                 for (i = 0; i < elementsToCopy; ++ i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN23@UnpackData
$LN22@UnpackData:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN23@UnpackData:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _elementsToCopy$[ebp]
	jae	SHORT $LN21@UnpackData

; 1168 :                 {
; 1169 :                     for (j = 0; j < registers; ++ j)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN20@UnpackData
$LN19@UnpackData:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN20@UnpackData:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _registers$[ebp]
	jae	SHORT $LN18@UnpackData

; 1170 :                     {
; 1171 :                         for (k = 0; k < entries; ++ k)

	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN17@UnpackData
$LN16@UnpackData:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN17@UnpackData:
	mov	eax, DWORD PTR _k$[ebp]
	cmp	eax, DWORD PTR _entries$[ebp]
	jae	SHORT $LN15@UnpackData

; 1172 :                         {
; 1173 :                             // type cast to an arbitrary scalar
; 1174 :                             ((UINT*)pDestData)[k] = ((UINT*)pSrcData)[k * registers + j];

	mov	eax, DWORD PTR _k$[ebp]
	imul	eax, DWORD PTR _registers$[ebp]
	add	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _pDestData$[ebp]
	mov	esi, DWORD PTR _pSrcData$[ebp]
	mov	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [edx+ecx*4], eax

; 1175 :                         }

	jmp	SHORT $LN16@UnpackData
$LN15@UnpackData:

; 1176 :                         pDestData += SType::c_RegisterSize; // advance to next register

	mov	eax, DWORD PTR _pDestData$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _pDestData$[ebp], eax

; 1177 :                     }

	jmp	SHORT $LN19@UnpackData
$LN18@UnpackData:

; 1178 :                     pSrcData += bytesToCopy;

	mov	eax, DWORD PTR _pSrcData$[ebp]
	add	eax, DWORD PTR _bytesToCopy$1[ebp]
	mov	DWORD PTR _pSrcData$[ebp], eax

; 1179 :                     bytesRead += bytesToCopy;

	mov	eax, DWORD PTR _bytesRead$[ebp]
	add	eax, DWORD PTR _bytesToCopy$1[ebp]
	mov	DWORD PTR _bytesRead$[ebp], eax

; 1180 :                 }

	jmp	SHORT $LN22@UnpackData
$LN21@UnpackData:

; 1181 :             }
; 1182 :             else

	jmp	$LN25@UnpackData
$LN24@UnpackData:

; 1183 :             {
; 1184 :                 registers = pType->NumericType.Rows;

	mov	eax, DWORD PTR _pType$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	shr	ecx, 8
	and	ecx, 7
	mov	DWORD PTR _registers$[ebp], ecx

; 1185 :                 entries = pType->NumericType.Columns;

	mov	eax, DWORD PTR _pType$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	shr	ecx, 11					; 0000000bH
	and	ecx, 7
	mov	DWORD PTR _entries$[ebp], ecx

; 1186 :                 bytesToCopy = entries * SType::c_ScalarSize;

	mov	eax, DWORD PTR _entries$[ebp]
	shl	eax, 2
	mov	DWORD PTR _bytesToCopy$1[ebp], eax

; 1187 : 
; 1188 :                 for (i = 0; i < elementsToCopy; ++ i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@UnpackData
$LN12@UnpackData:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN13@UnpackData:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _elementsToCopy$[ebp]
	jae	SHORT $LN25@UnpackData

; 1189 :                 {
; 1190 :                     for (j = 0; j < registers; ++ j)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN10@UnpackData
$LN9@UnpackData:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN10@UnpackData:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _registers$[ebp]
	jae	SHORT $LN8@UnpackData

; 1191 :                     {
; 1192 :                         memcpy(pDestData, pSrcData, bytesToCopy);

	mov	eax, DWORD PTR _bytesToCopy$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _pSrcData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pDestData$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1193 : 
; 1194 :                         pDestData += SType::c_RegisterSize; // advance to next register

	mov	eax, DWORD PTR _pDestData$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _pDestData$[ebp], eax

; 1195 :                         pSrcData += bytesToCopy;

	mov	eax, DWORD PTR _pSrcData$[ebp]
	add	eax, DWORD PTR _bytesToCopy$1[ebp]
	mov	DWORD PTR _pSrcData$[ebp], eax

; 1196 :                         bytesRead += bytesToCopy;

	mov	eax, DWORD PTR _bytesRead$[ebp]
	add	eax, DWORD PTR _bytesToCopy$1[ebp]
	mov	DWORD PTR _bytesRead$[ebp], eax

; 1197 :                     }

	jmp	SHORT $LN9@UnpackData
$LN8@UnpackData:

; 1198 :                 }

	jmp	SHORT $LN12@UnpackData
$LN25@UnpackData:

; 1199 :             }
; 1200 :         }
; 1201 :         break;

	jmp	SHORT $lExit$60
$LN6@UnpackData:

; 1202 : 
; 1203 :     default:
; 1204 :         // shouldn't be called on non-struct/numeric types
; 1205 :         D3DXASSERT(0);

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN5@UnpackData
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??UnpackData@CEffectLoader@D3DX11Effects@@IAEIPAE0IPAUSType@3@PAI@Z@4JA
	add	eax, 83					; 00000053H
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN5@UnpackData:
	xor	eax, eax
	jne	SHORT $LN6@UnpackData

; 1206 :         VHD(E_FAIL, "Internal loading error: UnpackData should not be called on non-struct, non-numeric types." );

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
$lExit$60:

; 1207 :     }  
; 1208 : 
; 1209 : lExit:
; 1210 :     *pBytesRead = bytesRead;

	mov	eax, DWORD PTR _pBytesRead$[ebp]
	mov	ecx, DWORD PTR _bytesRead$[ebp]
	mov	DWORD PTR [eax], ecx

; 1211 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 1212 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN59@UnpackData
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	1
$LN59@UnpackData:
	DD	1
	DD	$LN58@UnpackData
$LN58@UnpackData:
	DD	-116					; ffffff8cH
	DD	4
	DD	$LN57@UnpackData
$LN57@UnpackData:
	DB	98					; 00000062H
	DB	114					; 00000072H
	DB	0
?UnpackData@CEffectLoader@D3DX11Effects@@IAEIPAE0IPAUSType@2@PAI@Z ENDP ; D3DX11Effects::CEffectLoader::UnpackData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?ExecuteConstantAssignment@CEffectLoader@D3DX11Effects@@IAEJPAUSBinaryConstant@2@PAXW4_D3D_SHADER_VARIABLE_TYPE@@@Z
_TEXT	SEGMENT
tv74 = -220						; size = 4
tv66 = -220						; size = 4
tv65 = -220						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_pConstant$ = 8						; size = 4
_pLHS$ = 12						; size = 4
_lhsType$ = 16						; size = 4
?ExecuteConstantAssignment@CEffectLoader@D3DX11Effects@@IAEJPAUSBinaryConstant@2@PAXW4_D3D_SHADER_VARIABLE_TYPE@@@Z PROC ; D3DX11Effects::CEffectLoader::ExecuteConstantAssignment, COMDAT
; _this$ = ecx

; 1341 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1342 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 1343 : 
; 1344 :     switch(pConstant->Type)

	mov	eax, DWORD PTR _pConstant$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 1
	je	$LN12@ExecuteCon
	cmp	DWORD PTR tv65[ebp], 1
	jle	$LN3@ExecuteCon
	cmp	DWORD PTR tv65[ebp], 4
	jle	SHORT $LN21@ExecuteCon
	jmp	$LN3@ExecuteCon
$LN21@ExecuteCon:

; 1345 :     {
; 1346 :     case EST_UInt:
; 1347 :     case EST_Int:
; 1348 :     case EST_Bool:
; 1349 :         switch(lhsType)

	mov	eax, DWORD PTR _lhsType$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR tv66[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv66[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 19			; 00000013H
	ja	SHORT $LN15@ExecuteCon
	mov	edx, DWORD PTR tv66[ebp]
	movzx	eax, BYTE PTR $LN26@ExecuteCon[edx]
	jmp	DWORD PTR $LN28@ExecuteCon[eax*4]
$LN18@ExecuteCon:

; 1350 :         {
; 1351 :         case D3D10_SVT_BOOL:
; 1352 :         case D3D10_SVT_INT:
; 1353 :         case D3D10_SVT_UINT:
; 1354 :             *(UINT*) pLHS = pConstant->iValue;

	mov	eax, DWORD PTR _pLHS$[ebp]
	mov	ecx, DWORD PTR _pConstant$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 1355 :             break;

	jmp	SHORT $LN19@ExecuteCon
$LN17@ExecuteCon:

; 1356 : 
; 1357 :         case D3D10_SVT_UINT8:
; 1358 :             *(BYTE*) pLHS = (BYTE) pConstant->iValue;

	mov	eax, DWORD PTR _pLHS$[ebp]
	mov	ecx, DWORD PTR _pConstant$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax], dl

; 1359 :             break;

	jmp	SHORT $LN19@ExecuteCon
$LN16@ExecuteCon:

; 1360 : 
; 1361 :         case D3D10_SVT_FLOAT:
; 1362 :             *(float*) pLHS = (float) pConstant->iValue;

	mov	eax, DWORD PTR _pConstant$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _pLHS$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1363 :             break;

	jmp	SHORT $LN19@ExecuteCon
$LN15@ExecuteCon:

; 1364 : 
; 1365 :         default:
; 1366 :             VHD( E_FAIL, "Internal loading error: invalid left-hand assignment type." );

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN14@ExecuteCon
	jmp	$LN13@ExecuteCon
	jmp	$lExit$30
$LN14@ExecuteCon:
$LN19@ExecuteCon:

; 1367 :         }
; 1368 :         break;

	jmp	SHORT $LN22@ExecuteCon
$LN12@ExecuteCon:

; 1369 : 
; 1370 :     case EST_Float:
; 1371 :         switch(lhsType)

	mov	eax, DWORD PTR _lhsType$[ebp]
	mov	DWORD PTR tv74[ebp], eax
	mov	ecx, DWORD PTR tv74[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv74[ebp], ecx
	cmp	DWORD PTR tv74[ebp], 19			; 00000013H
	ja	SHORT $LN6@ExecuteCon
	mov	edx, DWORD PTR tv74[ebp]
	movzx	eax, BYTE PTR $LN27@ExecuteCon[edx]
	jmp	DWORD PTR $LN29@ExecuteCon[eax*4]
$LN9@ExecuteCon:

; 1372 :         {
; 1373 :         case D3D10_SVT_BOOL:
; 1374 :         case D3D10_SVT_INT:
; 1375 :         case D3D10_SVT_UINT:
; 1376 :             *(UINT*) pLHS = (UINT) pConstant->fValue;

	mov	eax, DWORD PTR _pConstant$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	call	__ftoui3
	mov	ecx, DWORD PTR _pLHS$[ebp]
	mov	DWORD PTR [ecx], eax

; 1377 :             break;

	jmp	SHORT $LN10@ExecuteCon
$LN8@ExecuteCon:

; 1378 : 
; 1379 :         case D3D10_SVT_UINT8:
; 1380 :             *(BYTE*) pLHS = (BYTE) pConstant->fValue;

	mov	eax, DWORD PTR _pConstant$[ebp]
	cvttss2si ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _pLHS$[ebp]
	mov	BYTE PTR [edx], cl

; 1381 :             break;

	jmp	SHORT $LN10@ExecuteCon
$LN7@ExecuteCon:

; 1382 : 
; 1383 :         case D3D10_SVT_FLOAT:
; 1384 :             *(float*) pLHS = pConstant->fValue;

	mov	eax, DWORD PTR _pLHS$[ebp]
	mov	ecx, DWORD PTR _pConstant$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 1385 :             break;

	jmp	SHORT $LN10@ExecuteCon
$LN6@ExecuteCon:

; 1386 : 
; 1387 :         default:
; 1388 :             VHD( E_FAIL, "Internal loading error: invalid left-hand assignment type." );

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN5@ExecuteCon
	jmp	SHORT $LN4@ExecuteCon
	jmp	SHORT $lExit$30
$LN5@ExecuteCon:
$LN10@ExecuteCon:

; 1389 :         }
; 1390 :         break;

	jmp	SHORT $LN22@ExecuteCon
$LN3@ExecuteCon:

; 1391 : 
; 1392 :     default:
; 1393 :         VHD( E_FAIL, "Internal loading error: invalid left-hand assignment type." );

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
$LN22@ExecuteCon:
$LN4@ExecuteCon:
$LN13@ExecuteCon:
$lExit$30:

; 1394 :     }
; 1395 : 
; 1396 : lExit:
; 1397 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 1398 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN28@ExecuteCon:
	DD	$LN18@ExecuteCon
	DD	$LN16@ExecuteCon
	DD	$LN17@ExecuteCon
	DD	$LN15@ExecuteCon
$LN26@ExecuteCon:
	DB	0
	DB	0
	DB	1
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	0
	DB	2
$LN29@ExecuteCon:
	DD	$LN9@ExecuteCon
	DD	$LN7@ExecuteCon
	DD	$LN8@ExecuteCon
	DD	$LN6@ExecuteCon
$LN27@ExecuteCon:
	DB	0
	DB	0
	DB	1
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	0
	DB	2
?ExecuteConstantAssignment@CEffectLoader@D3DX11Effects@@IAEJPAUSBinaryConstant@2@PAXW4_D3D_SHADER_VARIABLE_TYPE@@@Z ENDP ; D3DX11Effects::CEffectLoader::ExecuteConstantAssignment
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?LoadAnnotations@CEffectLoader@D3DX11Effects@@IAEJPAIPAPAUSAnnotation@2@@Z
_TEXT	SEGMENT
tv193 = -496						; size = 4
tv168 = -496						; size = 4
$T2 = -488						; size = 8
$T3 = -472						; size = 8
$T4 = -456						; size = 4
$T5 = -444						; size = 4
$T6 = -432						; size = 4
$T7 = -420						; size = 4
$T8 = -408						; size = 4
$T9 = -396						; size = 4
_bytesUnpacked$10 = -192				; size = 4
_pDefaultValue$11 = -180				; size = 4
_j$12 = -168						; size = 4
_cElements$13 = -156					; size = 4
_pType$14 = -144					; size = 4
_pAn$15 = -132						; size = 4
_psAnnotation$16 = -120					; size = 4
_chkAnnotationsSize$17 = -108				; size = 8
_annotationsSize$18 = -92				; size = 4
_pAnnotations$ = -80					; size = 4
_oData$ = -68						; size = 4
_i$ = -56						; size = 4
_cAnnotations$ = -44					; size = 4
_hr$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pcAnnotations$ = 8					; size = 4
_ppAnnotations$ = 12					; size = 4
?LoadAnnotations@CEffectLoader@D3DX11Effects@@IAEJPAIPAPAUSAnnotation@2@@Z PROC ; D3DX11Effects::CEffectLoader::LoadAnnotations, COMDAT
; _this$ = ecx

; 2412 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LoadAnnotations@CEffectLoader@D3DX11Effects@@IAEJPAIPAPAUSAnnotation@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 484				; 000001e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-496]
	mov	ecx, 121				; 00000079H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2413 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 2414 :     UINT  cAnnotations, i, oData;
; 2415 :     SAnnotation *pAnnotations = NULL;

	mov	DWORD PTR _pAnnotations$[ebp], 0

; 2416 : 
; 2417 :     VHD( m_msStructured.Read(&cAnnotations), "Invalid pEffectBuffer: cannot read anootation count." );

	lea	eax, DWORD PTR _cAnnotations$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAI@Z ; D3DX11Core::CMemoryStream::Read
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN45@LoadAnnota
	jmp	$lExit$64
$LN45@LoadAnnota:

; 2418 : 
; 2419 :     if (cAnnotations)

	cmp	DWORD PTR _cAnnotations$[ebp], 0
	je	$LN43@LoadAnnota

; 2420 :     {
; 2421 :         UINT  annotationsSize;
; 2422 :         CCheckedDword chkAnnotationsSize;

	lea	ecx, DWORD PTR _chkAnnotationsSize$17[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@XZ	; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>

; 2423 : 
; 2424 :         chkAnnotationsSize = cAnnotations;

	lea	eax, DWORD PTR _cAnnotations$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR _chkAnnotationsSize$17[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp+4]
	mov	DWORD PTR _chkAnnotationsSize$17[ebp+4], edx

; 2425 :         chkAnnotationsSize *= sizeof(SAnnotation);

	mov	DWORD PTR $T4[ebp], 32			; 00000020H
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	lea	ecx, DWORD PTR _chkAnnotationsSize$17[ebp]
	call	??X?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z ; CheckedNumber<unsigned int,4294967295>::operator*=

; 2426 :         VHD( chkAnnotationsSize.GetValue(&annotationsSize), "Overflow in annotations."  );

	lea	eax, DWORD PTR _annotationsSize$18[ebp]
	push	eax
	lea	ecx, DWORD PTR _chkAnnotationsSize$17[ebp]
	call	?GetValue@?$CheckedNumber@I$0PPPPPPPP@@@QAEJPAI@Z ; CheckedNumber<unsigned int,4294967295>::GetValue
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN42@LoadAnnota
	jmp	$lExit$64
$LN42@LoadAnnota:

; 2427 :         
; 2428 :         // we allocate raw bytes for annotations because they are polymorphic types that need to be placement new'ed
; 2429 :         VN( pAnnotations = (SAnnotation *) PRIVATENEW BYTE[annotationsSize] );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _annotationsSize$18[ebp]
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T5[ebp], eax
	mov	edx, DWORD PTR $T5[ebp]
	mov	DWORD PTR _pAnnotations$[ebp], edx
	cmp	DWORD PTR _pAnnotations$[ebp], 0
	jne	SHORT $LN40@LoadAnnota
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$64
$LN40@LoadAnnota:

; 2430 :         
; 2431 :         for (i=0; i<cAnnotations; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN38@LoadAnnota
$LN37@LoadAnnota:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN38@LoadAnnota:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _cAnnotations$[ebp]
	jae	$LN43@LoadAnnota

; 2432 :         {
; 2433 :             SBinaryAnnotation *psAnnotation;
; 2434 :             SAnnotation *pAn = &pAnnotations[i];

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 5
	add	eax, DWORD PTR _pAnnotations$[ebp]
	mov	DWORD PTR _pAn$15[ebp], eax

; 2435 :             SType *pType;
; 2436 : 
; 2437 :             VHD( m_msStructured.Read((void**) &psAnnotation, sizeof(SBinaryAnnotation)), "Invalid pEffectBuffer: cannot read annotation."  );

	push	8
	lea	eax, DWORD PTR _psAnnotation$16[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAPAXK@Z ; D3DX11Core::CMemoryStream::Read
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN35@LoadAnnota
	jmp	$lExit$64
$LN35@LoadAnnota:

; 2438 : 
; 2439 :             VH( LoadTypeAndAddToPool(&pType, psAnnotation->oType) );

	mov	eax, DWORD PTR _psAnnotation$16[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR _pType$14[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadTypeAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPAUSType@2@I@Z ; D3DX11Effects::CEffectLoader::LoadTypeAndAddToPool
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN33@LoadAnnota
	jmp	$lExit$64
$LN33@LoadAnnota:

; 2440 : 
; 2441 :             // Make sure the right polymorphic type is created
; 2442 :             VH( PlacementNewVariable(pAn, pType, TRUE) );

	push	1
	mov	eax, DWORD PTR _pType$14[ebp]
	push	eax
	mov	ecx, DWORD PTR _pAn$15[ebp]
	push	ecx
	call	?PlacementNewVariable@D3DX11Effects@@YAJPAXPAUSType@1@H@Z ; D3DX11Effects::PlacementNewVariable
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN31@LoadAnnota
	jmp	$lExit$64
$LN31@LoadAnnota:

; 2443 : 
; 2444 :             pAn->pEffect = m_pEffect;

	mov	eax, DWORD PTR _pAn$15[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+28], edx

; 2445 :             pAn->pType = pType;

	mov	eax, DWORD PTR _pAn$15[ebp]
	mov	ecx, DWORD PTR _pType$14[ebp]
	mov	DWORD PTR [eax+12], ecx

; 2446 : 
; 2447 :             VHD( GetStringAndAddToReflection(psAnnotation->oName, &pAn->pName), "Invalid pEffectBuffer: cannot read annotation name."  );

	mov	eax, DWORD PTR _pAn$15[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _psAnnotation$16[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStringAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIPAPAD@Z ; D3DX11Effects::CEffectLoader::GetStringAndAddToReflection
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN29@LoadAnnota
	jmp	$lExit$64
$LN29@LoadAnnota:

; 2448 : 
; 2449 :             if (pType->IsObjectType(EOT_String))

	push	1
	mov	ecx, DWORD PTR _pType$14[ebp]
	call	?IsObjectType@SType@D3DX11Effects@@QBEHW4EObjectType@2@@Z ; D3DX11Effects::SType::IsObjectType
	test	eax, eax
	je	$LN27@LoadAnnota

; 2450 :             {
; 2451 :                 UINT  cElements = max(1, pType->Elements);

	mov	eax, DWORD PTR _pType$14[ebp]
	cmp	DWORD PTR [eax+8], 1
	jae	SHORT $LN48@LoadAnnota
	mov	DWORD PTR tv168[ebp], 1
	jmp	SHORT $LN49@LoadAnnota
$LN48@LoadAnnota:
	mov	ecx, DWORD PTR _pType$14[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv168[ebp], edx
$LN49@LoadAnnota:
	mov	eax, DWORD PTR tv168[ebp]
	mov	DWORD PTR _cElements$13[ebp], eax

; 2452 :                 UINT  j;
; 2453 :                 VN( pAn->Data.pString = PRIVATENEW SString[cElements] );

	mov	eax, DWORD PTR _cElements$13[ebp]
	mov	DWORD PTR $T6[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T6[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN50@LoadAnnota
	push	OFFSET ??0SString@D3DX11Effects@@QAE@XZ	; D3DX11Effects::SString::SString
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR $T8[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T8[ebp]
	mov	DWORD PTR tv193[ebp], edx
	jmp	SHORT $LN51@LoadAnnota
$LN50@LoadAnnota:
	mov	DWORD PTR tv193[ebp], 0
$LN51@LoadAnnota:
	mov	eax, DWORD PTR tv193[ebp]
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _pAn$15[ebp]
	mov	edx, DWORD PTR $T7[ebp]
	mov	DWORD PTR [ecx+4], edx
	cmp	DWORD PTR $T7[ebp], 0
	jne	SHORT $LN26@LoadAnnota
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$64
$LN26@LoadAnnota:

; 2454 :                 for (j = 0; j < cElements; ++ j)

	mov	DWORD PTR _j$12[ebp], 0
	jmp	SHORT $LN24@LoadAnnota
$LN23@LoadAnnota:
	mov	eax, DWORD PTR _j$12[ebp]
	add	eax, 1
	mov	DWORD PTR _j$12[ebp], eax
$LN24@LoadAnnota:
	mov	eax, DWORD PTR _j$12[ebp]
	cmp	eax, DWORD PTR _cElements$13[ebp]
	jae	SHORT $LN22@LoadAnnota

; 2455 :                 {
; 2456 :                     // Read initializer offset
; 2457 :                     VHD( m_msStructured.Read(&oData), "Invalid pEffectBuffer: cannot read string."  );

	lea	eax, DWORD PTR _oData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAI@Z ; D3DX11Core::CMemoryStream::Read
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN21@LoadAnnota
	jmp	$lExit$64
$LN21@LoadAnnota:

; 2458 :                     VHD( GetStringAndAddToReflection(oData, &pAn->Data.pString[j].pString), "Invalid pEffectBuffer: cannot read string initializer."  );

	mov	eax, DWORD PTR _pAn$15[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _j$12[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _oData$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStringAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIPAPAD@Z ; D3DX11Effects::CEffectLoader::GetStringAndAddToReflection
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN19@LoadAnnota
	jmp	$lExit$64
$LN19@LoadAnnota:

; 2459 :                 }

	jmp	SHORT $LN23@LoadAnnota
$LN22@LoadAnnota:

; 2460 :             }
; 2461 :             else if (pType->BelongsInConstantBuffer())

	jmp	$LN17@LoadAnnota
$LN27@LoadAnnota:
	mov	ecx, DWORD PTR _pType$14[ebp]
	call	?BelongsInConstantBuffer@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::BelongsInConstantBuffer
	test	eax, eax
	je	$LN16@LoadAnnota

; 2462 :             {
; 2463 :                 void *pDefaultValue;
; 2464 :                 UINT  bytesUnpacked;
; 2465 :                 
; 2466 :                 // Read initializer offset
; 2467 :                 VHD( m_msStructured.Read(&oData), "Invalid pEffectBuffer: cannot read annotation."  );

	lea	eax, DWORD PTR _oData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAI@Z ; D3DX11Core::CMemoryStream::Read
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN15@LoadAnnota
	jmp	$lExit$64
$LN15@LoadAnnota:

; 2468 : 
; 2469 :                 VBD( oData != 0, "Invalid pEffectBuffer: invalid anotation offset." );

	cmp	DWORD PTR _oData$[ebp], 0
	jne	SHORT $LN13@LoadAnnota
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$64
$LN13@LoadAnnota:

; 2470 : 
; 2471 :                 VN( pAn->Data.pGeneric = PRIVATENEW BYTE[pType->TotalSize] );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pType$14[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T9[ebp], eax
	mov	eax, DWORD PTR _pAn$15[ebp]
	mov	ecx, DWORD PTR $T9[ebp]
	mov	DWORD PTR [eax+4], ecx
	cmp	DWORD PTR $T9[ebp], 0
	jne	SHORT $LN11@LoadAnnota
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$64
$LN11@LoadAnnota:

; 2472 :                 ZeroMemory(pAn->Data.pGeneric, pType->TotalSize);

	mov	eax, DWORD PTR _pType$14[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	push	0
	mov	edx, DWORD PTR _pAn$15[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 2473 :                 VHD( m_msUnstructured.ReadAtOffset(oData, pType->PackedSize, &pDefaultValue), "Invalid pEffectBuffer: cannot read variable default value."  );

	lea	eax, DWORD PTR _pDefaultValue$11[ebp]
	push	eax
	mov	ecx, DWORD PTR _pType$14[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _oData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?ReadAtOffset@CMemoryStream@D3DX11Core@@QAEJKKPAPAX@Z ; D3DX11Core::CMemoryStream::ReadAtOffset
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN9@LoadAnnota
	jmp	SHORT $lExit$64
$LN9@LoadAnnota:

; 2474 :                 VH( UnpackData((BYTE*) pAn->Data.pGeneric, (BYTE*) pDefaultValue, pType->PackedSize, pType, &bytesUnpacked) );

	lea	eax, DWORD PTR _bytesUnpacked$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _pType$14[ebp]
	push	ecx
	mov	edx, DWORD PTR _pType$14[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _pDefaultValue$11[ebp]
	push	ecx
	mov	edx, DWORD PTR _pAn$15[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UnpackData@CEffectLoader@D3DX11Effects@@IAEIPAE0IPAUSType@2@PAI@Z ; D3DX11Effects::CEffectLoader::UnpackData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN7@LoadAnnota
	jmp	SHORT $lExit$64
$LN7@LoadAnnota:

; 2475 :                 VBD( bytesUnpacked == pType->PackedSize, "Invalid pEffectBuffer: packed sizes to not match." );

	mov	eax, DWORD PTR _pType$14[ebp]
	mov	ecx, DWORD PTR _bytesUnpacked$10[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	je	SHORT $LN5@LoadAnnota
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $lExit$64
$LN5@LoadAnnota:

; 2476 :             }
; 2477 :             else

	jmp	SHORT $LN17@LoadAnnota
$LN16@LoadAnnota:

; 2478 :             {
; 2479 :                 VHD( E_FAIL, "Invalid pEffectBuffer: invalid annotation type." );

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN17@LoadAnnota
	jmp	SHORT $lExit$64
$LN17@LoadAnnota:

; 2480 :             }
; 2481 :         }

	jmp	$LN37@LoadAnnota
$LN43@LoadAnnota:

; 2482 :     }
; 2483 : 
; 2484 :     *pcAnnotations = cAnnotations;

	mov	eax, DWORD PTR _pcAnnotations$[ebp]
	mov	ecx, DWORD PTR _cAnnotations$[ebp]
	mov	DWORD PTR [eax], ecx

; 2485 :     *ppAnnotations = pAnnotations;

	mov	eax, DWORD PTR _ppAnnotations$[ebp]
	mov	ecx, DWORD PTR _pAnnotations$[ebp]
	mov	DWORD PTR [eax], ecx
$lExit$64:

; 2486 : lExit:
; 2487 : 
; 2488 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 2489 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN63@LoadAnnota
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 496				; 000001f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN63@LoadAnnota:
	DD	8
	DD	$LN62@LoadAnnota
$LN62@LoadAnnota:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN53@LoadAnnota
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN54@LoadAnnota
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN55@LoadAnnota
	DD	-108					; ffffff94H
	DD	8
	DD	$LN56@LoadAnnota
	DD	-120					; ffffff88H
	DD	4
	DD	$LN57@LoadAnnota
	DD	-144					; ffffff70H
	DD	4
	DD	$LN58@LoadAnnota
	DD	-180					; ffffff4cH
	DD	4
	DD	$LN59@LoadAnnota
	DD	-192					; ffffff40H
	DD	4
	DD	$LN60@LoadAnnota
$LN60@LoadAnnota:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	85					; 00000055H
	DB	110					; 0000006eH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN59@LoadAnnota:
	DB	112					; 00000070H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN58@LoadAnnota:
	DB	112					; 00000070H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN57@LoadAnnota:
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	65					; 00000041H
	DB	110					; 0000006eH
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN56@LoadAnnota:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	107					; 0000006bH
	DB	65					; 00000041H
	DB	110					; 0000006eH
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN55@LoadAnnota:
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN54@LoadAnnota:
	DB	111					; 0000006fH
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN53@LoadAnnota:
	DB	99					; 00000063H
	DB	65					; 00000041H
	DB	110					; 0000006eH
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadAnnotations@CEffectLoader@D3DX11Effects@@IAEJPAIPAPAUSAnnotation@2@@Z$17:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__ehhandler$?LoadAnnotations@CEffectLoader@D3DX11Effects@@IAEJPAIPAPAUSAnnotation@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-500]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LoadAnnotations@CEffectLoader@D3DX11Effects@@IAEJPAIPAPAUSAnnotation@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LoadAnnotations@CEffectLoader@D3DX11Effects@@IAEJPAIPAPAUSAnnotation@2@@Z ENDP ; D3DX11Effects::CEffectLoader::LoadAnnotations
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?LoadTechnique@CEffectLoader@D3DX11Effects@@IAEJPAUSTechnique@2@@Z
_TEXT	SEGMENT
tv92 = -316						; size = 4
$T2 = -308						; size = 4
$T3 = -296						; size = 4
$T4 = -284						; size = 4
_pPass$5 = -80						; size = 4
_psPass$6 = -68						; size = 4
_psTech$ = -56						; size = 4
_iPass$ = -44						; size = 4
_hr$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pTech$ = 8						; size = 4
?LoadTechnique@CEffectLoader@D3DX11Effects@@IAEJPAUSTechnique@2@@Z PROC ; D3DX11Effects::CEffectLoader::LoadTechnique, COMDAT
; _this$ = ecx

; 2370 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LoadTechnique@CEffectLoader@D3DX11Effects@@IAEJPAUSTechnique@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2371 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 2372 :     UINT  iPass;
; 2373 : 
; 2374 :     SBinaryTechnique *psTech;
; 2375 : 
; 2376 :     // Read technique info
; 2377 :     VHD( m_msStructured.Read((void**) &psTech, sizeof(*psTech)), "Invalid pEffectBuffer: cannot read technique." );

	push	8
	lea	eax, DWORD PTR _psTech$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAPAXK@Z ; D3DX11Core::CMemoryStream::Read
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN21@LoadTechni
	jmp	$lExit$32
$LN21@LoadTechni:

; 2378 :     pTech->PassCount = psTech->cPasses;

	mov	eax, DWORD PTR _pTech$[ebp]
	mov	ecx, DWORD PTR _psTech$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx

; 2379 :     VN( pTech->pPasses = PRIVATENEW SPassBlock[pTech->PassCount] );

	mov	eax, DWORD PTR _pTech$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T2[ebp]
	mov	edx, 156				; 0000009cH
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN24@LoadTechni
	push	OFFSET ??0SPassBlock@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SPassBlock::SPassBlock
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	push	156					; 0000009cH
	mov	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR tv92[ebp], edx
	jmp	SHORT $LN25@LoadTechni
$LN24@LoadTechni:
	mov	DWORD PTR tv92[ebp], 0
$LN25@LoadTechni:
	mov	eax, DWORD PTR tv92[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _pTech$[ebp]
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx+12], edx
	cmp	DWORD PTR $T3[ebp], 0
	jne	SHORT $LN19@LoadTechni
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$32
$LN19@LoadTechni:

; 2380 :     VHD( GetStringAndAddToReflection(psTech->oName, &pTech->pName), "Invalid pEffectBuffer: cannot read technique name." );

	mov	eax, DWORD PTR _pTech$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _psTech$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStringAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIPAPAD@Z ; D3DX11Effects::CEffectLoader::GetStringAndAddToReflection
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN17@LoadTechni
	jmp	$lExit$32
$LN17@LoadTechni:

; 2381 : 
; 2382 :     // Read annotations
; 2383 :     VH( LoadAnnotations(&pTech->AnnotationCount, &pTech->pAnnotations) );

	mov	eax, DWORD PTR _pTech$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _pTech$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadAnnotations@CEffectLoader@D3DX11Effects@@IAEJPAIPAPAUSAnnotation@2@@Z ; D3DX11Effects::CEffectLoader::LoadAnnotations
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN15@LoadTechni
	jmp	$lExit$32
$LN15@LoadTechni:

; 2384 : 
; 2385 :     for (iPass=0; iPass<psTech->cPasses; iPass++)

	mov	DWORD PTR _iPass$[ebp], 0
	jmp	SHORT $LN13@LoadTechni
$LN12@LoadTechni:
	mov	eax, DWORD PTR _iPass$[ebp]
	add	eax, 1
	mov	DWORD PTR _iPass$[ebp], eax
$LN13@LoadTechni:
	mov	eax, DWORD PTR _psTech$[ebp]
	mov	ecx, DWORD PTR _iPass$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	$lExit$32

; 2386 :     {
; 2387 :         SBinaryPass *psPass;
; 2388 :         SPassBlock *pPass = &pTech->pPasses[iPass];

	imul	eax, DWORD PTR _iPass$[ebp], 156
	mov	ecx, DWORD PTR _pTech$[ebp]
	add	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _pPass$5[ebp], eax

; 2389 : 
; 2390 :         // Read pass info
; 2391 :         VHD( m_msStructured.Read((void**) &psPass, sizeof(SBinaryPass)), "Invalid pEffectBuffer: cannot read pass." );

	push	8
	lea	eax, DWORD PTR _psPass$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAPAXK@Z ; D3DX11Core::CMemoryStream::Read
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN10@LoadTechni
	jmp	$lExit$32
$LN10@LoadTechni:

; 2392 :         VHD( GetStringAndAddToReflection(psPass->oName, &pPass->pName), "Invalid pEffectBuffer: cannot read pass name." );

	mov	eax, DWORD PTR _pPass$5[ebp]
	add	eax, 132				; 00000084H
	push	eax
	mov	ecx, DWORD PTR _psPass$6[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStringAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIPAPAD@Z ; D3DX11Effects::CEffectLoader::GetStringAndAddToReflection
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN8@LoadTechni
	jmp	$lExit$32
$LN8@LoadTechni:

; 2393 :         
; 2394 :         // Read annotations
; 2395 :         VH( LoadAnnotations(&pPass->AnnotationCount, &pPass->pAnnotations) );

	mov	eax, DWORD PTR _pPass$5[ebp]
	add	eax, 140				; 0000008cH
	push	eax
	mov	ecx, DWORD PTR _pPass$5[ebp]
	add	ecx, 136				; 00000088H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadAnnotations@CEffectLoader@D3DX11Effects@@IAEJPAIPAPAUSAnnotation@2@@Z ; D3DX11Effects::CEffectLoader::LoadAnnotations
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN6@LoadTechni
	jmp	SHORT $lExit$32
$LN6@LoadTechni:

; 2396 : 
; 2397 :         VH( LoadAssignments( psPass->cAssignments, &pPass->pAssignments, (BYTE*)pPass, &pPass->BackingStore.RenderTargetViewCount, &pPass->AssignmentCount ) );

	mov	eax, DWORD PTR _pPass$5[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _pPass$5[ebp]
	add	ecx, 68					; 00000044H
	push	ecx
	mov	edx, DWORD PTR _pPass$5[ebp]
	push	edx
	mov	eax, DWORD PTR _pPass$5[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _psPass$6[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@2@PAEPAI2@Z ; D3DX11Effects::CEffectLoader::LoadAssignments
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN4@LoadTechni
	jmp	SHORT $lExit$32
$LN4@LoadTechni:

; 2398 :         VBD( pPass->BackingStore.RenderTargetViewCount <= D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT, "Invalid pEffectBuffer: too many RTVs in pass." );

	mov	eax, DWORD PTR _pPass$5[ebp]
	cmp	DWORD PTR [eax+68], 8
	jbe	SHORT $LN2@LoadTechni
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $lExit$32
$LN2@LoadTechni:

; 2399 : 
; 2400 :         // Initialize other pass information
; 2401 :         pPass->pEffect = m_pEffect;

	mov	eax, DWORD PTR _pPass$5[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+144], edx

; 2402 :         pPass->BlockType = EBT_Pass;

	mov	eax, DWORD PTR _pPass$5[ebp]
	mov	DWORD PTR [eax+4], 5

; 2403 :     }

	jmp	$LN12@LoadTechni
$lExit$32:

; 2404 : 
; 2405 : lExit:
; 2406 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 2407 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@LoadTechni
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN31@LoadTechni:
	DD	2
	DD	$LN30@LoadTechni
$LN30@LoadTechni:
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN27@LoadTechni
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN28@LoadTechni
$LN28@LoadTechni:
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	0
$LN27@LoadTechni:
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadTechnique@CEffectLoader@D3DX11Effects@@IAEJPAUSTechnique@2@@Z$9:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__ehhandler$?LoadTechnique@CEffectLoader@D3DX11Effects@@IAEJPAUSTechnique@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-320]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LoadTechnique@CEffectLoader@D3DX11Effects@@IAEJPAUSTechnique@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LoadTechnique@CEffectLoader@D3DX11Effects@@IAEJPAUSTechnique@2@@Z ENDP ; D3DX11Effects::CEffectLoader::LoadTechnique
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?LoadGroups@CEffectLoader@D3DX11Effects@@IAEJXZ
_TEXT	SEGMENT
tv132 = -328						; size = 4
$T2 = -320						; size = 4
$T3 = -308						; size = 4
$T4 = -296						; size = 4
_iTechnique$5 = -92					; size = 4
_psGroup$6 = -80					; size = 4
_pGroup$7 = -68						; size = 4
_TechniquesInEffect$ = -56				; size = 4
_iGroup$ = -44						; size = 4
_hr$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?LoadGroups@CEffectLoader@D3DX11Effects@@IAEJXZ PROC	; D3DX11Effects::CEffectLoader::LoadGroups, COMDAT
; _this$ = ecx

; 2326 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LoadGroups@CEffectLoader@D3DX11Effects@@IAEJXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2327 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 2328 :     UINT iGroup;
; 2329 :     UINT TechniquesInEffect = 0;

	mov	DWORD PTR _TechniquesInEffect$[ebp], 0

; 2330 : 
; 2331 :     for( iGroup=0; iGroup<m_pHeader->cGroups; iGroup++ )

	mov	DWORD PTR _iGroup$[ebp], 0
	jmp	SHORT $LN21@LoadGroups
$LN20@LoadGroups:
	mov	eax, DWORD PTR _iGroup$[ebp]
	add	eax, 1
	mov	DWORD PTR _iGroup$[ebp], eax
$LN21@LoadGroups:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _iGroup$[ebp]
	cmp	edx, DWORD PTR [ecx+76]
	jae	$LN19@LoadGroups

; 2332 :     {
; 2333 :         SGroup *pGroup = &m_pEffect->m_pGroups[iGroup];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _iGroup$[ebp]
	shl	edx, 5
	add	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _pGroup$7[ebp], edx

; 2334 :         SBinaryGroup *psGroup;
; 2335 : 
; 2336 :         // Read group info
; 2337 :         VHD( m_msStructured.Read((void**) &psGroup, sizeof(*psGroup)), "Invalid pEffectBuffer: cannot read group." );

	push	8
	lea	eax, DWORD PTR _psGroup$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAPAXK@Z ; D3DX11Core::CMemoryStream::Read
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN18@LoadGroups
	jmp	$lExit$31
$LN18@LoadGroups:

; 2338 :         pGroup->TechniqueCount = psGroup->cTechniques;

	mov	eax, DWORD PTR _pGroup$7[ebp]
	mov	ecx, DWORD PTR _psGroup$6[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx

; 2339 :         VN( pGroup->pTechniques = PRIVATENEW STechnique[pGroup->TechniqueCount] );

	mov	eax, DWORD PTR _pGroup$7[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T2[ebp]
	mov	edx, 32					; 00000020H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN24@LoadGroups
	push	OFFSET ??0STechnique@D3DX11Effects@@QAE@XZ ; D3DX11Effects::STechnique::STechnique
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR tv132[ebp], edx
	jmp	SHORT $LN25@LoadGroups
$LN24@LoadGroups:
	mov	DWORD PTR tv132[ebp], 0
$LN25@LoadGroups:
	mov	eax, DWORD PTR tv132[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _pGroup$7[ebp]
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx+12], edx
	cmp	DWORD PTR $T3[ebp], 0
	jne	SHORT $LN16@LoadGroups
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$31
$LN16@LoadGroups:

; 2340 :         VHD( GetStringAndAddToReflection(psGroup->oName, &pGroup->pName), "Invalid pEffectBuffer: cannot read group name." );

	mov	eax, DWORD PTR _pGroup$7[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _psGroup$6[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStringAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIPAPAD@Z ; D3DX11Effects::CEffectLoader::GetStringAndAddToReflection
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN14@LoadGroups
	jmp	$lExit$31
$LN14@LoadGroups:

; 2341 : 
; 2342 :         if( pGroup->pName == NULL )

	mov	eax, DWORD PTR _pGroup$7[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN12@LoadGroups

; 2343 :         {
; 2344 :             VBD( m_pEffect->m_pNullGroup == NULL, "Internal loading error: multiple NULL groups." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+56], 0
	je	SHORT $LN11@LoadGroups
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$31
$LN11@LoadGroups:

; 2345 :             m_pEffect->m_pNullGroup = pGroup;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _pGroup$7[ebp]
	mov	DWORD PTR [ecx+56], edx
$LN12@LoadGroups:

; 2346 :         }
; 2347 : 
; 2348 :         // Read annotations
; 2349 :         VH( LoadAnnotations(&pGroup->AnnotationCount, &pGroup->pAnnotations) );

	mov	eax, DWORD PTR _pGroup$7[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _pGroup$7[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadAnnotations@CEffectLoader@D3DX11Effects@@IAEJPAIPAPAUSAnnotation@2@@Z ; D3DX11Effects::CEffectLoader::LoadAnnotations
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN9@LoadGroups
	jmp	$lExit$31
$LN9@LoadGroups:

; 2350 : 
; 2351 :         UINT iTechnique;
; 2352 :         for( iTechnique=0; iTechnique < psGroup->cTechniques; iTechnique++ )

	mov	DWORD PTR _iTechnique$5[ebp], 0
	jmp	SHORT $LN7@LoadGroups
$LN6@LoadGroups:
	mov	eax, DWORD PTR _iTechnique$5[ebp]
	add	eax, 1
	mov	DWORD PTR _iTechnique$5[ebp], eax
$LN7@LoadGroups:
	mov	eax, DWORD PTR _psGroup$6[ebp]
	mov	ecx, DWORD PTR _iTechnique$5[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN5@LoadGroups

; 2353 :         {
; 2354 :             VH( LoadTechnique( &pGroup->pTechniques[iTechnique] ) );

	mov	eax, DWORD PTR _iTechnique$5[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _pGroup$7[ebp]
	add	eax, DWORD PTR [ecx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadTechnique@CEffectLoader@D3DX11Effects@@IAEJPAUSTechnique@2@@Z ; D3DX11Effects::CEffectLoader::LoadTechnique
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN4@LoadGroups
	jmp	SHORT $lExit$31
$LN4@LoadGroups:

; 2355 :         }

	jmp	SHORT $LN6@LoadGroups
$LN5@LoadGroups:

; 2356 :         TechniquesInEffect += psGroup->cTechniques;

	mov	eax, DWORD PTR _psGroup$6[ebp]
	mov	ecx, DWORD PTR _TechniquesInEffect$[ebp]
	add	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _TechniquesInEffect$[ebp], ecx

; 2357 :     }

	jmp	$LN20@LoadGroups
$LN19@LoadGroups:

; 2358 : 
; 2359 :     VBD( TechniquesInEffect == m_pHeader->cTechniques, "Loading error: technique count mismatch." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _TechniquesInEffect$[ebp]
	cmp	edx, DWORD PTR [ecx+28]
	je	SHORT $LN2@LoadGroups
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $lExit$31
$LN2@LoadGroups:

; 2360 :     m_pEffect->m_TechniqueCount = m_pHeader->cTechniques;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+44], ecx

; 2361 :     m_pEffect->m_GroupCount = m_pHeader->cGroups;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [ecx+76]
	mov	DWORD PTR [eax+48], ecx
$lExit$31:

; 2362 : 
; 2363 : lExit:
; 2364 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 2365 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@LoadGroups
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN30@LoadGroups:
	DD	1
	DD	$LN29@LoadGroups
$LN29@LoadGroups:
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN27@LoadGroups
$LN27@LoadGroups:
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	71					; 00000047H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadGroups@CEffectLoader@D3DX11Effects@@IAEJXZ$7:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__ehhandler$?LoadGroups@CEffectLoader@D3DX11Effects@@IAEJXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-332]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LoadGroups@CEffectLoader@D3DX11Effects@@IAEJXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?LoadGroups@CEffectLoader@D3DX11Effects@@IAEJXZ ENDP	; D3DX11Effects::CEffectLoader::LoadGroups
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@2@PAEPAI2@Z
_TEXT	SEGMENT
tv921 = -772						; size = 4
tv787 = -772						; size = 4
tv745 = -772						; size = 4
tv531 = -772						; size = 4
tv409 = -772						; size = 4
tv300 = -772						; size = 4
tv265 = -772						; size = 4
tv157 = -772						; size = 4
tv90 = -772						; size = 4
$T2 = -764						; size = 4
$T3 = -752						; size = 4
$T4 = -740						; size = 4
$T5 = -728						; size = 4
$T6 = -716						; size = 4
$T7 = -704						; size = 4
$T8 = -692						; size = 4
$T9 = -680						; size = 4
$T10 = -668						; size = 4
$T11 = -656						; size = 8
$T12 = -640						; size = 4
$T13 = -628						; size = 8
$T14 = -612						; size = 4
$T15 = -600						; size = 4
$T16 = -588						; size = 4
$T17 = -576						; size = 4
$T18 = -564						; size = 4
$T19 = -552						; size = 4
$T20 = -540						; size = 4
$T21 = -528						; size = 4
_iDecl$22 = -324					; size = 4
_$S1$23 = -312						; size = 4
_pAnonShader$24 = -300					; size = 4
_pShaderBlock$25 = -288					; size = 4
_pShaderBin$26 = -276					; size = 4
_cbShaderBin$27 = -264					; size = 4
_psVarIndex$28 = -252					; size = 4
_dataLen$29 = -240					; size = 4
_chkDataLen$30 = -228					; size = 8
_psConstIndex$31 = -212					; size = 4
_pConstants$32 = -200					; size = 4
_pNumConstants$33 = -188				; size = 4
_lhsStride$34 = -176					; size = 4
_pLHS$35 = -164						; size = 4
_pAssignment$36 = -152					; size = 4
_pGlobalVarName$37 = -140				; size = 4
_pVar$38 = -128						; size = 4
_pVarIndex$39 = -116					; size = 4
_pVarArray$40 = -104					; size = 4
_renderTargetViewAssns$ = -92				; size = 4
_finalAssignments$ = -80				; size = 4
_psAssignments$ = -68					; size = 4
_j$ = -56						; size = 4
_i$ = -44						; size = 4
_hr$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_Assignments$ = 8					; size = 4
_ppAssignments$ = 12					; size = 4
_pBackingStore$ = 16					; size = 4
_pRTVAssignments$ = 20					; size = 4
_pFinalAssignments$ = 24				; size = 4
?LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@2@PAEPAI2@Z PROC ; D3DX11Effects::CEffectLoader::LoadAssignments, COMDAT
; _this$ = ecx

; 1403 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@2@PAEPAI2@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 760				; 000002f8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-772]
	mov	ecx, 190				; 000000beH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1404 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 1405 :     UINT  i, j;
; 1406 : 
; 1407 :     SBinaryAssignment *psAssignments;
; 1408 :     UINT  finalAssignments = 0;             // the number of assignments worth keeping    

	mov	DWORD PTR _finalAssignments$[ebp], 0

; 1409 :     UINT  renderTargetViewAssns = 0;        // Number of render target view assns, used by passes since SetRTV is a vararg call

	mov	DWORD PTR _renderTargetViewAssns$[ebp], 0

; 1410 : 
; 1411 :     *pFinalAssignments = 0;

	mov	eax, DWORD PTR _pFinalAssignments$[ebp]
	mov	DWORD PTR [eax], 0

; 1412 :     if (pRTVAssignments)

	cmp	DWORD PTR _pRTVAssignments$[ebp], 0
	je	SHORT $LN214@LoadAssign

; 1413 :         *pRTVAssignments = 0;

	mov	eax, DWORD PTR _pRTVAssignments$[ebp]
	mov	DWORD PTR [eax], 0
$LN214@LoadAssign:

; 1414 : 
; 1415 :     VHD( m_msStructured.Read((void**) &psAssignments, sizeof(*psAssignments) * Assignments), "Invalid pEffectBuffer: cannot read assignments." );

	mov	eax, DWORD PTR _Assignments$[ebp]
	shl	eax, 4
	push	eax
	lea	ecx, DWORD PTR _psAssignments$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAPAXK@Z ; D3DX11Core::CMemoryStream::Read
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN213@LoadAssign
	jmp	$lExit$253
$LN213@LoadAssign:

; 1416 : 
; 1417 :     // allocate enough room to store all of the assignments (even though some may go unused)
; 1418 :     VN( (*ppAssignments) = PRIVATENEW SAssignment[Assignments] )

	mov	eax, DWORD PTR _Assignments$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T2[ebp]
	mov	edx, 32					; 00000020H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN217@LoadAssign
	push	OFFSET ??0SAssignment@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SAssignment::SAssignment
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	push	32					; 00000020H
	mov	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR tv90[ebp], edx
	jmp	SHORT $LN218@LoadAssign
$LN217@LoadAssign:
	mov	DWORD PTR tv90[ebp], 0
$LN218@LoadAssign:
	mov	eax, DWORD PTR tv90[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _ppAssignments$[ebp]
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx], edx
	cmp	DWORD PTR $T3[ebp], 0
	jne	SHORT $LN211@LoadAssign
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$253
$LN211@LoadAssign:

; 1419 :     
; 1420 :     //
; 1421 :     // In this loop, we read assignments 1-by-1, keeping some and discarding others.
; 1422 :     // We write to the "next" assignment which is given by &(*ppAssignments)[finalAssignments];
; 1423 :     // if an assignment is worth keeping, we increment finalAssignments.
; 1424 :     // This means that if you want to keep an assignment, you must be careful to initialize
; 1425 :     // all members of SAssignment because old values from preceding discarded assignments might remain.
; 1426 :     //
; 1427 :     for (i = 0; i < Assignments; ++ i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN209@LoadAssign
$LN208@LoadAssign:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN209@LoadAssign:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _Assignments$[ebp]
	jae	$LN207@LoadAssign

; 1428 :     {
; 1429 :         SGlobalVariable *pVarArray, *pVarIndex, *pVar;
; 1430 :         const char *pGlobalVarName;
; 1431 :         SAssignment *pAssignment = &(*ppAssignments)[finalAssignments];

	mov	eax, DWORD PTR _finalAssignments$[ebp]
	shl	eax, 5
	mov	ecx, DWORD PTR _ppAssignments$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR _pAssignment$36[ebp], eax

; 1432 :         BYTE *pLHS;
; 1433 : 
; 1434 :         VBD( psAssignments[i].iState < NUM_STATES, "Invalid pEffectBuffer: invalid assignment state." );

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _psAssignments$[ebp]
	cmp	DWORD PTR [ecx+eax], 59			; 0000003bH
	jb	SHORT $LN206@LoadAssign
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$253
$LN206@LoadAssign:

; 1435 :         VBD( psAssignments[i].Index < g_lvGeneral[psAssignments[i].iState].m_Indices, "Invalid pEffectBuffer: invalid assignment index." );

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _psAssignments$[ebp]
	imul	ecx, DWORD PTR [edx+ecx], 40
	mov	edx, DWORD PTR _psAssignments$[ebp]
	mov	eax, DWORD PTR [edx+eax+4]
	cmp	eax, DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B[ecx+16]
	jb	SHORT $LN204@LoadAssign
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$253
$LN204@LoadAssign:

; 1436 : 
; 1437 :         pAssignment->LhsType = g_lvGeneral[psAssignments[i].iState].m_LhsType;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _psAssignments$[ebp]
	imul	edx, DWORD PTR [ecx+eax], 40
	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	ecx, DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B[edx+28]
	mov	DWORD PTR [eax], ecx

; 1438 : 
; 1439 :         // Count RenderTargetView assignments
; 1440 :         if (pAssignment->LhsType == ELHS_RenderTargetView)

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	cmp	DWORD PTR [eax], 4
	jne	SHORT $LN202@LoadAssign

; 1441 :             renderTargetViewAssns++;

	mov	eax, DWORD PTR _renderTargetViewAssns$[ebp]
	add	eax, 1
	mov	DWORD PTR _renderTargetViewAssns$[ebp], eax
$LN202@LoadAssign:

; 1442 : 
; 1443 :         switch (g_lvGeneral[psAssignments[i].iState].m_Type)

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _psAssignments$[ebp]
	imul	edx, DWORD PTR [ecx+eax], 40
	mov	eax, DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B[edx+8]
	mov	DWORD PTR tv157[ebp], eax
	mov	ecx, DWORD PTR tv157[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv157[ebp], ecx
	cmp	DWORD PTR tv157[ebp], 50		; 00000032H
	ja	$LN183@LoadAssign
	mov	edx, DWORD PTR tv157[ebp]
	movzx	eax, BYTE PTR $LN233@LoadAssign[edx]
	jmp	DWORD PTR $LN249@LoadAssign[eax*4]
$LN198@LoadAssign:

; 1444 :         {
; 1445 :         case D3D10_SVT_UINT8:
; 1446 :             D3DXASSERT(g_lvGeneral[psAssignments[i].iState].m_Cols == 1); // BYTE arrays not supported

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _psAssignments$[ebp]
	imul	edx, DWORD PTR [ecx+eax], 40
	cmp	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B[edx+12], 1
	je	SHORT $LN197@LoadAssign
	push	OFFSET ??_C@_0DB@DHBABGJO@g_lvGeneral?$FLpsAssignments?$FLi?$FN?4iSt@
	mov	eax, DWORD PTR ?__LINE__Var@?1??LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@3@PAEPAI2@Z@4JA
	add	eax, 43					; 0000002bH
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN197@LoadAssign:
	xor	eax, eax
	jne	SHORT $LN198@LoadAssign

; 1447 :             pAssignment->DataSize = sizeof(BYTE);

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, -65536				; ffff0000H
	or	ecx, 1
	mov	edx, DWORD PTR _pAssignment$36[ebp]
	mov	DWORD PTR [edx+28], ecx

; 1448 :             // Store an offset for destination instead of a pointer so that it's easy to relocate it later
; 1449 :             
; 1450 :             break;

	jmp	$LN200@LoadAssign
$LN194@LoadAssign:

; 1451 : 
; 1452 :         case D3D10_SVT_BOOL:
; 1453 :         case D3D10_SVT_INT:
; 1454 :         case D3D10_SVT_UINT:
; 1455 :         case D3D10_SVT_FLOAT:
; 1456 :             pAssignment->DataSize = SType::c_ScalarSize * g_lvGeneral[psAssignments[i].iState].m_Cols;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _psAssignments$[ebp]
	imul	edx, DWORD PTR [ecx+eax], 40
	mov	eax, DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B[edx+12]
	shl	eax, 2
	and	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _pAssignment$36[ebp]
	mov	edx, DWORD PTR [ecx+28]
	and	edx, -65536				; ffff0000H
	or	edx, eax
	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	DWORD PTR [eax+28], edx

; 1457 :             break;

	jmp	$LN200@LoadAssign
$LN193@LoadAssign:

; 1458 : 
; 1459 :         case D3D10_SVT_RASTERIZER:
; 1460 :             pAssignment->DataSize = sizeof(SRasterizerBlock);

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, -65536				; ffff0000H
	or	ecx, 64					; 00000040H
	mov	edx, DWORD PTR _pAssignment$36[ebp]
	mov	DWORD PTR [edx+28], ecx

; 1461 :             break;

	jmp	$LN200@LoadAssign
$LN192@LoadAssign:

; 1462 : 
; 1463 :         case D3D10_SVT_DEPTHSTENCIL:
; 1464 :             pAssignment->DataSize = sizeof(SDepthStencilBlock);

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, -65536				; ffff0000H
	or	ecx, 76					; 0000004cH
	mov	edx, DWORD PTR _pAssignment$36[ebp]
	mov	DWORD PTR [edx+28], ecx

; 1465 :             break;

	jmp	$LN200@LoadAssign
$LN191@LoadAssign:

; 1466 : 
; 1467 :         case D3D10_SVT_BLEND:
; 1468 :             pAssignment->DataSize = sizeof(SBlendBlock);

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, -65536				; ffff0000H
	or	ecx, 288				; 00000120H
	mov	edx, DWORD PTR _pAssignment$36[ebp]
	mov	DWORD PTR [edx+28], ecx

; 1469 :             break;

	jmp	$LN200@LoadAssign
$LN190@LoadAssign:

; 1470 : 
; 1471 :         case D3D10_SVT_VERTEXSHADER:
; 1472 :         case D3D10_SVT_GEOMETRYSHADER:
; 1473 :         case D3D10_SVT_PIXELSHADER:
; 1474 :         case D3D11_SVT_HULLSHADER:
; 1475 :         case D3D11_SVT_DOMAINSHADER:
; 1476 :         case D3D11_SVT_COMPUTESHADER:
; 1477 :             pAssignment->DataSize = sizeof(SShaderBlock);

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, -65536				; ffff0000H
	or	ecx, 68					; 00000044H
	mov	edx, DWORD PTR _pAssignment$36[ebp]
	mov	DWORD PTR [edx+28], ecx

; 1478 :             break;

	jmp	$LN200@LoadAssign
$LN189@LoadAssign:

; 1479 : 
; 1480 :         case D3D10_SVT_TEXTURE:
; 1481 :         case D3D10_SVT_TEXTURE1D:
; 1482 :         case D3D10_SVT_TEXTURE2D:
; 1483 :         case D3D10_SVT_TEXTURE2DMS:
; 1484 :         case D3D10_SVT_TEXTURE3D:
; 1485 :         case D3D10_SVT_TEXTURECUBE:
; 1486 :         case D3D10_SVT_TEXTURECUBEARRAY:
; 1487 :         case D3D11_SVT_BYTEADDRESS_BUFFER:
; 1488 :         case D3D11_SVT_STRUCTURED_BUFFER:
; 1489 :             pAssignment->DataSize = sizeof(SShaderResource);

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, -65536				; ffff0000H
	or	ecx, 4
	mov	edx, DWORD PTR _pAssignment$36[ebp]
	mov	DWORD PTR [edx+28], ecx

; 1490 :             break;

	jmp	$LN200@LoadAssign
$LN188@LoadAssign:

; 1491 : 
; 1492 :         case D3D10_SVT_RENDERTARGETVIEW:
; 1493 :             pAssignment->DataSize = sizeof(SRenderTargetView);

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, -65536				; ffff0000H
	or	ecx, 4
	mov	edx, DWORD PTR _pAssignment$36[ebp]
	mov	DWORD PTR [edx+28], ecx

; 1494 :             break;

	jmp	$LN200@LoadAssign
$LN187@LoadAssign:

; 1495 : 
; 1496 :         case D3D10_SVT_DEPTHSTENCILVIEW:
; 1497 :             pAssignment->DataSize = sizeof(SDepthStencilView);

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, -65536				; ffff0000H
	or	ecx, 4
	mov	edx, DWORD PTR _pAssignment$36[ebp]
	mov	DWORD PTR [edx+28], ecx

; 1498 :             break;

	jmp	SHORT $LN200@LoadAssign
$LN186@LoadAssign:

; 1499 : 
; 1500 :         case D3D11_SVT_RWTEXTURE1D:
; 1501 :         case D3D11_SVT_RWTEXTURE1DARRAY:
; 1502 :         case D3D11_SVT_RWTEXTURE2D:
; 1503 :         case D3D11_SVT_RWTEXTURE2DARRAY:
; 1504 :         case D3D11_SVT_RWTEXTURE3D:
; 1505 :         case D3D11_SVT_RWBUFFER:
; 1506 :         case D3D11_SVT_RWBYTEADDRESS_BUFFER:
; 1507 :         case D3D11_SVT_RWSTRUCTURED_BUFFER:
; 1508 :         case D3D11_SVT_APPEND_STRUCTURED_BUFFER:
; 1509 :         case D3D11_SVT_CONSUME_STRUCTURED_BUFFER:
; 1510 :             pAssignment->DataSize = sizeof(SUnorderedAccessView);

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, -65536				; ffff0000H
	or	ecx, 4
	mov	edx, DWORD PTR _pAssignment$36[ebp]
	mov	DWORD PTR [edx+28], ecx

; 1511 :             break;

	jmp	SHORT $LN200@LoadAssign
$LN185@LoadAssign:

; 1512 : 
; 1513 :         case D3D11_SVT_INTERFACE_POINTER:
; 1514 :             pAssignment->DataSize = sizeof(SInterface);

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, -65536				; ffff0000H
	or	ecx, 4
	mov	edx, DWORD PTR _pAssignment$36[ebp]
	mov	DWORD PTR [edx+28], ecx

; 1515 :             break;

	jmp	SHORT $LN200@LoadAssign
$LN183@LoadAssign:

; 1516 : 
; 1517 :         default:
; 1518 :             D3DXASSERT(0);

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN182@LoadAssign
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@3@PAEPAI2@Z@4JA
	add	eax, 115				; 00000073H
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN182@LoadAssign:
	xor	eax, eax
	jne	SHORT $LN183@LoadAssign

; 1519 :             VHD( E_FAIL, "Internal loading error: invalid assignment type.");

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN200@LoadAssign
	jmp	$lExit$253
$LN200@LoadAssign:

; 1520 :         }
; 1521 : 
; 1522 :         UINT lhsStride;
; 1523 :         if( g_lvGeneral[psAssignments[i].iState].m_Stride > 0 )

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _psAssignments$[ebp]
	imul	edx, DWORD PTR [ecx+eax], 40
	cmp	DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B[edx+36], 0
	jbe	SHORT $LN177@LoadAssign

; 1524 :             lhsStride = g_lvGeneral[psAssignments[i].iState].m_Stride;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _psAssignments$[ebp]
	imul	edx, DWORD PTR [ecx+eax], 40
	mov	eax, DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B[edx+36]
	mov	DWORD PTR _lhsStride$34[ebp], eax

; 1525 :         else

	jmp	SHORT $LN176@LoadAssign
$LN177@LoadAssign:

; 1526 :             lhsStride = pAssignment->DataSize;

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 65535				; 0000ffffH
	mov	DWORD PTR _lhsStride$34[ebp], ecx
$LN176@LoadAssign:

; 1527 : 
; 1528 :         // Store only the destination offset so that the backing store pointers can be easily fixed up later
; 1529 :         pAssignment->Destination.Offset = g_lvGeneral[psAssignments[i].iState].m_Offset + lhsStride * psAssignments[i].Index;

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _psAssignments$[ebp]
	imul	edx, DWORD PTR [ecx+eax], 40
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _psAssignments$[ebp]
	mov	esi, DWORD PTR _lhsStride$34[ebp]
	imul	esi, DWORD PTR [ecx+eax+4]
	add	esi, DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B[edx+32]
	mov	edx, DWORD PTR _pAssignment$36[ebp]
	mov	DWORD PTR [edx+20], esi

; 1530 : 
; 1531 :         // As a result, you should use pLHS in this function instead of the destination pointer
; 1532 :         pLHS = pBackingStore + pAssignment->Destination.Offset;

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	ecx, DWORD PTR _pBackingStore$[ebp]
	add	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _pLHS$35[ebp], ecx

; 1533 : 
; 1534 :         switch (psAssignments[i].AssignmentType)

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _psAssignments$[ebp]
	mov	edx, DWORD PTR [ecx+eax+8]
	mov	DWORD PTR tv265[ebp], edx
	mov	eax, DWORD PTR tv265[ebp]
	sub	eax, 1
	mov	DWORD PTR tv265[ebp], eax
	cmp	DWORD PTR tv265[ebp], 7
	ja	$LN5@LoadAssign
	mov	ecx, DWORD PTR tv265[ebp]
	jmp	DWORD PTR $LN250@LoadAssign[ecx*4]
$LN173@LoadAssign:

; 1535 :         {
; 1536 :         case ECAT_Constant: // e.g. LHS = 1; or LHS = NULL;
; 1537 :             UINT  *pNumConstants;
; 1538 :             SBinaryConstant *pConstants;
; 1539 : 
; 1540 :             VHD( m_msUnstructured.ReadAtOffset(psAssignments[i].oInitializer, sizeof(UINT), (void**) &pNumConstants), "Invalid pEffectBuffer: cannot read NumConstants." );

	lea	eax, DWORD PTR _pNumConstants$33[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _psAssignments$[ebp]
	mov	eax, DWORD PTR [edx+ecx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?ReadAtOffset@CMemoryStream@D3DX11Core@@QAEJKKPAPAX@Z ; D3DX11Core::CMemoryStream::ReadAtOffset
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN172@LoadAssign
	jmp	$lExit$253
$LN172@LoadAssign:

; 1541 :             VHD( m_msUnstructured.Read((void **)&pConstants, sizeof(SBinaryConstant) * (*pNumConstants)), "Invalid pEffectBuffer: cannot read constants." );

	mov	eax, DWORD PTR _pNumConstants$33[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 3
	push	ecx
	lea	edx, DWORD PTR _pConstants$32[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAPAXK@Z ; D3DX11Core::CMemoryStream::Read
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN170@LoadAssign
	jmp	$lExit$253
$LN170@LoadAssign:

; 1542 : 
; 1543 :             if(pAssignment->IsObjectAssignment())

	mov	ecx, DWORD PTR _pAssignment$36[ebp]
	call	?IsObjectAssignment@SAssignment@D3DX11Effects@@QAEHXZ ; D3DX11Effects::SAssignment::IsObjectAssignment
	test	eax, eax
	je	$LN168@LoadAssign

; 1544 :             {
; 1545 :                 // make sure this is a NULL assignment
; 1546 :                 VBD( *pNumConstants == 1 && (pConstants[0].Type == EST_Int || pConstants[0].Type == EST_UInt) && pConstants[0].iValue == 0,
; 1547 :                     "Invalid pEffectBuffer: non-NULL constant assignment to object.");

	mov	eax, DWORD PTR _pNumConstants$33[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN166@LoadAssign
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pConstants$32[ebp]
	cmp	DWORD PTR [edx+ecx], 2
	je	SHORT $LN165@LoadAssign
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pConstants$32[ebp]
	cmp	DWORD PTR [edx+ecx], 3
	jne	SHORT $LN166@LoadAssign
$LN165@LoadAssign:
	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pConstants$32[ebp]
	cmp	DWORD PTR [edx+ecx+4], 0
	je	SHORT $LN167@LoadAssign
$LN166@LoadAssign:
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$253
$LN167@LoadAssign:

; 1548 : 
; 1549 :                 switch (pAssignment->LhsType)

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv300[ebp], ecx
	cmp	DWORD PTR tv300[ebp], 196618		; 0003000aH
	jg	SHORT $LN219@LoadAssign
	cmp	DWORD PTR tv300[ebp], 196618		; 0003000aH
	je	$LN152@LoadAssign
	mov	edx, DWORD PTR tv300[ebp]
	sub	edx, 1
	mov	DWORD PTR tv300[ebp], edx
	cmp	DWORD PTR tv300[ebp], 15		; 0000000fH
	ja	$LN148@LoadAssign
	mov	eax, DWORD PTR tv300[ebp]
	jmp	DWORD PTR $LN251@LoadAssign[eax*4]
$LN219@LoadAssign:
	jmp	$LN148@LoadAssign
$LN161@LoadAssign:

; 1550 :                 {
; 1551 :                 case ELHS_DepthStencilBlock:
; 1552 :                     *((void **)pLHS) = &g_NullDepthStencil;

	mov	eax, DWORD PTR _pLHS$35[ebp]
	mov	DWORD PTR [eax], OFFSET ?g_NullDepthStencil@D3DX11Effects@@3USDepthStencilBlock@1@A ; D3DX11Effects::g_NullDepthStencil

; 1553 :                     break;

	jmp	$LN162@LoadAssign
$LN160@LoadAssign:

; 1554 :                 case ELHS_BlendBlock:
; 1555 :                     *((void **)pLHS) = &g_NullBlend;

	mov	eax, DWORD PTR _pLHS$35[ebp]
	mov	DWORD PTR [eax], OFFSET ?g_NullBlend@D3DX11Effects@@3USBlendBlock@1@A ; D3DX11Effects::g_NullBlend

; 1556 :                     break;

	jmp	$LN162@LoadAssign
$LN159@LoadAssign:

; 1557 :                 case ELHS_RasterizerBlock:
; 1558 :                     *((void **)pLHS) = &g_NullRasterizer;

	mov	eax, DWORD PTR _pLHS$35[ebp]
	mov	DWORD PTR [eax], OFFSET ?g_NullRasterizer@D3DX11Effects@@3USRasterizerBlock@1@A ; D3DX11Effects::g_NullRasterizer

; 1559 :                     break;

	jmp	$LN162@LoadAssign
$LN158@LoadAssign:

; 1560 :                 case ELHS_VertexShaderBlock:
; 1561 :                     *((void **)pLHS) = &g_NullVS;

	mov	eax, DWORD PTR _pLHS$35[ebp]
	mov	DWORD PTR [eax], OFFSET ?g_NullVS@D3DX11Effects@@3USShaderBlock@1@A ; D3DX11Effects::g_NullVS

; 1562 :                     break;

	jmp	$LN162@LoadAssign
$LN157@LoadAssign:

; 1563 :                 case ELHS_PixelShaderBlock:
; 1564 :                     *((void **)pLHS) = &g_NullPS;

	mov	eax, DWORD PTR _pLHS$35[ebp]
	mov	DWORD PTR [eax], OFFSET ?g_NullPS@D3DX11Effects@@3USShaderBlock@1@A ; D3DX11Effects::g_NullPS

; 1565 :                     break;

	jmp	$LN162@LoadAssign
$LN156@LoadAssign:

; 1566 :                 case ELHS_GeometryShaderBlock:
; 1567 :                     *((void **)pLHS) = &g_NullGS;

	mov	eax, DWORD PTR _pLHS$35[ebp]
	mov	DWORD PTR [eax], OFFSET ?g_NullGS@D3DX11Effects@@3USShaderBlock@1@A ; D3DX11Effects::g_NullGS

; 1568 :                     break;

	jmp	SHORT $LN162@LoadAssign
$LN155@LoadAssign:

; 1569 :                 case ELHS_HullShaderBlock:
; 1570 :                     *((void **)pLHS) = &g_NullHS;

	mov	eax, DWORD PTR _pLHS$35[ebp]
	mov	DWORD PTR [eax], OFFSET ?g_NullHS@D3DX11Effects@@3USShaderBlock@1@A ; D3DX11Effects::g_NullHS

; 1571 :                     break;

	jmp	SHORT $LN162@LoadAssign
$LN154@LoadAssign:

; 1572 :                 case ELHS_DomainShaderBlock:
; 1573 :                     *((void **)pLHS) = &g_NullDS;

	mov	eax, DWORD PTR _pLHS$35[ebp]
	mov	DWORD PTR [eax], OFFSET ?g_NullDS@D3DX11Effects@@3USShaderBlock@1@A ; D3DX11Effects::g_NullDS

; 1574 :                     break;

	jmp	SHORT $LN162@LoadAssign
$LN153@LoadAssign:

; 1575 :                 case ELHS_ComputeShaderBlock:
; 1576 :                     *((void **)pLHS) = &g_NullCS;

	mov	eax, DWORD PTR _pLHS$35[ebp]
	mov	DWORD PTR [eax], OFFSET ?g_NullCS@D3DX11Effects@@3USShaderBlock@1@A ; D3DX11Effects::g_NullCS

; 1577 :                     break;

	jmp	SHORT $LN162@LoadAssign
$LN152@LoadAssign:

; 1578 :                 case ELHS_Texture:
; 1579 :                     *((void **)pLHS) = &g_NullTexture;

	mov	eax, DWORD PTR _pLHS$35[ebp]
	mov	DWORD PTR [eax], OFFSET ?g_NullTexture@D3DX11Effects@@3USShaderResource@1@A ; D3DX11Effects::g_NullTexture

; 1580 :                     break;

	jmp	SHORT $LN162@LoadAssign
$LN151@LoadAssign:

; 1581 :                 case ELHS_DepthStencilView:
; 1582 :                     *((void **)pLHS) = &g_NullDepthStencilView;

	mov	eax, DWORD PTR _pLHS$35[ebp]
	mov	DWORD PTR [eax], OFFSET ?g_NullDepthStencilView@D3DX11Effects@@3USDepthStencilView@1@A ; D3DX11Effects::g_NullDepthStencilView

; 1583 :                     break;

	jmp	SHORT $LN162@LoadAssign
$LN150@LoadAssign:

; 1584 :                 case ELHS_RenderTargetView:
; 1585 :                     *((void **)pLHS) = &g_NullRenderTargetView;

	mov	eax, DWORD PTR _pLHS$35[ebp]
	mov	DWORD PTR [eax], OFFSET ?g_NullRenderTargetView@D3DX11Effects@@3USRenderTargetView@1@A ; D3DX11Effects::g_NullRenderTargetView

; 1586 :                     break;

	jmp	SHORT $LN162@LoadAssign
$LN148@LoadAssign:

; 1587 :                 default:
; 1588 :                     D3DXASSERT(0);

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN147@LoadAssign
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@3@PAEPAI2@Z@4JA
	add	eax, 185				; 000000b9H
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN147@LoadAssign:
	xor	eax, eax
	jne	SHORT $LN148@LoadAssign
$LN162@LoadAssign:

; 1589 :                 }
; 1590 :             }
; 1591 :             else

	jmp	$LN144@LoadAssign
$LN168@LoadAssign:

; 1592 :             {
; 1593 :                 VBD( *pNumConstants == g_lvGeneral[psAssignments[i].iState].m_Cols, "Internal loading error: mismatch constant count." );

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _psAssignments$[ebp]
	imul	edx, DWORD PTR [ecx+eax], 40
	mov	eax, DWORD PTR _pNumConstants$33[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B[edx+12]
	je	SHORT $LN143@LoadAssign
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$253
$LN143@LoadAssign:

; 1594 :                 for (j = 0; j < *pNumConstants; ++ j)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN141@LoadAssign
$LN140@LoadAssign:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN141@LoadAssign:
	mov	eax, DWORD PTR _pNumConstants$33[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jae	SHORT $LN144@LoadAssign

; 1595 :                 {
; 1596 :                     VH( ExecuteConstantAssignment(pConstants + j, pLHS, g_lvGeneral[psAssignments[i].iState].m_Type) );

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _psAssignments$[ebp]
	imul	edx, DWORD PTR [ecx+eax], 40
	mov	eax, DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B[edx+8]
	push	eax
	mov	ecx, DWORD PTR _pLHS$35[ebp]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _pConstants$32[ebp]
	lea	ecx, DWORD PTR [eax+edx*8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ExecuteConstantAssignment@CEffectLoader@D3DX11Effects@@IAEJPAUSBinaryConstant@2@PAXW4_D3D_SHADER_VARIABLE_TYPE@@@Z ; D3DX11Effects::CEffectLoader::ExecuteConstantAssignment
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN138@LoadAssign
	jmp	$lExit$253
$LN138@LoadAssign:

; 1597 :                     pLHS += SType::c_ScalarSize; // arrays of constants will always be regular scalar sized, never byte-sized

	mov	eax, DWORD PTR _pLHS$35[ebp]
	add	eax, 4
	mov	DWORD PTR _pLHS$35[ebp], eax

; 1598 :                 }

	jmp	SHORT $LN140@LoadAssign
$LN144@LoadAssign:

; 1599 :             }
; 1600 : 
; 1601 :             // Can get rid of this assignment
; 1602 :             break;

	jmp	$LN174@LoadAssign
$LN136@LoadAssign:

; 1603 : 
; 1604 :         case ECAT_Variable: // e.g. LHS = myVar;
; 1605 :             VHD( m_msUnstructured.ReadAtOffset(psAssignments[i].oInitializer, &pGlobalVarName), "Invalid pEffectBuffer: cannot read variable name." );

	lea	eax, DWORD PTR _pGlobalVarName$37[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _psAssignments$[ebp]
	mov	eax, DWORD PTR [edx+ecx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?ReadAtOffset@CMemoryStream@D3DX11Core@@QAEJKPAPBD@Z ; D3DX11Core::CMemoryStream::ReadAtOffset
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN135@LoadAssign
	jmp	$lExit$253
$LN135@LoadAssign:

; 1606 : 
; 1607 :             VBD( pVar = m_pEffect->FindVariableByName(pGlobalVarName), "Loading error: cannot find variable name." );

	mov	eax, DWORD PTR _pGlobalVarName$37[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	call	?FindVariableByName@CEffect@D3DX11Effects@@IAEPAUSGlobalVariable@2@PBD@Z ; D3DX11Effects::CEffect::FindVariableByName
	mov	DWORD PTR _pVar$38[ebp], eax
	cmp	DWORD PTR _pVar$38[ebp], 0
	jne	SHORT $LN133@LoadAssign
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$253
$LN133@LoadAssign:

; 1608 : 
; 1609 :             if (pAssignment->IsObjectAssignment())

	mov	ecx, DWORD PTR _pAssignment$36[ebp]
	call	?IsObjectAssignment@SAssignment@D3DX11Effects@@QAEHXZ ; D3DX11Effects::SAssignment::IsObjectAssignment
	test	eax, eax
	je	SHORT $LN131@LoadAssign

; 1610 :             {
; 1611 :                 VBD( pVar->pType->VarType == EVT_Object && 
; 1612 :                      GetSimpleParameterTypeFromObjectType(pVar->pType->ObjectType) == g_lvGeneral[psAssignments[i].iState].m_Type,
; 1613 :                      "Loading error: invalid variable type or object type." );

	mov	eax, DWORD PTR _pVar$38[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx+4], 2
	jne	SHORT $LN129@LoadAssign
	mov	eax, DWORD PTR _pVar$38[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	?GetSimpleParameterTypeFromObjectType@D3DX11Effects@@YA?AW4_D3D_SHADER_VARIABLE_TYPE@@W4EObjectType@1@@Z ; D3DX11Effects::GetSimpleParameterTypeFromObjectType
	add	esp, 4
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _psAssignments$[ebp]
	imul	ecx, DWORD PTR [edx+ecx], 40
	cmp	eax, DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B[ecx+8]
	je	SHORT $LN130@LoadAssign
$LN129@LoadAssign:
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$253
$LN130@LoadAssign:

; 1614 : 
; 1615 :                 // Write directly into the state block's backing store
; 1616 :                 *((void **)pLHS) = pVar->Data.pGeneric;

	mov	eax, DWORD PTR _pLHS$35[ebp]
	mov	ecx, DWORD PTR _pVar$38[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 1617 : 
; 1618 :                 // Now we can get rid of this assignment
; 1619 :             }
; 1620 :             else

	jmp	$LN127@LoadAssign
$LN131@LoadAssign:

; 1621 :             {
; 1622 :                 VBD( pVar->pType->BelongsInConstantBuffer(), "Invalid pEffectBuffer: assignment type mismatch." );

	mov	eax, DWORD PTR _pVar$38[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?BelongsInConstantBuffer@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::BelongsInConstantBuffer
	test	eax, eax
	jne	SHORT $LN126@LoadAssign
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$253
$LN126@LoadAssign:

; 1623 : 
; 1624 :                 pAssignment->DependencyCount = 1;

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	DWORD PTR [eax+12], 1

; 1625 :                 VN( pAssignment->pDependencies = PRIVATENEW SAssignment::SDependency[pAssignment->DependencyCount] );

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR $T5[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T5[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN220@LoadAssign
	push	OFFSET ??0SDependency@SAssignment@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SAssignment::SDependency::SDependency
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR $T7[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T7[ebp]
	mov	DWORD PTR tv409[ebp], edx
	jmp	SHORT $LN221@LoadAssign
$LN220@LoadAssign:
	mov	DWORD PTR tv409[ebp], 0
$LN221@LoadAssign:
	mov	eax, DWORD PTR tv409[ebp]
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _pAssignment$36[ebp]
	mov	edx, DWORD PTR $T6[ebp]
	mov	DWORD PTR [ecx+16], edx
	cmp	DWORD PTR $T6[ebp], 0
	jne	SHORT $LN124@LoadAssign
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$253
$LN124@LoadAssign:

; 1626 :                 pAssignment->pDependencies->pVariable = pVar;

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pVar$38[ebp]
	mov	DWORD PTR [ecx], edx

; 1627 : 
; 1628 :                 // Store an offset for numeric values instead of a pointer so that it's easy to relocate it later
; 1629 :                 pAssignment->Source.Offset = pVar->Data.Offset;

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	ecx, DWORD PTR _pVar$38[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+24], edx

; 1630 :                 pAssignment->AssignmentType = ERAT_NumericVariable;

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	DWORD PTR [eax+4], 2

; 1631 : 
; 1632 :                 // Can't get rid of this assignment
; 1633 :                 ++ finalAssignments;

	mov	eax, DWORD PTR _finalAssignments$[ebp]
	add	eax, 1
	mov	DWORD PTR _finalAssignments$[ebp], eax
$LN127@LoadAssign:

; 1634 :             }
; 1635 :             break;

	jmp	$LN174@LoadAssign
$LN122@LoadAssign:

; 1636 : 
; 1637 :         case ECAT_ConstIndex: // e.g. LHS = myGS[1]
; 1638 :             SBinaryAssignment::SConstantIndex *psConstIndex;
; 1639 : 
; 1640 :             VHD( m_msUnstructured.ReadAtOffset(psAssignments[i].oInitializer, sizeof(*psConstIndex), (void**) &psConstIndex),
; 1641 :                 "Invalid pEffectBuffer: cannot read assignment initializer." );

	lea	eax, DWORD PTR _psConstIndex$31[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _psAssignments$[ebp]
	mov	eax, DWORD PTR [edx+ecx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?ReadAtOffset@CMemoryStream@D3DX11Core@@QAEJKKPAPAX@Z ; D3DX11Core::CMemoryStream::ReadAtOffset
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN121@LoadAssign
	jmp	$lExit$253
$LN121@LoadAssign:

; 1642 :             VHD( m_msUnstructured.ReadAtOffset(psConstIndex->oArrayName, &pGlobalVarName), "Invalid pEffectBuffer: cannot read array name." );

	lea	eax, DWORD PTR _pGlobalVarName$37[ebp]
	push	eax
	mov	ecx, DWORD PTR _psConstIndex$31[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?ReadAtOffset@CMemoryStream@D3DX11Core@@QAEJKPAPBD@Z ; D3DX11Core::CMemoryStream::ReadAtOffset
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN119@LoadAssign
	jmp	$lExit$253
$LN119@LoadAssign:

; 1643 : 
; 1644 :             VBD( pVarArray = m_pEffect->FindVariableByName(pGlobalVarName), "Loading error: cannot find array name." );

	mov	eax, DWORD PTR _pGlobalVarName$37[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	call	?FindVariableByName@CEffect@D3DX11Effects@@IAEPAUSGlobalVariable@2@PBD@Z ; D3DX11Effects::CEffect::FindVariableByName
	mov	DWORD PTR _pVarArray$40[ebp], eax
	cmp	DWORD PTR _pVarArray$40[ebp], 0
	jne	SHORT $LN117@LoadAssign
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$253
$LN117@LoadAssign:

; 1645 : 
; 1646 :             if (pAssignment->IsObjectAssignment())

	mov	ecx, DWORD PTR _pAssignment$36[ebp]
	call	?IsObjectAssignment@SAssignment@D3DX11Effects@@QAEHXZ ; D3DX11Effects::SAssignment::IsObjectAssignment
	test	eax, eax
	je	$LN115@LoadAssign

; 1647 :             {
; 1648 :                 VBD( psConstIndex->Index < pVarArray->pType->Elements, "Invalid pEffectBuffer: out of bounds array index." );

	mov	eax, DWORD PTR _pVarArray$40[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _psConstIndex$31[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR [ecx+8]
	jb	SHORT $LN114@LoadAssign
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$253
$LN114@LoadAssign:

; 1649 :                 VBD( pVarArray->pType->VarType == EVT_Object && 
; 1650 :                      GetSimpleParameterTypeFromObjectType(pVarArray->pType->ObjectType) == g_lvGeneral[psAssignments[i].iState].m_Type,
; 1651 :                      "Loading error: invalid variable type or object type." );

	mov	eax, DWORD PTR _pVarArray$40[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx+4], 2
	jne	SHORT $LN111@LoadAssign
	mov	eax, DWORD PTR _pVarArray$40[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	?GetSimpleParameterTypeFromObjectType@D3DX11Effects@@YA?AW4_D3D_SHADER_VARIABLE_TYPE@@W4EObjectType@1@@Z ; D3DX11Effects::GetSimpleParameterTypeFromObjectType
	add	esp, 4
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _psAssignments$[ebp]
	imul	ecx, DWORD PTR [edx+ecx], 40
	cmp	eax, DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B[ecx+8]
	je	SHORT $LN112@LoadAssign
$LN111@LoadAssign:
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$253
$LN112@LoadAssign:

; 1652 : 
; 1653 :                 // Write directly into the state block's backing store
; 1654 :                 *((void **)pLHS) = GetBlockByIndex(pVarArray->pType->VarType, pVarArray->pType->ObjectType, pVarArray->Data.pGeneric, psConstIndex->Index);

	mov	eax, DWORD PTR _psConstIndex$31[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _pVarArray$40[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _pVarArray$40[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _pVarArray$40[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	?GetBlockByIndex@D3DX11Effects@@YAPAXW4EVarType@1@W4EObjectType@1@PAXI@Z ; D3DX11Effects::GetBlockByIndex
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _pLHS$35[ebp]
	mov	DWORD PTR [ecx], eax

; 1655 :                 VBD( NULL != *((void **)pLHS), "Internal loading error: invalid block." );

	mov	eax, DWORD PTR _pLHS$35[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN109@LoadAssign
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$253
$LN109@LoadAssign:

; 1656 : 
; 1657 :                 // Now we can get rid of this assignment
; 1658 :             }
; 1659 :             else

	jmp	$LN107@LoadAssign
$LN115@LoadAssign:

; 1660 :             {
; 1661 :                 VBD( pVarArray->pType->BelongsInConstantBuffer(), "Invalid pEffectBuffer: assignment type mismatch." );

	mov	eax, DWORD PTR _pVarArray$40[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?BelongsInConstantBuffer@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::BelongsInConstantBuffer
	test	eax, eax
	jne	SHORT $LN106@LoadAssign
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$253
$LN106@LoadAssign:

; 1662 : 
; 1663 :                 pAssignment->DependencyCount = 1;

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	DWORD PTR [eax+12], 1

; 1664 :                 VN( pAssignment->pDependencies = PRIVATENEW SAssignment::SDependency[pAssignment->DependencyCount] );

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR $T8[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T8[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T10[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN222@LoadAssign
	push	OFFSET ??0SDependency@SAssignment@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SAssignment::SDependency::SDependency
	mov	eax, DWORD PTR $T8[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR $T10[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T10[ebp]
	mov	DWORD PTR tv531[ebp], edx
	jmp	SHORT $LN223@LoadAssign
$LN222@LoadAssign:
	mov	DWORD PTR tv531[ebp], 0
$LN223@LoadAssign:
	mov	eax, DWORD PTR tv531[ebp]
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _pAssignment$36[ebp]
	mov	edx, DWORD PTR $T9[ebp]
	mov	DWORD PTR [ecx+16], edx
	cmp	DWORD PTR $T9[ebp], 0
	jne	SHORT $LN104@LoadAssign
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$253
$LN104@LoadAssign:

; 1665 :                 pAssignment->pDependencies->pVariable = pVarArray;

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _pVarArray$40[ebp]
	mov	DWORD PTR [ecx], edx

; 1666 : 
; 1667 :                 CCheckedDword chkDataLen = psConstIndex->Index;

	mov	eax, DWORD PTR _psConstIndex$31[ebp]
	add	eax, 4
	push	eax
	lea	ecx, DWORD PTR _chkDataLen$30[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>

; 1668 :                 UINT  dataLen;
; 1669 :                 chkDataLen *= SType::c_ScalarSize;

	mov	DWORD PTR $T12[ebp], 4
	lea	eax, DWORD PTR $T12[ebp]
	push	eax
	lea	ecx, DWORD PTR $T11[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
	lea	ecx, DWORD PTR $T11[ebp]
	push	ecx
	lea	ecx, DWORD PTR _chkDataLen$30[ebp]
	call	??X?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z ; CheckedNumber<unsigned int,4294967295>::operator*=

; 1670 :                 chkDataLen += pAssignment->DataSize;

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 65535				; 0000ffffH
	mov	DWORD PTR $T14[ebp], ecx
	lea	edx, DWORD PTR $T14[ebp]
	push	edx
	lea	ecx, DWORD PTR $T13[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
	lea	eax, DWORD PTR $T13[ebp]
	push	eax
	lea	ecx, DWORD PTR _chkDataLen$30[ebp]
	call	??Y?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z ; CheckedNumber<unsigned int,4294967295>::operator+=

; 1671 :                 VHD( chkDataLen.GetValue(&dataLen), "Overflow: assignment size." );

	lea	eax, DWORD PTR _dataLen$29[ebp]
	push	eax
	lea	ecx, DWORD PTR _chkDataLen$30[ebp]
	call	?GetValue@?$CheckedNumber@I$0PPPPPPPP@@@QAEJPAI@Z ; CheckedNumber<unsigned int,4294967295>::GetValue
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN102@LoadAssign
	jmp	$lExit$253
$LN102@LoadAssign:

; 1672 :                 VBD( dataLen <= pVarArray->pType->TotalSize, "Internal loading error: assignment size mismatch" );

	mov	eax, DWORD PTR _pVarArray$40[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _dataLen$29[ebp]
	cmp	edx, DWORD PTR [ecx+16]
	jbe	SHORT $LN100@LoadAssign
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$253
$LN100@LoadAssign:

; 1673 : 
; 1674 :                 pAssignment->Source.Offset = pVarArray->Data.Offset + psConstIndex->Index * SType::c_ScalarSize;

	mov	eax, DWORD PTR _psConstIndex$31[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _pVarArray$40[ebp]
	mov	eax, DWORD PTR [edx+4]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	edx, DWORD PTR _pAssignment$36[ebp]
	mov	DWORD PTR [edx+24], ecx

; 1675 : 
; 1676 :                 // _NumericConstIndex is not used here because _NumericVariable 
; 1677 :                 // does the same stuff in a more general fashion with no perf hit.  
; 1678 :                 pAssignment->AssignmentType = ERAT_NumericVariable;

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	DWORD PTR [eax+4], 2

; 1679 : 
; 1680 :                 // Can't get rid of this assignment
; 1681 :                 ++ finalAssignments;

	mov	eax, DWORD PTR _finalAssignments$[ebp]
	add	eax, 1
	mov	DWORD PTR _finalAssignments$[ebp], eax
$LN107@LoadAssign:

; 1682 :             }
; 1683 :             break;

	jmp	$LN174@LoadAssign
$LN98@LoadAssign:

; 1684 : 
; 1685 :         case ECAT_VariableIndex: // e.g. LHS = myVar[numLights];
; 1686 :             SBinaryAssignment::SVariableIndex *psVarIndex;
; 1687 : 
; 1688 :             VHD( m_msUnstructured.ReadAtOffset(psAssignments[i].oInitializer, sizeof(*psVarIndex), (void**) &psVarIndex),
; 1689 :                  "Invalid pEffectBuffer: cannot read assignment initializer." );

	lea	eax, DWORD PTR _psVarIndex$28[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _psAssignments$[ebp]
	mov	eax, DWORD PTR [edx+ecx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?ReadAtOffset@CMemoryStream@D3DX11Core@@QAEJKKPAPAX@Z ; D3DX11Core::CMemoryStream::ReadAtOffset
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN97@LoadAssign
	jmp	$lExit$253
$LN97@LoadAssign:

; 1690 :             VHD( m_msUnstructured.ReadAtOffset(psVarIndex->oArrayName, &pGlobalVarName), "Invalid pEffectBuffer: cannot read variable name." );

	lea	eax, DWORD PTR _pGlobalVarName$37[ebp]
	push	eax
	mov	ecx, DWORD PTR _psVarIndex$28[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?ReadAtOffset@CMemoryStream@D3DX11Core@@QAEJKPAPBD@Z ; D3DX11Core::CMemoryStream::ReadAtOffset
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN95@LoadAssign
	jmp	$lExit$253
$LN95@LoadAssign:

; 1691 :             VBD( pVarArray = m_pEffect->FindVariableByName(pGlobalVarName), "Loading error: cannot find variable name." );

	mov	eax, DWORD PTR _pGlobalVarName$37[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	call	?FindVariableByName@CEffect@D3DX11Effects@@IAEPAUSGlobalVariable@2@PBD@Z ; D3DX11Effects::CEffect::FindVariableByName
	mov	DWORD PTR _pVarArray$40[ebp], eax
	cmp	DWORD PTR _pVarArray$40[ebp], 0
	jne	SHORT $LN93@LoadAssign
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$253
$LN93@LoadAssign:

; 1692 : 
; 1693 :             VHD( m_msUnstructured.ReadAtOffset(psVarIndex->oIndexVarName, &pGlobalVarName), "Invalid pEffectBuffer: cannot read index variable name." );

	lea	eax, DWORD PTR _pGlobalVarName$37[ebp]
	push	eax
	mov	ecx, DWORD PTR _psVarIndex$28[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?ReadAtOffset@CMemoryStream@D3DX11Core@@QAEJKPAPBD@Z ; D3DX11Core::CMemoryStream::ReadAtOffset
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN91@LoadAssign
	jmp	$lExit$253
$LN91@LoadAssign:

; 1694 :             VBD( pVarIndex = m_pEffect->FindVariableByName(pGlobalVarName), "Loading error: cannot find index variable name." );

	mov	eax, DWORD PTR _pGlobalVarName$37[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	call	?FindVariableByName@CEffect@D3DX11Effects@@IAEPAUSGlobalVariable@2@PBD@Z ; D3DX11Effects::CEffect::FindVariableByName
	mov	DWORD PTR _pVarIndex$39[ebp], eax
	cmp	DWORD PTR _pVarIndex$39[ebp], 0
	jne	SHORT $LN89@LoadAssign
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$253
$LN89@LoadAssign:

; 1695 : 
; 1696 :             // Only support integer indices
; 1697 :             VBD( pVarIndex->pType->VarType == EVT_Numeric && (pVarIndex->pType->NumericType.ScalarType == EST_Int || pVarIndex->pType->NumericType.ScalarType == EST_UInt),
; 1698 :                  "Invalid pEffectBuffer: invalid index variable type.");

	mov	eax, DWORD PTR _pVarIndex$39[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx+4], 1
	jne	SHORT $LN86@LoadAssign
	mov	eax, DWORD PTR _pVarIndex$39[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+28]
	shl	edx, 24					; 00000018H
	sar	edx, 27					; 0000001bH
	cmp	edx, 2
	je	SHORT $LN87@LoadAssign
	mov	eax, DWORD PTR _pVarIndex$39[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+28]
	shl	edx, 24					; 00000018H
	sar	edx, 27					; 0000001bH
	cmp	edx, 3
	je	SHORT $LN87@LoadAssign
$LN86@LoadAssign:
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$253
$LN87@LoadAssign:

; 1699 :             VBD( pVarArray->pType->Elements > 0, "Invalid pEffectBuffer: array variable is not an array." );

	mov	eax, DWORD PTR _pVarArray$40[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx+8], 0
	ja	SHORT $LN84@LoadAssign
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$253
$LN84@LoadAssign:

; 1700 : 
; 1701 :             pVarIndex->pCB->IsUsedByExpression = TRUE;

	mov	eax, DWORD PTR _pVarIndex$39[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+48]
	or	edx, 16					; 00000010H
	mov	eax, DWORD PTR _pVarIndex$39[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [ecx+48], edx

; 1702 : 
; 1703 :             if (pAssignment->IsObjectAssignment())

	mov	ecx, DWORD PTR _pAssignment$36[ebp]
	call	?IsObjectAssignment@SAssignment@D3DX11Effects@@QAEHXZ ; D3DX11Effects::SAssignment::IsObjectAssignment
	test	eax, eax
	je	$LN82@LoadAssign

; 1704 :             {
; 1705 :                 VBD( pVarArray->pType->VarType == EVT_Object && 
; 1706 :                      GetSimpleParameterTypeFromObjectType(pVarArray->pType->ObjectType) == g_lvGeneral[psAssignments[i].iState].m_Type,
; 1707 :                      "Loading error: invalid variable type or object type." );

	mov	eax, DWORD PTR _pVarArray$40[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx+4], 2
	jne	SHORT $LN80@LoadAssign
	mov	eax, DWORD PTR _pVarArray$40[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	?GetSimpleParameterTypeFromObjectType@D3DX11Effects@@YA?AW4_D3D_SHADER_VARIABLE_TYPE@@W4EObjectType@1@@Z ; D3DX11Effects::GetSimpleParameterTypeFromObjectType
	add	esp, 4
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _psAssignments$[ebp]
	imul	ecx, DWORD PTR [edx+ecx], 40
	cmp	eax, DWORD PTR ?g_lvGeneral@D3DX11Effects@@3QBULValue@1@B[ecx+8]
	je	SHORT $LN81@LoadAssign
$LN80@LoadAssign:
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$253
$LN81@LoadAssign:

; 1708 : 
; 1709 :                 // MaxElements is only 16-bits wide
; 1710 :                 VBD( pVarArray->pType->Elements <= 0xFFFF, "Internal error: array size is too large." ); 

	mov	eax, DWORD PTR _pVarArray$40[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx+8], 65535		; 0000ffffH
	jbe	SHORT $LN78@LoadAssign
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$253
$LN78@LoadAssign:

; 1711 :                 pAssignment->MaxElements = pVarArray->pType->Elements;

	mov	eax, DWORD PTR _pVarArray$40[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	and	edx, 65535				; 0000ffffH
	shl	edx, 16					; 00000010H
	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, 65535				; 0000ffffH
	or	ecx, edx
	mov	edx, DWORD PTR _pAssignment$36[ebp]
	mov	DWORD PTR [edx+28], ecx

; 1712 : 
; 1713 :                 pAssignment->DependencyCount = 1;

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	DWORD PTR [eax+12], 1

; 1714 :                 VN( pAssignment->pDependencies = PRIVATENEW SAssignment::SDependency[pAssignment->DependencyCount] );

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR $T15[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T15[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T17[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T17[ebp], 0
	je	SHORT $LN224@LoadAssign
	push	OFFSET ??0SDependency@SAssignment@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SAssignment::SDependency::SDependency
	mov	eax, DWORD PTR $T15[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR $T17[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T17[ebp]
	mov	DWORD PTR tv745[ebp], edx
	jmp	SHORT $LN225@LoadAssign
$LN224@LoadAssign:
	mov	DWORD PTR tv745[ebp], 0
$LN225@LoadAssign:
	mov	eax, DWORD PTR tv745[ebp]
	mov	DWORD PTR $T16[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _pAssignment$36[ebp]
	mov	edx, DWORD PTR $T16[ebp]
	mov	DWORD PTR [ecx+16], edx
	cmp	DWORD PTR $T16[ebp], 0
	jne	SHORT $LN76@LoadAssign
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$253
$LN76@LoadAssign:

; 1715 :                 pAssignment->pDependencies[0].pVariable = pVarIndex;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pAssignment$36[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _pVarIndex$39[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 1716 : 
; 1717 :                 // Point this assignment to the start of the variable's object array.
; 1718 :                 // When this assignment is dirty, we write the value of this pointer plus
; 1719 :                 // the index given by its one dependency directly into the destination
; 1720 :                 pAssignment->Source = pVarArray->Data;

	mov	eax, DWORD PTR _pVarArray$40[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _pAssignment$36[ebp]
	mov	DWORD PTR [edx+24], ecx

; 1721 :                 pAssignment->AssignmentType = ERAT_ObjectVariableIndex;

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	DWORD PTR [eax+4], 8

; 1722 :             }
; 1723 :             else

	jmp	$LN74@LoadAssign
$LN82@LoadAssign:

; 1724 :             {
; 1725 :                 VBD( pVarArray->pType->BelongsInConstantBuffer(), "Invalid pEffectBuffer: assignment type mismatch." );

	mov	eax, DWORD PTR _pVarArray$40[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?BelongsInConstantBuffer@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::BelongsInConstantBuffer
	test	eax, eax
	jne	SHORT $LN73@LoadAssign
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$253
$LN73@LoadAssign:

; 1726 : 
; 1727 :                 pAssignment->DependencyCount = 2;

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	DWORD PTR [eax+12], 2

; 1728 :                 VN( pAssignment->pDependencies = PRIVATENEW SAssignment::SDependency[pAssignment->DependencyCount] );

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR $T18[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T18[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T20[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T20[ebp], 0
	je	SHORT $LN226@LoadAssign
	push	OFFSET ??0SDependency@SAssignment@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SAssignment::SDependency::SDependency
	mov	eax, DWORD PTR $T18[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR $T20[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T20[ebp]
	mov	DWORD PTR tv787[ebp], edx
	jmp	SHORT $LN227@LoadAssign
$LN226@LoadAssign:
	mov	DWORD PTR tv787[ebp], 0
$LN227@LoadAssign:
	mov	eax, DWORD PTR tv787[ebp]
	mov	DWORD PTR $T19[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _pAssignment$36[ebp]
	mov	edx, DWORD PTR $T19[ebp]
	mov	DWORD PTR [ecx+16], edx
	cmp	DWORD PTR $T19[ebp], 0
	jne	SHORT $LN71@LoadAssign
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$253
$LN71@LoadAssign:

; 1729 :                 pAssignment->pDependencies[0].pVariable = pVarIndex;

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pAssignment$36[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _pVarIndex$39[ebp]
	mov	DWORD PTR [eax+ecx], edx

; 1730 :                 pAssignment->pDependencies[1].pVariable = pVarArray;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pAssignment$36[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR _pVarArray$40[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 1731 : 
; 1732 :                 // When pVarIndex is updated, we update the source pointer.
; 1733 :                 // When pVarArray is updated, we copy data from the source to the destination.
; 1734 :                 pAssignment->Source.pGeneric = NULL;

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	DWORD PTR [eax+24], 0

; 1735 :                 pAssignment->AssignmentType = ERAT_NumericVariableIndex;

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	DWORD PTR [eax+4], 4
$LN74@LoadAssign:

; 1736 :             }
; 1737 : 
; 1738 :             // Can't get rid of this assignment
; 1739 :             ++ finalAssignments;

	mov	eax, DWORD PTR _finalAssignments$[ebp]
	add	eax, 1
	mov	DWORD PTR _finalAssignments$[ebp], eax

; 1740 : 
; 1741 :             break;

	jmp	$LN174@LoadAssign
$LN69@LoadAssign:

; 1742 : 
; 1743 :         case ECAT_ExpressionIndex:// e.g. LHS = myVar[a + b * c];
; 1744 :         case ECAT_Expression: // e.g. LHS = a + b * c;
; 1745 :             // we do not support FXLVM
; 1746 :             VHD( E_NOTIMPL, "FXLVM Expressions (complex assignments like myVar[i*2]) are not supported in Effects11." );

	mov	DWORD PTR _hr$[ebp], -2147467263	; 80004001H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN68@LoadAssign
	jmp	$lExit$253
$LN68@LoadAssign:

; 1747 :             break;

	jmp	$LN174@LoadAssign
$LN65@LoadAssign:

; 1748 : 
; 1749 :         case ECAT_InlineShader:
; 1750 :         case ECAT_InlineShader5:
; 1751 :             UINT  cbShaderBin;
; 1752 :             BYTE *pShaderBin;
; 1753 :             SShaderBlock *pShaderBlock;
; 1754 :             SAnonymousShader *pAnonShader;
; 1755 :             union
; 1756 :             {
; 1757 :                 SBinaryAssignment::SInlineShader *psInlineShader;
; 1758 :                 SBinaryShaderData5 *psInlineShader5;
; 1759 :             };
; 1760 : 
; 1761 :             // Inline shader assignments must be object types
; 1762 :             D3DXASSERT(pAssignment->IsObjectAssignment());

	mov	ecx, DWORD PTR _pAssignment$36[ebp]
	call	?IsObjectAssignment@SAssignment@D3DX11Effects@@QAEHXZ ; D3DX11Effects::SAssignment::IsObjectAssignment
	test	eax, eax
	jne	SHORT $LN64@LoadAssign
	push	OFFSET ??_C@_0CC@HBGMAMIM@pAssignment?9?$DOIsObjectAssignment?$CI@
	mov	eax, DWORD PTR ?__LINE__Var@?1??LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@3@PAEPAI2@Z@4JA
	add	eax, 359				; 00000167H
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN64@LoadAssign:
	xor	eax, eax
	jne	SHORT $LN65@LoadAssign

; 1763 : 
; 1764 :             C_ASSERT( offsetof(SBinaryAssignment::SInlineShader,oShader) == offsetof(SBinaryShaderData5,oShader) );
; 1765 :             C_ASSERT( offsetof(SBinaryAssignment::SInlineShader,oSODecl) == offsetof(SBinaryShaderData5,oSODecls) );
; 1766 :             if( psAssignments[i].AssignmentType == ECAT_InlineShader )

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _psAssignments$[ebp]
	cmp	DWORD PTR [ecx+eax+8], 7
	jne	SHORT $LN61@LoadAssign

; 1767 :             {
; 1768 :                 VHD( m_msUnstructured.ReadAtOffset(psAssignments[i].oInitializer, sizeof(*psInlineShader), (void**) &psInlineShader),
; 1769 :                      "Invalid pEffectBuffer: cannot read inline shader." );

	lea	eax, DWORD PTR _$S1$23[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _psAssignments$[ebp]
	mov	eax, DWORD PTR [edx+ecx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?ReadAtOffset@CMemoryStream@D3DX11Core@@QAEJKKPAPAX@Z ; D3DX11Core::CMemoryStream::ReadAtOffset
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN60@LoadAssign
	jmp	$lExit$253
$LN60@LoadAssign:

; 1770 :             }
; 1771 :             else

	jmp	SHORT $LN58@LoadAssign
$LN61@LoadAssign:

; 1772 :             {
; 1773 :                 VHD( m_msUnstructured.ReadAtOffset(psAssignments[i].oInitializer, sizeof(*psInlineShader5), (void**) &psInlineShader5),
; 1774 :                     "Invalid pEffectBuffer: cannot read inline shader." );

	lea	eax, DWORD PTR _$S1$23[ebp]
	push	eax
	push	36					; 00000024H
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _psAssignments$[ebp]
	mov	eax, DWORD PTR [edx+ecx+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?ReadAtOffset@CMemoryStream@D3DX11Core@@QAEJKKPAPAX@Z ; D3DX11Core::CMemoryStream::ReadAtOffset
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN58@LoadAssign
	jmp	$lExit$253
$LN58@LoadAssign:

; 1775 :             }
; 1776 :             
; 1777 :             VBD( m_pEffect->m_ShaderBlockCount < m_pHeader->cTotalShaders, "Internal loading error: shader count is out incorrect." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [ecx+60]
	cmp	ecx, DWORD PTR [eax+68]
	jb	SHORT $LN55@LoadAssign
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$253
$LN55@LoadAssign:

; 1778 :             VBD( m_pEffect->m_AnonymousShaderCount < m_pHeader->cInlineShaders, "Internal loading error: anonymous shader count is out incorrect." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [ecx+36]
	cmp	ecx, DWORD PTR [eax+72]
	jb	SHORT $LN53@LoadAssign
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$253
$LN53@LoadAssign:

; 1779 : 
; 1780 :             pShaderBlock = &m_pEffect->m_pShaderBlocks[m_pEffect->m_ShaderBlockCount];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	imul	edx, DWORD PTR [eax+60], 68
	add	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR _pShaderBlock$25[ebp], edx

; 1781 :             pAnonShader = &m_pEffect->m_pAnonymousShaders[m_pEffect->m_AnonymousShaderCount];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	imul	edx, DWORD PTR [eax+36], 12
	add	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _pAnonShader$24[ebp], edx

; 1782 :             pAnonShader->pShaderBlock = pShaderBlock;

	mov	eax, DWORD PTR _pAnonShader$24[ebp]
	mov	ecx, DWORD PTR _pShaderBlock$25[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1783 : 
; 1784 :             ++ m_pEffect->m_ShaderBlockCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+60]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [ecx+60], edx

; 1785 :             ++ m_pEffect->m_AnonymousShaderCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+36]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [ecx+36], edx

; 1786 : 
; 1787 :             // Write directly into the state block's backing store
; 1788 :             *((void **)pLHS) = pShaderBlock;

	mov	eax, DWORD PTR _pLHS$35[ebp]
	mov	ecx, DWORD PTR _pShaderBlock$25[ebp]
	mov	DWORD PTR [eax], ecx

; 1789 : 
; 1790 :             VHD( GetUnstructuredDataBlock(psInlineShader->oShader, &cbShaderBin, (void **) &pShaderBin), "Invalid pEffectBuffer: cannot read inline shader block." );

	lea	eax, DWORD PTR _pShaderBin$26[ebp]
	push	eax
	lea	ecx, DWORD PTR _cbShaderBin$27[ebp]
	push	ecx
	mov	edx, DWORD PTR _$S1$23[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetUnstructuredDataBlock@CEffectLoader@D3DX11Effects@@IAEJIPAIPAPAX@Z ; D3DX11Effects::CEffectLoader::GetUnstructuredDataBlock
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN51@LoadAssign
	jmp	$lExit$253
$LN51@LoadAssign:

; 1791 : 
; 1792 :             if (cbShaderBin > 0)

	cmp	DWORD PTR _cbShaderBin$27[ebp], 0
	jbe	$LN49@LoadAssign

; 1793 :             {
; 1794 :                 VN( pShaderBlock->pReflectionData = PRIVATENEW SShaderBlock::SReflectionData );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	44					; 0000002cH
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T21[ebp], eax
	mov	ecx, DWORD PTR _pShaderBlock$25[ebp]
	mov	edx, DWORD PTR $T21[ebp]
	mov	DWORD PTR [ecx+8], edx
	cmp	DWORD PTR $T21[ebp], 0
	jne	SHORT $LN48@LoadAssign
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$253
$LN48@LoadAssign:

; 1795 : 
; 1796 :                 pShaderBlock->pReflectionData->BytecodeLength = cbShaderBin;

	mov	eax, DWORD PTR _pShaderBlock$25[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _cbShaderBin$27[ebp]
	mov	DWORD PTR [ecx+4], edx

; 1797 :                 pShaderBlock->pReflectionData->pBytecode = (BYTE*) pShaderBin;

	mov	eax, DWORD PTR _pShaderBlock$25[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _pShaderBin$26[ebp]
	mov	DWORD PTR [ecx], edx

; 1798 :                 pShaderBlock->pReflectionData->pStreamOutDecls[0] =
; 1799 :                 pShaderBlock->pReflectionData->pStreamOutDecls[1] =
; 1800 :                 pShaderBlock->pReflectionData->pStreamOutDecls[2] =
; 1801 :                 pShaderBlock->pReflectionData->pStreamOutDecls[3] = NULL;

	mov	eax, DWORD PTR _pShaderBlock$25[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, 4
	imul	eax, edx, 3
	mov	DWORD PTR [ecx+eax+8], 0
	mov	ecx, DWORD PTR _pShaderBlock$25[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, 4
	shl	eax, 1
	mov	DWORD PTR [edx+eax+8], 0
	mov	ecx, DWORD PTR _pShaderBlock$25[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR [edx+eax+8], 0
	mov	ecx, DWORD PTR _pShaderBlock$25[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	DWORD PTR [edx+ecx+8], 0

; 1802 :                 pShaderBlock->pReflectionData->RasterizedStream = 0;

	mov	eax, DWORD PTR _pShaderBlock$25[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+24], 0

; 1803 :                 pShaderBlock->pReflectionData->IsNullGS = FALSE;

	mov	eax, DWORD PTR _pShaderBlock$25[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+28], 0

; 1804 :                 pShaderBlock->pReflectionData->pReflection = NULL;

	mov	eax, DWORD PTR _pShaderBlock$25[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+32], 0

; 1805 :                 pShaderBlock->pReflectionData->InterfaceParameterCount = 0;

	mov	eax, DWORD PTR _pShaderBlock$25[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+36], 0

; 1806 :                 pShaderBlock->pReflectionData->pInterfaceParameters = NULL;

	mov	eax, DWORD PTR _pShaderBlock$25[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+40], 0
$LN49@LoadAssign:

; 1807 :             }
; 1808 : 
; 1809 :             switch (pAssignment->LhsType)

	mov	eax, DWORD PTR _pAssignment$36[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv921[ebp], ecx
	mov	edx, DWORD PTR tv921[ebp]
	sub	edx, 1
	mov	DWORD PTR tv921[ebp], edx
	cmp	DWORD PTR tv921[ebp], 15		; 0000000fH
	ja	$LN12@LoadAssign
	mov	eax, DWORD PTR tv921[ebp]
	movzx	ecx, BYTE PTR $LN234@LoadAssign[eax]
	jmp	DWORD PTR $LN252@LoadAssign[ecx*4]
$LN44@LoadAssign:

; 1810 :             {
; 1811 :             case ELHS_PixelShaderBlock:
; 1812 :                 pShaderBlock->pVT = &g_vtPS;

	mov	eax, DWORD PTR _pShaderBlock$25[ebp]
	mov	DWORD PTR [eax+4], OFFSET ?g_vtPS@D3DX11Effects@@3USD3DShaderVTable@1@A ; D3DX11Effects::g_vtPS

; 1813 :                 VBD( psInlineShader->oSODecl == NULL, "Internal loading error: pixel shaders cannot have stream out decls." );

	mov	eax, DWORD PTR _$S1$23[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN43@LoadAssign
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$253
$LN43@LoadAssign:

; 1814 :                 break;

	jmp	$LN45@LoadAssign
$LN41@LoadAssign:

; 1815 :             
; 1816 :             case ELHS_GeometryShaderBlock:
; 1817 :                 pShaderBlock->pVT = &g_vtGS;

	mov	eax, DWORD PTR _pShaderBlock$25[ebp]
	mov	DWORD PTR [eax+4], OFFSET ?g_vtGS@D3DX11Effects@@3USD3DShaderVTable@1@A ; D3DX11Effects::g_vtGS

; 1818 :                 if( psAssignments[i].AssignmentType == ECAT_InlineShader )

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _psAssignments$[ebp]
	cmp	DWORD PTR [ecx+eax+8], 7
	jne	SHORT $LN40@LoadAssign

; 1819 :                 {
; 1820 :                     if (psInlineShader->oSODecl)

	mov	eax, DWORD PTR _$S1$23[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN39@LoadAssign

; 1821 :                     {
; 1822 :                         // This is a GS with SO
; 1823 :                         VHD( GetStringAndAddToReflection(psInlineShader->oSODecl, &pShaderBlock->pReflectionData->pStreamOutDecls[0]),
; 1824 :                              "Invalid pEffectBuffer: cannot read SO decl." );

	mov	eax, DWORD PTR _pShaderBlock$25[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, 4
	imul	eax, edx, 0
	lea	ecx, DWORD PTR [ecx+eax+8]
	push	ecx
	mov	edx, DWORD PTR _$S1$23[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStringAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIPAPAD@Z ; D3DX11Effects::CEffectLoader::GetStringAndAddToReflection
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN39@LoadAssign
	jmp	$lExit$253
$LN39@LoadAssign:

; 1825 :                     }
; 1826 :                 }
; 1827 :                 else

	jmp	$LN36@LoadAssign
$LN40@LoadAssign:

; 1828 :                 {
; 1829 :                     // This is a GS with addressable stream out
; 1830 :                     for( UINT iDecl=0; iDecl < psInlineShader5->cSODecls; ++iDecl )

	mov	DWORD PTR _iDecl$22[ebp], 0
	jmp	SHORT $LN35@LoadAssign
$LN34@LoadAssign:
	mov	eax, DWORD PTR _iDecl$22[ebp]
	add	eax, 1
	mov	DWORD PTR _iDecl$22[ebp], eax
$LN35@LoadAssign:
	mov	eax, DWORD PTR _$S1$23[ebp]
	mov	ecx, DWORD PTR _iDecl$22[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN33@LoadAssign

; 1831 :                     {
; 1832 :                         if (psInlineShader5->oSODecls[iDecl])

	mov	eax, DWORD PTR _iDecl$22[ebp]
	mov	ecx, DWORD PTR _$S1$23[ebp]
	cmp	DWORD PTR [ecx+eax*4+4], 0
	je	SHORT $LN32@LoadAssign

; 1833 :                         {
; 1834 :                             VHD( GetStringAndAddToReflection(psInlineShader5->oSODecls[iDecl], &pShaderBlock->pReflectionData->pStreamOutDecls[iDecl]),
; 1835 :                                 "Invalid pEffectBuffer: cannot read SO decl." );

	mov	eax, DWORD PTR _pShaderBlock$25[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _iDecl$22[ebp]
	lea	eax, DWORD PTR [ecx+edx*4+8]
	push	eax
	mov	ecx, DWORD PTR _iDecl$22[ebp]
	mov	edx, DWORD PTR _$S1$23[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStringAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIPAPAD@Z ; D3DX11Effects::CEffectLoader::GetStringAndAddToReflection
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN32@LoadAssign
	jmp	$lExit$253
$LN32@LoadAssign:

; 1836 :                         }
; 1837 :                     }

	jmp	SHORT $LN34@LoadAssign
$LN33@LoadAssign:

; 1838 :                     pShaderBlock->pReflectionData->RasterizedStream = psInlineShader5->RasterizedStream;

	mov	eax, DWORD PTR _pShaderBlock$25[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _$S1$23[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
$LN36@LoadAssign:

; 1839 :                 }
; 1840 :                 break;

	jmp	$LN45@LoadAssign
$LN29@LoadAssign:

; 1841 : 
; 1842 :             case ELHS_VertexShaderBlock:
; 1843 :                 pShaderBlock->pVT = &g_vtVS;

	mov	eax, DWORD PTR _pShaderBlock$25[ebp]
	mov	DWORD PTR [eax+4], OFFSET ?g_vtVS@D3DX11Effects@@3USD3DShaderVTable@1@A ; D3DX11Effects::g_vtVS

; 1844 :                 VBD( psInlineShader->oSODecl == NULL, "Internal loading error: vertex shaders cannot have stream out decls." );

	mov	eax, DWORD PTR _$S1$23[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN28@LoadAssign
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$253
$LN28@LoadAssign:

; 1845 :                 break;

	jmp	$LN45@LoadAssign
$LN26@LoadAssign:

; 1846 : 
; 1847 :             case ELHS_HullShaderBlock:
; 1848 :                 pShaderBlock->pVT = &g_vtHS;

	mov	eax, DWORD PTR _pShaderBlock$25[ebp]
	mov	DWORD PTR [eax+4], OFFSET ?g_vtHS@D3DX11Effects@@3USD3DShaderVTable@1@A ; D3DX11Effects::g_vtHS

; 1849 :                 VBD( psInlineShader->oSODecl == NULL, "Internal loading error: hull shaders cannot have stream out decls." );

	mov	eax, DWORD PTR _$S1$23[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN25@LoadAssign
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$253
$LN25@LoadAssign:

; 1850 :                 break;

	jmp	$LN45@LoadAssign
$LN23@LoadAssign:

; 1851 : 
; 1852 :             case ELHS_DomainShaderBlock:
; 1853 :                 pShaderBlock->pVT = &g_vtDS;

	mov	eax, DWORD PTR _pShaderBlock$25[ebp]
	mov	DWORD PTR [eax+4], OFFSET ?g_vtDS@D3DX11Effects@@3USD3DShaderVTable@1@A ; D3DX11Effects::g_vtDS

; 1854 :                 VBD( psInlineShader->oSODecl == NULL, "Internal loading error: domain shaders cannot have stream out decls." );

	mov	eax, DWORD PTR _$S1$23[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN22@LoadAssign
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$253
$LN22@LoadAssign:

; 1855 :                 break;

	jmp	SHORT $LN45@LoadAssign
$LN20@LoadAssign:

; 1856 : 
; 1857 :             case ELHS_ComputeShaderBlock:
; 1858 :                 pShaderBlock->pVT = &g_vtCS;

	mov	eax, DWORD PTR _pShaderBlock$25[ebp]
	mov	DWORD PTR [eax+4], OFFSET ?g_vtCS@D3DX11Effects@@3USD3DShaderVTable@1@A ; D3DX11Effects::g_vtCS

; 1859 :                 VBD( psInlineShader->oSODecl == NULL, "Internal loading error: compute shaders cannot have stream out decls." );

	mov	eax, DWORD PTR _$S1$23[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN19@LoadAssign
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$253
$LN19@LoadAssign:

; 1860 :                 break;

	jmp	SHORT $LN45@LoadAssign
$LN16@LoadAssign:

; 1861 : 
; 1862 :             case ELHS_GeometryShaderSO:
; 1863 :                 D3DXASSERT(0); // Should never happen

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN15@LoadAssign
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@3@PAEPAI2@Z@4JA
	add	eax, 460				; 000001ccH
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN15@LoadAssign:
	xor	eax, eax
	jne	SHORT $LN16@LoadAssign
$LN12@LoadAssign:

; 1864 : 
; 1865 :             default:
; 1866 :                 VHD( E_FAIL, "Internal loading error: invalid shader type."  );

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN45@LoadAssign
	jmp	$lExit$253
$LN45@LoadAssign:

; 1867 :             }
; 1868 : 
; 1869 :             if( psAssignments[i].AssignmentType == ECAT_InlineShader5 )

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _psAssignments$[ebp]
	cmp	DWORD PTR [ecx+eax+8], 8
	jne	SHORT $LN9@LoadAssign

; 1870 :             {
; 1871 :                 pShaderBlock->pReflectionData->InterfaceParameterCount = psInlineShader5->cInterfaceBindings;

	mov	eax, DWORD PTR _pShaderBlock$25[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _$S1$23[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+36], eax

; 1872 :                 VH( GetInterfaceParametersAndAddToReflection( psInlineShader5->cInterfaceBindings, psInlineShader5->oInterfaceBindings, &pShaderBlock->pReflectionData->pInterfaceParameters ) );

	mov	eax, DWORD PTR _pShaderBlock$25[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 40					; 00000028H
	push	ecx
	mov	edx, DWORD PTR _$S1$23[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _$S1$23[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInterfaceParametersAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIIPAPAUSInterfaceParameter@SShaderBlock@2@@Z ; D3DX11Effects::CEffectLoader::GetInterfaceParametersAndAddToReflection
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN9@LoadAssign
	jmp	SHORT $lExit$253
$LN9@LoadAssign:

; 1873 :             }
; 1874 : 
; 1875 :             // Now we can get rid of this assignment
; 1876 :             break;

	jmp	SHORT $LN174@LoadAssign
$LN5@LoadAssign:

; 1877 : 
; 1878 :         default:
; 1879 :             D3DXASSERT(0);

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN4@LoadAssign
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@3@PAEPAI2@Z@4JA
	add	eax, 476				; 000001dcH
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN4@LoadAssign:
	xor	eax, eax
	jne	SHORT $LN5@LoadAssign
$LN174@LoadAssign:

; 1880 : 
; 1881 :         }
; 1882 :     }

	jmp	$LN208@LoadAssign
$LN207@LoadAssign:

; 1883 : 
; 1884 :     *pFinalAssignments = finalAssignments;

	mov	eax, DWORD PTR _pFinalAssignments$[ebp]
	mov	ecx, DWORD PTR _finalAssignments$[ebp]
	mov	DWORD PTR [eax], ecx

; 1885 :     if (pRTVAssignments)

	cmp	DWORD PTR _pRTVAssignments$[ebp], 0
	je	SHORT $lExit$253

; 1886 :         *pRTVAssignments = renderTargetViewAssns;

	mov	eax, DWORD PTR _pRTVAssignments$[ebp]
	mov	ecx, DWORD PTR _renderTargetViewAssns$[ebp]
	mov	DWORD PTR [eax], ecx
$lExit$253:

; 1887 : 
; 1888 : lExit:
; 1889 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 1890 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN248@LoadAssign
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 772				; 00000304H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	1
$LN248@LoadAssign:
	DD	11					; 0000000bH
	DD	$LN247@LoadAssign
$LN247@LoadAssign:
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN235@LoadAssign
	DD	-140					; ffffff74H
	DD	4
	DD	$LN236@LoadAssign
	DD	-188					; ffffff44H
	DD	4
	DD	$LN237@LoadAssign
	DD	-200					; ffffff38H
	DD	4
	DD	$LN238@LoadAssign
	DD	-212					; ffffff2cH
	DD	4
	DD	$LN239@LoadAssign
	DD	-228					; ffffff1cH
	DD	8
	DD	$LN240@LoadAssign
	DD	-240					; ffffff10H
	DD	4
	DD	$LN241@LoadAssign
	DD	-252					; ffffff04H
	DD	4
	DD	$LN242@LoadAssign
	DD	-264					; fffffef8H
	DD	4
	DD	$LN243@LoadAssign
	DD	-276					; fffffeecH
	DD	4
	DD	$LN244@LoadAssign
	DD	-312					; fffffec8H
	DD	4
	DD	$LN245@LoadAssign
$LN245@LoadAssign:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	49					; 00000031H
	DB	0
$LN244@LoadAssign:
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	66					; 00000042H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	0
$LN243@LoadAssign:
	DB	99					; 00000063H
	DB	98					; 00000062H
	DB	83					; 00000053H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	66					; 00000042H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	0
$LN242@LoadAssign:
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN241@LoadAssign:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN240@LoadAssign:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	107					; 0000006bH
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN239@LoadAssign:
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN238@LoadAssign:
	DB	112					; 00000070H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN237@LoadAssign:
	DB	112					; 00000070H
	DB	78					; 0000004eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN236@LoadAssign:
	DB	112					; 00000070H
	DB	71					; 00000047H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN235@LoadAssign:
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	65					; 00000041H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN249@LoadAssign:
	DD	$LN194@LoadAssign
	DD	$LN189@LoadAssign
	DD	$LN190@LoadAssign
	DD	$LN198@LoadAssign
	DD	$LN193@LoadAssign
	DD	$LN192@LoadAssign
	DD	$LN191@LoadAssign
	DD	$LN188@LoadAssign
	DD	$LN187@LoadAssign
	DD	$LN185@LoadAssign
	DD	$LN186@LoadAssign
	DD	$LN183@LoadAssign
$LN233@LoadAssign:
	DB	0
	DB	0
	DB	0
	DB	11					; 0000000bH
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	2
	DB	2
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	0
	DB	3
	DB	2
	DB	4
	DB	5
	DB	6
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	7
	DB	8
	DB	1
	DB	11					; 0000000bH
	DB	1
	DB	2
	DB	2
	DB	9
	DB	2
	DB	11					; 0000000bH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	1
	DB	10					; 0000000aH
	DB	1
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	npad	1
$LN250@LoadAssign:
	DD	$LN173@LoadAssign
	DD	$LN136@LoadAssign
	DD	$LN122@LoadAssign
	DD	$LN98@LoadAssign
	DD	$LN69@LoadAssign
	DD	$LN69@LoadAssign
	DD	$LN65@LoadAssign
	DD	$LN65@LoadAssign
$LN251@LoadAssign:
	DD	$LN157@LoadAssign
	DD	$LN158@LoadAssign
	DD	$LN156@LoadAssign
	DD	$LN150@LoadAssign
	DD	$LN151@LoadAssign
	DD	$LN159@LoadAssign
	DD	$LN161@LoadAssign
	DD	$LN160@LoadAssign
	DD	$LN148@LoadAssign
	DD	$LN148@LoadAssign
	DD	$LN148@LoadAssign
	DD	$LN148@LoadAssign
	DD	$LN148@LoadAssign
	DD	$LN153@LoadAssign
	DD	$LN155@LoadAssign
	DD	$LN154@LoadAssign
$LN252@LoadAssign:
	DD	$LN44@LoadAssign
	DD	$LN29@LoadAssign
	DD	$LN41@LoadAssign
	DD	$LN16@LoadAssign
	DD	$LN20@LoadAssign
	DD	$LN26@LoadAssign
	DD	$LN23@LoadAssign
	DD	$LN12@LoadAssign
$LN234@LoadAssign:
	DB	0
	DB	1
	DB	2
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	3
	DB	4
	DB	5
	DB	6
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@2@PAEPAI2@Z$53:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@2@PAEPAI2@Z$54:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@2@PAEPAI2@Z$55:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	eax, DWORD PTR $T10[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@2@PAEPAI2@Z$56:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	eax, DWORD PTR $T17[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@2@PAEPAI2@Z$57:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	eax, DWORD PTR $T20[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__ehhandler$?LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@2@PAEPAI2@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-776]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@2@PAEPAI2@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@2@PAEPAI2@Z ENDP ; D3DX11Effects::CEffectLoader::LoadAssignments
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?LoadStringAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPADI@Z
_TEXT	SEGMENT
tv76 = -308						; size = 4
tv173 = -301						; size = 1
tv170 = -300						; size = 4
tv167 = -296						; size = 4
$T1 = -288						; size = 4
_len$ = -84						; size = 4
_iter$ = -72						; size = 8
_oldPos$ = -56						; size = 4
_hash$ = -44						; size = 4
_pName$ = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_ppString$ = 8						; size = 4
_dwOffset$ = 12						; size = 4
?LoadStringAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPADI@Z PROC ; D3DX11Effects::CEffectLoader::LoadStringAndAddToPool, COMDAT
; _this$ = ecx

; 893  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 894  :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 895  :     char *pName;
; 896  :     UINT  hash;
; 897  :     SIZE_T oldPos;
; 898  :     CEffect::CStringHashTable::CIterator iter;
; 899  :     UINT  len;
; 900  : 
; 901  :     if (dwOffset == 0)

	cmp	DWORD PTR _dwOffset$[ebp], 0
	jne	SHORT $LN14@LoadString

; 902  :     {
; 903  :         *ppString = NULL;

	mov	eax, DWORD PTR _ppString$[ebp]
	mov	DWORD PTR [eax], 0

; 904  :         goto lExit;

	jmp	$lExit$22
	jmp	$lExit$22
$LN14@LoadString:

; 905  :     }
; 906  : 
; 907  :     oldPos = m_msUnstructured.GetPosition();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?GetPosition@CMemoryStream@D3DX11Core@@QAEKXZ ; D3DX11Core::CMemoryStream::GetPosition
	mov	DWORD PTR _oldPos$[ebp], eax

; 908  : 
; 909  :     VHD( m_msUnstructured.ReadAtOffset(dwOffset, (LPCSTR *) &pName), "Invalid pEffectBuffer: cannot read string." );

	lea	eax, DWORD PTR _pName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwOffset$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?ReadAtOffset@CMemoryStream@D3DX11Core@@QAEJKPAPBD@Z ; D3DX11Core::CMemoryStream::ReadAtOffset
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN12@LoadString
	jmp	$lExit$22
	jmp	$lExit$22
$LN12@LoadString:

; 910  :     len = (UINT)strlen(pName);

	mov	eax, DWORD PTR _pName$[ebp]
	mov	DWORD PTR tv167[ebp], eax
	mov	ecx, DWORD PTR tv167[ebp]
	add	ecx, 1
	mov	DWORD PTR tv170[ebp], ecx
$LL17@LoadString:
	mov	edx, DWORD PTR tv167[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv173[ebp], al
	add	DWORD PTR tv167[ebp], 1
	cmp	BYTE PTR tv173[ebp], 0
	jne	SHORT $LL17@LoadString
	mov	ecx, DWORD PTR tv167[ebp]
	sub	ecx, DWORD PTR tv170[ebp]
	mov	DWORD PTR tv76[ebp], ecx
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR _len$[ebp], edx

; 911  :     hash = ComputeHash((BYTE *)pName, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pName$[ebp]
	push	ecx
	call	?ComputeHash@@YAIPAEI@Z			; ComputeHash
	add	esp, 8
	mov	DWORD PTR _hash$[ebp], eax

; 912  :     if (FAILED(m_pEffect->m_pStringPool->FindValueWithHash(pName, hash, &iter)))

	lea	eax, DWORD PTR _iter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hash$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pName$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR [ecx+228]
	call	?FindValueWithHash@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEJPBDIPAVCIterator@1@@Z ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::FindValueWithHash
	test	eax, eax
	jge	$LN10@LoadString
$LN9@LoadString:

; 913  :     {
; 914  :         D3DXASSERT( m_pEffect->m_pPooledHeap != NULL );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+232], 0
	jne	SHORT $LN8@LoadString
	push	OFFSET ??_C@_0CB@IDNKIKCE@m_pEffect?9?$DOm_pPooledHeap?5?$CB?$DN?5NULL@
	mov	eax, DWORD PTR ?__LINE__Var@?1??LoadStringAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPADI@Z@4JA
	add	eax, 21					; 00000015H
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN8@LoadString:
	xor	eax, eax
	jne	SHORT $LN9@LoadString

; 915  :         VN( (*ppString) = new(*m_pEffect->m_pPooledHeap) char[len + 1] );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+232]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	push	eax
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _ppString$[ebp]
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [ecx], edx
	cmp	DWORD PTR $T1[ebp], 0
	jne	SHORT $LN5@LoadString
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	SHORT $lExit$22
	jmp	SHORT $lExit$22
$LN5@LoadString:

; 916  :         memcpy(*ppString, pName, len + 1);

	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _pName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ppString$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 917  :         VHD( m_pEffect->m_pStringPool->AddValueWithHash(*ppString, hash), "Internal loading error: failed to add string to pool." );

	mov	eax, DWORD PTR _hash$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ppString$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR [ecx+228]
	call	?AddValueWithHash@?$CEffectHashTableWithPrivateHeap@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEJPBDI@Z ; CEffectHashTableWithPrivateHeap<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::AddValueWithHash
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN3@LoadString
	jmp	SHORT $lExit$22
	jmp	SHORT $lExit$22
$LN3@LoadString:

; 918  :     }
; 919  :     else

	jmp	SHORT $LN1@LoadString
$LN10@LoadString:

; 920  :     {
; 921  :         *ppString = const_cast<LPSTR>(iter.GetData());

	lea	ecx, DWORD PTR _iter$[ebp]
	call	?GetData@CIterator@?$CEffectHashTable@PBD$1?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z@@QAEPBDXZ ; CEffectHashTable<char const *,&D3DX11Effects::CEffect::AreStringsEqual>::CIterator::GetData
	mov	ecx, DWORD PTR _ppString$[ebp]
	mov	DWORD PTR [ecx], eax
$LN1@LoadString:

; 922  :     }
; 923  : 
; 924  :     m_msUnstructured.Seek(oldPos);

	mov	eax, DWORD PTR _oldPos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?Seek@CMemoryStream@D3DX11Core@@QAEJK@Z	; D3DX11Core::CMemoryStream::Seek
$lExit$22:

; 925  : 
; 926  : lExit:
; 927  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 928  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@LoadString
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 308				; 00000134H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN21@LoadString:
	DD	2
	DD	$LN20@LoadString
$LN20@LoadString:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN18@LoadString
	DD	-72					; ffffffb8H
	DD	8
	DD	$LN19@LoadString
$LN19@LoadString:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN18@LoadString:
	DB	112					; 00000070H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
?LoadStringAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPADI@Z ENDP ; D3DX11Effects::CEffectLoader::LoadStringAndAddToPool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?LoadTypeAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPAUSType@2@I@Z
_TEXT	SEGMENT
tv519 = -596						; size = 4
tv501 = -596						; size = 4
tv332 = -596						; size = 4
tv280 = -596						; size = 4
tv129 = -596						; size = 4
tv86 = -596						; size = 4
$T2 = -588						; size = 4
$T3 = -576						; size = 4
$T4 = -564						; size = 4
$T5 = -552						; size = 4
$T6 = -540						; size = 4
$T7 = -528						; size = 4
$T8 = -516						; size = 4
$T9 = -504						; size = 4
$T10 = -492						; size = 4
_pMember$11 = -288					; size = 4
_totalSize$12 = -276					; size = 4
_poInterface$13 = -264					; size = 4
_pBaseClassType$14 = -252				; size = 4
_psMember$15 = -240					; size = 4
_cElements$ = -228					; size = 4
_pTempMembers$ = -216					; size = 4
_hash$ = -204						; size = 4
_pHashBuffer$ = -192					; size = 4
_iter$ = -180						; size = 8
_temporaryType$ = -164					; size = 40
_oBaseClassType$ = -116					; size = 4
_cInterfaces$ = -104					; size = 4
_iMember$ = -92						; size = 4
_cMembers$ = -80					; size = 4
_pObjectType$ = -68					; size = 4
_pNumericType$ = -56					; size = 4
_psType$ = -44						; size = 4
_hr$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_ppType$ = 8						; size = 4
_dwOffset$ = 12						; size = 4
?LoadTypeAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPAUSType@2@I@Z PROC ; D3DX11Effects::CEffectLoader::LoadTypeAndAddToPool, COMDAT
; _this$ = ecx

; 931  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LoadTypeAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPAUSType@2@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 584				; 00000248H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-596]
	mov	ecx, 146				; 00000092H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 932  :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 933  :     SBinaryType *psType;
; 934  :     SBinaryNumericType *pNumericType;
; 935  :     EObjectType *pObjectType;
; 936  :     UINT  cMembers, iMember, cInterfaces;
; 937  :     UINT  oBaseClassType;
; 938  :     SType temporaryType;

	lea	ecx, DWORD PTR _temporaryType$[ebp]
	call	??0SType@D3DX11Effects@@QAE@XZ		; D3DX11Effects::SType::SType

; 939  :     CEffect::CTypeHashTable::CIterator iter;
; 940  :     BYTE *pHashBuffer;
; 941  :     UINT  hash;
; 942  :     SVariable *pTempMembers = NULL;

	mov	DWORD PTR _pTempMembers$[ebp], 0

; 943  :     
; 944  :     m_HashBuffer.Empty();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	?Empty@?$CEffectVector@E@@QAEXXZ	; CEffectVector<unsigned char>::Empty

; 945  : 
; 946  :     VHD( m_msUnstructured.ReadAtOffset(dwOffset, sizeof(SBinaryType), (void**) &psType), "Invalid pEffectBuffer: cannot read type." );

	lea	eax, DWORD PTR _psType$[ebp]
	push	eax
	push	24					; 00000018H
	mov	ecx, DWORD PTR _dwOffset$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?ReadAtOffset@CMemoryStream@D3DX11Core@@QAEJKKPAPAX@Z ; D3DX11Core::CMemoryStream::ReadAtOffset
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN88@LoadTypeAn
	jmp	$lExit$119
$LN88@LoadTypeAn:

; 947  :     VHD( LoadStringAndAddToPool(&temporaryType.pTypeName, psType->oTypeName), "Invalid pEffectBuffer: cannot read type name." );

	mov	eax, DWORD PTR _psType$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	edx, DWORD PTR _temporaryType$[ebp+12]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadStringAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPADI@Z ; D3DX11Effects::CEffectLoader::LoadStringAndAddToPool
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN86@LoadTypeAn
	jmp	$lExit$119
$LN86@LoadTypeAn:

; 948  :     temporaryType.VarType = psType->VarType;

	mov	eax, DWORD PTR _psType$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _temporaryType$[ebp+4], ecx

; 949  :     temporaryType.Elements = psType->Elements;

	mov	eax, DWORD PTR _psType$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _temporaryType$[ebp+8], ecx

; 950  :     temporaryType.TotalSize = psType->TotalSize;

	mov	eax, DWORD PTR _psType$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _temporaryType$[ebp+16], ecx

; 951  :     temporaryType.Stride = psType->Stride;

	mov	eax, DWORD PTR _psType$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _temporaryType$[ebp+20], ecx

; 952  :     temporaryType.PackedSize = psType->PackedSize;

	mov	eax, DWORD PTR _psType$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _temporaryType$[ebp+24], ecx

; 953  : 
; 954  :     // sanity check elements, size, stride, etc.
; 955  :     UINT  cElements = max(1, temporaryType.Elements);

	cmp	DWORD PTR _temporaryType$[ebp+8], 1
	jae	SHORT $LN91@LoadTypeAn
	mov	DWORD PTR tv86[ebp], 1
	jmp	SHORT $LN92@LoadTypeAn
$LN91@LoadTypeAn:
	mov	eax, DWORD PTR _temporaryType$[ebp+8]
	mov	DWORD PTR tv86[ebp], eax
$LN92@LoadTypeAn:
	mov	ecx, DWORD PTR tv86[ebp]
	mov	DWORD PTR _cElements$[ebp], ecx

; 956  :     VBD( cElements * temporaryType.Stride == AlignToPowerOf2(temporaryType.TotalSize, SType::c_RegisterSize), "Invalid pEffectBuffer: invalid type size." );

	mov	esi, DWORD PTR _cElements$[ebp]
	imul	esi, DWORD PTR _temporaryType$[ebp+20]
	push	16					; 00000010H
	mov	eax, DWORD PTR _temporaryType$[ebp+16]
	push	eax
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	cmp	esi, eax
	je	SHORT $LN84@LoadTypeAn
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$119
$LN84@LoadTypeAn:

; 957  :     VBD( temporaryType.Stride % SType::c_RegisterSize == 0, "Invalid pEffectBuffer: invalid type stride." );

	mov	eax, DWORD PTR _temporaryType$[ebp+20]
	xor	edx, edx
	mov	ecx, 16					; 00000010H
	div	ecx
	test	edx, edx
	je	SHORT $LN82@LoadTypeAn
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$119
$LN82@LoadTypeAn:

; 958  :     VBD( temporaryType.PackedSize <= temporaryType.TotalSize && temporaryType.PackedSize % cElements == 0, "Invalid pEffectBuffer: invalid type packed size." );

	mov	eax, DWORD PTR _temporaryType$[ebp+24]
	cmp	eax, DWORD PTR _temporaryType$[ebp+16]
	ja	SHORT $LN79@LoadTypeAn
	mov	eax, DWORD PTR _temporaryType$[ebp+24]
	xor	edx, edx
	div	DWORD PTR _cElements$[ebp]
	test	edx, edx
	je	SHORT $LN80@LoadTypeAn
$LN79@LoadTypeAn:
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$119
$LN80@LoadTypeAn:

; 959  : 
; 960  :     switch(temporaryType.VarType)

	mov	eax, DWORD PTR _temporaryType$[ebp+4]
	mov	DWORD PTR tv129[ebp], eax
	mov	ecx, DWORD PTR tv129[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv129[ebp], ecx
	cmp	DWORD PTR tv129[ebp], 3
	ja	$LN19@LoadTypeAn
	mov	edx, DWORD PTR tv129[ebp]
	jmp	DWORD PTR $LN118@LoadTypeAn[edx*4]
$LN75@LoadTypeAn:

; 961  :     {
; 962  :     case EVT_Object:
; 963  :         VHD( m_msUnstructured.Read((void**) &pObjectType, sizeof(UINT)), "Invalid pEffectBuffer: cannot read object type." );

	push	4
	lea	eax, DWORD PTR _pObjectType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAPAXK@Z ; D3DX11Core::CMemoryStream::Read
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN74@LoadTypeAn
	jmp	$lExit$119
$LN74@LoadTypeAn:

; 964  :         temporaryType.ObjectType = *pObjectType;

	mov	eax, DWORD PTR _pObjectType$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _temporaryType$[ebp+28], ecx

; 965  :         VBD( temporaryType.VarType > EOT_Invalid && temporaryType.VarType < EOT_Count, "Invalid pEffectBuffer: invalid object type." );

	cmp	DWORD PTR _temporaryType$[ebp+4], 0
	jle	SHORT $LN71@LoadTypeAn
	cmp	DWORD PTR _temporaryType$[ebp+4], 24	; 00000018H
	jl	SHORT $LN72@LoadTypeAn
$LN71@LoadTypeAn:
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$119
$LN72@LoadTypeAn:

; 966  :         
; 967  :         VN( pHashBuffer = m_HashBuffer.AddRange(sizeof(temporaryType.VarType) + sizeof(temporaryType.Elements) + 
; 968  :             sizeof(temporaryType.pTypeName) + sizeof(temporaryType.ObjectType)) );

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	?AddRange@?$CEffectVector@E@@QAEPAEI@Z	; CEffectVector<unsigned char>::AddRange
	mov	DWORD PTR _pHashBuffer$[ebp], eax
	cmp	DWORD PTR _pHashBuffer$[ebp], 0
	jne	SHORT $LN69@LoadTypeAn
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$119
$LN69@LoadTypeAn:

; 969  :         memcpy(pHashBuffer, &temporaryType.VarType, sizeof(temporaryType.VarType)); 

	mov	eax, DWORD PTR _pHashBuffer$[ebp]
	mov	ecx, DWORD PTR _temporaryType$[ebp+4]
	mov	DWORD PTR [eax], ecx

; 970  :         pHashBuffer += sizeof(temporaryType.VarType);

	mov	eax, DWORD PTR _pHashBuffer$[ebp]
	add	eax, 4
	mov	DWORD PTR _pHashBuffer$[ebp], eax

; 971  :         memcpy(pHashBuffer, &temporaryType.Elements, sizeof(temporaryType.Elements)); 

	mov	eax, DWORD PTR _pHashBuffer$[ebp]
	mov	ecx, DWORD PTR _temporaryType$[ebp+8]
	mov	DWORD PTR [eax], ecx

; 972  :         pHashBuffer += sizeof(temporaryType.Elements);

	mov	eax, DWORD PTR _pHashBuffer$[ebp]
	add	eax, 4
	mov	DWORD PTR _pHashBuffer$[ebp], eax

; 973  :         memcpy(pHashBuffer, &temporaryType.pTypeName, sizeof(temporaryType.pTypeName)); 

	mov	eax, DWORD PTR _pHashBuffer$[ebp]
	mov	ecx, DWORD PTR _temporaryType$[ebp+12]
	mov	DWORD PTR [eax], ecx

; 974  :         pHashBuffer += sizeof(temporaryType.pTypeName);

	mov	eax, DWORD PTR _pHashBuffer$[ebp]
	add	eax, 4
	mov	DWORD PTR _pHashBuffer$[ebp], eax

; 975  :         memcpy(pHashBuffer, &temporaryType.ObjectType, sizeof(temporaryType.ObjectType)); 

	mov	eax, DWORD PTR _pHashBuffer$[ebp]
	mov	ecx, DWORD PTR _temporaryType$[ebp+28]
	mov	DWORD PTR [eax], ecx

; 976  :         break;

	jmp	$LN76@LoadTypeAn
$LN67@LoadTypeAn:

; 977  : 
; 978  :     case EVT_Interface:
; 979  :         temporaryType.InterfaceType = NULL; 

	mov	DWORD PTR _temporaryType$[ebp+28], 0

; 980  : 
; 981  :         VN( pHashBuffer = m_HashBuffer.AddRange(sizeof(temporaryType.VarType) + sizeof(temporaryType.Elements) + 
; 982  :             sizeof(temporaryType.pTypeName) + sizeof(temporaryType.ObjectType)) );

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	?AddRange@?$CEffectVector@E@@QAEPAEI@Z	; CEffectVector<unsigned char>::AddRange
	mov	DWORD PTR _pHashBuffer$[ebp], eax
	cmp	DWORD PTR _pHashBuffer$[ebp], 0
	jne	SHORT $LN66@LoadTypeAn
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$119
$LN66@LoadTypeAn:

; 983  :         memcpy(pHashBuffer, &temporaryType.VarType, sizeof(temporaryType.VarType)); 

	mov	eax, DWORD PTR _pHashBuffer$[ebp]
	mov	ecx, DWORD PTR _temporaryType$[ebp+4]
	mov	DWORD PTR [eax], ecx

; 984  :         pHashBuffer += sizeof(temporaryType.VarType);

	mov	eax, DWORD PTR _pHashBuffer$[ebp]
	add	eax, 4
	mov	DWORD PTR _pHashBuffer$[ebp], eax

; 985  :         memcpy(pHashBuffer, &temporaryType.Elements, sizeof(temporaryType.Elements)); 

	mov	eax, DWORD PTR _pHashBuffer$[ebp]
	mov	ecx, DWORD PTR _temporaryType$[ebp+8]
	mov	DWORD PTR [eax], ecx

; 986  :         pHashBuffer += sizeof(temporaryType.Elements);

	mov	eax, DWORD PTR _pHashBuffer$[ebp]
	add	eax, 4
	mov	DWORD PTR _pHashBuffer$[ebp], eax

; 987  :         memcpy(pHashBuffer, &temporaryType.pTypeName, sizeof(temporaryType.pTypeName)); 

	mov	eax, DWORD PTR _pHashBuffer$[ebp]
	mov	ecx, DWORD PTR _temporaryType$[ebp+12]
	mov	DWORD PTR [eax], ecx

; 988  :         pHashBuffer += sizeof(temporaryType.pTypeName);

	mov	eax, DWORD PTR _pHashBuffer$[ebp]
	add	eax, 4
	mov	DWORD PTR _pHashBuffer$[ebp], eax

; 989  :         memcpy(pHashBuffer, &temporaryType.ObjectType, sizeof(temporaryType.ObjectType)); 

	mov	eax, DWORD PTR _pHashBuffer$[ebp]
	mov	ecx, DWORD PTR _temporaryType$[ebp+28]
	mov	DWORD PTR [eax], ecx

; 990  :         break;

	jmp	$LN76@LoadTypeAn
$LN64@LoadTypeAn:

; 991  : 
; 992  :     case EVT_Numeric:
; 993  :         VHD( m_msUnstructured.Read((void**) &pNumericType, sizeof(SBinaryNumericType)), "Invalid pEffectBuffer: cannot read numeric type." );

	push	4
	lea	eax, DWORD PTR _pNumericType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAPAXK@Z ; D3DX11Core::CMemoryStream::Read
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN63@LoadTypeAn
	jmp	$lExit$119
$LN63@LoadTypeAn:

; 994  :         temporaryType.NumericType = *pNumericType;

	mov	eax, DWORD PTR _pNumericType$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _temporaryType$[ebp+28], ecx

; 995  :         VBD( temporaryType.NumericType.Rows >= 1 && temporaryType.NumericType.Rows <= 4 &&
; 996  :              temporaryType.NumericType.Columns >= 1 && temporaryType.NumericType.Columns <= 4 &&
; 997  :              temporaryType.NumericType.NumericLayout != ENL_Invalid && temporaryType.NumericType.NumericLayout < ENL_Count &&
; 998  :              temporaryType.NumericType.ScalarType > EST_Invalid && temporaryType.NumericType.ScalarType < EST_Count,
; 999  :              "Invalid pEffectBuffer: invalid numeric type.");

	mov	eax, DWORD PTR _temporaryType$[ebp+28]
	shr	eax, 8
	and	eax, 7
	cmp	eax, 1
	jb	SHORT $LN60@LoadTypeAn
	mov	eax, DWORD PTR _temporaryType$[ebp+28]
	shr	eax, 8
	and	eax, 7
	cmp	eax, 4
	ja	SHORT $LN60@LoadTypeAn
	mov	eax, DWORD PTR _temporaryType$[ebp+28]
	shr	eax, 11					; 0000000bH
	and	eax, 7
	cmp	eax, 1
	jb	SHORT $LN60@LoadTypeAn
	mov	eax, DWORD PTR _temporaryType$[ebp+28]
	shr	eax, 11					; 0000000bH
	and	eax, 7
	cmp	eax, 4
	ja	SHORT $LN60@LoadTypeAn
	mov	eax, DWORD PTR _temporaryType$[ebp+28]
	shl	eax, 29					; 0000001dH
	sar	eax, 29					; 0000001dH
	test	eax, eax
	je	SHORT $LN60@LoadTypeAn
	mov	eax, DWORD PTR _temporaryType$[ebp+28]
	shl	eax, 29					; 0000001dH
	sar	eax, 29					; 0000001dH
	cmp	eax, 4
	jge	SHORT $LN60@LoadTypeAn
	mov	eax, DWORD PTR _temporaryType$[ebp+28]
	shl	eax, 24					; 00000018H
	sar	eax, 27					; 0000001bH
	test	eax, eax
	jle	SHORT $LN60@LoadTypeAn
	mov	eax, DWORD PTR _temporaryType$[ebp+28]
	shl	eax, 24					; 00000018H
	sar	eax, 27					; 0000001bH
	cmp	eax, 5
	jl	SHORT $LN61@LoadTypeAn
$LN60@LoadTypeAn:
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$119
$LN61@LoadTypeAn:

; 1000 : 
; 1001 :         if (temporaryType.NumericType.NumericLayout != ENL_Matrix)

	mov	eax, DWORD PTR _temporaryType$[ebp+28]
	shl	eax, 29					; 0000001dH
	sar	eax, 29					; 0000001dH
	cmp	eax, 3
	je	SHORT $LN58@LoadTypeAn

; 1002 :         {
; 1003 :             VBD( temporaryType.NumericType.IsColumnMajor == FALSE, "Invalid pEffectBuffer: only matricies can be column major." );

	mov	eax, DWORD PTR _temporaryType$[ebp+28]
	shr	eax, 14					; 0000000eH
	and	eax, 1
	je	SHORT $LN58@LoadTypeAn
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$119
$LN58@LoadTypeAn:

; 1004 :         }
; 1005 : 
; 1006 :         VN( pHashBuffer = m_HashBuffer.AddRange(sizeof(temporaryType.VarType) + sizeof(temporaryType.Elements) + 
; 1007 :             sizeof(temporaryType.pTypeName) + sizeof(temporaryType.NumericType)) );

	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	?AddRange@?$CEffectVector@E@@QAEPAEI@Z	; CEffectVector<unsigned char>::AddRange
	mov	DWORD PTR _pHashBuffer$[ebp], eax
	cmp	DWORD PTR _pHashBuffer$[ebp], 0
	jne	SHORT $LN55@LoadTypeAn
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$119
$LN55@LoadTypeAn:

; 1008 :         memcpy(pHashBuffer, &temporaryType.VarType, sizeof(temporaryType.VarType)); 

	mov	eax, DWORD PTR _pHashBuffer$[ebp]
	mov	ecx, DWORD PTR _temporaryType$[ebp+4]
	mov	DWORD PTR [eax], ecx

; 1009 :         pHashBuffer += sizeof(temporaryType.VarType);

	mov	eax, DWORD PTR _pHashBuffer$[ebp]
	add	eax, 4
	mov	DWORD PTR _pHashBuffer$[ebp], eax

; 1010 :         memcpy(pHashBuffer, &temporaryType.Elements, sizeof(temporaryType.Elements)); 

	mov	eax, DWORD PTR _pHashBuffer$[ebp]
	mov	ecx, DWORD PTR _temporaryType$[ebp+8]
	mov	DWORD PTR [eax], ecx

; 1011 :         pHashBuffer += sizeof(temporaryType.Elements);

	mov	eax, DWORD PTR _pHashBuffer$[ebp]
	add	eax, 4
	mov	DWORD PTR _pHashBuffer$[ebp], eax

; 1012 :         memcpy(pHashBuffer, &temporaryType.pTypeName, sizeof(temporaryType.pTypeName)); 

	mov	eax, DWORD PTR _pHashBuffer$[ebp]
	mov	ecx, DWORD PTR _temporaryType$[ebp+12]
	mov	DWORD PTR [eax], ecx

; 1013 :         pHashBuffer += sizeof(temporaryType.pTypeName);

	mov	eax, DWORD PTR _pHashBuffer$[ebp]
	add	eax, 4
	mov	DWORD PTR _pHashBuffer$[ebp], eax

; 1014 :         memcpy(pHashBuffer, &temporaryType.NumericType, sizeof(temporaryType.NumericType)); 

	mov	eax, DWORD PTR _pHashBuffer$[ebp]
	mov	ecx, DWORD PTR _temporaryType$[ebp+28]
	mov	DWORD PTR [eax], ecx

; 1015 :         break;

	jmp	$LN76@LoadTypeAn
$LN53@LoadTypeAn:

; 1016 : 
; 1017 :     case EVT_Struct:
; 1018 :         VHD( m_msUnstructured.Read(&cMembers), "Invalid pEffectBuffer: cannot read struct." );

	lea	eax, DWORD PTR _cMembers$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAI@Z ; D3DX11Core::CMemoryStream::Read
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN52@LoadTypeAn
	jmp	$lExit$119
$LN52@LoadTypeAn:

; 1019 : 
; 1020 :         temporaryType.StructType.Members = cMembers;

	mov	eax, DWORD PTR _cMembers$[ebp]
	mov	DWORD PTR _temporaryType$[ebp+32], eax

; 1021 : 
; 1022 :         VN( pTempMembers = NEW SVariable[cMembers] );

	mov	eax, DWORD PTR _cMembers$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	xor	ecx, ecx
	mov	eax, DWORD PTR $T2[ebp]
	mov	edx, 24					; 00000018H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXIABUnothrow_t@std@@@Z		; operator new[]
	add	esp, 8
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN93@LoadTypeAn
	push	OFFSET ??0SVariable@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SVariable::SVariable
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	push	24					; 00000018H
	mov	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR tv280[ebp], edx
	jmp	SHORT $LN94@LoadTypeAn
$LN93@LoadTypeAn:
	mov	DWORD PTR tv280[ebp], 0
$LN94@LoadTypeAn:
	mov	eax, DWORD PTR tv280[ebp]
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _pTempMembers$[ebp], ecx
	cmp	DWORD PTR _pTempMembers$[ebp], 0
	jne	SHORT $LN50@LoadTypeAn
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$119
$LN50@LoadTypeAn:

; 1023 :         temporaryType.StructType.pMembers = pTempMembers;

	mov	eax, DWORD PTR _pTempMembers$[ebp]
	mov	DWORD PTR _temporaryType$[ebp+28], eax

; 1024 :         
; 1025 :         // read up all of the member descriptors at once
; 1026 :         SBinaryType::SBinaryMember *psMember;
; 1027 :         VHD( m_msUnstructured.Read((void**) &psMember, cMembers * sizeof(*psMember)), "Invalid pEffectBuffer: cannot read struct members." );

	mov	eax, DWORD PTR _cMembers$[ebp]
	shl	eax, 4
	push	eax
	lea	ecx, DWORD PTR _psMember$15[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAPAXK@Z ; D3DX11Core::CMemoryStream::Read
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN48@LoadTypeAn
	jmp	$lExit$119
$LN48@LoadTypeAn:

; 1028 : 
; 1029 :         {
; 1030 :             // Determine if this type implements an interface
; 1031 :             VHD( m_msUnstructured.Read(&oBaseClassType), "Invalid pEffectBuffer: cannot read base class type." );

	lea	eax, DWORD PTR _oBaseClassType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAI@Z ; D3DX11Core::CMemoryStream::Read
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN46@LoadTypeAn
	jmp	$lExit$119
$LN46@LoadTypeAn:

; 1032 :             VHD( m_msUnstructured.Read(&cInterfaces), "Invalid pEffectBuffer: cannot read interfaces." );

	lea	eax, DWORD PTR _cInterfaces$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAI@Z ; D3DX11Core::CMemoryStream::Read
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN44@LoadTypeAn
	jmp	$lExit$119
$LN44@LoadTypeAn:

; 1033 :             if( cInterfaces > 0 )

	cmp	DWORD PTR _cInterfaces$[ebp], 0
	jbe	SHORT $LN42@LoadTypeAn

; 1034 :             {
; 1035 :                 temporaryType.StructType.ImplementsInterface = 1;

	mov	BYTE PTR _temporaryType$[ebp+36], 1

; 1036 :                 temporaryType.StructType.HasSuperClass = ( oBaseClassType > 0 ) ? 1 : 0;

	cmp	DWORD PTR _oBaseClassType$[ebp], 0
	jbe	SHORT $LN95@LoadTypeAn
	mov	DWORD PTR tv332[ebp], 1
	jmp	SHORT $LN96@LoadTypeAn
$LN95@LoadTypeAn:
	mov	DWORD PTR tv332[ebp], 0
$LN96@LoadTypeAn:
	mov	al, BYTE PTR tv332[ebp]
	mov	BYTE PTR _temporaryType$[ebp+37], al
	jmp	SHORT $LN41@LoadTypeAn
$LN42@LoadTypeAn:

; 1037 :             }
; 1038 :             else if( oBaseClassType > 0 )

	cmp	DWORD PTR _oBaseClassType$[ebp], 0
	jbe	SHORT $LN41@LoadTypeAn

; 1039 :             {
; 1040 :                 // Get parent type and copy its ImplementsInterface
; 1041 :                 SType* pBaseClassType;
; 1042 :                 VH( LoadTypeAndAddToPool(&pBaseClassType, oBaseClassType) );

	mov	eax, DWORD PTR _oBaseClassType$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pBaseClassType$14[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadTypeAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPAUSType@2@I@Z ; D3DX11Effects::CEffectLoader::LoadTypeAndAddToPool
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN39@LoadTypeAn
	jmp	$lExit$119
$LN39@LoadTypeAn:

; 1043 :                 temporaryType.StructType.ImplementsInterface = pBaseClassType->StructType.ImplementsInterface;

	mov	eax, DWORD PTR _pBaseClassType$14[ebp]
	mov	cl, BYTE PTR [eax+36]
	mov	BYTE PTR _temporaryType$[ebp+36], cl

; 1044 :                 temporaryType.StructType.HasSuperClass = 1;

	mov	BYTE PTR _temporaryType$[ebp+37], 1
$LN41@LoadTypeAn:

; 1045 :             }
; 1046 :             // Read (and ignore) the interface types
; 1047 :             UINT *poInterface;
; 1048 :             VHD( m_msUnstructured.Read((void**) &poInterface, cInterfaces * sizeof(poInterface)), "Invalid pEffectBuffer: cannot read interface types." );

	mov	eax, DWORD PTR _cInterfaces$[ebp]
	shl	eax, 2
	push	eax
	lea	ecx, DWORD PTR _poInterface$13[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAPAXK@Z ; D3DX11Core::CMemoryStream::Read
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN37@LoadTypeAn
	jmp	$lExit$119
$LN37@LoadTypeAn:

; 1049 :         }
; 1050 : 
; 1051 :         UINT  totalSize;
; 1052 :         totalSize = 0;

	mov	DWORD PTR _totalSize$12[ebp], 0

; 1053 :         for (iMember=0; iMember<cMembers; iMember++)

	mov	DWORD PTR _iMember$[ebp], 0
	jmp	SHORT $LN35@LoadTypeAn
$LN34@LoadTypeAn:
	mov	eax, DWORD PTR _iMember$[ebp]
	add	eax, 1
	mov	DWORD PTR _iMember$[ebp], eax
$LN35@LoadTypeAn:
	mov	eax, DWORD PTR _iMember$[ebp]
	cmp	eax, DWORD PTR _cMembers$[ebp]
	jae	$LN33@LoadTypeAn

; 1054 :         {   
; 1055 :             SVariable *pMember;
; 1056 :             
; 1057 :             pMember = temporaryType.StructType.pMembers + iMember;

	imul	eax, DWORD PTR _iMember$[ebp], 24
	add	eax, DWORD PTR _temporaryType$[ebp+28]
	mov	DWORD PTR _pMember$11[ebp], eax

; 1058 : 
; 1059 :             VBD( psMember[iMember].Offset == totalSize || 
; 1060 :                  psMember[iMember].Offset == AlignToPowerOf2(totalSize, SType::c_RegisterSize),
; 1061 :                  "Internal loading error: invalid member offset." );

	mov	eax, DWORD PTR _iMember$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _psMember$15[ebp]
	mov	edx, DWORD PTR [ecx+eax+8]
	cmp	edx, DWORD PTR _totalSize$12[ebp]
	je	SHORT $LN32@LoadTypeAn
	mov	esi, DWORD PTR _iMember$[ebp]
	shl	esi, 4
	push	16					; 00000010H
	mov	eax, DWORD PTR _totalSize$12[ebp]
	push	eax
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	ecx, DWORD PTR _psMember$15[ebp]
	cmp	DWORD PTR [ecx+esi+8], eax
	je	SHORT $LN32@LoadTypeAn
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$119
$LN32@LoadTypeAn:

; 1062 : 
; 1063 :             pMember->Data.Offset = psMember[iMember].Offset;

	mov	eax, DWORD PTR _iMember$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _pMember$11[ebp]
	mov	edx, DWORD PTR _psMember$15[ebp]
	mov	eax, DWORD PTR [edx+eax+8]
	mov	DWORD PTR [ecx], eax

; 1064 : 
; 1065 :             VH( LoadTypeAndAddToPool(&pMember->pType, psMember[iMember].oType) );

	mov	eax, DWORD PTR _iMember$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _psMember$15[ebp]
	mov	edx, DWORD PTR [ecx+eax+12]
	push	edx
	mov	eax, DWORD PTR _pMember$11[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadTypeAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPAUSType@2@I@Z ; D3DX11Effects::CEffectLoader::LoadTypeAndAddToPool
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN30@LoadTypeAn
	jmp	$lExit$119
$LN30@LoadTypeAn:

; 1066 :             VH( LoadStringAndAddToPool(&pMember->pName, psMember[iMember].oName) );

	mov	eax, DWORD PTR _iMember$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _psMember$15[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _pMember$11[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadStringAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPADI@Z ; D3DX11Effects::CEffectLoader::LoadStringAndAddToPool
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN28@LoadTypeAn
	jmp	$lExit$119
$LN28@LoadTypeAn:

; 1067 :             VH( LoadStringAndAddToPool(&pMember->pSemantic, psMember[iMember].oSemantic) );

	mov	eax, DWORD PTR _iMember$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _psMember$15[ebp]
	mov	edx, DWORD PTR [ecx+eax+4]
	push	edx
	mov	eax, DWORD PTR _pMember$11[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadStringAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPADI@Z ; D3DX11Effects::CEffectLoader::LoadStringAndAddToPool
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN26@LoadTypeAn
	jmp	$lExit$119
$LN26@LoadTypeAn:

; 1068 :             
; 1069 :             totalSize = psMember[iMember].Offset + pMember->pType->TotalSize;

	mov	eax, DWORD PTR _iMember$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _pMember$11[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _psMember$15[ebp]
	mov	eax, DWORD PTR [ecx+eax+8]
	add	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _totalSize$12[ebp], eax

; 1070 :         }

	jmp	$LN34@LoadTypeAn
$LN33@LoadTypeAn:

; 1071 :         VBD( AlignToPowerOf2(totalSize, SType::c_RegisterSize) == temporaryType.Stride, "Internal loading error: invlid type size." );

	push	16					; 00000010H
	mov	eax, DWORD PTR _totalSize$12[ebp]
	push	eax
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	cmp	eax, DWORD PTR _temporaryType$[ebp+20]
	je	SHORT $LN24@LoadTypeAn
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$119
$LN24@LoadTypeAn:

; 1072 : 
; 1073 :         VN( pHashBuffer = m_HashBuffer.AddRange(sizeof(temporaryType.VarType) + sizeof(temporaryType.Elements) + 
; 1074 :             sizeof(temporaryType.pTypeName) + sizeof(temporaryType.StructType.Members) + cMembers * sizeof(SVariable)) );

	imul	eax, DWORD PTR _cMembers$[ebp], 24
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	?AddRange@?$CEffectVector@E@@QAEPAEI@Z	; CEffectVector<unsigned char>::AddRange
	mov	DWORD PTR _pHashBuffer$[ebp], eax
	cmp	DWORD PTR _pHashBuffer$[ebp], 0
	jne	SHORT $LN22@LoadTypeAn
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$119
$LN22@LoadTypeAn:

; 1075 : 
; 1076 :         memcpy(pHashBuffer, &temporaryType.VarType, sizeof(temporaryType.VarType)); 

	mov	eax, DWORD PTR _pHashBuffer$[ebp]
	mov	ecx, DWORD PTR _temporaryType$[ebp+4]
	mov	DWORD PTR [eax], ecx

; 1077 :         pHashBuffer += sizeof(temporaryType.VarType);

	mov	eax, DWORD PTR _pHashBuffer$[ebp]
	add	eax, 4
	mov	DWORD PTR _pHashBuffer$[ebp], eax

; 1078 :         memcpy(pHashBuffer, &temporaryType.Elements, sizeof(temporaryType.Elements)); 

	mov	eax, DWORD PTR _pHashBuffer$[ebp]
	mov	ecx, DWORD PTR _temporaryType$[ebp+8]
	mov	DWORD PTR [eax], ecx

; 1079 :         pHashBuffer += sizeof(temporaryType.Elements);

	mov	eax, DWORD PTR _pHashBuffer$[ebp]
	add	eax, 4
	mov	DWORD PTR _pHashBuffer$[ebp], eax

; 1080 :         memcpy(pHashBuffer, &temporaryType.pTypeName, sizeof(temporaryType.pTypeName)); 

	mov	eax, DWORD PTR _pHashBuffer$[ebp]
	mov	ecx, DWORD PTR _temporaryType$[ebp+12]
	mov	DWORD PTR [eax], ecx

; 1081 :         pHashBuffer += sizeof(temporaryType.pTypeName);

	mov	eax, DWORD PTR _pHashBuffer$[ebp]
	add	eax, 4
	mov	DWORD PTR _pHashBuffer$[ebp], eax

; 1082 :         memcpy(pHashBuffer, &temporaryType.StructType.Members, sizeof(temporaryType.StructType.Members)); 

	mov	eax, DWORD PTR _pHashBuffer$[ebp]
	mov	ecx, DWORD PTR _temporaryType$[ebp+32]
	mov	DWORD PTR [eax], ecx

; 1083 :         pHashBuffer += sizeof(temporaryType.StructType.Members);

	mov	eax, DWORD PTR _pHashBuffer$[ebp]
	add	eax, 4
	mov	DWORD PTR _pHashBuffer$[ebp], eax

; 1084 :         memcpy(pHashBuffer, temporaryType.StructType.pMembers, cMembers * sizeof(SVariable));

	imul	eax, DWORD PTR _cMembers$[ebp], 24
	push	eax
	mov	ecx, DWORD PTR _temporaryType$[ebp+28]
	push	ecx
	mov	edx, DWORD PTR _pHashBuffer$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1085 :         break;

	jmp	SHORT $LN76@LoadTypeAn
$LN19@LoadTypeAn:

; 1086 : 
; 1087 :     default:
; 1088 :         D3DXASSERT(0);

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN18@LoadTypeAn
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??LoadTypeAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPAUSType@3@I@Z@4JA
	add	eax, 157				; 0000009dH
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN18@LoadTypeAn:
	xor	eax, eax
	jne	SHORT $LN19@LoadTypeAn

; 1089 :         VHD( E_FAIL, "Internal loading error: invalid variable type." );

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN76@LoadTypeAn
	jmp	$lExit$119
$LN76@LoadTypeAn:

; 1090 :     }
; 1091 : 
; 1092 :     hash = ComputeHash(&m_HashBuffer[0], m_HashBuffer.GetSize());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	?GetSize@?$CEffectVector@E@@QBEIXZ	; CEffectVector<unsigned char>::GetSize
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??A?$CEffectVector@E@@QAEAAEI@Z		; CEffectVector<unsigned char>::operator[]
	push	eax
	call	?ComputeHash@@YAIPAEI@Z			; ComputeHash
	add	esp, 8
	mov	DWORD PTR _hash$[ebp], eax

; 1093 :     if (FAILED(m_pEffect->m_pTypePool->FindValueWithHash(&temporaryType, hash, &iter)))

	lea	eax, DWORD PTR _iter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hash$[ebp]
	push	ecx
	lea	edx, DWORD PTR _temporaryType$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR [ecx+224]
	call	?FindValueWithHash@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEJPAUSType@D3DX11Effects@@IPAVCIterator@1@@Z ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::FindValueWithHash
	test	eax, eax
	jge	$LN13@LoadTypeAn
$LN12@LoadTypeAn:

; 1094 :     {
; 1095 :         D3DXASSERT( m_pEffect->m_pPooledHeap != NULL );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+232], 0
	jne	SHORT $LN11@LoadTypeAn
	push	OFFSET ??_C@_0CB@IDNKIKCE@m_pEffect?9?$DOm_pPooledHeap?5?$CB?$DN?5NULL@
	mov	eax, DWORD PTR ?__LINE__Var@?1??LoadTypeAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPAUSType@3@I@Z@4JA
	add	eax, 164				; 000000a4H
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN11@LoadTypeAn:
	xor	eax, eax
	jne	SHORT $LN12@LoadTypeAn

; 1096 : 
; 1097 :         // allocate real member array, if necessary
; 1098 :         if (temporaryType.VarType == EVT_Struct)

	cmp	DWORD PTR _temporaryType$[ebp+4], 3
	jne	$LN8@LoadTypeAn

; 1099 :         {
; 1100 :             VN( temporaryType.StructType.pMembers = new(*m_pEffect->m_pPooledHeap) SVariable[temporaryType.StructType.Members] );

	mov	eax, DWORD PTR _temporaryType$[ebp+32]
	mov	DWORD PTR $T5[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+232]
	push	eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T5[ebp]
	mov	edx, 24					; 00000018H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN97@LoadTypeAn
	push	OFFSET ??0SVariable@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SVariable::SVariable
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	push	24					; 00000018H
	mov	ecx, DWORD PTR $T7[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T7[ebp]
	mov	DWORD PTR tv501[ebp], edx
	jmp	SHORT $LN98@LoadTypeAn
$LN97@LoadTypeAn:
	mov	DWORD PTR tv501[ebp], 0
$LN98@LoadTypeAn:
	mov	eax, DWORD PTR tv501[ebp]
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T6[ebp]
	mov	DWORD PTR _temporaryType$[ebp+28], ecx
	cmp	DWORD PTR _temporaryType$[ebp+28], 0
	jne	SHORT $LN7@LoadTypeAn
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$119
$LN7@LoadTypeAn:

; 1101 :             memcpy(temporaryType.StructType.pMembers, pTempMembers, temporaryType.StructType.Members * sizeof(SVariable));

	imul	eax, DWORD PTR _temporaryType$[ebp+32], 24
	push	eax
	mov	ecx, DWORD PTR _pTempMembers$[ebp]
	push	ecx
	mov	edx, DWORD PTR _temporaryType$[ebp+28]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN8@LoadTypeAn:

; 1102 :         }
; 1103 : 
; 1104 :         // allocate real type
; 1105 :         VN( (*ppType) = new(*m_pEffect->m_pPooledHeap) SType );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+232]
	push	edx
	push	40					; 00000028H
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T9[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN99@LoadTypeAn
	mov	ecx, DWORD PTR $T9[ebp]
	call	??0SType@D3DX11Effects@@QAE@XZ		; D3DX11Effects::SType::SType
	mov	DWORD PTR tv519[ebp], eax
	jmp	SHORT $LN100@LoadTypeAn
$LN99@LoadTypeAn:
	mov	DWORD PTR tv519[ebp], 0
$LN100@LoadTypeAn:
	mov	eax, DWORD PTR tv519[ebp]
	mov	DWORD PTR $T8[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _ppType$[ebp]
	mov	edx, DWORD PTR $T8[ebp]
	mov	DWORD PTR [ecx], edx
	cmp	DWORD PTR $T8[ebp], 0
	jne	SHORT $LN5@LoadTypeAn
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$119
$LN5@LoadTypeAn:

; 1106 :         memcpy(*ppType, &temporaryType, sizeof(temporaryType));

	mov	eax, DWORD PTR _ppType$[ebp]
	mov	ecx, 10					; 0000000aH
	lea	esi, DWORD PTR _temporaryType$[ebp]
	mov	edi, DWORD PTR [eax]
	rep movsd

; 1107 :         ZeroMemory(&temporaryType, sizeof(temporaryType));

	xor	eax, eax
	mov	DWORD PTR _temporaryType$[ebp], eax
	mov	DWORD PTR _temporaryType$[ebp+4], eax
	mov	DWORD PTR _temporaryType$[ebp+8], eax
	mov	DWORD PTR _temporaryType$[ebp+12], eax
	mov	DWORD PTR _temporaryType$[ebp+16], eax
	mov	DWORD PTR _temporaryType$[ebp+20], eax
	mov	DWORD PTR _temporaryType$[ebp+24], eax
	mov	DWORD PTR _temporaryType$[ebp+28], eax
	mov	DWORD PTR _temporaryType$[ebp+32], eax
	mov	DWORD PTR _temporaryType$[ebp+36], eax

; 1108 :         VH( m_pEffect->m_pTypePool->AddValueWithHash(*ppType, hash) );

	mov	eax, DWORD PTR _hash$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ppType$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	ecx, DWORD PTR [ecx+224]
	call	?AddValueWithHash@?$CEffectHashTableWithPrivateHeap@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEJPAUSType@D3DX11Effects@@I@Z ; CEffectHashTableWithPrivateHeap<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::AddValueWithHash
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN3@LoadTypeAn
	jmp	SHORT $lExit$119
$LN3@LoadTypeAn:

; 1109 :     }
; 1110 :     else

	jmp	SHORT $lExit$119
$LN13@LoadTypeAn:

; 1111 :     {
; 1112 :         *ppType = iter.GetData();

	lea	ecx, DWORD PTR _iter$[ebp]
	call	?GetData@CIterator@?$CEffectHashTable@PAUSType@D3DX11Effects@@$1?AreTypesEqual@CEffect@2@KAHABQAU12@0@Z@@QAEPAUSType@D3DX11Effects@@XZ ; CEffectHashTable<D3DX11Effects::SType *,&D3DX11Effects::CEffect::AreTypesEqual>::CIterator::GetData
	mov	ecx, DWORD PTR _ppType$[ebp]
	mov	DWORD PTR [ecx], eax
$lExit$119:

; 1113 :     }
; 1114 : 
; 1115 : lExit:
; 1116 :     SAFE_DELETE_ARRAY(pTempMembers);

	mov	eax, DWORD PTR _pTempMembers$[ebp]
	mov	DWORD PTR $T10[ebp], eax
	mov	ecx, DWORD PTR $T10[ebp]
	push	ecx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	DWORD PTR _pTempMembers$[ebp], 0

; 1117 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 1118 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN117@LoadTypeAn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 596				; 00000254H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN117@LoadTypeAn:
	DD	11					; 0000000bH
	DD	$LN116@LoadTypeAn
$LN116@LoadTypeAn:
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN104@LoadTypeAn
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN105@LoadTypeAn
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN106@LoadTypeAn
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN107@LoadTypeAn
	DD	-104					; ffffff98H
	DD	4
	DD	$LN108@LoadTypeAn
	DD	-116					; ffffff8cH
	DD	4
	DD	$LN109@LoadTypeAn
	DD	-164					; ffffff5cH
	DD	40					; 00000028H
	DD	$LN110@LoadTypeAn
	DD	-180					; ffffff4cH
	DD	8
	DD	$LN111@LoadTypeAn
	DD	-240					; ffffff10H
	DD	4
	DD	$LN112@LoadTypeAn
	DD	-252					; ffffff04H
	DD	4
	DD	$LN113@LoadTypeAn
	DD	-264					; fffffef8H
	DD	4
	DD	$LN114@LoadTypeAn
$LN114@LoadTypeAn:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN113@LoadTypeAn:
	DB	112					; 00000070H
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	67					; 00000043H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN112@LoadTypeAn:
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	77					; 0000004dH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN111@LoadTypeAn:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN110@LoadTypeAn:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN109@LoadTypeAn:
	DB	111					; 0000006fH
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	67					; 00000043H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN108@LoadTypeAn:
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN107@LoadTypeAn:
	DB	99					; 00000063H
	DB	77					; 0000004dH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
$LN106@LoadTypeAn:
	DB	112					; 00000070H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN105@LoadTypeAn:
	DB	112					; 00000070H
	DB	78					; 0000004eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN104@LoadTypeAn:
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
	npad	1
$LN118@LoadTypeAn:
	DD	$LN64@LoadTypeAn
	DD	$LN75@LoadTypeAn
	DD	$LN53@LoadTypeAn
	DD	$LN67@LoadTypeAn
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadTypeAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPAUSType@2@I@Z$30:
	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??_V@YAXPAXABUnothrow_t@std@@@Z		; operator delete[]
	add	esp, 8
	ret	0
__unwindfunclet$?LoadTypeAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPAUSType@2@I@Z$31:
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]
	mov	eax, DWORD PTR [eax+232]
	push	eax
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?LoadTypeAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPAUSType@2@I@Z$32:
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]
	mov	eax, DWORD PTR [eax+232]
	push	eax
	mov	eax, DWORD PTR $T9[ebp]
	push	eax
	call	??3@YAXPAXAAVCDataBlockStore@@@Z	; operator delete
	add	esp, 8
	ret	0
__ehhandler$?LoadTypeAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPAUSType@2@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-600]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LoadTypeAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPAUSType@2@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LoadTypeAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPAUSType@2@I@Z ENDP ; D3DX11Effects::CEffectLoader::LoadTypeAndAddToPool
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?LoadInterfaceVariables@CEffectLoader@D3DX11Effects@@IAEJXZ
_TEXT	SEGMENT
tv193 = -424						; size = 4
$T1 = -416						; size = 8
$T2 = -400						; size = 8
_pMember$3 = -192					; size = 4
_pCIVariable$4 = -180					; size = 4
_pClassInstanceName$5 = -168				; size = 4
_pInterfaceInit$6 = -156				; size = 4
_i$7 = -144						; size = 4
_pDefaultValue$8 = -132					; size = 4
_elementsTotal$9 = -120					; size = 4
_chkElementsTotal$10 = -108				; size = 8
_elementsToRead$11 = -92				; size = 4
_pType$12 = -80						; size = 4
_pVar$13 = -68						; size = 4
_psBlock$14 = -56					; size = 4
_cBlocks$ = -44						; size = 4
_iBlock$ = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
?LoadInterfaceVariables@CEffectLoader@D3DX11Effects@@IAEJXZ PROC ; D3DX11Effects::CEffectLoader::LoadInterfaceVariables, COMDAT
; _this$ = ecx

; 2232 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 424				; 000001a8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-424]
	mov	ecx, 106				; 0000006aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2233 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 2234 :     UINT  iBlock;
; 2235 :     UINT  cBlocks;
; 2236 : 
; 2237 :     cBlocks = m_pHeader->cInterfaceVariables;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+84]
	mov	DWORD PTR _cBlocks$[ebp], edx

; 2238 : 
; 2239 :     for (iBlock=0; iBlock<cBlocks; iBlock++)

	mov	DWORD PTR _iBlock$[ebp], 0
	jmp	SHORT $LN45@LoadInterf
$LN44@LoadInterf:
	mov	eax, DWORD PTR _iBlock$[ebp]
	add	eax, 1
	mov	DWORD PTR _iBlock$[ebp], eax
$LN45@LoadInterf:
	mov	eax, DWORD PTR _iBlock$[ebp]
	cmp	eax, DWORD PTR _cBlocks$[ebp]
	jae	$LN43@LoadInterf

; 2240 :     {
; 2241 :         SBinaryInterfaceVariable *psBlock;
; 2242 :         SGlobalVariable *pVar;
; 2243 :         SType *pType;
; 2244 :         UINT  elementsToRead;
; 2245 :         CCheckedDword chkElementsTotal;

	lea	ecx, DWORD PTR _chkElementsTotal$10[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@XZ	; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>

; 2246 :         UINT  elementsTotal;
; 2247 :         void *pDefaultValue;
; 2248 : 
; 2249 :         // Read variable info
; 2250 :         VHD( m_msStructured.Read((void**) &psBlock, sizeof(*psBlock)), "Invalid pEffectBuffer: cannot read interface block." );

	push	16					; 00000010H
	lea	eax, DWORD PTR _psBlock$14[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAPAXK@Z ; D3DX11Core::CMemoryStream::Read
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN42@LoadInterf
	jmp	$lExit$59
	jmp	$lExit$59
$LN42@LoadInterf:

; 2251 :         VBD( m_pEffect->m_VariableCount < (m_pHeader->Effect.cObjectVariables + m_pHeader->Effect.cNumericVariables + m_pHeader->cInterfaceVariables),
; 2252 :              "Internal loading error: variable count mismatch." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+28]
	mov	eax, DWORD PTR [eax+12]
	add	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+28]
	add	eax, DWORD PTR [edx+84]
	cmp	DWORD PTR [ecx+28], eax
	jb	SHORT $LN40@LoadInterf
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$59
	jmp	$lExit$59
$LN40@LoadInterf:

; 2253 :         pVar = &m_pEffect->m_pVariables[m_pEffect->m_VariableCount];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	imul	edx, DWORD PTR [eax+28], 48
	add	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _pVar$13[ebp], edx

; 2254 : 
; 2255 :         // Get type
; 2256 :         VH( LoadTypeAndAddToPool(&pType, psBlock->oType) );

	mov	eax, DWORD PTR _psBlock$14[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR _pType$12[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadTypeAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPAUSType@2@I@Z ; D3DX11Effects::CEffectLoader::LoadTypeAndAddToPool
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN38@LoadInterf
	jmp	$lExit$59
	jmp	$lExit$59
$LN38@LoadInterf:

; 2257 : 
; 2258 :         // Make sure the right polymorphic type is created
; 2259 :         VH( PlacementNewVariable(pVar, pType, FALSE) );

	push	0
	mov	eax, DWORD PTR _pType$12[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVar$13[ebp]
	push	ecx
	call	?PlacementNewVariable@D3DX11Effects@@YAJPAXPAUSType@1@H@Z ; D3DX11Effects::PlacementNewVariable
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN36@LoadInterf
	jmp	$lExit$59
	jmp	$lExit$59
$LN36@LoadInterf:

; 2260 : 
; 2261 :         pVar->pEffect = m_pEffect;

	mov	eax, DWORD PTR _pVar$13[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+28], edx

; 2262 :         pVar->pType = pType;

	mov	eax, DWORD PTR _pVar$13[ebp]
	mov	ecx, DWORD PTR _pType$12[ebp]
	mov	DWORD PTR [eax+12], ecx

; 2263 :         pVar->pCB = NULL;

	mov	eax, DWORD PTR _pVar$13[ebp]
	mov	DWORD PTR [eax+36], 0

; 2264 :         pVar->ExplicitBindPoint = (UINT)-1;

	mov	eax, DWORD PTR _pVar$13[ebp]
	mov	DWORD PTR [eax+24], -1

; 2265 :         pVar->pSemantic = NULL;

	mov	eax, DWORD PTR _pVar$13[ebp]
	mov	DWORD PTR [eax+20], 0

; 2266 : 
; 2267 :         // Get name
; 2268 :         VHD( GetStringAndAddToReflection(psBlock->oName, &pVar->pName), "Invalid pEffectBuffer: cannot read interface name." );

	mov	eax, DWORD PTR _pVar$13[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _psBlock$14[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStringAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIPAPAD@Z ; D3DX11Effects::CEffectLoader::GetStringAndAddToReflection
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN34@LoadInterf
	jmp	$lExit$59
	jmp	$lExit$59
$LN34@LoadInterf:

; 2269 : 
; 2270 :         m_pEffect->m_VariableCount++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+28]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [ecx+28], edx

; 2271 :         elementsToRead = max(1, pType->Elements);

	mov	eax, DWORD PTR _pType$12[ebp]
	cmp	DWORD PTR [eax+8], 1
	jae	SHORT $LN48@LoadInterf
	mov	DWORD PTR tv193[ebp], 1
	jmp	SHORT $LN49@LoadInterf
$LN48@LoadInterf:
	mov	ecx, DWORD PTR _pType$12[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv193[ebp], edx
$LN49@LoadInterf:
	mov	eax, DWORD PTR tv193[ebp]
	mov	DWORD PTR _elementsToRead$11[ebp], eax

; 2272 :         chkElementsTotal = elementsToRead;

	lea	eax, DWORD PTR _elementsToRead$11[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR _chkElementsTotal$10[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR _chkElementsTotal$10[ebp+4], edx

; 2273 : 
; 2274 :         VBD( pType->IsInterface(), "Internal loading error: invlaid type for interface." );

	mov	ecx, DWORD PTR _pType$12[ebp]
	call	?IsInterface@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::IsInterface
	test	eax, eax
	jne	SHORT $LN32@LoadInterf
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$59
	jmp	$lExit$59
$LN32@LoadInterf:

; 2275 : 
; 2276 :         chkElementsTotal += m_pEffect->m_InterfaceCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 108				; 0000006cH
	push	ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	lea	ecx, DWORD PTR _chkElementsTotal$10[ebp]
	call	??Y?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z ; CheckedNumber<unsigned int,4294967295>::operator+=

; 2277 :         VHD( chkElementsTotal.GetValue(&elementsTotal), "Overflow: interface count." );

	lea	eax, DWORD PTR _elementsTotal$9[ebp]
	push	eax
	lea	ecx, DWORD PTR _chkElementsTotal$10[ebp]
	call	?GetValue@?$CheckedNumber@I$0PPPPPPPP@@@QAEJPAI@Z ; CheckedNumber<unsigned int,4294967295>::GetValue
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN30@LoadInterf
	jmp	$lExit$59
	jmp	$lExit$59
$LN30@LoadInterf:

; 2278 :         VBD( elementsTotal <= m_pHeader->cInterfaceVariableElements, "Invalid pEffectBuffer: interface count mismatch." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _elementsTotal$9[ebp]
	cmp	edx, DWORD PTR [ecx+88]
	jbe	SHORT $LN28@LoadInterf
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$59
	jmp	$lExit$59
$LN28@LoadInterf:

; 2279 : 
; 2280 :         pVar->Data.pInterface = &m_pEffect->m_pInterfaces[m_pEffect->m_InterfaceCount];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	edx, DWORD PTR [eax+108]
	mov	eax, DWORD PTR [ecx+112]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _pVar$13[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2281 :         m_pEffect->m_InterfaceCount += elementsToRead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+108]
	add	edx, DWORD PTR _elementsToRead$11[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [ecx+108], edx

; 2282 : 
; 2283 :         // Get default value
; 2284 :         if (0 != psBlock->oDefaultValue)

	mov	eax, DWORD PTR _psBlock$14[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN26@LoadInterf

; 2285 :         {
; 2286 :             VHD( m_msUnstructured.ReadAtOffset(psBlock->oDefaultValue, elementsToRead * sizeof(SBinaryInterfaceInitializer), &pDefaultValue),
; 2287 :                  "Invalid pEffectBuffer: cannot read interface initializer offset." );

	lea	eax, DWORD PTR _pDefaultValue$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _elementsToRead$11[ebp]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _psBlock$14[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?ReadAtOffset@CMemoryStream@D3DX11Core@@QAEJKKPAPAX@Z ; D3DX11Core::CMemoryStream::ReadAtOffset
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN25@LoadInterf
	jmp	$lExit$59
	jmp	$lExit$59
$LN25@LoadInterf:

; 2288 :             for( UINT i=0; i < elementsToRead; i++ )

	mov	DWORD PTR _i$7[ebp], 0
	jmp	SHORT $LN23@LoadInterf
$LN22@LoadInterf:
	mov	eax, DWORD PTR _i$7[ebp]
	add	eax, 1
	mov	DWORD PTR _i$7[ebp], eax
$LN23@LoadInterf:
	mov	eax, DWORD PTR _i$7[ebp]
	cmp	eax, DWORD PTR _elementsToRead$11[ebp]
	jae	$LN26@LoadInterf

; 2289 :             {
; 2290 :                 SBinaryInterfaceInitializer* pInterfaceInit = &((SBinaryInterfaceInitializer*)pDefaultValue)[i];

	mov	eax, DWORD PTR _i$7[ebp]
	mov	ecx, DWORD PTR _pDefaultValue$8[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _pInterfaceInit$6[ebp], edx

; 2291 :                 LPCSTR pClassInstanceName;
; 2292 :                 VHD( m_msUnstructured.ReadAtOffset(pInterfaceInit->oInstanceName, &pClassInstanceName), "Invalid pEffectBuffer: cannot read interface initializer." );

	lea	eax, DWORD PTR _pClassInstanceName$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _pInterfaceInit$6[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?ReadAtOffset@CMemoryStream@D3DX11Core@@QAEJKPAPBD@Z ; D3DX11Core::CMemoryStream::ReadAtOffset
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN20@LoadInterf
	jmp	$lExit$59
	jmp	$lExit$59
$LN20@LoadInterf:

; 2293 : 
; 2294 :                 SGlobalVariable *pCIVariable = m_pEffect->FindVariableByName(pClassInstanceName);

	mov	eax, DWORD PTR _pClassInstanceName$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+36]
	call	?FindVariableByName@CEffect@D3DX11Effects@@IAEPAUSGlobalVariable@2@PBD@Z ; D3DX11Effects::CEffect::FindVariableByName
	mov	DWORD PTR _pCIVariable$4[ebp], eax

; 2295 :                 VBD( pCIVariable != NULL, "Loading error: cannot find class instance for interface initializer." );

	cmp	DWORD PTR _pCIVariable$4[ebp], 0
	jne	SHORT $LN18@LoadInterf
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$59
	jmp	$lExit$59
$LN18@LoadInterf:

; 2296 :                 VBD( pCIVariable->pType->IsClassInstance(), "Loading error: variable type mismatch for interface initializer." );

	mov	eax, DWORD PTR _pCIVariable$4[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?IsClassInstance@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::IsClassInstance
	test	eax, eax
	jne	SHORT $LN16@LoadInterf
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$59
	jmp	$lExit$59
$LN16@LoadInterf:

; 2297 :                 if( pInterfaceInit->ArrayIndex == (UINT)-1 )

	mov	eax, DWORD PTR _pInterfaceInit$6[ebp]
	cmp	DWORD PTR [eax+4], -1
	jne	SHORT $LN14@LoadInterf

; 2298 :                 {
; 2299 :                     VBD( pCIVariable->pType->Elements == 0, "Loading error: array mismatch for interface initializer." );

	mov	eax, DWORD PTR _pCIVariable$4[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN13@LoadInterf
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$59
	jmp	$lExit$59
$LN13@LoadInterf:

; 2300 :                     pVar->Data.pInterface[i].pClassInstance = (SClassInstanceGlobalVariable*)pCIVariable;

	mov	eax, DWORD PTR _pVar$13[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$7[ebp]
	mov	eax, DWORD PTR _pCIVariable$4[ebp]
	mov	DWORD PTR [ecx+edx*4], eax

; 2301 :                 }
; 2302 :                 else

	jmp	$LN11@LoadInterf
$LN14@LoadInterf:

; 2303 :                 {
; 2304 :                     VBD( pCIVariable->pType->Elements > 0, "Loading error: array mismatch for interface initializer." );

	mov	eax, DWORD PTR _pCIVariable$4[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx+8], 0
	ja	SHORT $LN10@LoadInterf
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$59
	jmp	$lExit$59
$LN10@LoadInterf:

; 2305 :                     VBD( pInterfaceInit->ArrayIndex < pCIVariable->pType->Elements, "Loading error: array index out of range." );

	mov	eax, DWORD PTR _pCIVariable$4[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _pInterfaceInit$6[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR [ecx+8]
	jb	SHORT $LN8@LoadInterf
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$59
	jmp	$lExit$59
$LN8@LoadInterf:

; 2306 : 
; 2307 :                     SMember* pMember = (SMember*)pCIVariable->GetElement( pInterfaceInit->ArrayIndex );

	mov	esi, esp
	mov	eax, DWORD PTR _pInterfaceInit$6[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _pCIVariable$4[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pCIVariable$4[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pMember$3[ebp], eax

; 2308 :                     VBD( pMember->IsValid(), "Loading error: cannot find member by name." );

	mov	eax, DWORD PTR _pMember$3[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pMember$3[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN6@LoadInterf
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $lExit$59
	jmp	SHORT $lExit$59
$LN6@LoadInterf:

; 2309 :                     VBD( pMember->pType->IsClassInstance(), "Loading error: member type mismatch for interface initializer." );

	mov	eax, DWORD PTR _pMember$3[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?IsClassInstance@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::IsClassInstance
	test	eax, eax
	jne	SHORT $LN4@LoadInterf
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $lExit$59
	jmp	SHORT $lExit$59
$LN4@LoadInterf:

; 2310 :                     pVar->Data.pInterface[i].pClassInstance = (SClassInstanceGlobalVariable*)pMember;

	mov	eax, DWORD PTR _pVar$13[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _i$7[ebp]
	mov	eax, DWORD PTR _pMember$3[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
$LN11@LoadInterf:

; 2311 :                 }
; 2312 :             }

	jmp	$LN22@LoadInterf
$LN26@LoadInterf:

; 2313 :         }
; 2314 : 
; 2315 : 
; 2316 :         // Read annotations
; 2317 :         VH( LoadAnnotations(&pVar->AnnotationCount, &pVar->pAnnotations) );

	mov	eax, DWORD PTR _pVar$13[ebp]
	add	eax, 44					; 0000002cH
	push	eax
	mov	ecx, DWORD PTR _pVar$13[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadAnnotations@CEffectLoader@D3DX11Effects@@IAEJPAIPAPAUSAnnotation@2@@Z ; D3DX11Effects::CEffectLoader::LoadAnnotations
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@LoadInterf
	jmp	SHORT $LN1@LoadInterf
	jmp	SHORT $lExit$59
$LN2@LoadInterf:

; 2318 :     }

	jmp	$LN44@LoadInterf
$LN43@LoadInterf:
	jmp	SHORT $lExit$59
$LN1@LoadInterf:
	jmp	SHORT $lExit$59
$lExit$59:

; 2319 : lExit:
; 2320 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 2321 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN58@LoadInterf
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 424				; 000001a8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN58@LoadInterf:
	DD	7
	DD	$LN57@LoadInterf
$LN57@LoadInterf:
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN50@LoadInterf
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN51@LoadInterf
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN52@LoadInterf
	DD	-108					; ffffff94H
	DD	8
	DD	$LN53@LoadInterf
	DD	-120					; ffffff88H
	DD	4
	DD	$LN54@LoadInterf
	DD	-132					; ffffff7cH
	DD	4
	DD	$LN55@LoadInterf
	DD	-168					; ffffff58H
	DD	4
	DD	$LN56@LoadInterf
$LN56@LoadInterf:
	DB	112					; 00000070H
	DB	67					; 00000043H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN55@LoadInterf:
	DB	112					; 00000070H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN54@LoadInterf:
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	84					; 00000054H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
$LN53@LoadInterf:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	107					; 0000006bH
	DB	69					; 00000045H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	84					; 00000054H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
$LN52@LoadInterf:
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	84					; 00000054H
	DB	111					; 0000006fH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
$LN51@LoadInterf:
	DB	112					; 00000070H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN50@LoadInterf:
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	66					; 00000042H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?LoadInterfaceVariables@CEffectLoader@D3DX11Effects@@IAEJXZ ENDP ; D3DX11Effects::CEffectLoader::LoadInterfaceVariables
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?LoadObjectVariables@CEffectLoader@D3DX11Effects@@IAEJXZ
_TEXT	SEGMENT
tv555 = -616						; size = 4
tv508 = -616						; size = 4
tv442 = -616						; size = 4
tv233 = -616						; size = 4
tv226 = -616						; size = 4
tv190 = -616						; size = 4
$T1 = -608						; size = 8
$T2 = -592						; size = 8
$T3 = -576						; size = 8
$T4 = -560						; size = 4
$T5 = -548						; size = 8
$T6 = -532						; size = 8
$T7 = -516						; size = 8
$T8 = -500						; size = 8
$T9 = -484						; size = 8
_pString$10 = -276					; size = 4
_dwOffset$11 = -264					; size = 4
_iDecl$12 = -252					; size = 4
_$S2$13 = -240						; size = 4
_pShaderBlock$14 = -228					; size = 4
_pShaderBin$15 = -216					; size = 4
_cbShaderBin$16 = -204					; size = 4
_cAssignments$17 = -192					; size = 4
_pCurrentBlock$18 = -180				; size = 4
_currentBlockCount$19 = -168				; size = 4
_maxBlockCount$20 = -156				; size = 4
_blockType$21 = -144					; size = 4
_elementsTotal$22 = -132				; size = 4
_chkElementsTotal$23 = -120				; size = 8
_elementsToRead$24 = -104				; size = 4
_iElement$25 = -92					; size = 4
_pType$26 = -80						; size = 4
_pVar$27 = -68						; size = 4
_psBlock$28 = -56					; size = 4
_cBlocks$ = -44						; size = 4
_iBlock$ = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
?LoadObjectVariables@CEffectLoader@D3DX11Effects@@IAEJXZ PROC ; D3DX11Effects::CEffectLoader::LoadObjectVariables, COMDAT
; _this$ = ecx

; 1895 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 616				; 00000268H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-616]
	mov	ecx, 154				; 0000009aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1896 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 1897 :     UINT  iBlock;
; 1898 :     UINT  cBlocks;
; 1899 : 
; 1900 :     cBlocks = m_pHeader->Effect.cObjectVariables;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _cBlocks$[ebp], edx

; 1901 : 
; 1902 :     for (iBlock=0; iBlock<cBlocks; iBlock++)

	mov	DWORD PTR _iBlock$[ebp], 0
	jmp	SHORT $LN140@LoadObject
$LN139@LoadObject:
	mov	eax, DWORD PTR _iBlock$[ebp]
	add	eax, 1
	mov	DWORD PTR _iBlock$[ebp], eax
$LN140@LoadObject:
	mov	eax, DWORD PTR _iBlock$[ebp]
	cmp	eax, DWORD PTR _cBlocks$[ebp]
	jae	$LN138@LoadObject

; 1903 :     {
; 1904 :         SBinaryObjectVariable *psBlock;
; 1905 :         SGlobalVariable *pVar;
; 1906 :         SType *pType;
; 1907 :         UINT  iElement;
; 1908 :         UINT  elementsToRead;
; 1909 :         CCheckedDword chkElementsTotal;

	lea	ecx, DWORD PTR _chkElementsTotal$23[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@XZ	; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>

; 1910 :         UINT  elementsTotal;
; 1911 : 
; 1912 :         // Read variable info
; 1913 :         VHD( m_msStructured.Read((void**) &psBlock, sizeof(*psBlock)), "Invalid pEffectBuffer: cannot read object variable." );

	push	16					; 00000010H
	lea	eax, DWORD PTR _psBlock$28[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAPAXK@Z ; D3DX11Core::CMemoryStream::Read
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN137@LoadObject
	jmp	$lExit$164
	jmp	$lExit$164
$LN137@LoadObject:

; 1914 :         VBD( m_pEffect->m_VariableCount < (m_pHeader->Effect.cObjectVariables + m_pHeader->Effect.cNumericVariables + m_pHeader->cInterfaceVariables),
; 1915 :              "Internal loading error: variable count mismatch." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+28]
	mov	eax, DWORD PTR [eax+12]
	add	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+28]
	add	eax, DWORD PTR [edx+84]
	cmp	DWORD PTR [ecx+28], eax
	jb	SHORT $LN135@LoadObject
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$164
	jmp	$lExit$164
$LN135@LoadObject:

; 1916 :         pVar = &m_pEffect->m_pVariables[m_pEffect->m_VariableCount];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	imul	edx, DWORD PTR [eax+28], 48
	add	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _pVar$27[ebp], edx

; 1917 :         
; 1918 :         // Get type
; 1919 :         VH( LoadTypeAndAddToPool(&pType, psBlock->oType) );

	mov	eax, DWORD PTR _psBlock$28[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR _pType$26[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadTypeAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPAUSType@2@I@Z ; D3DX11Effects::CEffectLoader::LoadTypeAndAddToPool
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN133@LoadObject
	jmp	$lExit$164
	jmp	$lExit$164
$LN133@LoadObject:

; 1920 : 
; 1921 :         // Make sure the right polymorphic type is created
; 1922 :         VH( PlacementNewVariable(pVar, pType, FALSE) );

	push	0
	mov	eax, DWORD PTR _pType$26[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVar$27[ebp]
	push	ecx
	call	?PlacementNewVariable@D3DX11Effects@@YAJPAXPAUSType@1@H@Z ; D3DX11Effects::PlacementNewVariable
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN131@LoadObject
	jmp	$lExit$164
	jmp	$lExit$164
$LN131@LoadObject:

; 1923 : 
; 1924 :         pVar->pEffect = m_pEffect;

	mov	eax, DWORD PTR _pVar$27[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+28], edx

; 1925 :         pVar->pType = pType;

	mov	eax, DWORD PTR _pVar$27[ebp]
	mov	ecx, DWORD PTR _pType$26[ebp]
	mov	DWORD PTR [eax+12], ecx

; 1926 :         pVar->pCB = NULL;

	mov	eax, DWORD PTR _pVar$27[ebp]
	mov	DWORD PTR [eax+36], 0

; 1927 :         pVar->ExplicitBindPoint = psBlock->ExplicitBindPoint;

	mov	eax, DWORD PTR _pVar$27[ebp]
	mov	ecx, DWORD PTR _psBlock$28[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+24], edx

; 1928 : 
; 1929 :         if( pType->IsStateBlockObject() )

	mov	ecx, DWORD PTR _pType$26[ebp]
	call	?IsStateBlockObject@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::IsStateBlockObject
	test	eax, eax
	je	SHORT $LN129@LoadObject

; 1930 :         {
; 1931 :             pVar->MemberDataOffsetPlus4 = m_pEffect->m_MemberDataCount * sizeof(SMemberDataPointer) + 4;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+100]
	lea	eax, DWORD PTR [edx*8+4]
	mov	ecx, DWORD PTR _pVar$27[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1932 :             m_pEffect->m_MemberDataCount += max(pType->Elements,1);

	mov	eax, DWORD PTR _pType$26[ebp]
	cmp	DWORD PTR [eax+8], 1
	jbe	SHORT $LN143@LoadObject
	mov	ecx, DWORD PTR _pType$26[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv190[ebp], edx
	jmp	SHORT $LN144@LoadObject
$LN143@LoadObject:
	mov	DWORD PTR tv190[ebp], 1
$LN144@LoadObject:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+100]
	add	edx, DWORD PTR tv190[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [ecx+100], edx
$LN129@LoadObject:

; 1933 :         }
; 1934 : 
; 1935 :         // Get name
; 1936 :         VHD( GetStringAndAddToReflection(psBlock->oName, &pVar->pName), "Invalid pEffectBuffer: cannot read object variable name." );

	mov	eax, DWORD PTR _pVar$27[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _psBlock$28[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStringAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIPAPAD@Z ; D3DX11Effects::CEffectLoader::GetStringAndAddToReflection
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN128@LoadObject
	jmp	$lExit$164
	jmp	$lExit$164
$LN128@LoadObject:

; 1937 :         VHD( GetStringAndAddToReflection(psBlock->oSemantic, &pVar->pSemantic), "Invalid pEffectBuffer: cannot read object variable semantic." );

	mov	eax, DWORD PTR _pVar$27[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _psBlock$28[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStringAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIPAPAD@Z ; D3DX11Effects::CEffectLoader::GetStringAndAddToReflection
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN126@LoadObject
	jmp	$lExit$164
	jmp	$lExit$164
$LN126@LoadObject:

; 1938 : 
; 1939 :         m_pEffect->m_VariableCount++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+28]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [ecx+28], edx

; 1940 :         elementsToRead = max(1, pType->Elements);

	mov	eax, DWORD PTR _pType$26[ebp]
	cmp	DWORD PTR [eax+8], 1
	jae	SHORT $LN145@LoadObject
	mov	DWORD PTR tv226[ebp], 1
	jmp	SHORT $LN146@LoadObject
$LN145@LoadObject:
	mov	ecx, DWORD PTR _pType$26[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv226[ebp], edx
$LN146@LoadObject:
	mov	eax, DWORD PTR tv226[ebp]
	mov	DWORD PTR _elementsToRead$24[ebp], eax

; 1941 :         chkElementsTotal = elementsToRead;

	lea	eax, DWORD PTR _elementsToRead$24[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR _chkElementsTotal$23[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR _chkElementsTotal$23[ebp+4], edx

; 1942 : 
; 1943 :         if (pType->IsStateBlockObject())

	mov	ecx, DWORD PTR _pType$26[ebp]
	call	?IsStateBlockObject@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::IsStateBlockObject
	test	eax, eax
	je	$LN124@LoadObject

; 1944 :         {
; 1945 :             // State blocks
; 1946 :             EBlockType blockType;
; 1947 :             UINT  *maxBlockCount;
; 1948 :             UINT  *currentBlockCount;
; 1949 : 
; 1950 :             switch (pType->ObjectType)

	mov	eax, DWORD PTR _pType$26[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR tv233[ebp], ecx
	cmp	DWORD PTR tv233[ebp], 2
	je	SHORT $LN121@LoadObject
	cmp	DWORD PTR tv233[ebp], 3
	je	SHORT $LN120@LoadObject
	cmp	DWORD PTR tv233[ebp], 4
	je	$LN119@LoadObject
	jmp	$LN118@LoadObject
$LN121@LoadObject:

; 1951 :             {
; 1952 :             case EOT_Blend:
; 1953 :                 pVar->Data.pBlock = &m_pEffect->m_pBlendBlocks[m_pEffect->m_BlendBlockCount];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	imul	edx, DWORD PTR [eax+76], 288
	add	edx, DWORD PTR [ecx+80]
	mov	eax, DWORD PTR _pVar$27[ebp]
	mov	DWORD PTR [eax+4], edx

; 1954 :                 maxBlockCount = &m_pHeader->cBlendStateBlocks;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 48					; 00000030H
	mov	DWORD PTR _maxBlockCount$20[ebp], ecx

; 1955 :                 currentBlockCount = &m_pEffect->m_BlendBlockCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 76					; 0000004cH
	mov	DWORD PTR _currentBlockCount$19[ebp], ecx

; 1956 :                 blockType = EBT_Blend;

	mov	DWORD PTR _blockType$21[ebp], 2

; 1957 :                 break;

	jmp	$LN122@LoadObject
$LN120@LoadObject:

; 1958 : 
; 1959 :             case EOT_DepthStencil:
; 1960 :                 pVar->Data.pBlock = &m_pEffect->m_pDepthStencilBlocks[m_pEffect->m_DepthStencilBlockCount];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	imul	edx, DWORD PTR [eax+68], 76
	add	edx, DWORD PTR [ecx+72]
	mov	eax, DWORD PTR _pVar$27[ebp]
	mov	DWORD PTR [eax+4], edx

; 1961 :                 maxBlockCount = &m_pHeader->cDepthStencilBlocks;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 44					; 0000002cH
	mov	DWORD PTR _maxBlockCount$20[ebp], ecx

; 1962 :                 currentBlockCount = &m_pEffect->m_DepthStencilBlockCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 68					; 00000044H
	mov	DWORD PTR _currentBlockCount$19[ebp], ecx

; 1963 :                 blockType = EBT_DepthStencil;

	mov	DWORD PTR _blockType$21[ebp], 1

; 1964 :                 break;

	jmp	$LN122@LoadObject
$LN119@LoadObject:

; 1965 : 
; 1966 :             case EOT_Rasterizer:
; 1967 :                 pVar->Data.pBlock = &m_pEffect->m_pRasterizerBlocks[m_pEffect->m_RasterizerBlockCount];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	edx, DWORD PTR [eax+84]
	shl	edx, 6
	add	edx, DWORD PTR [ecx+88]
	mov	eax, DWORD PTR _pVar$27[ebp]
	mov	DWORD PTR [eax+4], edx

; 1968 :                 maxBlockCount = &m_pHeader->cRasterizerStateBlocks;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 52					; 00000034H
	mov	DWORD PTR _maxBlockCount$20[ebp], ecx

; 1969 :                 currentBlockCount = &m_pEffect->m_RasterizerBlockCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 84					; 00000054H
	mov	DWORD PTR _currentBlockCount$19[ebp], ecx

; 1970 :                 blockType = EBT_Rasterizer;

	mov	DWORD PTR _blockType$21[ebp], 3

; 1971 :                 break;

	jmp	SHORT $LN122@LoadObject
$LN118@LoadObject:

; 1972 : 
; 1973 :             default:
; 1974 :                 VB(pType->IsSampler());

	mov	ecx, DWORD PTR _pType$26[ebp]
	call	?IsSampler@SType@D3DX11Effects@@QBEHXZ	; D3DX11Effects::SType::IsSampler
	test	eax, eax
	jne	SHORT $LN117@LoadObject
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$164
	jmp	$lExit$164
$LN117@LoadObject:

; 1975 :                 pVar->Data.pBlock = &m_pEffect->m_pSamplerBlocks[m_pEffect->m_SamplerBlockCount];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	imul	edx, DWORD PTR [eax+92], 76
	add	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR _pVar$27[ebp]
	mov	DWORD PTR [eax+4], edx

; 1976 :                 maxBlockCount = &m_pHeader->cSamplers;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 56					; 00000038H
	mov	DWORD PTR _maxBlockCount$20[ebp], ecx

; 1977 :                 currentBlockCount = &m_pEffect->m_SamplerBlockCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 92					; 0000005cH
	mov	DWORD PTR _currentBlockCount$19[ebp], ecx

; 1978 :                 blockType = EBT_Sampler;

	mov	DWORD PTR _blockType$21[ebp], 4
$LN122@LoadObject:

; 1979 :             }
; 1980 : 
; 1981 :             chkElementsTotal += *currentBlockCount;

	mov	eax, DWORD PTR _currentBlockCount$19[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	ecx, DWORD PTR _chkElementsTotal$23[ebp]
	call	??Y?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z ; CheckedNumber<unsigned int,4294967295>::operator+=

; 1982 :             VHD( chkElementsTotal.GetValue(&elementsTotal), "Overflow: vaiable elements." );

	lea	eax, DWORD PTR _elementsTotal$22[ebp]
	push	eax
	lea	ecx, DWORD PTR _chkElementsTotal$23[ebp]
	call	?GetValue@?$CheckedNumber@I$0PPPPPPPP@@@QAEJPAI@Z ; CheckedNumber<unsigned int,4294967295>::GetValue
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN115@LoadObject
	jmp	$lExit$164
	jmp	$lExit$164
$LN115@LoadObject:

; 1983 :             VBD( elementsTotal <= *maxBlockCount, "Internal loading error: element count overflow." );

	mov	eax, DWORD PTR _maxBlockCount$20[ebp]
	mov	ecx, DWORD PTR _elementsTotal$22[ebp]
	cmp	ecx, DWORD PTR [eax]
	jbe	SHORT $LN113@LoadObject
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$164
	jmp	$lExit$164
$LN113@LoadObject:

; 1984 :             
; 1985 :             *currentBlockCount += elementsToRead;

	mov	eax, DWORD PTR _currentBlockCount$19[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _elementsToRead$24[ebp]
	mov	edx, DWORD PTR _currentBlockCount$19[ebp]
	mov	DWORD PTR [edx], ecx

; 1986 : 
; 1987 :             for (iElement = 0; iElement < elementsToRead; ++ iElement)

	mov	DWORD PTR _iElement$25[ebp], 0
	jmp	SHORT $LN111@LoadObject
$LN110@LoadObject:
	mov	eax, DWORD PTR _iElement$25[ebp]
	add	eax, 1
	mov	DWORD PTR _iElement$25[ebp], eax
$LN111@LoadObject:
	mov	eax, DWORD PTR _iElement$25[ebp]
	cmp	eax, DWORD PTR _elementsToRead$24[ebp]
	jae	$LN109@LoadObject

; 1988 :             {
; 1989 :                 SBaseBlock *pCurrentBlock;
; 1990 :                 UINT  cAssignments;
; 1991 :                 
; 1992 :                 pCurrentBlock = (SBaseBlock *) GetBlockByIndex(pVar->pType->VarType, pVar->pType->ObjectType, pVar->Data.pGeneric, iElement);

	mov	eax, DWORD PTR _iElement$25[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVar$27[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _pVar$27[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _pVar$27[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	?GetBlockByIndex@D3DX11Effects@@YAPAXW4EVarType@1@W4EObjectType@1@PAXI@Z ; D3DX11Effects::GetBlockByIndex
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pCurrentBlock$18[ebp], eax

; 1993 :                 VBD( NULL != pCurrentBlock, "Internal loading error: find state block." );

	cmp	DWORD PTR _pCurrentBlock$18[ebp], 0
	jne	SHORT $LN108@LoadObject
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$164
	jmp	$lExit$164
$LN108@LoadObject:

; 1994 : 
; 1995 :                 pCurrentBlock->BlockType = blockType;

	mov	eax, DWORD PTR _pCurrentBlock$18[ebp]
	mov	ecx, DWORD PTR _blockType$21[ebp]
	mov	DWORD PTR [eax], ecx

; 1996 : 
; 1997 :                 VHD( m_msStructured.Read(&cAssignments), "Invalid pEffectBuffer: cannot read state block assignments." );

	lea	eax, DWORD PTR _cAssignments$17[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAI@Z ; D3DX11Core::CMemoryStream::Read
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN106@LoadObject
	jmp	$lExit$164
	jmp	$lExit$164
$LN106@LoadObject:

; 1998 : 
; 1999 :                 VH( LoadAssignments( cAssignments, &pCurrentBlock->pAssignments, (BYTE*)pCurrentBlock, NULL, &pCurrentBlock->AssignmentCount ) );

	mov	eax, DWORD PTR _pCurrentBlock$18[ebp]
	add	eax, 8
	push	eax
	push	0
	mov	ecx, DWORD PTR _pCurrentBlock$18[ebp]
	push	ecx
	mov	edx, DWORD PTR _pCurrentBlock$18[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	eax, DWORD PTR _cAssignments$17[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadAssignments@CEffectLoader@D3DX11Effects@@IAEJIPAPAUSAssignment@2@PAEPAI2@Z ; D3DX11Effects::CEffectLoader::LoadAssignments
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN104@LoadObject
	jmp	$lExit$164
	jmp	$lExit$164
$LN104@LoadObject:

; 2000 :             }

	jmp	$LN110@LoadObject
$LN109@LoadObject:

; 2001 :         }
; 2002 :         else if (pType->IsShader())

	jmp	$LN102@LoadObject
$LN124@LoadObject:
	mov	ecx, DWORD PTR _pType$26[ebp]
	call	?IsShader@SType@D3DX11Effects@@QBEHXZ	; D3DX11Effects::SType::IsShader
	test	eax, eax
	je	$LN101@LoadObject

; 2003 :         {
; 2004 :             // Shaders
; 2005 : 
; 2006 :             chkElementsTotal += m_pEffect->m_ShaderBlockCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 60					; 0000003cH
	push	ecx
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	lea	ecx, DWORD PTR _chkElementsTotal$23[ebp]
	call	??Y?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z ; CheckedNumber<unsigned int,4294967295>::operator+=

; 2007 :             VHD( chkElementsTotal.GetValue(&elementsTotal), "Overflow: shader block count." );

	lea	eax, DWORD PTR _elementsTotal$22[ebp]
	push	eax
	lea	ecx, DWORD PTR _chkElementsTotal$23[ebp]
	call	?GetValue@?$CheckedNumber@I$0PPPPPPPP@@@QAEJPAI@Z ; CheckedNumber<unsigned int,4294967295>::GetValue
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN100@LoadObject
	jmp	$lExit$164
	jmp	$lExit$164
$LN100@LoadObject:

; 2008 :             VBD( elementsTotal <= m_pHeader->cTotalShaders, "Invalid pEffectBuffer: shader count mismatch." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _elementsTotal$22[ebp]
	cmp	edx, DWORD PTR [ecx+68]
	jbe	SHORT $LN98@LoadObject
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$164
	jmp	$lExit$164
$LN98@LoadObject:

; 2009 : 
; 2010 :             pVar->Data.pShader = &m_pEffect->m_pShaderBlocks[m_pEffect->m_ShaderBlockCount];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	imul	edx, DWORD PTR [eax+60], 68
	add	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR _pVar$27[ebp]
	mov	DWORD PTR [eax+4], edx

; 2011 : 
; 2012 :             for (iElement=0; iElement<elementsToRead; iElement++)

	mov	DWORD PTR _iElement$25[ebp], 0
	jmp	SHORT $LN96@LoadObject
$LN95@LoadObject:
	mov	eax, DWORD PTR _iElement$25[ebp]
	add	eax, 1
	mov	DWORD PTR _iElement$25[ebp], eax
$LN96@LoadObject:
	mov	eax, DWORD PTR _iElement$25[ebp]
	cmp	eax, DWORD PTR _elementsToRead$24[ebp]
	jae	$LN94@LoadObject

; 2013 :             {
; 2014 :                 UINT  cbShaderBin;
; 2015 :                 void *pShaderBin;
; 2016 :                 SShaderBlock *pShaderBlock;
; 2017 : 
; 2018 :                 union
; 2019 :                 {
; 2020 :                     UINT *pOffset;
; 2021 :                     SBinaryGSSOInitializer *psInlineGSSO4;
; 2022 :                     SBinaryShaderData5 *psInlineShader5;
; 2023 :                 };
; 2024 : 
; 2025 :                 C_ASSERT( offsetof(SBinaryGSSOInitializer,oShader) == 0 );
; 2026 :                 C_ASSERT( offsetof(SBinaryShaderData5,oShader) == 0 );
; 2027 : 
; 2028 : 
; 2029 :                 pShaderBlock = &m_pEffect->m_pShaderBlocks[m_pEffect->m_ShaderBlockCount];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	imul	edx, DWORD PTR [eax+60], 68
	add	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR _pShaderBlock$14[ebp], edx

; 2030 :                 m_pEffect->m_ShaderBlockCount++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+60]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [ecx+60], edx

; 2031 : 
; 2032 :                 // Get shader binary
; 2033 :                 switch (pType->ObjectType)

	mov	eax, DWORD PTR _pType$26[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR tv442[ebp], ecx
	mov	edx, DWORD PTR tv442[ebp]
	sub	edx, 5
	mov	DWORD PTR tv442[ebp], edx
	cmp	DWORD PTR tv442[ebp], 25		; 00000019H
	ja	$LN82@LoadObject
	mov	eax, DWORD PTR tv442[ebp]
	movzx	ecx, BYTE PTR $LN147@LoadObject[eax]
	jmp	DWORD PTR $LN161@LoadObject[ecx*4]
$LN91@LoadObject:

; 2034 :                 {
; 2035 :                 case EOT_VertexShader:
; 2036 :                 case EOT_GeometryShader:
; 2037 :                 case EOT_PixelShader:
; 2038 :                     VHD( m_msStructured.Read((void**)&pOffset, sizeof(*pOffset)), "Invalid pEffectBuffer: cannot read shader block." );

	push	4
	lea	eax, DWORD PTR _$S2$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAPAXK@Z ; D3DX11Core::CMemoryStream::Read
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN90@LoadObject
	jmp	$lExit$164
	jmp	$lExit$164
$LN90@LoadObject:

; 2039 :                     break;

	jmp	SHORT $LN92@LoadObject
$LN88@LoadObject:

; 2040 : 
; 2041 :                 case EOT_GeometryShaderSO:
; 2042 :                     VHD( m_msStructured.Read((void**)&psInlineGSSO4, sizeof(*psInlineGSSO4)), "Invalid pEffectBuffer: cannot read inline GS with SO." );

	push	8
	lea	eax, DWORD PTR _$S2$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAPAXK@Z ; D3DX11Core::CMemoryStream::Read
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN87@LoadObject
	jmp	$lExit$164
	jmp	$lExit$164
$LN87@LoadObject:

; 2043 :                     break;

	jmp	SHORT $LN92@LoadObject
$LN85@LoadObject:

; 2044 : 
; 2045 :                 case EOT_VertexShader5:
; 2046 :                 case EOT_GeometryShader5:
; 2047 :                 case EOT_HullShader5:
; 2048 :                 case EOT_DomainShader5:
; 2049 :                 case EOT_PixelShader5:
; 2050 :                 case EOT_ComputeShader5:
; 2051 :                     VHD( m_msStructured.Read((void**)&psInlineShader5, sizeof(*psInlineShader5)), "Invalid pEffectBuffer: cannot read inline shader." );

	push	36					; 00000024H
	lea	eax, DWORD PTR _$S2$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAPAXK@Z ; D3DX11Core::CMemoryStream::Read
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN84@LoadObject
	jmp	$lExit$164
	jmp	$lExit$164
$LN84@LoadObject:

; 2052 :                     break;

	jmp	SHORT $LN92@LoadObject
$LN82@LoadObject:

; 2053 : 
; 2054 :                 default:
; 2055 :                     VH( E_FAIL );

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN92@LoadObject
	jmp	$LN80@LoadObject
	jmp	$lExit$164
$LN92@LoadObject:

; 2056 :                 }
; 2057 : 
; 2058 :                 VHD( GetUnstructuredDataBlock(*pOffset, &cbShaderBin, &pShaderBin), "Invalid pEffectBuffer: cannot read shader byte code." );

	lea	eax, DWORD PTR _pShaderBin$15[ebp]
	push	eax
	lea	ecx, DWORD PTR _cbShaderBin$16[ebp]
	push	ecx
	mov	edx, DWORD PTR _$S2$13[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetUnstructuredDataBlock@CEffectLoader@D3DX11Effects@@IAEJIPAIPAPAX@Z ; D3DX11Effects::CEffectLoader::GetUnstructuredDataBlock
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN79@LoadObject
	jmp	$LN78@LoadObject
	jmp	$lExit$164
$LN79@LoadObject:

; 2059 : 
; 2060 :                 if (cbShaderBin > 0)

	cmp	DWORD PTR _cbShaderBin$16[ebp], 0
	jbe	$LN77@LoadObject

; 2061 :                 {
; 2062 :                     VN( pShaderBlock->pReflectionData = PRIVATENEW SShaderBlock::SReflectionData );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	44					; 0000002cH
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR _pShaderBlock$14[ebp]
	mov	edx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [ecx+8], edx
	cmp	DWORD PTR $T4[ebp], 0
	jne	SHORT $LN76@LoadObject
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$LN75@LoadObject
	jmp	$lExit$164
$LN76@LoadObject:

; 2063 : 
; 2064 :                     pShaderBlock->pReflectionData->BytecodeLength = cbShaderBin;

	mov	eax, DWORD PTR _pShaderBlock$14[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _cbShaderBin$16[ebp]
	mov	DWORD PTR [ecx+4], edx

; 2065 :                     pShaderBlock->pReflectionData->pBytecode = (BYTE*) pShaderBin;

	mov	eax, DWORD PTR _pShaderBlock$14[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _pShaderBin$15[ebp]
	mov	DWORD PTR [ecx], edx

; 2066 :                     pShaderBlock->pReflectionData->pStreamOutDecls[0] =
; 2067 :                     pShaderBlock->pReflectionData->pStreamOutDecls[1] =
; 2068 :                     pShaderBlock->pReflectionData->pStreamOutDecls[2] =
; 2069 :                     pShaderBlock->pReflectionData->pStreamOutDecls[3] = NULL;

	mov	eax, DWORD PTR _pShaderBlock$14[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, 4
	imul	eax, edx, 3
	mov	DWORD PTR [ecx+eax+8], 0
	mov	ecx, DWORD PTR _pShaderBlock$14[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, 4
	shl	eax, 1
	mov	DWORD PTR [edx+eax+8], 0
	mov	ecx, DWORD PTR _pShaderBlock$14[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, 4
	shl	eax, 0
	mov	DWORD PTR [edx+eax+8], 0
	mov	ecx, DWORD PTR _pShaderBlock$14[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	DWORD PTR [edx+ecx+8], 0

; 2070 :                     pShaderBlock->pReflectionData->RasterizedStream = 0;

	mov	eax, DWORD PTR _pShaderBlock$14[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+24], 0

; 2071 :                     pShaderBlock->pReflectionData->IsNullGS = FALSE;

	mov	eax, DWORD PTR _pShaderBlock$14[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+28], 0

; 2072 :                     pShaderBlock->pReflectionData->pReflection = NULL;

	mov	eax, DWORD PTR _pShaderBlock$14[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+32], 0

; 2073 :                     pShaderBlock->pReflectionData->InterfaceParameterCount = 0;

	mov	eax, DWORD PTR _pShaderBlock$14[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+36], 0

; 2074 :                     pShaderBlock->pReflectionData->pInterfaceParameters = NULL;

	mov	eax, DWORD PTR _pShaderBlock$14[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+40], 0
$LN77@LoadObject:

; 2075 :                 }
; 2076 : 
; 2077 :                 switch (pType->ObjectType)

	mov	eax, DWORD PTR _pType$26[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR tv508[ebp], ecx
	mov	edx, DWORD PTR tv508[ebp]
	sub	edx, 5
	mov	DWORD PTR tv508[ebp], edx
	cmp	DWORD PTR tv508[ebp], 25		; 00000019H
	ja	$LN45@LoadObject
	mov	eax, DWORD PTR tv508[ebp]
	movzx	ecx, BYTE PTR $LN148@LoadObject[eax]
	jmp	DWORD PTR $LN162@LoadObject[ecx*4]
$LN72@LoadObject:

; 2078 :                 {
; 2079 :                 case EOT_PixelShader:
; 2080 :                     pShaderBlock->pVT = &g_vtPS;

	mov	eax, DWORD PTR _pShaderBlock$14[ebp]
	mov	DWORD PTR [eax+4], OFFSET ?g_vtPS@D3DX11Effects@@3USD3DShaderVTable@1@A ; D3DX11Effects::g_vtPS

; 2081 :                     break;

	jmp	$LN73@LoadObject
$LN71@LoadObject:

; 2082 : 
; 2083 :                 case EOT_GeometryShaderSO:
; 2084 :                     // Get StreamOut decl
; 2085 :                     //VH( m_msStructured.Read(&dwOffset) );
; 2086 :                     if (cbShaderBin > 0)

	cmp	DWORD PTR _cbShaderBin$16[ebp], 0
	jbe	SHORT $LN70@LoadObject

; 2087 :                     {
; 2088 :                         VHD( GetStringAndAddToReflection(psInlineGSSO4->oSODecl, &pShaderBlock->pReflectionData->pStreamOutDecls[0]),
; 2089 :                              "Invalid pEffectBuffer: cannot read stream out decl." );

	mov	eax, DWORD PTR _pShaderBlock$14[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, 4
	imul	eax, edx, 0
	lea	ecx, DWORD PTR [ecx+eax+8]
	push	ecx
	mov	edx, DWORD PTR _$S2$13[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStringAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIPAPAD@Z ; D3DX11Effects::CEffectLoader::GetStringAndAddToReflection
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN70@LoadObject
	jmp	$LN68@LoadObject
	jmp	$lExit$164
$LN70@LoadObject:

; 2090 :                     }
; 2091 :                     pShaderBlock->pVT = &g_vtGS;

	mov	eax, DWORD PTR _pShaderBlock$14[ebp]
	mov	DWORD PTR [eax+4], OFFSET ?g_vtGS@D3DX11Effects@@3USD3DShaderVTable@1@A ; D3DX11Effects::g_vtGS

; 2092 :                     break;

	jmp	$LN73@LoadObject
$LN67@LoadObject:

; 2093 : 
; 2094 :                 case EOT_VertexShader5:
; 2095 :                 case EOT_GeometryShader5:
; 2096 :                 case EOT_HullShader5:
; 2097 :                 case EOT_DomainShader5:
; 2098 :                 case EOT_PixelShader5:
; 2099 :                 case EOT_ComputeShader5:
; 2100 :                     // Get StreamOut decls
; 2101 :                     if (cbShaderBin > 0)

	cmp	DWORD PTR _cbShaderBin$16[ebp], 0
	jbe	$LN66@LoadObject

; 2102 :                     {
; 2103 :                         for( UINT iDecl=0; iDecl < psInlineShader5->cSODecls; ++iDecl )

	mov	DWORD PTR _iDecl$12[ebp], 0
	jmp	SHORT $LN65@LoadObject
$LN64@LoadObject:
	mov	eax, DWORD PTR _iDecl$12[ebp]
	add	eax, 1
	mov	DWORD PTR _iDecl$12[ebp], eax
$LN65@LoadObject:
	mov	eax, DWORD PTR _$S2$13[ebp]
	mov	ecx, DWORD PTR _iDecl$12[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN63@LoadObject

; 2104 :                         {
; 2105 :                             VHD( GetStringAndAddToReflection(psInlineShader5->oSODecls[iDecl], &pShaderBlock->pReflectionData->pStreamOutDecls[iDecl]),
; 2106 :                                  "Invalid pEffectBuffer: cannot read stream out decls." );

	mov	eax, DWORD PTR _pShaderBlock$14[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _iDecl$12[ebp]
	lea	eax, DWORD PTR [ecx+edx*4+8]
	push	eax
	mov	ecx, DWORD PTR _iDecl$12[ebp]
	mov	edx, DWORD PTR _$S2$13[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStringAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIPAPAD@Z ; D3DX11Effects::CEffectLoader::GetStringAndAddToReflection
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN62@LoadObject
	jmp	$LN61@LoadObject
	jmp	$lExit$164
$LN62@LoadObject:

; 2107 :                         }

	jmp	SHORT $LN64@LoadObject
$LN63@LoadObject:

; 2108 :                         pShaderBlock->pReflectionData->RasterizedStream = psInlineShader5->RasterizedStream;

	mov	eax, DWORD PTR _pShaderBlock$14[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _$S2$13[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax

; 2109 :                         pShaderBlock->pReflectionData->InterfaceParameterCount = psInlineShader5->cInterfaceBindings;

	mov	eax, DWORD PTR _pShaderBlock$14[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _$S2$13[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+36], eax

; 2110 :                         VH( GetInterfaceParametersAndAddToReflection( psInlineShader5->cInterfaceBindings, psInlineShader5->oInterfaceBindings, &pShaderBlock->pReflectionData->pInterfaceParameters ) );

	mov	eax, DWORD PTR _pShaderBlock$14[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 40					; 00000028H
	push	ecx
	mov	edx, DWORD PTR _$S2$13[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _$S2$13[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInterfaceParametersAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIIPAPAUSInterfaceParameter@SShaderBlock@2@@Z ; D3DX11Effects::CEffectLoader::GetInterfaceParametersAndAddToReflection
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN66@LoadObject
	jmp	$LN59@LoadObject
	jmp	$lExit$164
$LN66@LoadObject:

; 2111 :                     }
; 2112 :                     switch (pType->ObjectType)

	mov	eax, DWORD PTR _pType$26[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR tv555[ebp], ecx
	mov	edx, DWORD PTR tv555[ebp]
	sub	edx, 25					; 00000019H
	mov	DWORD PTR tv555[ebp], edx
	cmp	DWORD PTR tv555[ebp], 5
	ja	SHORT $LN50@LoadObject
	mov	eax, DWORD PTR tv555[ebp]
	jmp	DWORD PTR $LN163@LoadObject[eax*4]
$LN56@LoadObject:

; 2113 :                     {
; 2114 :                     case EOT_VertexShader5:
; 2115 :                         pShaderBlock->pVT = &g_vtVS;

	mov	eax, DWORD PTR _pShaderBlock$14[ebp]
	mov	DWORD PTR [eax+4], OFFSET ?g_vtVS@D3DX11Effects@@3USD3DShaderVTable@1@A ; D3DX11Effects::g_vtVS

; 2116 :                         break;

	jmp	SHORT $LN57@LoadObject
$LN55@LoadObject:

; 2117 :                     case EOT_GeometryShader5:
; 2118 :                         pShaderBlock->pVT = &g_vtGS;

	mov	eax, DWORD PTR _pShaderBlock$14[ebp]
	mov	DWORD PTR [eax+4], OFFSET ?g_vtGS@D3DX11Effects@@3USD3DShaderVTable@1@A ; D3DX11Effects::g_vtGS

; 2119 :                         break;

	jmp	SHORT $LN57@LoadObject
$LN54@LoadObject:

; 2120 :                     case EOT_HullShader5:
; 2121 :                         pShaderBlock->pVT = &g_vtHS;

	mov	eax, DWORD PTR _pShaderBlock$14[ebp]
	mov	DWORD PTR [eax+4], OFFSET ?g_vtHS@D3DX11Effects@@3USD3DShaderVTable@1@A ; D3DX11Effects::g_vtHS

; 2122 :                         break;

	jmp	SHORT $LN57@LoadObject
$LN53@LoadObject:

; 2123 :                     case EOT_DomainShader5:
; 2124 :                         pShaderBlock->pVT = &g_vtDS;

	mov	eax, DWORD PTR _pShaderBlock$14[ebp]
	mov	DWORD PTR [eax+4], OFFSET ?g_vtDS@D3DX11Effects@@3USD3DShaderVTable@1@A ; D3DX11Effects::g_vtDS

; 2125 :                         break;

	jmp	SHORT $LN57@LoadObject
$LN52@LoadObject:

; 2126 :                     case EOT_PixelShader5:
; 2127 :                         pShaderBlock->pVT = &g_vtPS;

	mov	eax, DWORD PTR _pShaderBlock$14[ebp]
	mov	DWORD PTR [eax+4], OFFSET ?g_vtPS@D3DX11Effects@@3USD3DShaderVTable@1@A ; D3DX11Effects::g_vtPS

; 2128 :                         break;

	jmp	SHORT $LN57@LoadObject
$LN51@LoadObject:

; 2129 :                     case EOT_ComputeShader5:
; 2130 :                         pShaderBlock->pVT = &g_vtCS;

	mov	eax, DWORD PTR _pShaderBlock$14[ebp]
	mov	DWORD PTR [eax+4], OFFSET ?g_vtCS@D3DX11Effects@@3USD3DShaderVTable@1@A ; D3DX11Effects::g_vtCS

; 2131 :                         break;

	jmp	SHORT $LN57@LoadObject
$LN50@LoadObject:

; 2132 :                     default:
; 2133 :                         VH( E_FAIL );

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN57@LoadObject
	jmp	$LN48@LoadObject
	jmp	$lExit$164
$LN57@LoadObject:

; 2134 :                     }
; 2135 :                     break;

	jmp	SHORT $LN73@LoadObject
$LN47@LoadObject:

; 2136 : 
; 2137 :                 case EOT_GeometryShader:
; 2138 :                     pShaderBlock->pVT = &g_vtGS;

	mov	eax, DWORD PTR _pShaderBlock$14[ebp]
	mov	DWORD PTR [eax+4], OFFSET ?g_vtGS@D3DX11Effects@@3USD3DShaderVTable@1@A ; D3DX11Effects::g_vtGS

; 2139 :                     break;

	jmp	SHORT $LN73@LoadObject
$LN46@LoadObject:

; 2140 : 
; 2141 :                 case EOT_VertexShader:
; 2142 :                     pShaderBlock->pVT = &g_vtVS;

	mov	eax, DWORD PTR _pShaderBlock$14[ebp]
	mov	DWORD PTR [eax+4], OFFSET ?g_vtVS@D3DX11Effects@@3USD3DShaderVTable@1@A ; D3DX11Effects::g_vtVS

; 2143 :                     break;

	jmp	SHORT $LN73@LoadObject
$LN45@LoadObject:

; 2144 : 
; 2145 :                 default:
; 2146 :                     VHD( E_FAIL, "Invalid pEffectBuffer: invalid shader type." );

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN73@LoadObject
	jmp	$LN43@LoadObject
	jmp	$lExit$164
$LN73@LoadObject:

; 2147 :                 }
; 2148 :             }

	jmp	$LN95@LoadObject
$LN94@LoadObject:

; 2149 :         }
; 2150 :         else if (pType->IsObjectType(EOT_String))

	jmp	$LN102@LoadObject
$LN101@LoadObject:
	push	1
	mov	ecx, DWORD PTR _pType$26[ebp]
	call	?IsObjectType@SType@D3DX11Effects@@QBEHW4EObjectType@2@@Z ; D3DX11Effects::SType::IsObjectType
	test	eax, eax
	je	$LN41@LoadObject

; 2151 :         {
; 2152 :             // Strings
; 2153 :             
; 2154 :             chkElementsTotal += m_pEffect->m_StringCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 124				; 0000007cH
	push	ecx
	lea	ecx, DWORD PTR $T5[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	lea	ecx, DWORD PTR _chkElementsTotal$23[ebp]
	call	??Y?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z ; CheckedNumber<unsigned int,4294967295>::operator+=

; 2155 :             VHD( chkElementsTotal.GetValue(&elementsTotal), "Overflow: string object count." );

	lea	eax, DWORD PTR _elementsTotal$22[ebp]
	push	eax
	lea	ecx, DWORD PTR _chkElementsTotal$23[ebp]
	call	?GetValue@?$CheckedNumber@I$0PPPPPPPP@@@QAEJPAI@Z ; CheckedNumber<unsigned int,4294967295>::GetValue
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN40@LoadObject
	jmp	$LN39@LoadObject
	jmp	$lExit$164
$LN40@LoadObject:

; 2156 :             VBD( elementsTotal <= m_pHeader->cStrings, "Invalid pEffectBuffer: string count mismatch." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _elementsTotal$22[ebp]
	cmp	edx, DWORD PTR [ecx+36]
	jbe	SHORT $LN38@LoadObject
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$LN37@LoadObject
	jmp	$lExit$164
$LN38@LoadObject:

; 2157 : 
; 2158 :             pVar->Data.pString = &m_pEffect->m_pStrings[m_pEffect->m_StringCount];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	edx, DWORD PTR [eax+124]
	mov	eax, DWORD PTR [ecx+128]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _pVar$27[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2159 : 
; 2160 :             for (iElement=0; iElement<elementsToRead; iElement++)

	mov	DWORD PTR _iElement$25[ebp], 0
	jmp	SHORT $LN36@LoadObject
$LN35@LoadObject:
	mov	eax, DWORD PTR _iElement$25[ebp]
	add	eax, 1
	mov	DWORD PTR _iElement$25[ebp], eax
$LN36@LoadObject:
	mov	eax, DWORD PTR _iElement$25[ebp]
	cmp	eax, DWORD PTR _elementsToRead$24[ebp]
	jae	$LN34@LoadObject

; 2161 :             {
; 2162 :                 UINT  dwOffset;
; 2163 :                 SString *pString;
; 2164 : 
; 2165 :                 pString = &m_pEffect->m_pStrings[m_pEffect->m_StringCount];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	edx, DWORD PTR [eax+124]
	mov	eax, DWORD PTR [ecx+128]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _pString$10[ebp], ecx

; 2166 :                 m_pEffect->m_StringCount++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+124]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [ecx+124], edx

; 2167 : 
; 2168 :                 // Get string
; 2169 :                 VHD( m_msStructured.Read(&dwOffset), "Invalid pEffectBuffer: cannot read string offset." );

	lea	eax, DWORD PTR _dwOffset$11[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAI@Z ; D3DX11Core::CMemoryStream::Read
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN33@LoadObject
	jmp	$LN32@LoadObject
	jmp	$lExit$164
$LN33@LoadObject:

; 2170 :                 VHD( GetStringAndAddToReflection(dwOffset, &pString->pString), "Invalid pEffectBuffer: cannot read string." );

	mov	eax, DWORD PTR _pString$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwOffset$11[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStringAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIPAPAD@Z ; D3DX11Effects::CEffectLoader::GetStringAndAddToReflection
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN31@LoadObject
	jmp	$LN30@LoadObject
	jmp	$lExit$164
$LN31@LoadObject:

; 2171 :             }

	jmp	$LN35@LoadObject
$LN34@LoadObject:

; 2172 :         }
; 2173 :         else if (pType->IsShaderResource())

	jmp	$LN102@LoadObject
$LN41@LoadObject:
	mov	ecx, DWORD PTR _pType$26[ebp]
	call	?IsShaderResource@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::IsShaderResource
	test	eax, eax
	je	$LN28@LoadObject

; 2174 :         {   
; 2175 :             // Textures/buffers
; 2176 :             
; 2177 :             chkElementsTotal += m_pEffect->m_ShaderResourceCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 132				; 00000084H
	push	ecx
	lea	ecx, DWORD PTR $T6[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	lea	ecx, DWORD PTR _chkElementsTotal$23[ebp]
	call	??Y?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z ; CheckedNumber<unsigned int,4294967295>::operator+=

; 2178 :             VHD( chkElementsTotal.GetValue(&elementsTotal), "Overflow: SRV object count." );

	lea	eax, DWORD PTR _elementsTotal$22[ebp]
	push	eax
	lea	ecx, DWORD PTR _chkElementsTotal$23[ebp]
	call	?GetValue@?$CheckedNumber@I$0PPPPPPPP@@@QAEJPAI@Z ; CheckedNumber<unsigned int,4294967295>::GetValue
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN27@LoadObject
	jmp	$LN26@LoadObject
	jmp	$lExit$164
$LN27@LoadObject:

; 2179 :             VBD( elementsTotal <= m_pHeader->cShaderResources, "Invalid pEffectBuffer: SRV count mismatch." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _elementsTotal$22[ebp]
	cmp	edx, DWORD PTR [ecx+40]
	jbe	SHORT $LN25@LoadObject
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$LN24@LoadObject
	jmp	$lExit$164
$LN25@LoadObject:

; 2180 : 
; 2181 :             pVar->Data.pShaderResource = &m_pEffect->m_pShaderResources[m_pEffect->m_ShaderResourceCount];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	edx, DWORD PTR [eax+132]
	mov	eax, DWORD PTR [ecx+136]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _pVar$27[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2182 :             m_pEffect->m_ShaderResourceCount += elementsToRead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+132]
	add	edx, DWORD PTR _elementsToRead$24[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [ecx+132], edx
	jmp	$LN102@LoadObject
$LN28@LoadObject:

; 2183 :         }
; 2184 :         else if (pType->IsUnorderedAccessView())

	mov	ecx, DWORD PTR _pType$26[ebp]
	call	?IsUnorderedAccessView@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::IsUnorderedAccessView
	test	eax, eax
	je	$LN22@LoadObject

; 2185 :         {   
; 2186 :             // UnorderedAccessViews
; 2187 : 
; 2188 :             chkElementsTotal += m_pEffect->m_UnorderedAccessViewCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 140				; 0000008cH
	push	ecx
	lea	ecx, DWORD PTR $T7[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
	lea	edx, DWORD PTR $T7[ebp]
	push	edx
	lea	ecx, DWORD PTR _chkElementsTotal$23[ebp]
	call	??Y?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z ; CheckedNumber<unsigned int,4294967295>::operator+=

; 2189 :             VHD( chkElementsTotal.GetValue(&elementsTotal), "Overflow: UAV object count." );

	lea	eax, DWORD PTR _elementsTotal$22[ebp]
	push	eax
	lea	ecx, DWORD PTR _chkElementsTotal$23[ebp]
	call	?GetValue@?$CheckedNumber@I$0PPPPPPPP@@@QAEJPAI@Z ; CheckedNumber<unsigned int,4294967295>::GetValue
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN21@LoadObject
	jmp	$LN20@LoadObject
	jmp	$lExit$164
$LN21@LoadObject:

; 2190 :             VBD( elementsTotal <= m_pHeader->cUnorderedAccessViews, "Invalid pEffectBuffer: UAV count mismatch." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _elementsTotal$22[ebp]
	cmp	edx, DWORD PTR [ecx+80]
	jbe	SHORT $LN19@LoadObject
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$LN18@LoadObject
	jmp	$lExit$164
$LN19@LoadObject:

; 2191 : 
; 2192 :             pVar->Data.pUnorderedAccessView = &m_pEffect->m_pUnorderedAccessViews[m_pEffect->m_UnorderedAccessViewCount];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	edx, DWORD PTR [eax+140]
	mov	eax, DWORD PTR [ecx+144]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _pVar$27[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2193 :             m_pEffect->m_UnorderedAccessViewCount += elementsToRead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+140]
	add	edx, DWORD PTR _elementsToRead$24[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [ecx+140], edx
	jmp	$LN102@LoadObject
$LN22@LoadObject:

; 2194 :         }
; 2195 :         else if (pType->IsRenderTargetView())

	mov	ecx, DWORD PTR _pType$26[ebp]
	call	?IsRenderTargetView@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::IsRenderTargetView
	test	eax, eax
	je	$LN16@LoadObject

; 2196 :         {            
; 2197 :             // RenderTargets
; 2198 : 
; 2199 :             chkElementsTotal += m_pEffect->m_RenderTargetViewCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 148				; 00000094H
	push	ecx
	lea	ecx, DWORD PTR $T8[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
	lea	edx, DWORD PTR $T8[ebp]
	push	edx
	lea	ecx, DWORD PTR _chkElementsTotal$23[ebp]
	call	??Y?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z ; CheckedNumber<unsigned int,4294967295>::operator+=

; 2200 :             VHD( chkElementsTotal.GetValue(&elementsTotal), "Overflow: RTV object count." );

	lea	eax, DWORD PTR _elementsTotal$22[ebp]
	push	eax
	lea	ecx, DWORD PTR _chkElementsTotal$23[ebp]
	call	?GetValue@?$CheckedNumber@I$0PPPPPPPP@@@QAEJPAI@Z ; CheckedNumber<unsigned int,4294967295>::GetValue
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN15@LoadObject
	jmp	$LN14@LoadObject
	jmp	$lExit$164
$LN15@LoadObject:

; 2201 :             VBD( elementsTotal <= m_pHeader->cRenderTargetViews, "Invalid pEffectBuffer: RTV count mismatch." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _elementsTotal$22[ebp]
	cmp	edx, DWORD PTR [ecx+60]
	jbe	SHORT $LN13@LoadObject
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$LN12@LoadObject
	jmp	$lExit$164
$LN13@LoadObject:

; 2202 : 
; 2203 :             pVar->Data.pRenderTargetView = &m_pEffect->m_pRenderTargetViews[m_pEffect->m_RenderTargetViewCount];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	edx, DWORD PTR [eax+148]
	mov	eax, DWORD PTR [ecx+152]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _pVar$27[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2204 :             m_pEffect->m_RenderTargetViewCount += elementsToRead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+148]
	add	edx, DWORD PTR _elementsToRead$24[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [ecx+148], edx
	jmp	$LN102@LoadObject
$LN16@LoadObject:

; 2205 :         }
; 2206 :         else if (pType->IsDepthStencilView())

	mov	ecx, DWORD PTR _pType$26[ebp]
	call	?IsDepthStencilView@SType@D3DX11Effects@@QBEHXZ ; D3DX11Effects::SType::IsDepthStencilView
	test	eax, eax
	je	$LN10@LoadObject

; 2207 :         {            
; 2208 :             // DepthStencilViews
; 2209 : 
; 2210 :             chkElementsTotal += m_pEffect->m_DepthStencilViewCount;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	add	ecx, 156				; 0000009cH
	push	ecx
	lea	ecx, DWORD PTR $T9[ebp]
	call	??0?$CheckedNumber@I$0PPPPPPPP@@@QAE@ABI@Z ; CheckedNumber<unsigned int,4294967295>::CheckedNumber<unsigned int,4294967295>
	lea	edx, DWORD PTR $T9[ebp]
	push	edx
	lea	ecx, DWORD PTR _chkElementsTotal$23[ebp]
	call	??Y?$CheckedNumber@I$0PPPPPPPP@@@QAEAAV0@ABV0@@Z ; CheckedNumber<unsigned int,4294967295>::operator+=

; 2211 :             VHD( chkElementsTotal.GetValue(&elementsTotal), "Overflow: DSV object count." );

	lea	eax, DWORD PTR _elementsTotal$22[ebp]
	push	eax
	lea	ecx, DWORD PTR _chkElementsTotal$23[ebp]
	call	?GetValue@?$CheckedNumber@I$0PPPPPPPP@@@QAEJPAI@Z ; CheckedNumber<unsigned int,4294967295>::GetValue
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN9@LoadObject
	jmp	$LN8@LoadObject
	jmp	$lExit$164
$LN9@LoadObject:

; 2212 :             VBD( elementsTotal <= m_pHeader->cDepthStencilViews, "Invalid pEffectBuffer: DSV count mismatch." );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _elementsTotal$22[ebp]
	cmp	edx, DWORD PTR [ecx+64]
	jbe	SHORT $LN7@LoadObject
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$LN6@LoadObject
	jmp	$lExit$164
$LN7@LoadObject:

; 2213 : 
; 2214 :             pVar->Data.pDepthStencilView = &m_pEffect->m_pDepthStencilViews[m_pEffect->m_DepthStencilViewCount];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	edx, DWORD PTR [eax+156]
	mov	eax, DWORD PTR [ecx+160]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	edx, DWORD PTR _pVar$27[ebp]
	mov	DWORD PTR [edx+4], ecx

; 2215 :             m_pEffect->m_DepthStencilViewCount += elementsToRead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+156]
	add	edx, DWORD PTR _elementsToRead$24[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [ecx+156], edx

; 2216 :         }
; 2217 :         else

	jmp	SHORT $LN102@LoadObject
$LN10@LoadObject:

; 2218 :         {
; 2219 :             VHD( E_FAIL, "Invalid pEffectBuffer: DSV count mismatch." );

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN102@LoadObject
	jmp	SHORT $LN3@LoadObject
	jmp	SHORT $lExit$164
$LN102@LoadObject:

; 2220 :         }
; 2221 : 
; 2222 :         // Read annotations
; 2223 :         VH( LoadAnnotations(&pVar->AnnotationCount, &pVar->pAnnotations) );

	mov	eax, DWORD PTR _pVar$27[ebp]
	add	eax, 44					; 0000002cH
	push	eax
	mov	ecx, DWORD PTR _pVar$27[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadAnnotations@CEffectLoader@D3DX11Effects@@IAEJPAIPAPAUSAnnotation@2@@Z ; D3DX11Effects::CEffectLoader::LoadAnnotations
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@LoadObject
	jmp	SHORT $LN1@LoadObject
	jmp	SHORT $lExit$164
$LN2@LoadObject:

; 2224 :     }

	jmp	$LN139@LoadObject
$LN138@LoadObject:
	jmp	SHORT $lExit$164
$LN1@LoadObject:
	jmp	SHORT $lExit$164
$LN3@LoadObject:
	jmp	SHORT $lExit$164
$LN6@LoadObject:
	jmp	SHORT $lExit$164
$LN8@LoadObject:
	jmp	SHORT $lExit$164
$LN12@LoadObject:
	jmp	SHORT $lExit$164
$LN14@LoadObject:
	jmp	SHORT $lExit$164
$LN18@LoadObject:
	jmp	SHORT $lExit$164
$LN20@LoadObject:
	jmp	SHORT $lExit$164
$LN24@LoadObject:
	jmp	SHORT $lExit$164
$LN26@LoadObject:
	jmp	SHORT $lExit$164
$LN30@LoadObject:
	jmp	SHORT $lExit$164
$LN32@LoadObject:
	jmp	SHORT $lExit$164
$LN37@LoadObject:
	jmp	SHORT $lExit$164
$LN39@LoadObject:
	jmp	SHORT $lExit$164
$LN43@LoadObject:
	jmp	SHORT $lExit$164
$LN48@LoadObject:
	jmp	SHORT $lExit$164
$LN59@LoadObject:
	jmp	SHORT $lExit$164
$LN61@LoadObject:
	jmp	SHORT $lExit$164
$LN68@LoadObject:
	jmp	SHORT $lExit$164
$LN75@LoadObject:
	jmp	SHORT $lExit$164
$LN78@LoadObject:
	jmp	SHORT $lExit$164
$LN80@LoadObject:
	jmp	SHORT $lExit$164
$lExit$164:

; 2225 : lExit:
; 2226 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 2227 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN160@LoadObject
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 616				; 00000268H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN160@LoadObject:
	DD	10					; 0000000aH
	DD	$LN159@LoadObject
$LN159@LoadObject:
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN149@LoadObject
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN150@LoadObject
	DD	-104					; ffffff98H
	DD	4
	DD	$LN151@LoadObject
	DD	-120					; ffffff88H
	DD	8
	DD	$LN152@LoadObject
	DD	-132					; ffffff7cH
	DD	4
	DD	$LN153@LoadObject
	DD	-192					; ffffff40H
	DD	4
	DD	$LN154@LoadObject
	DD	-204					; ffffff34H
	DD	4
	DD	$LN155@LoadObject
	DD	-216					; ffffff28H
	DD	4
	DD	$LN156@LoadObject
	DD	-240					; ffffff10H
	DD	4
	DD	$LN157@LoadObject
	DD	-264					; fffffef8H
	DD	4
	DD	$LN158@LoadObject
$LN158@LoadObject:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN157@LoadObject:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	50					; 00000032H
	DB	0
$LN156@LoadObject:
	DB	112					; 00000070H
	DB	83					; 00000053H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	66					; 00000042H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	0
$LN155@LoadObject:
	DB	99					; 00000063H
	DB	98					; 00000062H
	DB	83					; 00000053H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	66					; 00000042H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	0
$LN154@LoadObject:
	DB	99					; 00000063H
	DB	65					; 00000041H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN153@LoadObject:
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	84					; 00000054H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
$LN152@LoadObject:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	107					; 0000006bH
	DB	69					; 00000045H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	84					; 00000054H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
$LN151@LoadObject:
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	84					; 00000054H
	DB	111					; 0000006fH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
$LN150@LoadObject:
	DB	112					; 00000070H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN149@LoadObject:
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	66					; 00000042H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
	npad	3
$LN161@LoadObject:
	DD	$LN91@LoadObject
	DD	$LN88@LoadObject
	DD	$LN85@LoadObject
	DD	$LN82@LoadObject
$LN147@LoadObject:
	DB	0
	DB	0
	DB	0
	DB	1
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	npad	2
$LN162@LoadObject:
	DD	$LN72@LoadObject
	DD	$LN46@LoadObject
	DD	$LN47@LoadObject
	DD	$LN71@LoadObject
	DD	$LN67@LoadObject
	DD	$LN45@LoadObject
$LN148@LoadObject:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	npad	2
$LN163@LoadObject:
	DD	$LN52@LoadObject
	DD	$LN56@LoadObject
	DD	$LN55@LoadObject
	DD	$LN51@LoadObject
	DD	$LN54@LoadObject
	DD	$LN53@LoadObject
?LoadObjectVariables@CEffectLoader@D3DX11Effects@@IAEJXZ ENDP ; D3DX11Effects::CEffectLoader::LoadObjectVariables
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?LoadNumericVariable@CEffectLoader@D3DX11Effects@@IAEJPAUSConstantBuffer@2@@Z
_TEXT	SEGMENT
tv219 = -280						; size = 4
_bytesUnpacked$1 = -80					; size = 4
_pDefaultValue$ = -68					; size = 4
_pType$ = -56						; size = 4
_pVar$ = -44						; size = 4
_psVar$ = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_pParentCB$ = 8						; size = 4
?LoadNumericVariable@CEffectLoader@D3DX11Effects@@IAEJPAUSConstantBuffer@2@@Z PROC ; D3DX11Effects::CEffectLoader::LoadNumericVariable, COMDAT
; _this$ = ecx

; 1216 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1217 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 1218 :     SBinaryNumericVariable *psVar;
; 1219 :     SGlobalVariable *pVar;
; 1220 :     SType *pType;
; 1221 :     void *pDefaultValue;
; 1222 : 
; 1223 :     // Read variable info
; 1224 :     VHD( m_msStructured.Read((void**) &psVar, sizeof(*psVar)), "Invalid pEffectBuffer: cannot read numeric variable." );

	push	24					; 00000018H
	lea	eax, DWORD PTR _psVar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAPAXK@Z ; D3DX11Core::CMemoryStream::Read
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN29@LoadNumeri
	jmp	$lExit$40
	jmp	$lExit$40
$LN29@LoadNumeri:

; 1225 :     VBD( m_pEffect->m_VariableCount < (m_pHeader->Effect.cObjectVariables + m_pHeader->Effect.cNumericVariables + m_pHeader->cInterfaceVariables),
; 1226 :         "Internal loading error: invalid variable counts.");

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+28]
	mov	eax, DWORD PTR [eax+12]
	add	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx+28]
	add	eax, DWORD PTR [edx+84]
	cmp	DWORD PTR [ecx+28], eax
	jb	SHORT $LN27@LoadNumeri
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$40
	jmp	$lExit$40
$LN27@LoadNumeri:

; 1227 :     pVar = &m_pEffect->m_pVariables[m_pEffect->m_VariableCount];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	imul	edx, DWORD PTR [eax+28], 48
	add	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _pVar$[ebp], edx

; 1228 :     
; 1229 :     // Get type
; 1230 :     VH( LoadTypeAndAddToPool(&pType, psVar->oType) );

	mov	eax, DWORD PTR _psVar$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	lea	edx, DWORD PTR _pType$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadTypeAndAddToPool@CEffectLoader@D3DX11Effects@@IAEJPAPAUSType@2@I@Z ; D3DX11Effects::CEffectLoader::LoadTypeAndAddToPool
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN25@LoadNumeri
	jmp	$lExit$40
	jmp	$lExit$40
$LN25@LoadNumeri:

; 1231 :     
; 1232 :     // Make sure the right polymorphic type is created
; 1233 :     VH( PlacementNewVariable(pVar, pType, FALSE) );

	push	0
	mov	eax, DWORD PTR _pType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVar$[ebp]
	push	ecx
	call	?PlacementNewVariable@D3DX11Effects@@YAJPAXPAUSType@1@H@Z ; D3DX11Effects::PlacementNewVariable
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN23@LoadNumeri
	jmp	$lExit$40
	jmp	$lExit$40
$LN23@LoadNumeri:

; 1234 : 
; 1235 :     if (psVar->Flags & D3DX11_EFFECT_VARIABLE_EXPLICIT_BIND_POINT)

	mov	eax, DWORD PTR _psVar$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	and	ecx, 4
	je	SHORT $LN21@LoadNumeri

; 1236 :     {
; 1237 :         pVar->ExplicitBindPoint = psVar->Offset;

	mov	eax, DWORD PTR _pVar$[ebp]
	mov	ecx, DWORD PTR _psVar$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+24], edx

; 1238 :     }
; 1239 :     else

	jmp	SHORT $LN20@LoadNumeri
$LN21@LoadNumeri:

; 1240 :     {
; 1241 :         pVar->ExplicitBindPoint = -1;

	mov	eax, DWORD PTR _pVar$[ebp]
	mov	DWORD PTR [eax+24], -1
$LN20@LoadNumeri:

; 1242 :     }
; 1243 : 
; 1244 :     pVar->pEffect = m_pEffect;

	mov	eax, DWORD PTR _pVar$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+28], edx

; 1245 :     pVar->pType = pType;

	mov	eax, DWORD PTR _pVar$[ebp]
	mov	ecx, DWORD PTR _pType$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 1246 :     pVar->pCB = pParentCB;

	mov	eax, DWORD PTR _pVar$[ebp]
	mov	ecx, DWORD PTR _pParentCB$[ebp]
	mov	DWORD PTR [eax+36], ecx

; 1247 :     pVar->Data.pGeneric = pParentCB->pBackingStore + psVar->Offset;

	mov	eax, DWORD PTR _pParentCB$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _psVar$[ebp]
	add	ecx, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _pVar$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1248 :     VBD( psVar->Offset + pVar->pType->TotalSize <= pVar->pCB->Size, "Invalid pEffectBuffer: invalid variable offset." );

	mov	eax, DWORD PTR _pVar$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _psVar$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, DWORD PTR [ecx+16]
	mov	ecx, DWORD PTR _pVar$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	cmp	eax, DWORD PTR [edx+20]
	jbe	SHORT $LN19@LoadNumeri
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$40
	jmp	$lExit$40
$LN19@LoadNumeri:

; 1249 : 
; 1250 :     if (pType->VarType == EVT_Struct && pType->StructType.ImplementsInterface && !pParentCB->IsTBuffer)

	mov	eax, DWORD PTR _pType$[ebp]
	cmp	DWORD PTR [eax+4], 3
	jne	SHORT $LN17@LoadNumeri
	mov	eax, DWORD PTR _pType$[ebp]
	movzx	ecx, BYTE PTR [eax+36]
	test	ecx, ecx
	je	SHORT $LN17@LoadNumeri
	mov	eax, DWORD PTR _pParentCB$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	shl	ecx, 30					; 0000001eH
	sar	ecx, 31					; 0000001fH
	test	ecx, ecx
	jne	SHORT $LN17@LoadNumeri

; 1251 :     {
; 1252 :         pVar->MemberDataOffsetPlus4 = m_pEffect->m_MemberDataCount * sizeof(SMemberDataPointer) + 4;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+100]
	lea	eax, DWORD PTR [edx*8+4]
	mov	ecx, DWORD PTR _pVar$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 1253 :         m_pEffect->m_MemberDataCount += max(pType->Elements,1);

	mov	eax, DWORD PTR _pType$[ebp]
	cmp	DWORD PTR [eax+8], 1
	jbe	SHORT $LN32@LoadNumeri
	mov	ecx, DWORD PTR _pType$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv219[ebp], edx
	jmp	SHORT $LN33@LoadNumeri
$LN32@LoadNumeri:
	mov	DWORD PTR tv219[ebp], 1
$LN33@LoadNumeri:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+100]
	add	edx, DWORD PTR tv219[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [ecx+100], edx
$LN17@LoadNumeri:

; 1254 :     }
; 1255 : 
; 1256 :     // Get name & semantic
; 1257 :     VHD( GetStringAndAddToReflection(psVar->oName, &pVar->pName), "Invalid pEffectBuffer: cannot read variable name." );

	mov	eax, DWORD PTR _pVar$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _psVar$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStringAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIPAPAD@Z ; D3DX11Effects::CEffectLoader::GetStringAndAddToReflection
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN16@LoadNumeri
	jmp	$lExit$40
	jmp	$lExit$40
$LN16@LoadNumeri:

; 1258 :     VHD( GetStringAndAddToReflection(psVar->oSemantic, &pVar->pSemantic), "Invalid pEffectBuffer: cannot read variable semantic." );

	mov	eax, DWORD PTR _pVar$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _psVar$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStringAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIPAPAD@Z ; D3DX11Effects::CEffectLoader::GetStringAndAddToReflection
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN14@LoadNumeri
	jmp	$lExit$40
	jmp	$lExit$40
$LN14@LoadNumeri:

; 1259 : 
; 1260 :     // Ensure the variable fits in the CBuffer and doesn't overflow
; 1261 :     VBD( pType->TotalSize + psVar->Offset <= pParentCB->Size &&
; 1262 :          pType->TotalSize + psVar->Offset >= pType->TotalSize, "Invalid pEffectBuffer: variable does not fit in CB." );

	mov	eax, DWORD PTR _pType$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _psVar$[ebp]
	add	ecx, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _pParentCB$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	ja	SHORT $LN11@LoadNumeri
	mov	eax, DWORD PTR _pType$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _psVar$[ebp]
	add	ecx, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _pType$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jae	SHORT $LN12@LoadNumeri
$LN11@LoadNumeri:
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$40
	jmp	$lExit$40
$LN12@LoadNumeri:

; 1263 : 
; 1264 :     ZeroMemory(pVar->Data.pGeneric, pType->TotalSize);

	mov	eax, DWORD PTR _pType$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	push	0
	mov	edx, DWORD PTR _pVar$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1265 : 
; 1266 :     // Get default value
; 1267 :     if (0 != psVar->oDefaultValue)

	mov	eax, DWORD PTR _psVar$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN9@LoadNumeri

; 1268 :     {
; 1269 :         UINT  bytesUnpacked;
; 1270 :         VHD( m_msUnstructured.ReadAtOffset(psVar->oDefaultValue, pType->PackedSize, &pDefaultValue), "Invalid pEffectBuffer: cannot read default value." );

	lea	eax, DWORD PTR _pDefaultValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pType$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _psVar$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?ReadAtOffset@CMemoryStream@D3DX11Core@@QAEJKKPAPAX@Z ; D3DX11Core::CMemoryStream::ReadAtOffset
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN8@LoadNumeri
	jmp	$lExit$40
	jmp	$lExit$40
$LN8@LoadNumeri:

; 1271 :         VH( UnpackData((BYTE*) pVar->Data.pGeneric, (BYTE*) pDefaultValue, pType->PackedSize, pType, &bytesUnpacked) );

	lea	eax, DWORD PTR _bytesUnpacked$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _pType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pType$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _pDefaultValue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pVar$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UnpackData@CEffectLoader@D3DX11Effects@@IAEIPAE0IPAUSType@2@PAI@Z ; D3DX11Effects::CEffectLoader::UnpackData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN6@LoadNumeri
	jmp	SHORT $lExit$40
	jmp	SHORT $lExit$40
$LN6@LoadNumeri:

; 1272 :         VBD( bytesUnpacked == pType->PackedSize, "Invalid pEffectBuffer: invalid type packed size.");

	mov	eax, DWORD PTR _pType$[ebp]
	mov	ecx, DWORD PTR _bytesUnpacked$1[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	je	SHORT $LN9@LoadNumeri
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $lExit$40
	jmp	SHORT $lExit$40
$LN9@LoadNumeri:

; 1273 :     }
; 1274 :     
; 1275 :     // We need to use offsets until we fixup
; 1276 :     pVar->Data.Offset = psVar->Offset;

	mov	eax, DWORD PTR _pVar$[ebp]
	mov	ecx, DWORD PTR _psVar$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+4], edx

; 1277 : 
; 1278 :     // Read annotations
; 1279 :     VH( LoadAnnotations(&pVar->AnnotationCount, &pVar->pAnnotations) );

	mov	eax, DWORD PTR _pVar$[ebp]
	add	eax, 44					; 0000002cH
	push	eax
	mov	ecx, DWORD PTR _pVar$[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadAnnotations@CEffectLoader@D3DX11Effects@@IAEJPAIPAPAUSAnnotation@2@@Z ; D3DX11Effects::CEffectLoader::LoadAnnotations
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@LoadNumeri
	jmp	SHORT $lExit$40
	jmp	SHORT $lExit$40
$LN2@LoadNumeri:

; 1280 : 
; 1281 :     m_pEffect->m_VariableCount++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+28]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [ecx+28], edx
$lExit$40:

; 1282 : 
; 1283 : lExit:
; 1284 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 1285 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN39@LoadNumeri
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN39@LoadNumeri:
	DD	4
	DD	$LN38@LoadNumeri
$LN38@LoadNumeri:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN34@LoadNumeri
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN35@LoadNumeri
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN36@LoadNumeri
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN37@LoadNumeri
$LN37@LoadNumeri:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	85					; 00000055H
	DB	110					; 0000006eH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN36@LoadNumeri:
	DB	112					; 00000070H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN35@LoadNumeri:
	DB	112					; 00000070H
	DB	84					; 00000054H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN34@LoadNumeri:
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	0
?LoadNumericVariable@CEffectLoader@D3DX11Effects@@IAEJPAUSConstantBuffer@2@@Z ENDP ; D3DX11Effects::CEffectLoader::LoadNumericVariable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?LoadCBs@CEffectLoader@D3DX11Effects@@IAEJXZ
_TEXT	SEGMENT
tv136 = -280						; size = 4
tv94 = -280						; size = 4
$T1 = -272						; size = 4
_pCB$2 = -68						; size = 4
_psCB$3 = -56						; size = 4
_iVar$ = -44						; size = 4
_iCB$ = -32						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
?LoadCBs@CEffectLoader@D3DX11Effects@@IAEJXZ PROC	; D3DX11Effects::CEffectLoader::LoadCBs, COMDAT
; _this$ = ecx

; 1289 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1290 :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 1291 :     UINT  iCB, iVar;
; 1292 : 
; 1293 :     for (iCB=0; iCB<m_pHeader->Effect.cCBs; iCB++)

	mov	DWORD PTR _iCB$[ebp], 0
	jmp	SHORT $LN20@LoadCBs
$LN19@LoadCBs:
	mov	eax, DWORD PTR _iCB$[ebp]
	add	eax, 1
	mov	DWORD PTR _iCB$[ebp], eax
$LN20@LoadCBs:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _iCB$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	$LN18@LoadCBs

; 1294 :     {
; 1295 :         SBinaryConstantBuffer *psCB;
; 1296 :         SConstantBuffer *pCB;
; 1297 : 
; 1298 :         VHD( m_msStructured.Read((void**) &psCB, sizeof(*psCB)), "Invalid pEffectBuffer: cannot read CB." );

	push	20					; 00000014H
	lea	eax, DWORD PTR _psCB$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Read@CMemoryStream@D3DX11Core@@QAEJPAPAXK@Z ; D3DX11Core::CMemoryStream::Read
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN17@LoadCBs
	jmp	$lExit$30
	jmp	$lExit$30
$LN17@LoadCBs:

; 1299 :         pCB = &m_pEffect->m_pCBs[iCB];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	imul	edx, DWORD PTR _iCB$[ebp], 60
	add	edx, DWORD PTR [ecx+120]
	mov	DWORD PTR _pCB$2[ebp], edx

; 1300 : 
; 1301 :         VHD( GetStringAndAddToReflection(psCB->oName, &pCB->pName), "Invalid pEffectBuffer: cannot read CB name." );

	mov	eax, DWORD PTR _pCB$2[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _psCB$3[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStringAndAddToReflection@CEffectLoader@D3DX11Effects@@IAEJIPAPAD@Z ; D3DX11Effects::CEffectLoader::GetStringAndAddToReflection
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN15@LoadCBs
	jmp	$lExit$30
	jmp	$lExit$30
$LN15@LoadCBs:

; 1302 : 
; 1303 :         pCB->IsTBuffer = (psCB->Flags & SBinaryConstantBuffer::c_IsTBuffer) != 0 ? TRUE : FALSE;

	mov	eax, DWORD PTR _psCB$3[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 1
	je	SHORT $LN23@LoadCBs
	mov	DWORD PTR tv94[ebp], 1
	jmp	SHORT $LN24@LoadCBs
$LN23@LoadCBs:
	mov	DWORD PTR tv94[ebp], 0
$LN24@LoadCBs:
	mov	edx, DWORD PTR tv94[ebp]
	and	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _pCB$2[ebp]
	mov	ecx, DWORD PTR [eax+48]
	and	ecx, -3					; fffffffdH
	or	ecx, edx
	mov	edx, DWORD PTR _pCB$2[ebp]
	mov	DWORD PTR [edx+48], ecx

; 1304 :         pCB->IsSingle = (psCB->Flags & SBinaryConstantBuffer::c_IsSingle) != 0 ? TRUE : FALSE;

	mov	eax, DWORD PTR _psCB$3[ebp]
	mov	ecx, DWORD PTR [eax+8]
	and	ecx, 2
	je	SHORT $LN25@LoadCBs
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN26@LoadCBs
$LN25@LoadCBs:
	mov	DWORD PTR tv136[ebp], 0
$LN26@LoadCBs:
	mov	edx, DWORD PTR tv136[ebp]
	and	edx, 1
	shl	edx, 6
	mov	eax, DWORD PTR _pCB$2[ebp]
	mov	ecx, DWORD PTR [eax+48]
	and	ecx, -65				; ffffffbfH
	or	ecx, edx
	mov	edx, DWORD PTR _pCB$2[ebp]
	mov	DWORD PTR [edx+48], ecx

; 1305 :         pCB->Size = psCB->Size;

	mov	eax, DWORD PTR _pCB$2[ebp]
	mov	ecx, DWORD PTR _psCB$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+20], edx

; 1306 :         pCB->ExplicitBindPoint = psCB->ExplicitBindPoint;

	mov	eax, DWORD PTR _pCB$2[ebp]
	mov	ecx, DWORD PTR _psCB$3[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+44], edx

; 1307 :         VBD( pCB->Size == AlignToPowerOf2(pCB->Size, SType::c_RegisterSize), "Invalid pEffectBuffer: CB size not a power of 2." );

	push	16					; 00000010H
	mov	eax, DWORD PTR _pCB$2[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	mov	edx, DWORD PTR _pCB$2[ebp]
	cmp	DWORD PTR [edx+20], eax
	je	SHORT $LN13@LoadCBs
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$lExit$30
	jmp	$lExit$30
$LN13@LoadCBs:

; 1308 :         VN( pCB->pBackingStore = PRIVATENEW BYTE[pCB->Size] );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCB$2[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	??2@YAPAXIAAVCDataBlockStore@@@Z	; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR _pCB$2[ebp]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR [eax+16], ecx
	cmp	DWORD PTR $T1[ebp], 0
	jne	SHORT $LN11@LoadCBs
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	$lExit$30
	jmp	$lExit$30
$LN11@LoadCBs:

; 1309 :         
; 1310 :         pCB->MemberDataOffsetPlus4 = m_pEffect->m_MemberDataCount * sizeof(SMemberDataPointer) + 4;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+100]
	lea	eax, DWORD PTR [edx*8+4]
	mov	ecx, DWORD PTR _pCB$2[ebp]
	mov	DWORD PTR [ecx+52], eax

; 1311 :         m_pEffect->m_MemberDataCount += 2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+100]
	add	edx, 2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [ecx+100], edx

; 1312 : 
; 1313 :         // point this CB to variables that it owns
; 1314 :         pCB->VariableCount = psCB->cVariables;

	mov	eax, DWORD PTR _pCB$2[ebp]
	mov	ecx, DWORD PTR _psCB$3[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+36], edx

; 1315 :         if (pCB->VariableCount > 0)

	mov	eax, DWORD PTR _pCB$2[ebp]
	cmp	DWORD PTR [eax+36], 0
	jbe	SHORT $LN9@LoadCBs

; 1316 :         {
; 1317 :             pCB->pVariables = &m_pEffect->m_pVariables[m_pEffect->m_VariableCount];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	imul	edx, DWORD PTR [eax+28], 48
	add	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _pCB$2[ebp]
	mov	DWORD PTR [eax+40], edx

; 1318 :         }
; 1319 :         else

	jmp	SHORT $LN8@LoadCBs
$LN9@LoadCBs:

; 1320 :         {
; 1321 :             pCB->pVariables = NULL;

	mov	eax, DWORD PTR _pCB$2[ebp]
	mov	DWORD PTR [eax+40], 0
$LN8@LoadCBs:

; 1322 :         }
; 1323 : 
; 1324 :         // Read annotations
; 1325 :         VH( LoadAnnotations(&pCB->AnnotationCount, &pCB->pAnnotations) );

	mov	eax, DWORD PTR _pCB$2[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _pCB$2[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadAnnotations@CEffectLoader@D3DX11Effects@@IAEJPAIPAPAUSAnnotation@2@@Z ; D3DX11Effects::CEffectLoader::LoadAnnotations
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN7@LoadCBs
	jmp	SHORT $lExit$30
	jmp	SHORT $lExit$30
$LN7@LoadCBs:

; 1326 : 
; 1327 :         for (iVar=0; iVar<psCB->cVariables; iVar++)

	mov	DWORD PTR _iVar$[ebp], 0
	jmp	SHORT $LN5@LoadCBs
$LN4@LoadCBs:
	mov	eax, DWORD PTR _iVar$[ebp]
	add	eax, 1
	mov	DWORD PTR _iVar$[ebp], eax
$LN5@LoadCBs:
	mov	eax, DWORD PTR _psCB$3[ebp]
	mov	ecx, DWORD PTR _iVar$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN3@LoadCBs

; 1328 :         {
; 1329 :             VH( LoadNumericVariable(pCB) );

	mov	eax, DWORD PTR _pCB$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadNumericVariable@CEffectLoader@D3DX11Effects@@IAEJPAUSConstantBuffer@2@@Z ; D3DX11Effects::CEffectLoader::LoadNumericVariable
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@LoadCBs
	jmp	SHORT $lExit$30
	jmp	SHORT $lExit$30
$LN2@LoadCBs:

; 1330 :         }

	jmp	SHORT $LN4@LoadCBs
$LN3@LoadCBs:

; 1331 :     }

	jmp	$LN19@LoadCBs
$LN18@LoadCBs:

; 1332 : 
; 1333 :     m_pEffect->m_CBCount = m_pHeader->Effect.cCBs;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+116], ecx
$lExit$30:

; 1334 : 
; 1335 : lExit:
; 1336 :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 1337 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@LoadCBs
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN29@LoadCBs:
	DD	1
	DD	$LN28@LoadCBs
$LN28@LoadCBs:
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN27@LoadCBs
$LN27@LoadCBs:
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	67					; 00000043H
	DB	66					; 00000042H
	DB	0
?LoadCBs@CEffectLoader@D3DX11Effects@@IAEJXZ ENDP	; D3DX11Effects::CEffectLoader::LoadCBs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?GetSize@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetSize@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QBEIXZ PROC ; CEffectVector<D3DX11Effects::SInterface *>::GetSize, COMDAT
; _this$ = ecx

; 436  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 437  :         return m_CurSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 438  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QBEIXZ ENDP ; CEffectVector<D3DX11Effects::SInterface *>::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ??A?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAEAAPAUSInterface@D3DX11Effects@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_index$ = 8						; size = 4
??A?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAEAAPAUSInterface@D3DX11Effects@@I@Z PROC ; CEffectVector<D3DX11Effects::SInterface *>::operator[], COMDAT
; _this$ = ecx

; 412  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN4@operator:

; 413  :         D3DXASSERT(index < m_CurSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jb	SHORT $LN3@operator
	push	OFFSET ??_C@_0BC@HKPIIPPC@index?5?$DM?5m_CurSize?$AA@
	push	413					; 0000019dH
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator

; 414  :         return ((T*)m_pData)[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 415  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAEAAPAUSInterface@D3DX11Effects@@I@Z ENDP ; CEffectVector<D3DX11Effects::SInterface *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?Add@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAEJABQAUSInterface@D3DX11Effects@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 4
?Add@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAEJABQAUSInterface@D3DX11Effects@@@Z PROC ; CEffectVector<D3DX11Effects::SInterface *>::Add, COMDAT
; _this$ = ecx

; 350  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 351  :         if (FAILED(Grow()))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@IAEJXZ ; CEffectVector<D3DX11Effects::SInterface *>::Grow
	test	eax, eax
	jge	SHORT $LN1@Add

; 352  :             return m_hLastError;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	jmp	SHORT $LN2@Add
$LN1@Add:

; 353  : 
; 354  :         memcpy((T*)m_pData + m_CurSize, &var, sizeof(T));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*4], edx

; 355  :         m_CurSize++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 356  : 
; 357  :         return S_OK;

	xor	eax, eax
$LN2@Add:

; 358  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAEJABQAUSInterface@D3DX11Effects@@@Z ENDP ; CEffectVector<D3DX11Effects::SInterface *>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?Empty@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAEXXZ
_TEXT	SEGMENT
_i$ = -20						; size = 4
_this$ = -8						; size = 4
?Empty@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAEXXZ PROC ; CEffectVector<D3DX11Effects::SInterface *>::Empty, COMDAT
; _this$ = ecx

; 307  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 308  :         UINT i;
; 309  :         
; 310  :         // manually invoke destructor on all elements
; 311  :         for (i = 0; i < m_CurSize; ++ i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@Empty
$LN2@Empty:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@Empty:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN1@Empty

; 312  :         {   
; 313  :             ((T*)m_pData + i)->~T();
; 314  :         }

	jmp	SHORT $LN2@Empty
$LN1@Empty:

; 315  :         m_CurSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 316  :         m_hLastError = S_OK;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 317  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAEXXZ ENDP ; CEffectVector<D3DX11Effects::SInterface *>::Empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?Clear@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAEXXZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
?Clear@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAEXXZ PROC ; CEffectVector<D3DX11Effects::SInterface *>::Clear, COMDAT
; _this$ = ecx

; 285  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 286  :         Empty();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Empty@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAEXXZ ; CEffectVector<D3DX11Effects::SInterface *>::Empty

; 287  :         SAFE_DELETE_ARRAY(m_pData);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 288  :         m_MaxSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 289  : #if _DEBUG
; 290  :         m_pCastData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 291  : #endif // _DEBUG
; 292  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAEXXZ ENDP ; CEffectVector<D3DX11Effects::SInterface *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ??1?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAE@XZ PROC ; CEffectVector<D3DX11Effects::SInterface *>::~CEffectVector<D3DX11Effects::SInterface *>, COMDAT
; _this$ = ecx

; 244  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 245  :         Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAEXXZ ; CEffectVector<D3DX11Effects::SInterface *>::Clear

; 246  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAE@XZ ENDP ; CEffectVector<D3DX11Effects::SInterface *>::~CEffectVector<D3DX11Effects::SInterface *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ??0?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAE@XZ PROC ; CEffectVector<D3DX11Effects::SInterface *>::CEffectVector<D3DX11Effects::SInterface *>, COMDAT
; _this$ = ecx

; 233  :     CEffectVector<T>()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 234  :     {
; 235  :         m_hLastError = S_OK;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 236  : #if _DEBUG
; 237  :         m_pCastData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 238  : #endif // _DEBUG
; 239  :         m_pData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 240  :         m_CurSize = m_MaxSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 241  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CEffectVector@PAUSInterface@D3DX11Effects@@@@QAE@XZ ENDP ; CEffectVector<D3DX11Effects::SInterface *>::CEffectVector<D3DX11Effects::SInterface *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?Reserve@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@IAEJI@Z
_TEXT	SEGMENT
tv71 = -256						; size = 4
$T1 = -248						; size = 4
$T2 = -236						; size = 4
_newSize$3 = -32					; size = 4
_pNewData$4 = -20					; size = 4
_this$ = -8						; size = 4
_DesiredSize$ = 8					; size = 4
?Reserve@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@IAEJI@Z PROC ; CEffectVector<D3DX11Effects::SInterface *>::Reserve, COMDAT
; _this$ = ecx

; 193  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 194  :         if (DesiredSize > m_MaxSize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _DesiredSize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	$LN6@Reserve

; 195  :         {
; 196  :             BYTE *pNewData;
; 197  :             UINT newSize = max(m_MaxSize * 2, DesiredSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 1
	cmp	ecx, DWORD PTR _DesiredSize$[ebp]
	jbe	SHORT $LN9@Reserve
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	shl	eax, 1
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN10@Reserve
$LN9@Reserve:
	mov	ecx, DWORD PTR _DesiredSize$[ebp]
	mov	DWORD PTR tv71[ebp], ecx
$LN10@Reserve:
	mov	edx, DWORD PTR tv71[ebp]
	mov	DWORD PTR _newSize$3[ebp], edx

; 198  : 
; 199  :             if (newSize < 16)

	cmp	DWORD PTR _newSize$3[ebp], 16		; 00000010H
	jae	SHORT $LN5@Reserve

; 200  :                 newSize = 16;

	mov	DWORD PTR _newSize$3[ebp], 16		; 00000010H
$LN5@Reserve:

; 201  : 
; 202  :             if ((newSize < m_MaxSize) || (newSize < m_CurSize) || (newSize >= UINT_MAX / sizeof(T)))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newSize$3[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jb	SHORT $LN3@Reserve
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newSize$3[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jb	SHORT $LN3@Reserve
	cmp	DWORD PTR _newSize$3[ebp], 1073741823	; 3fffffffH
	jb	SHORT $LN4@Reserve
$LN3@Reserve:

; 203  :             {
; 204  :                 m_hLastError = E_OUTOFMEMORY;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], -2147024882		; 8007000eH

; 205  :                 return m_hLastError;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	jmp	$LN7@Reserve
$LN4@Reserve:

; 206  :             }
; 207  : 
; 208  :             pNewData = NEW BYTE[newSize * sizeof(T)];

	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	mov	eax, DWORD PTR _newSize$3[ebp]
	shl	eax, 2
	push	eax
	call	??_U@YAPAXIABUnothrow_t@std@@@Z		; operator new[]
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR _pNewData$4[ebp], ecx

; 209  :             if (pNewData == NULL)

	cmp	DWORD PTR _pNewData$4[ebp], 0
	jne	SHORT $LN2@Reserve

; 210  :             {
; 211  :                 m_hLastError = E_OUTOFMEMORY;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], -2147024882		; 8007000eH

; 212  :                 return m_hLastError;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	jmp	SHORT $LN7@Reserve
$LN2@Reserve:

; 213  :             }
; 214  : 
; 215  :             if (m_pData)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Reserve

; 216  :             {
; 217  :                 memcpy(pNewData, m_pData, m_CurSize * sizeof(T));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _pNewData$4[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 218  :                 delete []m_pData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Reserve:

; 219  :             }
; 220  : 
; 221  :             m_pData = pNewData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pNewData$4[ebp]
	mov	DWORD PTR [eax+4], ecx

; 222  :             m_MaxSize = newSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newSize$3[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN6@Reserve:

; 223  :         }
; 224  : #if _DEBUG
; 225  :         m_pCastData = (T*) m_pData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 226  : #endif // _DEBUG
; 227  :         return S_OK;

	xor	eax, eax
$LN7@Reserve:

; 228  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Reserve@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@IAEJI@Z ENDP ; CEffectVector<D3DX11Effects::SInterface *>::Reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?Grow@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@IAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Grow@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@IAEJXZ PROC ; CEffectVector<D3DX11Effects::SInterface *>::Grow, COMDAT
; _this$ = ecx

; 188  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 189  :         return Reserve(m_CurSize + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reserve@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@IAEJI@Z ; CEffectVector<D3DX11Effects::SInterface *>::Reserve

; 190  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Grow@?$CEffectVector@PAUSInterface@D3DX11Effects@@@@IAEJXZ ENDP ; CEffectVector<D3DX11Effects::SInterface *>::Grow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?GetSize@?$CEffectVector@E@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetSize@?$CEffectVector@E@@QBEIXZ PROC			; CEffectVector<unsigned char>::GetSize, COMDAT
; _this$ = ecx

; 436  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 437  :         return m_CurSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 438  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@?$CEffectVector@E@@QBEIXZ ENDP			; CEffectVector<unsigned char>::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ??A?$CEffectVector@E@@QAEAAEI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_index$ = 8						; size = 4
??A?$CEffectVector@E@@QAEAAEI@Z PROC			; CEffectVector<unsigned char>::operator[], COMDAT
; _this$ = ecx

; 412  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN4@operator:

; 413  :         D3DXASSERT(index < m_CurSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jb	SHORT $LN3@operator
	push	OFFSET ??_C@_0BC@HKPIIPPC@index?5?$DM?5m_CurSize?$AA@
	push	413					; 0000019dH
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator

; 414  :         return ((T*)m_pData)[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	add	eax, DWORD PTR _index$[ebp]

; 415  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CEffectVector@E@@QAEAAEI@Z ENDP			; CEffectVector<unsigned char>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?AddRange@?$CEffectVector@E@@QAEPAEI@Z
_TEXT	SEGMENT
$T1 = -236						; size = 4
_i$ = -32						; size = 4
_pData$ = -20						; size = 4
_this$ = -8						; size = 4
_count$ = 8						; size = 4
?AddRange@?$CEffectVector@E@@QAEPAEI@Z PROC		; CEffectVector<unsigned char>::AddRange, COMDAT
; _this$ = ecx

; 329  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 330  :         if (m_CurSize + count < m_CurSize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [edx+12]
	jae	SHORT $LN5@AddRange

; 331  :         {
; 332  :             m_hLastError = E_OUTOFMEMORY;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], -2147024882		; 8007000eH

; 333  :             return NULL;

	xor	eax, eax
	jmp	SHORT $LN6@AddRange
$LN5@AddRange:

; 334  :         }
; 335  : 
; 336  :         if (FAILED(Reserve(m_CurSize + count)))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reserve@?$CEffectVector@E@@IAEJI@Z	; CEffectVector<unsigned char>::Reserve
	test	eax, eax
	jge	SHORT $LN4@AddRange

; 337  :             return NULL;

	xor	eax, eax
	jmp	SHORT $LN6@AddRange
$LN4@AddRange:

; 338  : 
; 339  :         T *pData = (T*)m_pData + m_CurSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _pData$[ebp], ecx

; 340  :         UINT i;
; 341  :         for (i = 0; i < count; ++ i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@AddRange
$LN2@AddRange:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@AddRange:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _count$[ebp]
	jae	SHORT $LN1@AddRange

; 342  :         {
; 343  :             new(pData + i) T;

	mov	eax, DWORD PTR _pData$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	push	eax
	push	1
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax

; 344  :         }

	jmp	SHORT $LN2@AddRange
$LN1@AddRange:

; 345  :         m_CurSize += count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 346  :         return pData;

	mov	eax, DWORD PTR _pData$[ebp]
$LN6@AddRange:

; 347  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRange@?$CEffectVector@E@@QAEPAEI@Z ENDP		; CEffectVector<unsigned char>::AddRange
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?Empty@?$CEffectVector@E@@QAEXXZ
_TEXT	SEGMENT
_i$ = -20						; size = 4
_this$ = -8						; size = 4
?Empty@?$CEffectVector@E@@QAEXXZ PROC			; CEffectVector<unsigned char>::Empty, COMDAT
; _this$ = ecx

; 307  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 308  :         UINT i;
; 309  :         
; 310  :         // manually invoke destructor on all elements
; 311  :         for (i = 0; i < m_CurSize; ++ i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@Empty
$LN2@Empty:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@Empty:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN1@Empty

; 312  :         {   
; 313  :             ((T*)m_pData + i)->~T();
; 314  :         }

	jmp	SHORT $LN2@Empty
$LN1@Empty:

; 315  :         m_CurSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 316  :         m_hLastError = S_OK;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 317  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@?$CEffectVector@E@@QAEXXZ ENDP			; CEffectVector<unsigned char>::Empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?Clear@?$CEffectVector@E@@QAEXXZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
?Clear@?$CEffectVector@E@@QAEXXZ PROC			; CEffectVector<unsigned char>::Clear, COMDAT
; _this$ = ecx

; 285  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 286  :         Empty();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Empty@?$CEffectVector@E@@QAEXXZ	; CEffectVector<unsigned char>::Empty

; 287  :         SAFE_DELETE_ARRAY(m_pData);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 288  :         m_MaxSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 289  : #if _DEBUG
; 290  :         m_pCastData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 291  : #endif // _DEBUG
; 292  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CEffectVector@E@@QAEXXZ ENDP			; CEffectVector<unsigned char>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ??1?$CEffectVector@E@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$CEffectVector@E@@QAE@XZ PROC			; CEffectVector<unsigned char>::~CEffectVector<unsigned char>, COMDAT
; _this$ = ecx

; 244  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 245  :         Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CEffectVector@E@@QAEXXZ	; CEffectVector<unsigned char>::Clear

; 246  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CEffectVector@E@@QAE@XZ ENDP			; CEffectVector<unsigned char>::~CEffectVector<unsigned char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ??0?$CEffectVector@E@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CEffectVector@E@@QAE@XZ PROC			; CEffectVector<unsigned char>::CEffectVector<unsigned char>, COMDAT
; _this$ = ecx

; 233  :     CEffectVector<T>()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 234  :     {
; 235  :         m_hLastError = S_OK;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 236  : #if _DEBUG
; 237  :         m_pCastData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 238  : #endif // _DEBUG
; 239  :         m_pData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 240  :         m_CurSize = m_MaxSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 241  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CEffectVector@E@@QAE@XZ ENDP			; CEffectVector<unsigned char>::CEffectVector<unsigned char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?Reserve@?$CEffectVector@E@@IAEJI@Z
_TEXT	SEGMENT
tv71 = -256						; size = 4
$T1 = -248						; size = 4
$T2 = -236						; size = 4
_newSize$3 = -32					; size = 4
_pNewData$4 = -20					; size = 4
_this$ = -8						; size = 4
_DesiredSize$ = 8					; size = 4
?Reserve@?$CEffectVector@E@@IAEJI@Z PROC		; CEffectVector<unsigned char>::Reserve, COMDAT
; _this$ = ecx

; 193  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 194  :         if (DesiredSize > m_MaxSize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _DesiredSize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	$LN6@Reserve

; 195  :         {
; 196  :             BYTE *pNewData;
; 197  :             UINT newSize = max(m_MaxSize * 2, DesiredSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 1
	cmp	ecx, DWORD PTR _DesiredSize$[ebp]
	jbe	SHORT $LN9@Reserve
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	shl	eax, 1
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN10@Reserve
$LN9@Reserve:
	mov	ecx, DWORD PTR _DesiredSize$[ebp]
	mov	DWORD PTR tv71[ebp], ecx
$LN10@Reserve:
	mov	edx, DWORD PTR tv71[ebp]
	mov	DWORD PTR _newSize$3[ebp], edx

; 198  : 
; 199  :             if (newSize < 16)

	cmp	DWORD PTR _newSize$3[ebp], 16		; 00000010H
	jae	SHORT $LN5@Reserve

; 200  :                 newSize = 16;

	mov	DWORD PTR _newSize$3[ebp], 16		; 00000010H
$LN5@Reserve:

; 201  : 
; 202  :             if ((newSize < m_MaxSize) || (newSize < m_CurSize) || (newSize >= UINT_MAX / sizeof(T)))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newSize$3[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jb	SHORT $LN3@Reserve
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newSize$3[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jb	SHORT $LN3@Reserve
	cmp	DWORD PTR _newSize$3[ebp], -1
	jb	SHORT $LN4@Reserve
$LN3@Reserve:

; 203  :             {
; 204  :                 m_hLastError = E_OUTOFMEMORY;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], -2147024882		; 8007000eH

; 205  :                 return m_hLastError;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	jmp	$LN7@Reserve
$LN4@Reserve:

; 206  :             }
; 207  : 
; 208  :             pNewData = NEW BYTE[newSize * sizeof(T)];

	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	mov	eax, DWORD PTR _newSize$3[ebp]
	push	eax
	call	??_U@YAPAXIABUnothrow_t@std@@@Z		; operator new[]
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR _pNewData$4[ebp], ecx

; 209  :             if (pNewData == NULL)

	cmp	DWORD PTR _pNewData$4[ebp], 0
	jne	SHORT $LN2@Reserve

; 210  :             {
; 211  :                 m_hLastError = E_OUTOFMEMORY;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], -2147024882		; 8007000eH

; 212  :                 return m_hLastError;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	jmp	SHORT $LN7@Reserve
$LN2@Reserve:

; 213  :             }
; 214  : 
; 215  :             if (m_pData)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Reserve

; 216  :             {
; 217  :                 memcpy(pNewData, m_pData, m_CurSize * sizeof(T));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _pNewData$4[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 218  :                 delete []m_pData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Reserve:

; 219  :             }
; 220  : 
; 221  :             m_pData = pNewData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pNewData$4[ebp]
	mov	DWORD PTR [eax+4], ecx

; 222  :             m_MaxSize = newSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newSize$3[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN6@Reserve:

; 223  :         }
; 224  : #if _DEBUG
; 225  :         m_pCastData = (T*) m_pData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 226  : #endif // _DEBUG
; 227  :         return S_OK;

	xor	eax, eax
$LN7@Reserve:

; 228  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Reserve@?$CEffectVector@E@@IAEJI@Z ENDP		; CEffectVector<unsigned char>::Reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?GetSimpleParameterTypeFromObjectType@D3DX11Effects@@YA?AW4_D3D_SHADER_VARIABLE_TYPE@@W4EObjectType@1@@Z
_TEXT	SEGMENT
tv64 = -196						; size = 4
_ObjectType$ = 8					; size = 4
?GetSimpleParameterTypeFromObjectType@D3DX11Effects@@YA?AW4_D3D_SHADER_VARIABLE_TYPE@@W4EObjectType@1@@Z PROC ; D3DX11Effects::GetSimpleParameterTypeFromObjectType, COMDAT

; 92   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 93   :     switch (ObjectType)

	mov	eax, DWORD PTR _ObjectType$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 43			; 0000002bH
	ja	$LN4@GetSimpleP
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN37@GetSimpleP[edx]
	jmp	DWORD PTR $LN38@GetSimpleP[eax*4]
$LN32@GetSimpleP:

; 94   :     {
; 95   :     case EOT_String:
; 96   :         return D3D10_SVT_STRING;

	mov	eax, 4
	jmp	$LN35@GetSimpleP
$LN31@GetSimpleP:

; 97   :     case EOT_Blend:
; 98   :         return D3D10_SVT_BLEND;        

	mov	eax, 24					; 00000018H
	jmp	$LN35@GetSimpleP
$LN30@GetSimpleP:

; 99   :     case EOT_DepthStencil:
; 100  :         return D3D10_SVT_DEPTHSTENCIL;        

	mov	eax, 23					; 00000017H
	jmp	$LN35@GetSimpleP
$LN29@GetSimpleP:

; 101  :     case EOT_Rasterizer:
; 102  :         return D3D10_SVT_RASTERIZER;        

	mov	eax, 22					; 00000016H
	jmp	$LN35@GetSimpleP
$LN28@GetSimpleP:

; 103  :     case EOT_PixelShader:
; 104  :     case EOT_PixelShader5:
; 105  :         return D3D10_SVT_PIXELSHADER;        

	mov	eax, 15					; 0000000fH
	jmp	$LN35@GetSimpleP
$LN27@GetSimpleP:

; 106  :     case EOT_VertexShader:
; 107  :     case EOT_VertexShader5:
; 108  :         return D3D10_SVT_VERTEXSHADER;        

	mov	eax, 16					; 00000010H
	jmp	$LN35@GetSimpleP
$LN26@GetSimpleP:

; 109  :     case EOT_GeometryShader:
; 110  :     case EOT_GeometryShaderSO:
; 111  :     case EOT_GeometryShader5:
; 112  :         return D3D10_SVT_GEOMETRYSHADER;    

	mov	eax, 21					; 00000015H
	jmp	$LN35@GetSimpleP
$LN25@GetSimpleP:

; 113  :     case EOT_HullShader5:
; 114  :         return D3D11_SVT_HULLSHADER;        

	mov	eax, 35					; 00000023H
	jmp	$LN35@GetSimpleP
$LN24@GetSimpleP:

; 115  :     case EOT_DomainShader5:
; 116  :         return D3D11_SVT_DOMAINSHADER;        

	mov	eax, 36					; 00000024H
	jmp	$LN35@GetSimpleP
$LN23@GetSimpleP:

; 117  :     case EOT_ComputeShader5:
; 118  :         return D3D11_SVT_COMPUTESHADER;        

	mov	eax, 38					; 00000026H
	jmp	$LN35@GetSimpleP
$LN22@GetSimpleP:

; 119  :     case EOT_RenderTargetView:
; 120  :         return D3D10_SVT_RENDERTARGETVIEW;

	mov	eax, 30					; 0000001eH
	jmp	$LN35@GetSimpleP
$LN21@GetSimpleP:

; 121  :     case EOT_DepthStencilView:
; 122  :         return D3D10_SVT_DEPTHSTENCILVIEW;

	mov	eax, 31					; 0000001fH
	jmp	$LN35@GetSimpleP
$LN20@GetSimpleP:

; 123  :     case EOT_Texture:
; 124  :     case EOT_Texture1D:
; 125  :     case EOT_Texture1DArray:
; 126  :     case EOT_Texture2D:
; 127  :     case EOT_Texture2DArray:
; 128  :     case EOT_Texture2DMS:
; 129  :     case EOT_Texture2DMSArray:
; 130  :     case EOT_Texture3D:
; 131  :     case EOT_TextureCube:
; 132  :     case EOT_TextureCubeArray:
; 133  :         return D3D10_SVT_TEXTURE;

	mov	eax, 5
	jmp	$LN35@GetSimpleP
$LN19@GetSimpleP:

; 134  :     case EOT_Buffer:
; 135  :         return D3D10_SVT_BUFFER;        

	mov	eax, 25					; 00000019H
	jmp	$LN35@GetSimpleP
$LN18@GetSimpleP:

; 136  :     case EOT_Sampler:
; 137  :         return D3D10_SVT_SAMPLER;

	mov	eax, 10					; 0000000aH
	jmp	SHORT $LN35@GetSimpleP
$LN17@GetSimpleP:

; 138  :     case EOT_ByteAddressBuffer:
; 139  :         return D3D11_SVT_BYTEADDRESS_BUFFER;

	mov	eax, 46					; 0000002eH
	jmp	SHORT $LN35@GetSimpleP
$LN16@GetSimpleP:

; 140  :     case EOT_StructuredBuffer:
; 141  :         return D3D11_SVT_STRUCTURED_BUFFER;

	mov	eax, 48					; 00000030H
	jmp	SHORT $LN35@GetSimpleP
$LN15@GetSimpleP:

; 142  :     case EOT_RWTexture1D:
; 143  :         return D3D11_SVT_RWTEXTURE1D;

	mov	eax, 40					; 00000028H
	jmp	SHORT $LN35@GetSimpleP
$LN14@GetSimpleP:

; 144  :     case EOT_RWTexture1DArray:
; 145  :         return D3D11_SVT_RWTEXTURE1DARRAY;

	mov	eax, 41					; 00000029H
	jmp	SHORT $LN35@GetSimpleP
$LN13@GetSimpleP:

; 146  :     case EOT_RWTexture2D:
; 147  :         return D3D11_SVT_RWTEXTURE2D;

	mov	eax, 42					; 0000002aH
	jmp	SHORT $LN35@GetSimpleP
$LN12@GetSimpleP:

; 148  :     case EOT_RWTexture2DArray:
; 149  :         return D3D11_SVT_RWTEXTURE2DARRAY;

	mov	eax, 43					; 0000002bH
	jmp	SHORT $LN35@GetSimpleP
$LN11@GetSimpleP:

; 150  :     case EOT_RWTexture3D:
; 151  :         return D3D11_SVT_RWTEXTURE3D;

	mov	eax, 44					; 0000002cH
	jmp	SHORT $LN35@GetSimpleP
$LN10@GetSimpleP:

; 152  :     case EOT_RWBuffer:
; 153  :         return D3D11_SVT_RWBUFFER;

	mov	eax, 45					; 0000002dH
	jmp	SHORT $LN35@GetSimpleP
$LN9@GetSimpleP:

; 154  :     case EOT_RWByteAddressBuffer:
; 155  :         return D3D11_SVT_RWBYTEADDRESS_BUFFER;

	mov	eax, 47					; 0000002fH
	jmp	SHORT $LN35@GetSimpleP
$LN8@GetSimpleP:

; 156  :     case EOT_RWStructuredBuffer:
; 157  :     case EOT_RWStructuredBufferAlloc:
; 158  :     case EOT_RWStructuredBufferConsume:
; 159  :         return D3D11_SVT_RWSTRUCTURED_BUFFER;

	mov	eax, 49					; 00000031H
	jmp	SHORT $LN35@GetSimpleP
$LN7@GetSimpleP:

; 160  :     case EOT_AppendStructuredBuffer:
; 161  :         return D3D11_SVT_APPEND_STRUCTURED_BUFFER;

	mov	eax, 50					; 00000032H
	jmp	SHORT $LN35@GetSimpleP
$LN6@GetSimpleP:

; 162  :     case EOT_ConsumeStructuredBuffer:
; 163  :         return D3D11_SVT_CONSUME_STRUCTURED_BUFFER;

	mov	eax, 51					; 00000033H
	jmp	SHORT $LN35@GetSimpleP
$LN4@GetSimpleP:

; 164  :     default:
; 165  :         D3DXASSERT(0);

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@GetSimpleP
	push	OFFSET ??_C@_01GBGANLPD@0?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??GetSimpleParameterTypeFromObjectType@D3DX11Effects@@YA?AW4_D3D_SHADER_VARIABLE_TYPE@@W4EObjectType@2@@Z@4JA
	add	eax, 73					; 00000049H
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@GetSimpleP:
	xor	eax, eax
	jne	SHORT $LN4@GetSimpleP

; 166  :     }
; 167  :     return D3D10_SVT_VOID;

	xor	eax, eax
$LN35@GetSimpleP:

; 168  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN38@GetSimpleP:
	DD	$LN32@GetSimpleP
	DD	$LN31@GetSimpleP
	DD	$LN30@GetSimpleP
	DD	$LN29@GetSimpleP
	DD	$LN28@GetSimpleP
	DD	$LN27@GetSimpleP
	DD	$LN26@GetSimpleP
	DD	$LN20@GetSimpleP
	DD	$LN22@GetSimpleP
	DD	$LN21@GetSimpleP
	DD	$LN18@GetSimpleP
	DD	$LN19@GetSimpleP
	DD	$LN23@GetSimpleP
	DD	$LN25@GetSimpleP
	DD	$LN24@GetSimpleP
	DD	$LN15@GetSimpleP
	DD	$LN14@GetSimpleP
	DD	$LN13@GetSimpleP
	DD	$LN12@GetSimpleP
	DD	$LN11@GetSimpleP
	DD	$LN10@GetSimpleP
	DD	$LN17@GetSimpleP
	DD	$LN9@GetSimpleP
	DD	$LN16@GetSimpleP
	DD	$LN8@GetSimpleP
	DD	$LN7@GetSimpleP
	DD	$LN6@GetSimpleP
	DD	$LN4@GetSimpleP
$LN37@GetSimpleP:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	6
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	27					; 0000001bH
	DB	8
	DB	9
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	7
	DB	27					; 0000001bH
	DB	4
	DB	5
	DB	6
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	14					; 0000000eH
	DB	15					; 0000000fH
	DB	16					; 00000010H
	DB	17					; 00000011H
	DB	18					; 00000012H
	DB	19					; 00000013H
	DB	20					; 00000014H
	DB	21					; 00000015H
	DB	22					; 00000016H
	DB	23					; 00000017H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	24					; 00000018H
	DB	25					; 00000019H
	DB	26					; 0000001aH
?GetSimpleParameterTypeFromObjectType@D3DX11Effects@@YA?AW4_D3D_SHADER_VARIABLE_TYPE@@W4EObjectType@1@@Z ENDP ; D3DX11Effects::GetSimpleParameterTypeFromObjectType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GSRange@D3DX11Effects@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GSRange@D3DX11Effects@@QAEPAXI@Z PROC		; D3DX11Effects::SRange::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SRange@D3DX11Effects@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GSRange@D3DX11Effects@@QAEPAXI@Z ENDP		; D3DX11Effects::SRange::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1SRange@D3DX11Effects@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1SRange@D3DX11Effects@@QAE@XZ PROC			; D3DX11Effects::SRange::~SRange, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CEffectVector@PAX@@QAE@XZ		; CEffectVector<void *>::~CEffectVector<void *>
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1SRange@D3DX11Effects@@QAE@XZ ENDP			; D3DX11Effects::SRange::~SRange
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0SRange@D3DX11Effects@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0SRange@D3DX11Effects@@QAE@XZ PROC			; D3DX11Effects::SRange::SRange, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CEffectVector@PAX@@QAE@XZ		; CEffectVector<void *>::CEffectVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0SRange@D3DX11Effects@@QAE@XZ ENDP			; D3DX11Effects::SRange::SRange
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?GetSize@?$CEffectVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetSize@?$CEffectVector@PAX@@QBEIXZ PROC		; CEffectVector<void *>::GetSize, COMDAT
; _this$ = ecx

; 436  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 437  :         return m_CurSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 438  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@?$CEffectVector@PAX@@QBEIXZ ENDP		; CEffectVector<void *>::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ??A?$CEffectVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_index$ = 8						; size = 4
??A?$CEffectVector@PAX@@QAEAAPAXI@Z PROC		; CEffectVector<void *>::operator[], COMDAT
; _this$ = ecx

; 412  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN4@operator:

; 413  :         D3DXASSERT(index < m_CurSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jb	SHORT $LN3@operator
	push	OFFSET ??_C@_0BC@HKPIIPPC@index?5?$DM?5m_CurSize?$AA@
	push	413					; 0000019dH
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator

; 414  :         return ((T*)m_pData)[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 415  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CEffectVector@PAX@@QAEAAPAXI@Z ENDP		; CEffectVector<void *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?Add@?$CEffectVector@PAX@@QAEJABQAX@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_var$ = 8						; size = 4
?Add@?$CEffectVector@PAX@@QAEJABQAX@Z PROC		; CEffectVector<void *>::Add, COMDAT
; _this$ = ecx

; 350  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 351  :         if (FAILED(Grow()))

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow@?$CEffectVector@PAX@@IAEJXZ	; CEffectVector<void *>::Grow
	test	eax, eax
	jge	SHORT $LN1@Add

; 352  :             return m_hLastError;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	jmp	SHORT $LN2@Add
$LN1@Add:

; 353  : 
; 354  :         memcpy((T*)m_pData + m_CurSize, &var, sizeof(T));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR _var$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*4], edx

; 355  :         m_CurSize++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 356  : 
; 357  :         return S_OK;

	xor	eax, eax
$LN2@Add:

; 358  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CEffectVector@PAX@@QAEJABQAX@Z ENDP		; CEffectVector<void *>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?Empty@?$CEffectVector@PAX@@QAEXXZ
_TEXT	SEGMENT
_i$ = -20						; size = 4
_this$ = -8						; size = 4
?Empty@?$CEffectVector@PAX@@QAEXXZ PROC			; CEffectVector<void *>::Empty, COMDAT
; _this$ = ecx

; 307  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 308  :         UINT i;
; 309  :         
; 310  :         // manually invoke destructor on all elements
; 311  :         for (i = 0; i < m_CurSize; ++ i)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@Empty
$LN2@Empty:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@Empty:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jae	SHORT $LN1@Empty

; 312  :         {   
; 313  :             ((T*)m_pData + i)->~T();
; 314  :         }

	jmp	SHORT $LN2@Empty
$LN1@Empty:

; 315  :         m_CurSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 316  :         m_hLastError = S_OK;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 317  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@?$CEffectVector@PAX@@QAEXXZ ENDP			; CEffectVector<void *>::Empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?Clear@?$CEffectVector@PAX@@QAEXXZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
?Clear@?$CEffectVector@PAX@@QAEXXZ PROC			; CEffectVector<void *>::Clear, COMDAT
; _this$ = ecx

; 285  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 286  :         Empty();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Empty@?$CEffectVector@PAX@@QAEXXZ	; CEffectVector<void *>::Empty

; 287  :         SAFE_DELETE_ARRAY(m_pData);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 288  :         m_MaxSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 289  : #if _DEBUG
; 290  :         m_pCastData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 291  : #endif // _DEBUG
; 292  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CEffectVector@PAX@@QAEXXZ ENDP			; CEffectVector<void *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ??1?$CEffectVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$CEffectVector@PAX@@QAE@XZ PROC			; CEffectVector<void *>::~CEffectVector<void *>, COMDAT
; _this$ = ecx

; 244  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 245  :         Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CEffectVector@PAX@@QAEXXZ	; CEffectVector<void *>::Clear

; 246  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CEffectVector@PAX@@QAE@XZ ENDP			; CEffectVector<void *>::~CEffectVector<void *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ??0?$CEffectVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$CEffectVector@PAX@@QAE@XZ PROC			; CEffectVector<void *>::CEffectVector<void *>, COMDAT
; _this$ = ecx

; 233  :     CEffectVector<T>()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 234  :     {
; 235  :         m_hLastError = S_OK;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 236  : #if _DEBUG
; 237  :         m_pCastData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 238  : #endif // _DEBUG
; 239  :         m_pData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 240  :         m_CurSize = m_MaxSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 241  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CEffectVector@PAX@@QAE@XZ ENDP			; CEffectVector<void *>::CEffectVector<void *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?Reserve@?$CEffectVector@PAX@@IAEJI@Z
_TEXT	SEGMENT
tv71 = -256						; size = 4
$T1 = -248						; size = 4
$T2 = -236						; size = 4
_newSize$3 = -32					; size = 4
_pNewData$4 = -20					; size = 4
_this$ = -8						; size = 4
_DesiredSize$ = 8					; size = 4
?Reserve@?$CEffectVector@PAX@@IAEJI@Z PROC		; CEffectVector<void *>::Reserve, COMDAT
; _this$ = ecx

; 193  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 194  :         if (DesiredSize > m_MaxSize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _DesiredSize$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	$LN6@Reserve

; 195  :         {
; 196  :             BYTE *pNewData;
; 197  :             UINT newSize = max(m_MaxSize * 2, DesiredSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 1
	cmp	ecx, DWORD PTR _DesiredSize$[ebp]
	jbe	SHORT $LN9@Reserve
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	shl	eax, 1
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN10@Reserve
$LN9@Reserve:
	mov	ecx, DWORD PTR _DesiredSize$[ebp]
	mov	DWORD PTR tv71[ebp], ecx
$LN10@Reserve:
	mov	edx, DWORD PTR tv71[ebp]
	mov	DWORD PTR _newSize$3[ebp], edx

; 198  : 
; 199  :             if (newSize < 16)

	cmp	DWORD PTR _newSize$3[ebp], 16		; 00000010H
	jae	SHORT $LN5@Reserve

; 200  :                 newSize = 16;

	mov	DWORD PTR _newSize$3[ebp], 16		; 00000010H
$LN5@Reserve:

; 201  : 
; 202  :             if ((newSize < m_MaxSize) || (newSize < m_CurSize) || (newSize >= UINT_MAX / sizeof(T)))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newSize$3[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jb	SHORT $LN3@Reserve
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newSize$3[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jb	SHORT $LN3@Reserve
	cmp	DWORD PTR _newSize$3[ebp], 1073741823	; 3fffffffH
	jb	SHORT $LN4@Reserve
$LN3@Reserve:

; 203  :             {
; 204  :                 m_hLastError = E_OUTOFMEMORY;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], -2147024882		; 8007000eH

; 205  :                 return m_hLastError;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	jmp	$LN7@Reserve
$LN4@Reserve:

; 206  :             }
; 207  : 
; 208  :             pNewData = NEW BYTE[newSize * sizeof(T)];

	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	mov	eax, DWORD PTR _newSize$3[ebp]
	shl	eax, 2
	push	eax
	call	??_U@YAPAXIABUnothrow_t@std@@@Z		; operator new[]
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR _pNewData$4[ebp], ecx

; 209  :             if (pNewData == NULL)

	cmp	DWORD PTR _pNewData$4[ebp], 0
	jne	SHORT $LN2@Reserve

; 210  :             {
; 211  :                 m_hLastError = E_OUTOFMEMORY;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], -2147024882		; 8007000eH

; 212  :                 return m_hLastError;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	jmp	SHORT $LN7@Reserve
$LN2@Reserve:

; 213  :             }
; 214  : 
; 215  :             if (m_pData)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@Reserve

; 216  :             {
; 217  :                 memcpy(pNewData, m_pData, m_CurSize * sizeof(T));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _pNewData$4[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 218  :                 delete []m_pData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN1@Reserve:

; 219  :             }
; 220  : 
; 221  :             m_pData = pNewData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pNewData$4[ebp]
	mov	DWORD PTR [eax+4], ecx

; 222  :             m_MaxSize = newSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newSize$3[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN6@Reserve:

; 223  :         }
; 224  : #if _DEBUG
; 225  :         m_pCastData = (T*) m_pData;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 226  : #endif // _DEBUG
; 227  :         return S_OK;

	xor	eax, eax
$LN7@Reserve:

; 228  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Reserve@?$CEffectVector@PAX@@IAEJI@Z ENDP		; CEffectVector<void *>::Reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?Grow@?$CEffectVector@PAX@@IAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Grow@?$CEffectVector@PAX@@IAEJXZ PROC			; CEffectVector<void *>::Grow, COMDAT
; _this$ = ecx

; 188  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 189  :         return Reserve(m_CurSize + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reserve@?$CEffectVector@PAX@@IAEJI@Z	; CEffectVector<void *>::Reserve

; 190  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Grow@?$CEffectVector@PAX@@IAEJXZ ENDP			; CEffectVector<void *>::Grow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?LoadEffect@CEffect@D3DX11Effects@@QAEJPBXI@Z
_TEXT	SEGMENT
$T2 = -432						; size = 4
_loader$ = -228						; size = 188
_hr$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pEffectBuffer$ = 8					; size = 4
_cbEffectBuffer$ = 12					; size = 4
?LoadEffect@CEffect@D3DX11Effects@@QAEJPBXI@Z PROC	; D3DX11Effects::CEffect::LoadEffect, COMDAT
; _this$ = ecx

; 354  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?LoadEffect@CEffect@D3DX11Effects@@QAEJPBXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 424				; 000001a8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-436]
	mov	ecx, 106				; 0000006aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 355  :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0

; 356  :     CEffectLoader loader;

	lea	ecx, DWORD PTR _loader$[ebp]
	call	??0CEffectLoader@D3DX11Effects@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 357  : 
; 358  :     if (!pEffectBuffer)

	cmp	DWORD PTR _pEffectBuffer$[ebp], 0
	jne	SHORT $LN6@LoadEffect

; 359  :     {
; 360  :         DPF(0, "%s: pEffectBuffer is NULL.", g_szEffectLoadArea);
; 361  :         VH( E_INVALIDARG );

	mov	DWORD PTR _hr$[ebp], -2147024809	; 80070057H
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN6@LoadEffect
	jmp	SHORT $lExit$14
$LN6@LoadEffect:

; 362  :     }
; 363  :     
; 364  :     VH( loader.LoadEffect(this, pEffectBuffer, cbEffectBuffer) );

	mov	eax, DWORD PTR _cbEffectBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pEffectBuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	lea	ecx, DWORD PTR _loader$[ebp]
	call	?LoadEffect@CEffectLoader@D3DX11Effects@@QAEJPAVCEffect@2@PBXI@Z ; D3DX11Effects::CEffectLoader::LoadEffect
	mov	DWORD PTR _hr$[ebp], eax
$lExit$14:

; 365  : 
; 366  : lExit:
; 367  :     if( FAILED( hr ) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@LoadEffect

; 368  :     {
; 369  :         // Release here because m_pShaderBlocks may still be in loader.m_BulkHeap if loading failed before we reallocated the memory
; 370  :         ReleaseShaderRefection();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReleaseShaderRefection@CEffect@D3DX11Effects@@QAEXXZ ; D3DX11Effects::CEffect::ReleaseShaderRefection
$LN1@LoadEffect:

; 371  :     }
; 372  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _loader$[ebp]
	call	??1CEffectLoader@D3DX11Effects@@QAE@XZ
	mov	eax, DWORD PTR $T2[ebp]

; 373  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@LoadEffect
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 436				; 000001b4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN13@LoadEffect:
	DD	1
	DD	$LN12@LoadEffect
$LN12@LoadEffect:
	DD	-228					; ffffff1cH
	DD	188					; 000000bcH
	DD	$LN10@LoadEffect
$LN10@LoadEffect:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?LoadEffect@CEffect@D3DX11Effects@@QAEJPBXI@Z$2:
	lea	ecx, DWORD PTR _loader$[ebp]
	jmp	??1CEffectLoader@D3DX11Effects@@QAE@XZ
__ehhandler$?LoadEffect@CEffect@D3DX11Effects@@QAEJPBXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-440]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?LoadEffect@CEffect@D3DX11Effects@@QAEJPBXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?LoadEffect@CEffect@D3DX11Effects@@QAEJPBXI@Z ENDP	; D3DX11Effects::CEffect::LoadEffect
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z
_TEXT	SEGMENT
tv69 = -216						; size = 4
tv67 = -212						; size = 4
tv90 = -208						; size = 4
tv85 = -202						; size = 1
tv78 = -201						; size = 1
tv72 = -200						; size = 4
tv74 = -196						; size = 4
_pStr1$ = 8						; size = 4
_pStr2$ = 12						; size = 4
?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z PROC ; D3DX11Effects::CEffect::AreStringsEqual, COMDAT

; 1113 :     static BOOL AreStringsEqual(__in const LPCSTR &pStr1, __in const LPCSTR &pStr2) { return strcmp(pStr1, pStr2) == 0; }

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _pStr2$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv74[ebp], ecx
	mov	edx, DWORD PTR _pStr1$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv72[ebp], eax
$LL5@AreStrings:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv78[ebp], dl
	mov	eax, DWORD PTR tv74[ebp]
	cmp	dl, BYTE PTR [eax]
	jne	SHORT $LN6@AreStrings
	cmp	BYTE PTR tv78[ebp], 0
	je	SHORT $LN7@AreStrings
	mov	ecx, DWORD PTR tv72[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv85[ebp], dl
	mov	eax, DWORD PTR tv74[ebp]
	cmp	dl, BYTE PTR [eax+1]
	jne	SHORT $LN6@AreStrings
	add	DWORD PTR tv72[ebp], 2
	add	DWORD PTR tv74[ebp], 2
	cmp	BYTE PTR tv85[ebp], 0
	jne	SHORT $LL5@AreStrings
$LN7@AreStrings:
	mov	DWORD PTR tv90[ebp], 0
	jmp	SHORT $LN8@AreStrings
$LN6@AreStrings:
	sbb	ecx, ecx
	or	ecx, 1
	mov	DWORD PTR tv90[ebp], ecx
$LN8@AreStrings:
	mov	edx, DWORD PTR tv90[ebp]
	mov	DWORD PTR tv67[ebp], edx
	cmp	DWORD PTR tv67[ebp], 0
	jne	SHORT $LN3@AreStrings
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@AreStrings
$LN3@AreStrings:
	mov	DWORD PTR tv69[ebp], 0
$LN4@AreStrings:
	mov	eax, DWORD PTR tv69[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?AreStringsEqual@CEffect@D3DX11Effects@@KAHABQBD0@Z ENDP ; D3DX11Effects::CEffect::AreStringsEqual
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ?AreTypesEqual@CEffect@D3DX11Effects@@KAHABQAUSType@2@0@Z
_TEXT	SEGMENT
_pType1$ = 8						; size = 4
_pType2$ = 12						; size = 4
?AreTypesEqual@CEffect@D3DX11Effects@@KAHABQAUSType@2@0@Z PROC ; D3DX11Effects::CEffect::AreTypesEqual, COMDAT

; 1112 :     static BOOL AreTypesEqual(const LPSRUNTIMETYPE &pType1, const LPSRUNTIMETYPE &pType2) { return (pType1->IsEqual(pType2)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _pType2$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _pType1$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?IsEqual@SType@D3DX11Effects@@QBEHPAU12@@Z ; D3DX11Effects::SType::IsEqual
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AreTypesEqual@CEffect@D3DX11Effects@@KAHABQAUSType@2@0@Z ENDP ; D3DX11Effects::CEffect::AreTypesEqual
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?GetSize@?$CEffectVector@PAUSMember@D3DX11Effects@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetSize@?$CEffectVector@PAUSMember@D3DX11Effects@@@@QBEIXZ PROC ; CEffectVector<D3DX11Effects::SMember *>::GetSize, COMDAT
; _this$ = ecx

; 436  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 437  :         return m_CurSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]

; 438  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@?$CEffectVector@PAUSMember@D3DX11Effects@@@@QBEIXZ ENDP ; CEffectVector<D3DX11Effects::SMember *>::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ??A?$CEffectVector@PAUSMember@D3DX11Effects@@@@QAEAAPAUSMember@D3DX11Effects@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_index$ = 8						; size = 4
??A?$CEffectVector@PAUSMember@D3DX11Effects@@@@QAEAAPAUSMember@D3DX11Effects@@I@Z PROC ; CEffectVector<D3DX11Effects::SMember *>::operator[], COMDAT
; _this$ = ecx

; 412  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN4@operator:

; 413  :         D3DXASSERT(index < m_CurSize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jb	SHORT $LN3@operator
	push	OFFSET ??_C@_0BC@HKPIIPPC@index?5?$DM?5m_CurSize?$AA@
	push	413					; 0000019dH
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator

; 414  :         return ((T*)m_pData)[index];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 415  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CEffectVector@PAUSMember@D3DX11Effects@@@@QAEAAPAUSMember@D3DX11Effects@@I@Z ENDP ; CEffectVector<D3DX11Effects::SMember *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0CEffectReflection@D3DX11Effects@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CEffectReflection@D3DX11Effects@@QAE@XZ PROC		; D3DX11Effects::CEffectReflection::CEffectReflection, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CEffectHeap@D3DX11Effects@@QAE@XZ	; D3DX11Effects::CEffectHeap::CEffectHeap
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CEffectReflection@D3DX11Effects@@QAE@XZ ENDP		; D3DX11Effects::CEffectReflection::CEffectReflection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ??1CEffectHeap@D3DX11Effects@@QAE@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
??1CEffectHeap@D3DX11Effects@@QAE@XZ PROC		; D3DX11Effects::CEffectHeap::~CEffectHeap, COMDAT
; _this$ = ecx

; 190  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 191  :     SAFE_DELETE_ARRAY(m_pData);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 192  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CEffectHeap@D3DX11Effects@@QAE@XZ ENDP		; D3DX11Effects::CEffectHeap::~CEffectHeap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ??0CEffectHeap@D3DX11Effects@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CEffectHeap@D3DX11Effects@@QAE@XZ PROC		; D3DX11Effects::CEffectHeap::CEffectHeap, COMDAT
; _this$ = ecx

; 184  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 185  :     m_pData = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 186  :     m_dwSize = m_dwBufferSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 187  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0CEffectHeap@D3DX11Effects@@QAE@XZ ENDP		; D3DX11Effects::CEffectHeap::CEffectHeap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ?IsInHeap@CEffectHeap@D3DX11Effects@@QBEHPAX@Z
_TEXT	SEGMENT
tv70 = -208						; size = 4
_this$ = -8						; size = 4
_pData$ = 8						; size = 4
?IsInHeap@CEffectHeap@D3DX11Effects@@QBEHPAX@Z PROC	; D3DX11Effects::CEffectHeap::IsInHeap, COMDAT
; _this$ = ecx

; 1004 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1005 :         return (pData >= m_pData && pData < (m_pData + m_dwBufferSize));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pData$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jb	SHORT $LN3@IsInHeap
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+4]
	cmp	DWORD PTR _pData$[ebp], eax
	jae	SHORT $LN3@IsInHeap
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@IsInHeap
$LN3@IsInHeap:
	mov	DWORD PTR tv70[ebp], 0
$LN4@IsInHeap:
	mov	eax, DWORD PTR tv70[ebp]

; 1006 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsInHeap@CEffectHeap@D3DX11Effects@@QBEHPAX@Z ENDP	; D3DX11Effects::CEffectHeap::IsInHeap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?MoveEmptyDataBlock@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z
_TEXT	SEGMENT
_pNewPointer$ = -32					; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_ppData$ = 8						; size = 4
_size$ = 12						; size = 4
?MoveEmptyDataBlock@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z PROC ; D3DX11Effects::CEffectHeap::MoveEmptyDataBlock, COMDAT
; _this$ = ecx

; 284  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 285  :     HRESULT hr;
; 286  :     void *pNewPointer;
; 287  : 
; 288  :     hr = AddDataInternal<false>(*ppData, size, &pNewPointer);

	lea	eax, DWORD PTR _pNewPointer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ppData$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$AddDataInternal@$0A@@CEffectHeap@D3DX11Effects@@IAEJPBXIPAPAX@Z ; D3DX11Effects::CEffectHeap::AddDataInternal<0>
	mov	DWORD PTR _hr$[ebp], eax

; 289  : 
; 290  :     *ppData = pNewPointer;

	mov	eax, DWORD PTR _ppData$[ebp]
	mov	ecx, DWORD PTR _pNewPointer$[ebp]
	mov	DWORD PTR [eax], ecx

; 291  :     if (size == 0)

	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN1@MoveEmptyD

; 292  :     {
; 293  :         // To help catch bugs, set zero-byte blocks to null. There's no real reason to do this
; 294  :         *ppData = NULL;

	mov	eax, DWORD PTR _ppData$[ebp]
	mov	DWORD PTR [eax], 0
$LN1@MoveEmptyD:

; 295  :     }
; 296  : 
; 297  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 298  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@MoveEmptyD
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN6@MoveEmptyD:
	DD	1
	DD	$LN5@MoveEmptyD
$LN5@MoveEmptyD:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN4@MoveEmptyD
$LN4@MoveEmptyD:
	DB	112					; 00000070H
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?MoveEmptyDataBlock@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ENDP ; D3DX11Effects::CEffectHeap::MoveEmptyDataBlock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?MoveInterfaceParameters@CEffectHeap@D3DX11Effects@@QAEJIPAPAUSInterfaceParameter@SShaderBlock@2@@Z
_TEXT	SEGMENT
_i$1 = -44						; size = 4
_pNewPointer$ = -32					; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_InterfaceCount$ = 8					; size = 4
_ppInterfaces$ = 12					; size = 4
?MoveInterfaceParameters@CEffectHeap@D3DX11Effects@@QAEJIPAPAUSInterfaceParameter@SShaderBlock@2@@Z PROC ; D3DX11Effects::CEffectHeap::MoveInterfaceParameters, COMDAT
; _this$ = ecx

; 305  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 306  :     HRESULT hr;
; 307  :     SShaderBlock::SInterfaceParameter *pNewPointer;
; 308  : 
; 309  :     if (*ppInterfaces == NULL)

	mov	eax, DWORD PTR _ppInterfaces$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN10@MoveInterf

; 310  :         return S_OK;

	xor	eax, eax
	jmp	$LN11@MoveInterf
$LN10@MoveInterf:

; 311  : 
; 312  :     VBD( InterfaceCount <= D3D11_SHADER_MAX_INTERFACES, "Internal loading error: InterfaceCount > D3D11_SHADER_MAX_INTERFACES." );

	cmp	DWORD PTR _InterfaceCount$[ebp], 253	; 000000fdH
	jbe	SHORT $LN9@MoveInterf
	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	SHORT $lExit$16
	jmp	SHORT $lExit$16
$LN9@MoveInterf:

; 313  :     VH( AddData(*ppInterfaces, InterfaceCount * sizeof(SShaderBlock::SInterfaceParameter), (void**)&pNewPointer) );

	lea	eax, DWORD PTR _pNewPointer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _InterfaceCount$[ebp]
	shl	ecx, 3
	push	ecx
	mov	edx, DWORD PTR _ppInterfaces$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddData@CEffectHeap@D3DX11Effects@@QAEJPBXIPAPAX@Z ; D3DX11Effects::CEffectHeap::AddData
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN7@MoveInterf
	jmp	SHORT $lExit$16
	jmp	SHORT $lExit$16
$LN7@MoveInterf:

; 314  : 
; 315  :     for( UINT i=0; i < InterfaceCount; i++ )

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN5@MoveInterf
$LN4@MoveInterf:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN5@MoveInterf:
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR _InterfaceCount$[ebp]
	jae	SHORT $LN3@MoveInterf

; 316  :     {
; 317  :         VH( MoveString( &pNewPointer[i].pName ) );

	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _pNewPointer$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveString@CEffectHeap@D3DX11Effects@@QAEJPAPAD@Z ; D3DX11Effects::CEffectHeap::MoveString
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@MoveInterf
	jmp	SHORT $lExit$16
	jmp	SHORT $lExit$16
$LN2@MoveInterf:

; 318  :     }

	jmp	SHORT $LN4@MoveInterf
$LN3@MoveInterf:

; 319  : 
; 320  :     *ppInterfaces = pNewPointer;

	mov	eax, DWORD PTR _ppInterfaces$[ebp]
	mov	ecx, DWORD PTR _pNewPointer$[ebp]
	mov	DWORD PTR [eax], ecx
$lExit$16:

; 321  : 
; 322  : lExit:
; 323  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]
$LN11@MoveInterf:

; 324  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@MoveInterf
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN15@MoveInterf:
	DD	1
	DD	$LN14@MoveInterf
$LN14@MoveInterf:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN13@MoveInterf
$LN13@MoveInterf:
	DB	112					; 00000070H
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?MoveInterfaceParameters@CEffectHeap@D3DX11Effects@@QAEJIPAPAUSInterfaceParameter@SShaderBlock@2@@Z ENDP ; D3DX11Effects::CEffectHeap::MoveInterfaceParameters
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?MoveString@CEffectHeap@D3DX11Effects@@QAEJPAPAD@Z
_TEXT	SEGMENT
_pNewPointer$ = -32					; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_ppString$ = 8						; size = 4
?MoveString@CEffectHeap@D3DX11Effects@@QAEJPAPAD@Z PROC	; D3DX11Effects::CEffectHeap::MoveString, COMDAT
; _this$ = ecx

; 267  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 268  :     HRESULT hr;
; 269  :     char *pNewPointer;
; 270  : 
; 271  :     if (*ppString == NULL)

	mov	eax, DWORD PTR _ppString$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@MoveString

; 272  :         return S_OK;

	xor	eax, eax
	jmp	SHORT $LN2@MoveString
$LN1@MoveString:

; 273  : 
; 274  :     hr = AddString(*ppString, &pNewPointer);

	lea	eax, DWORD PTR _pNewPointer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ppString$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddString@CEffectHeap@D3DX11Effects@@QAEJPBDPAPAD@Z ; D3DX11Effects::CEffectHeap::AddString
	mov	DWORD PTR _hr$[ebp], eax

; 275  :     *ppString = pNewPointer;

	mov	eax, DWORD PTR _ppString$[ebp]
	mov	ecx, DWORD PTR _pNewPointer$[ebp]
	mov	DWORD PTR [eax], ecx

; 276  : 
; 277  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]
$LN2@MoveString:

; 278  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@MoveString
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN6@MoveString:
	DD	1
	DD	$LN5@MoveString
$LN5@MoveString:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN4@MoveString
$LN4@MoveString:
	DB	112					; 00000070H
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?MoveString@CEffectHeap@D3DX11Effects@@QAEJPAPAD@Z ENDP	; D3DX11Effects::CEffectHeap::MoveString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z
_TEXT	SEGMENT
_pNewPointer$ = -32					; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_ppData$ = 8						; size = 4
_size$ = 12						; size = 4
?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z PROC	; D3DX11Effects::CEffectHeap::MoveData, COMDAT
; _this$ = ecx

; 332  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 333  :     HRESULT hr;
; 334  :     void *pNewPointer;
; 335  : 
; 336  :     hr = AddData(*ppData, size, &pNewPointer);

	lea	eax, DWORD PTR _pNewPointer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ppData$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddData@CEffectHeap@D3DX11Effects@@QAEJPBXIPAPAX@Z ; D3DX11Effects::CEffectHeap::AddData
	mov	DWORD PTR _hr$[ebp], eax

; 337  :     
; 338  :     *ppData = pNewPointer;

	mov	eax, DWORD PTR _ppData$[ebp]
	mov	ecx, DWORD PTR _pNewPointer$[ebp]
	mov	DWORD PTR [eax], ecx

; 339  :     if (size == 0)

	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN1@MoveData

; 340  :     {
; 341  :         // To help catch bugs, set zero-byte blocks to null. There's no real reason to do this
; 342  :         *ppData = NULL;

	mov	eax, DWORD PTR _ppData$[ebp]
	mov	DWORD PTR [eax], 0
$LN1@MoveData:

; 343  :     }
; 344  : 
; 345  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 346  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@MoveData
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN6@MoveData:
	DD	1
	DD	$LN5@MoveData
$LN5@MoveData:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN4@MoveData
$LN4@MoveData:
	DB	112					; 00000070H
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?MoveData@CEffectHeap@D3DX11Effects@@QAEJPAPAXI@Z ENDP	; D3DX11Effects::CEffectHeap::MoveData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?AddData@CEffectHeap@D3DX11Effects@@QAEJPBXIPAPAX@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pData$ = 8						; size = 4
_dwSize$ = 12						; size = 4
_ppPointer$ = 16					; size = 4
?AddData@CEffectHeap@D3DX11Effects@@QAEJPBXIPAPAX@Z PROC ; D3DX11Effects::CEffectHeap::AddData, COMDAT
; _this$ = ecx

; 258  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 259  :     return AddDataInternal<true>( pData, dwSize, ppPointer );

	mov	eax, DWORD PTR _ppPointer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pData$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$AddDataInternal@$00@CEffectHeap@D3DX11Effects@@IAEJPBXIPAPAX@Z ; D3DX11Effects::CEffectHeap::AddDataInternal<1>

; 260  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?AddData@CEffectHeap@D3DX11Effects@@QAEJPBXIPAPAX@Z ENDP ; D3DX11Effects::CEffectHeap::AddData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?AddString@CEffectHeap@D3DX11Effects@@QAEJPBDPAPAD@Z
_TEXT	SEGMENT
tv66 = -232						; size = 4
tv86 = -225						; size = 1
tv83 = -224						; size = 4
tv80 = -220						; size = 4
_size$ = -20						; size = 4
_this$ = -8						; size = 4
_pString$ = 8						; size = 4
_ppPointer$ = 12					; size = 4
?AddString@CEffectHeap@D3DX11Effects@@QAEJPBDPAPAD@Z PROC ; D3DX11Effects::CEffectHeap::AddString, COMDAT
; _this$ = ecx

; 218  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 219  :     size_t size = strlen(pString) + 1;

	mov	eax, DWORD PTR _pString$[ebp]
	mov	DWORD PTR tv80[ebp], eax
	mov	ecx, DWORD PTR tv80[ebp]
	add	ecx, 1
	mov	DWORD PTR tv83[ebp], ecx
$LL7@AddString:
	mov	edx, DWORD PTR tv80[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv86[ebp], al
	add	DWORD PTR tv80[ebp], 1
	cmp	BYTE PTR tv86[ebp], 0
	jne	SHORT $LL7@AddString
	mov	ecx, DWORD PTR tv80[ebp]
	sub	ecx, DWORD PTR tv83[ebp]
	mov	DWORD PTR tv66[ebp], ecx
	mov	edx, DWORD PTR tv66[ebp]
	add	edx, 1
	mov	DWORD PTR _size$[ebp], edx
$LN4@AddString:

; 220  :     D3DXASSERT( size <= 0xffffffff );

	cmp	DWORD PTR _size$[ebp], -1
	jbe	SHORT $LN3@AddString
	push	OFFSET ??_C@_0BD@BAKFCGNM@size?5?$DM?$DN?50xffffffff?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??AddString@CEffectHeap@D3DX11Effects@@QAEJPBDPAPAD@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@AddString:
	xor	eax, eax
	jne	SHORT $LN4@AddString

; 221  :     return AddData(pString, (UINT)size, (void**) ppPointer);

	mov	eax, DWORD PTR _ppPointer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pString$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddData@CEffectHeap@D3DX11Effects@@QAEJPBXIPAPAX@Z ; D3DX11Effects::CEffectHeap::AddData

; 222  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?AddString@CEffectHeap@D3DX11Effects@@QAEJPBDPAPAD@Z ENDP ; D3DX11Effects::CEffectHeap::AddString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?GetSize@CEffectHeap@D3DX11Effects@@QAEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetSize@CEffectHeap@D3DX11Effects@@QAEIXZ PROC		; D3DX11Effects::CEffectHeap::GetSize, COMDAT
; _this$ = ecx

; 195  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 196  :     return m_dwSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]

; 197  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@CEffectHeap@D3DX11Effects@@QAEIXZ ENDP		; D3DX11Effects::CEffectHeap::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectload.cpp
;	COMDAT ?ReserveMemory@CEffectHeap@D3DX11Effects@@QAEJI@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_dwSize$ = 8						; size = 4
?ReserveMemory@CEffectHeap@D3DX11Effects@@QAEJI@Z PROC	; D3DX11Effects::CEffectHeap::ReserveMemory, COMDAT
; _this$ = ecx

; 200  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 201  :     HRESULT hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0
$LN14@ReserveMem:

; 202  : 
; 203  :     D3DXASSERT(!m_pData);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN13@ReserveMem
	push	OFFSET ??_C@_08BINKKIMB@?$CBm_pData?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1??ReserveMemory@CEffectHeap@D3DX11Effects@@QAEJI@Z@4JA
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN13@ReserveMem:
	xor	eax, eax
	jne	SHORT $LN14@ReserveMem
$LN10@ReserveMem:

; 204  :     D3DXASSERT(dwSize == AlignToPowerOf2(dwSize, c_DataAlignment));

	push	4
	mov	eax, DWORD PTR _dwSize$[ebp]
	push	eax
	call	?AlignToPowerOf2@@YAIII@Z		; AlignToPowerOf2
	add	esp, 8
	cmp	DWORD PTR _dwSize$[ebp], eax
	je	SHORT $LN9@ReserveMem
	push	OFFSET ??_C@_0DD@BFMHPEDF@dwSize?5?$DN?$DN?5AlignToPowerOf2?$CIdwSize@
	mov	eax, DWORD PTR ?__LINE__Var@?1??ReserveMemory@CEffectHeap@D3DX11Effects@@QAEJI@Z@4JA
	add	eax, 4
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN9@ReserveMem:
	xor	eax, eax
	jne	SHORT $LN10@ReserveMem

; 205  : 
; 206  :     m_dwBufferSize = dwSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwSize$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 207  : 
; 208  :     VN( m_pData = NEW BYTE[m_dwBufferSize] );

	push	OFFSET ?nothrow@std@@3Unothrow_t@1@B	; std::nothrow
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	??_U@YAPAXIABUnothrow_t@std@@@Z		; operator new[]
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR [edx], eax
	cmp	DWORD PTR $T1[ebp], 0
	jne	SHORT $LN4@ReserveMem
	mov	DWORD PTR _hr$[ebp], -2147024882	; 8007000eH
	jmp	SHORT $lExit$17
	jmp	SHORT $lExit$17
$LN4@ReserveMem:

; 209  :     
; 210  :     // make sure that we have machine word alignment
; 211  :     D3DXASSERT(m_pData == AlignToPowerOf2(m_pData, c_DataAlignment));

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?AlignToPowerOf2@@YAPAXPAXI@Z		; AlignToPowerOf2
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], eax
	je	SHORT $LN3@ReserveMem
	push	OFFSET ??_C@_0DF@IDKFFGGG@m_pData?5?$DN?$DN?5AlignToPowerOf2?$CIm_pDa@
	mov	eax, DWORD PTR ?__LINE__Var@?1??ReserveMemory@CEffectHeap@D3DX11Effects@@QAEJI@Z@4JA
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_0EG@DJKMDCGA@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@ReserveMem:
	xor	eax, eax
	jne	SHORT $LN4@ReserveMem
$lExit$17:

; 212  : 
; 213  : lExit:
; 214  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 215  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ReserveMemory@CEffectHeap@D3DX11Effects@@QAEJI@Z ENDP	; D3DX11Effects::CEffectHeap::ReserveMemory
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ??0SAssignment@D3DX11Effects@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0SAssignment@D3DX11Effects@@QAE@XZ PROC		; D3DX11Effects::SAssignment::SAssignment, COMDAT
; _this$ = ecx

; 927  :     SAssignment()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 928  :     {
; 929  :         LhsType = ELHS_Invalid;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 930  :         AssignmentType = ERAT_Invalid;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 931  : 
; 932  :         Destination.pGeneric = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 933  :         Source.pGeneric = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0

; 934  : 
; 935  :         LastRecomputedTime = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 936  :         DependencyCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 937  :         pDependencies = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 938  : 
; 939  :         DataSize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	and	ecx, -65536				; ffff0000H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx

; 940  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0SAssignment@D3DX11Effects@@QAE@XZ ENDP		; D3DX11Effects::SAssignment::SAssignment
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ?IsObjectAssignment@SAssignment@D3DX11Effects@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsObjectAssignment@SAssignment@D3DX11Effects@@QAEHXZ PROC ; D3DX11Effects::SAssignment::IsObjectAssignment, COMDAT
; _this$ = ecx

; 923  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 924  :         return IsObjectAssignmentHelper(LhsType);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?IsObjectAssignmentHelper@D3DX11Effects@@YAHW4ELhsType@1@@Z ; D3DX11Effects::IsObjectAssignmentHelper
	add	esp, 4

; 925  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsObjectAssignment@SAssignment@D3DX11Effects@@QAEHXZ ENDP ; D3DX11Effects::SAssignment::IsObjectAssignment
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ??0SDependency@SAssignment@D3DX11Effects@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0SDependency@SAssignment@D3DX11Effects@@QAE@XZ PROC	; D3DX11Effects::SAssignment::SDependency::SDependency, COMDAT
; _this$ = ecx

; 896  :         SDependency()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 897  :         {
; 898  :             pVariable = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 899  :         }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0SDependency@SAssignment@D3DX11Effects@@QAE@XZ ENDP	; D3DX11Effects::SAssignment::SDependency::SDependency
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ??0SConstantBuffer@D3DX11Effects@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0SConstantBuffer@D3DX11Effects@@QAE@XZ PROC		; D3DX11Effects::SConstantBuffer::SConstantBuffer, COMDAT
; _this$ = ecx

; 791  :     SConstantBuffer()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0ID3DX11EffectType@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7SConstantBuffer@D3DX11Effects@@6B?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@1@@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], OFFSET ??_7SConstantBuffer@D3DX11Effects@@6BID3DX11EffectType@@@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0SShaderResource@D3DX11Effects@@QAE@XZ ; D3DX11Effects::SShaderResource::SShaderResource

; 792  :     {
; 793  :         pD3DObject = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 794  :         ZeroMemory(&TBuffer, sizeof(TBuffer));

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR [ecx], eax

; 795  :         ExplicitBindPoint = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], -1

; 796  :         pBackingStore = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 797  :         Size = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 798  :         pName = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0

; 799  :         VariableCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0

; 800  :         pVariables = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0

; 801  :         AnnotationCount = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0

; 802  :         pAnnotations = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0

; 803  :         IsDirty = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], ecx

; 804  :         IsTBuffer = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	and	ecx, -3					; fffffffdH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], ecx

; 805  :         IsUserManaged = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	and	ecx, -5					; fffffffbH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], ecx

; 806  :         IsEffectOptimized = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	and	ecx, -9					; fffffff7H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], ecx

; 807  :         IsUsedByExpression = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	and	ecx, -17				; ffffffefH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], ecx

; 808  :         IsUserPacked = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	and	ecx, -33				; ffffffdfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], ecx

; 809  :         IsSingle = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	and	ecx, -65				; ffffffbfH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], ecx

; 810  :         IsNonUpdatable = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	and	ecx, -129				; ffffff7fH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], ecx

; 811  :         pEffect = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0

; 812  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0SConstantBuffer@D3DX11Effects@@QAE@XZ ENDP		; D3DX11Effects::SConstantBuffer::SConstantBuffer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@QAE@XZ PROC ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::TUncastableVariable<ID3DX11EffectConstantBuffer>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ID3DX11EffectConstantBuffer@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@QAE@XZ ENDP ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::TUncastableVariable<ID3DX11EffectConstantBuffer>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectvariable.inl
;	COMDAT ?AsSampler@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectSamplerVariable@@XZ
_TEXT	SEGMENT
_pFuncName$ = -8					; size = 4
_this$ = 8						; size = 4
?AsSampler@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectSamplerVariable@@XZ PROC ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsSampler, COMDAT

; 4487 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4488 :     LPCSTR pFuncName = "ID3DX11EffectVariable::AsSampler";

	mov	DWORD PTR _pFuncName$[ebp], OFFSET ??_C@_0CB@NFKMEKAI@ID3DX11EffectVariable?3?3AsSampler@

; 4489 :     DPF(0, "%s: Invalid typecast", pFuncName);
; 4490 :     return &g_InvalidSamplerVariable;

	mov	eax, OFFSET ?g_InvalidSamplerVariable@D3DX11Effects@@3USEffectInvalidSamplerVariable@1@A ; D3DX11Effects::g_InvalidSamplerVariable

; 4491 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?AsSampler@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectSamplerVariable@@XZ ENDP ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsSampler
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectvariable.inl
;	COMDAT ?AsRasterizer@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectRasterizerVariable@@XZ
_TEXT	SEGMENT
_pFuncName$ = -8					; size = 4
_this$ = 8						; size = 4
?AsRasterizer@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectRasterizerVariable@@XZ PROC ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsRasterizer, COMDAT

; 4479 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4480 :     LPCSTR pFuncName = "ID3DX11EffectVariable::AsRasterizer";

	mov	DWORD PTR _pFuncName$[ebp], OFFSET ??_C@_0CE@DBMPNCNM@ID3DX11EffectVariable?3?3AsRasteri@

; 4481 :     DPF(0, "%s: Invalid typecast", pFuncName);
; 4482 :     return &g_InvalidRasterizerVariable;

	mov	eax, OFFSET ?g_InvalidRasterizerVariable@D3DX11Effects@@3USEffectInvalidRasterizerVariable@1@A ; D3DX11Effects::g_InvalidRasterizerVariable

; 4483 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?AsRasterizer@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectRasterizerVariable@@XZ ENDP ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsRasterizer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectvariable.inl
;	COMDAT ?AsDepthStencil@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectDepthStencilVariable@@XZ
_TEXT	SEGMENT
_pFuncName$ = -8					; size = 4
_this$ = 8						; size = 4
?AsDepthStencil@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectDepthStencilVariable@@XZ PROC ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsDepthStencil, COMDAT

; 4471 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4472 :     LPCSTR pFuncName = "ID3DX11EffectVariable::AsDepthStencil";

	mov	DWORD PTR _pFuncName$[ebp], OFFSET ??_C@_0CG@OKHHDBGN@ID3DX11EffectVariable?3?3AsDepthSt@

; 4473 :     DPF(0, "%s: Invalid typecast", pFuncName);
; 4474 :     return &g_InvalidDepthStencilVariable;

	mov	eax, OFFSET ?g_InvalidDepthStencilVariable@D3DX11Effects@@3USEffectInvalidDepthStencilVariable@1@A ; D3DX11Effects::g_InvalidDepthStencilVariable

; 4475 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?AsDepthStencil@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectDepthStencilVariable@@XZ ENDP ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsDepthStencil
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectvariable.inl
;	COMDAT ?AsBlend@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectBlendVariable@@XZ
_TEXT	SEGMENT
_pFuncName$ = -8					; size = 4
_this$ = 8						; size = 4
?AsBlend@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectBlendVariable@@XZ PROC ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsBlend, COMDAT

; 4463 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4464 :     LPCSTR pFuncName = "ID3DX11EffectVariable::AsBlend";

	mov	DWORD PTR _pFuncName$[ebp], OFFSET ??_C@_0BP@BBIMBLAD@ID3DX11EffectVariable?3?3AsBlend?$AA@

; 4465 :     DPF(0, "%s: Invalid typecast", pFuncName);
; 4466 :     return &g_InvalidBlendVariable;

	mov	eax, OFFSET ?g_InvalidBlendVariable@D3DX11Effects@@3USEffectInvalidBlendVariable@1@A ; D3DX11Effects::g_InvalidBlendVariable

; 4467 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?AsBlend@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectBlendVariable@@XZ ENDP ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsBlend
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectvariable.inl
;	COMDAT ?AsShader@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectShaderVariable@@XZ
_TEXT	SEGMENT
_pFuncName$ = -8					; size = 4
_this$ = 8						; size = 4
?AsShader@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectShaderVariable@@XZ PROC ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsShader, COMDAT

; 4455 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4456 :     LPCSTR pFuncName = "ID3DX11EffectVariable::AsShader";

	mov	DWORD PTR _pFuncName$[ebp], OFFSET ??_C@_0CA@EFNGDPCK@ID3DX11EffectVariable?3?3AsShader?$AA@

; 4457 :     DPF(0, "%s: Invalid typecast", pFuncName);
; 4458 :     return &g_InvalidShaderVariable;

	mov	eax, OFFSET ?g_InvalidShaderVariable@D3DX11Effects@@3USEffectInvalidShaderVariable@1@A ; D3DX11Effects::g_InvalidShaderVariable

; 4459 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?AsShader@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectShaderVariable@@XZ ENDP ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsShader
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectvariable.inl
;	COMDAT ?AsConstantBuffer@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectConstantBuffer@@XZ
_TEXT	SEGMENT
_pFuncName$ = -8					; size = 4
_this$ = 8						; size = 4
?AsConstantBuffer@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectConstantBuffer@@XZ PROC ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsConstantBuffer, COMDAT

; 4447 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4448 :     LPCSTR pFuncName = "ID3DX11EffectVariable::AsConstantBuffer";

	mov	DWORD PTR _pFuncName$[ebp], OFFSET ??_C@_0CI@NALNEDPE@ID3DX11EffectVariable?3?3AsConstan@

; 4449 :     DPF(0, "%s: Invalid typecast", pFuncName);
; 4450 :     return &g_InvalidConstantBuffer;

	mov	eax, OFFSET ?g_InvalidConstantBuffer@D3DX11Effects@@3USEffectInvalidConstantBuffer@1@A ; D3DX11Effects::g_InvalidConstantBuffer

; 4451 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?AsConstantBuffer@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectConstantBuffer@@XZ ENDP ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsConstantBuffer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectvariable.inl
;	COMDAT ?AsDepthStencilView@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectDepthStencilViewVariable@@XZ
_TEXT	SEGMENT
_pFuncName$ = -8					; size = 4
_this$ = 8						; size = 4
?AsDepthStencilView@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectDepthStencilViewVariable@@XZ PROC ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsDepthStencilView, COMDAT

; 4439 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4440 :     LPCSTR pFuncName = "ID3DX11EffectVariable::AsDepthStencilView";

	mov	DWORD PTR _pFuncName$[ebp], OFFSET ??_C@_0CK@BDFLCADG@ID3DX11EffectVariable?3?3AsDepthSt@

; 4441 :     DPF(0, "%s: Invalid typecast", pFuncName);
; 4442 :     return &g_InvalidDepthStencilViewVariable;

	mov	eax, OFFSET ?g_InvalidDepthStencilViewVariable@D3DX11Effects@@3USEffectInvalidDepthStencilViewVariable@1@A ; D3DX11Effects::g_InvalidDepthStencilViewVariable

; 4443 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?AsDepthStencilView@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectDepthStencilViewVariable@@XZ ENDP ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsDepthStencilView
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectvariable.inl
;	COMDAT ?AsRenderTargetView@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectRenderTargetViewVariable@@XZ
_TEXT	SEGMENT
_pFuncName$ = -8					; size = 4
_this$ = 8						; size = 4
?AsRenderTargetView@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectRenderTargetViewVariable@@XZ PROC ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsRenderTargetView, COMDAT

; 4431 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4432 :     LPCSTR pFuncName = "ID3DX11EffectVariable::AsRenderTargetView";

	mov	DWORD PTR _pFuncName$[ebp], OFFSET ??_C@_0CK@MBMJDIEM@ID3DX11EffectVariable?3?3AsRenderT@

; 4433 :     DPF(0, "%s: Invalid typecast", pFuncName);
; 4434 :     return &g_InvalidRenderTargetViewVariable;

	mov	eax, OFFSET ?g_InvalidRenderTargetViewVariable@D3DX11Effects@@3USEffectInvalidRenderTargetViewVariable@1@A ; D3DX11Effects::g_InvalidRenderTargetViewVariable

; 4435 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?AsRenderTargetView@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectRenderTargetViewVariable@@XZ ENDP ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsRenderTargetView
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectvariable.inl
;	COMDAT ?AsUnorderedAccessView@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectUnorderedAccessViewVariable@@XZ
_TEXT	SEGMENT
_pFuncName$ = -8					; size = 4
_this$ = 8						; size = 4
?AsUnorderedAccessView@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectUnorderedAccessViewVariable@@XZ PROC ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsUnorderedAccessView, COMDAT

; 4423 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4424 :     LPCSTR pFuncName = "ID3DX11EffectVariable::AsUnorderedAccessView";

	mov	DWORD PTR _pFuncName$[ebp], OFFSET ??_C@_0CN@NNAKDDLF@ID3DX11EffectVariable?3?3AsUnorder@

; 4425 :     DPF(0, "%s: Invalid typecast", pFuncName);
; 4426 :     return &g_InvalidUnorderedAccessViewVariable;

	mov	eax, OFFSET ?g_InvalidUnorderedAccessViewVariable@D3DX11Effects@@3USEffectInvalidUnorderedAccessViewVariable@1@A ; D3DX11Effects::g_InvalidUnorderedAccessViewVariable

; 4427 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?AsUnorderedAccessView@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectUnorderedAccessViewVariable@@XZ ENDP ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsUnorderedAccessView
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectvariable.inl
;	COMDAT ?AsShaderResource@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectShaderResourceVariable@@XZ
_TEXT	SEGMENT
_pFuncName$ = -8					; size = 4
_this$ = 8						; size = 4
?AsShaderResource@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectShaderResourceVariable@@XZ PROC ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsShaderResource, COMDAT

; 4415 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4416 :     LPCSTR pFuncName = "ID3DX11EffectVariable::AsShaderResource";

	mov	DWORD PTR _pFuncName$[ebp], OFFSET ??_C@_0CI@CAHLNOAL@ID3DX11EffectVariable?3?3AsShaderR@

; 4417 :     DPF(0, "%s: Invalid typecast", pFuncName);
; 4418 :     return &g_InvalidShaderResourceVariable;

	mov	eax, OFFSET ?g_InvalidShaderResourceVariable@D3DX11Effects@@3USEffectInvalidShaderResourceVariable@1@A ; D3DX11Effects::g_InvalidShaderResourceVariable

; 4419 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?AsShaderResource@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectShaderResourceVariable@@XZ ENDP ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsShaderResource
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectvariable.inl
;	COMDAT ?AsInterface@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectInterfaceVariable@@XZ
_TEXT	SEGMENT
_pFuncName$ = -8					; size = 4
_this$ = 8						; size = 4
?AsInterface@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectInterfaceVariable@@XZ PROC ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsInterface, COMDAT

; 4407 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4408 :     LPCSTR pFuncName = "ID3DX11EffectVariable::AsInterface";

	mov	DWORD PTR _pFuncName$[ebp], OFFSET ??_C@_0CD@IJDMLLGC@ID3DX11EffectVariable?3?3AsInterfa@

; 4409 :     DPF(0, "%s: Invalid typecast", pFuncName);
; 4410 :     return &g_InvalidInterfaceVariable;

	mov	eax, OFFSET ?g_InvalidInterfaceVariable@D3DX11Effects@@3USEffectInvalidInterfaceVariable@1@A ; D3DX11Effects::g_InvalidInterfaceVariable

; 4411 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?AsInterface@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectInterfaceVariable@@XZ ENDP ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsInterface
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectvariable.inl
;	COMDAT ?AsClassInstance@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectClassInstanceVariable@@XZ
_TEXT	SEGMENT
_pFuncName$ = -8					; size = 4
_this$ = 8						; size = 4
?AsClassInstance@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectClassInstanceVariable@@XZ PROC ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsClassInstance, COMDAT

; 4399 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4400 :     LPCSTR pFuncName = "ID3DX11EffectVariable::AsClassInstance";

	mov	DWORD PTR _pFuncName$[ebp], OFFSET ??_C@_0CH@DGGONKPA@ID3DX11EffectVariable?3?3AsClassIn@

; 4401 :     DPF(0, "%s: Invalid typecast", pFuncName);
; 4402 :     return &g_InvalidClassInstanceVariable;

	mov	eax, OFFSET ?g_InvalidClassInstanceVariable@D3DX11Effects@@3USEffectInvalidClassInstanceVariable@1@A ; D3DX11Effects::g_InvalidClassInstanceVariable

; 4403 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?AsClassInstance@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectClassInstanceVariable@@XZ ENDP ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsClassInstance
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectvariable.inl
;	COMDAT ?AsString@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectStringVariable@@XZ
_TEXT	SEGMENT
_pFuncName$ = -8					; size = 4
_this$ = 8						; size = 4
?AsString@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectStringVariable@@XZ PROC ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsString, COMDAT

; 4391 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4392 :     LPCSTR pFuncName = "ID3DX11EffectVariable::AsString";

	mov	DWORD PTR _pFuncName$[ebp], OFFSET ??_C@_0CA@NPAIMBLA@ID3DX11EffectVariable?3?3AsString?$AA@

; 4393 :     DPF(0, "%s: Invalid typecast", pFuncName);
; 4394 :     return &g_InvalidStringVariable;

	mov	eax, OFFSET ?g_InvalidStringVariable@D3DX11Effects@@3USEffectInvalidStringVariable@1@A ; D3DX11Effects::g_InvalidStringVariable

; 4395 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?AsString@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectStringVariable@@XZ ENDP ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectvariable.inl
;	COMDAT ?AsMatrix@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectMatrixVariable@@XZ
_TEXT	SEGMENT
_pFuncName$ = -8					; size = 4
_this$ = 8						; size = 4
?AsMatrix@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectMatrixVariable@@XZ PROC ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsMatrix, COMDAT

; 4383 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4384 :     LPCSTR pFuncName = "ID3DX11EffectVariable::AsMatrix";

	mov	DWORD PTR _pFuncName$[ebp], OFFSET ??_C@_0CA@HLLPIICO@ID3DX11EffectVariable?3?3AsMatrix?$AA@

; 4385 :     DPF(0, "%s: Invalid typecast", pFuncName);
; 4386 :     return &g_InvalidMatrixVariable;

	mov	eax, OFFSET ?g_InvalidMatrixVariable@D3DX11Effects@@3USEffectInvalidMatrixVariable@1@A ; D3DX11Effects::g_InvalidMatrixVariable

; 4387 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?AsMatrix@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectMatrixVariable@@XZ ENDP ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsMatrix
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectvariable.inl
;	COMDAT ?AsVector@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectVectorVariable@@XZ
_TEXT	SEGMENT
_pFuncName$ = -8					; size = 4
_this$ = 8						; size = 4
?AsVector@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectVectorVariable@@XZ PROC ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsVector, COMDAT

; 4375 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4376 :     LPCSTR pFuncName = "ID3DX11EffectVariable::AsVector";

	mov	DWORD PTR _pFuncName$[ebp], OFFSET ??_C@_0CA@IMDOICHK@ID3DX11EffectVariable?3?3AsVector?$AA@

; 4377 :     DPF(0, "%s: Invalid typecast", pFuncName);
; 4378 :     return &g_InvalidVectorVariable;

	mov	eax, OFFSET ?g_InvalidVectorVariable@D3DX11Effects@@3USEffectInvalidVectorVariable@1@A ; D3DX11Effects::g_InvalidVectorVariable

; 4379 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?AsVector@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectVectorVariable@@XZ ENDP ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsVector
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effectvariable.inl
;	COMDAT ?AsScalar@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectScalarVariable@@XZ
_TEXT	SEGMENT
_pFuncName$ = -8					; size = 4
_this$ = 8						; size = 4
?AsScalar@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectScalarVariable@@XZ PROC ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsScalar, COMDAT

; 4367 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4368 :     LPCSTR pFuncName = "ID3DX11EffectVariable::AsScalar";

	mov	DWORD PTR _pFuncName$[ebp], OFFSET ??_C@_0CA@ONKMEPNK@ID3DX11EffectVariable?3?3AsScalar?$AA@

; 4369 :     DPF(0, "%s: Invalid typecast", pFuncName);
; 4370 :     return &g_InvalidScalarVariable;

	mov	eax, OFFSET ?g_InvalidScalarVariable@D3DX11Effects@@3USEffectInvalidScalarVariable@1@A ; D3DX11Effects::g_InvalidScalarVariable

; 4371 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?AsScalar@?$TUncastableVariable@UID3DX11EffectConstantBuffer@@@D3DX11Effects@@UAGPAUID3DX11EffectScalarVariable@@XZ ENDP ; D3DX11Effects::TUncastableVariable<ID3DX11EffectConstantBuffer>::AsScalar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_FSAnonymousShader@D3DX11Effects@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??_FSAnonymousShader@D3DX11Effects@@QAEXXZ PROC		; D3DX11Effects::SAnonymousShader::`default constructor closure', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0SAnonymousShader@D3DX11Effects@@QAE@PAUSShaderBlock@1@@Z ; D3DX11Effects::SAnonymousShader::SAnonymousShader
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??_FSAnonymousShader@D3DX11Effects@@QAEXXZ ENDP		; D3DX11Effects::SAnonymousShader::`default constructor closure'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ??0SVariable@D3DX11Effects@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0SVariable@D3DX11Effects@@QAE@XZ PROC			; D3DX11Effects::SVariable::SVariable, COMDAT
; _this$ = ecx

; 686  :     SVariable()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 687  :     {
; 688  :         ZeroMemory(this, sizeof(*this));

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], eax

; 689  :         ExplicitBindPoint = -1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], -1

; 690  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0SVariable@D3DX11Effects@@QAE@XZ ENDP			; D3DX11Effects::SVariable::SVariable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_FSShaderBlock@D3DX11Effects@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??_FSShaderBlock@D3DX11Effects@@QAEXXZ PROC		; D3DX11Effects::SShaderBlock::`default constructor closure', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0SShaderBlock@D3DX11Effects@@QAE@PAUSD3DShaderVTable@1@@Z ; D3DX11Effects::SShaderBlock::SShaderBlock
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??_FSShaderBlock@D3DX11Effects@@QAEXXZ ENDP		; D3DX11Effects::SShaderBlock::`default constructor closure'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ??0SUnorderedAccessView@D3DX11Effects@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0SUnorderedAccessView@D3DX11Effects@@QAE@XZ PROC	; D3DX11Effects::SUnorderedAccessView::SUnorderedAccessView, COMDAT
; _this$ = ecx

; 508  :     SUnorderedAccessView() 

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 509  :     {
; 510  :         pUnorderedAccessView = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 511  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0SUnorderedAccessView@D3DX11Effects@@QAE@XZ ENDP	; D3DX11Effects::SUnorderedAccessView::SUnorderedAccessView
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ??0SShaderResource@D3DX11Effects@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0SShaderResource@D3DX11Effects@@QAE@XZ PROC		; D3DX11Effects::SShaderResource::SShaderResource, COMDAT
; _this$ = ecx

; 497  :     SShaderResource() 

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 498  :     {
; 499  :         pShaderResource = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 500  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0SShaderResource@D3DX11Effects@@QAE@XZ ENDP		; D3DX11Effects::SShaderResource::SShaderResource
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ??0SInterface@D3DX11Effects@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0SInterface@D3DX11Effects@@QAE@XZ PROC		; D3DX11Effects::SInterface::SInterface, COMDAT
; _this$ = ecx

; 487  :     SInterface()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 488  :     {
; 489  :         pClassInstance = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 490  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0SInterface@D3DX11Effects@@QAE@XZ ENDP		; D3DX11Effects::SInterface::SInterface
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ?GetDesc@SType@D3DX11Effects@@UAGJPAU_D3DX11_EFFECT_TYPE_DESC@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pDesc$ = 12						; size = 4
?GetDesc@SType@D3DX11Effects@@UAGJPAU_D3DX11_EFFECT_TYPE_DESC@@@Z PROC ; D3DX11Effects::SType::GetDesc, COMDAT

; 250  :     STDMETHOD(GetDesc)(D3DX11_EFFECT_TYPE_DESC *pDesc) { return GetDescHelper(pDesc, FALSE); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	0
	mov	eax, DWORD PTR _pDesc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDescHelper@SType@D3DX11Effects@@QBEJPAU_D3DX11_EFFECT_TYPE_DESC@@H@Z ; D3DX11Effects::SType::GetDescHelper
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetDesc@SType@D3DX11Effects@@UAGJPAU_D3DX11_EFFECT_TYPE_DESC@@@Z ENDP ; D3DX11Effects::SType::GetDesc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ?IsValid@SType@D3DX11Effects@@UAGHXZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
?IsValid@SType@D3DX11Effects@@UAGHXZ PROC		; D3DX11Effects::SType::IsValid, COMDAT

; 249  :     STDMETHOD_(BOOL, IsValid)() { return TRUE; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?IsValid@SType@D3DX11Effects@@UAGHXZ ENDP		; D3DX11Effects::SType::IsValid
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ?IsDepthStencilView@SType@D3DX11Effects@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsDepthStencilView@SType@D3DX11Effects@@QBEHXZ PROC	; D3DX11Effects::SType::IsDepthStencilView, COMDAT
; _this$ = ecx

; 241  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 242  :         return IsDepthStencilViewHelper(VarType, ObjectType);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	?IsDepthStencilViewHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z ; D3DX11Effects::IsDepthStencilViewHelper
	add	esp, 8

; 243  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDepthStencilView@SType@D3DX11Effects@@QBEHXZ ENDP	; D3DX11Effects::SType::IsDepthStencilView
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ?IsRenderTargetView@SType@D3DX11Effects@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsRenderTargetView@SType@D3DX11Effects@@QBEHXZ PROC	; D3DX11Effects::SType::IsRenderTargetView, COMDAT
; _this$ = ecx

; 237  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 238  :         return IsRenderTargetViewHelper(VarType, ObjectType);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	?IsRenderTargetViewHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z ; D3DX11Effects::IsRenderTargetViewHelper
	add	esp, 8

; 239  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsRenderTargetView@SType@D3DX11Effects@@QBEHXZ ENDP	; D3DX11Effects::SType::IsRenderTargetView
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ?IsSampler@SType@D3DX11Effects@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsSampler@SType@D3DX11Effects@@QBEHXZ PROC		; D3DX11Effects::SType::IsSampler, COMDAT
; _this$ = ecx

; 233  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 234  :         return IsSamplerHelper(VarType, ObjectType);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	?IsSamplerHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z ; D3DX11Effects::IsSamplerHelper
	add	esp, 8

; 235  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSampler@SType@D3DX11Effects@@QBEHXZ ENDP		; D3DX11Effects::SType::IsSampler
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ?IsUnorderedAccessView@SType@D3DX11Effects@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsUnorderedAccessView@SType@D3DX11Effects@@QBEHXZ PROC	; D3DX11Effects::SType::IsUnorderedAccessView, COMDAT
; _this$ = ecx

; 229  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 230  :         return IsUnorderedAccessViewHelper(VarType, ObjectType);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	?IsUnorderedAccessViewHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z ; D3DX11Effects::IsUnorderedAccessViewHelper
	add	esp, 8

; 231  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsUnorderedAccessView@SType@D3DX11Effects@@QBEHXZ ENDP	; D3DX11Effects::SType::IsUnorderedAccessView
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ?IsShaderResource@SType@D3DX11Effects@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsShaderResource@SType@D3DX11Effects@@QBEHXZ PROC	; D3DX11Effects::SType::IsShaderResource, COMDAT
; _this$ = ecx

; 225  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 226  :         return IsShaderResourceHelper(VarType, ObjectType);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	?IsShaderResourceHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z ; D3DX11Effects::IsShaderResourceHelper
	add	esp, 8

; 227  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsShaderResource@SType@D3DX11Effects@@QBEHXZ ENDP	; D3DX11Effects::SType::IsShaderResource
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ?IsInterface@SType@D3DX11Effects@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsInterface@SType@D3DX11Effects@@QBEHXZ PROC		; D3DX11Effects::SType::IsInterface, COMDAT
; _this$ = ecx

; 221  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 222  :         return IsInterfaceHelper(VarType, ObjectType);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	?IsInterfaceHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z ; D3DX11Effects::IsInterfaceHelper
	add	esp, 8

; 223  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsInterface@SType@D3DX11Effects@@QBEHXZ ENDP		; D3DX11Effects::SType::IsInterface
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ?IsClassInstance@SType@D3DX11Effects@@QBEHXZ
_TEXT	SEGMENT
tv70 = -208						; size = 4
_this$ = -8						; size = 4
?IsClassInstance@SType@D3DX11Effects@@QBEHXZ PROC	; D3DX11Effects::SType::IsClassInstance, COMDAT
; _this$ = ecx

; 217  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 218  :         return (VarType == EVT_Struct) && StructType.ImplementsInterface;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 3
	jne	SHORT $LN3@IsClassIns
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+36]
	test	edx, edx
	je	SHORT $LN3@IsClassIns
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@IsClassIns
$LN3@IsClassIns:
	mov	DWORD PTR tv70[ebp], 0
$LN4@IsClassIns:
	mov	eax, DWORD PTR tv70[ebp]

; 219  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsClassInstance@SType@D3DX11Effects@@QBEHXZ ENDP	; D3DX11Effects::SType::IsClassInstance
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ?IsStateBlockObject@SType@D3DX11Effects@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsStateBlockObject@SType@D3DX11Effects@@QBEHXZ PROC	; D3DX11Effects::SType::IsStateBlockObject, COMDAT
; _this$ = ecx

; 213  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 214  :         return IsStateBlockObjectHelper(VarType, ObjectType);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	?IsStateBlockObjectHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z ; D3DX11Effects::IsStateBlockObjectHelper
	add	esp, 8

; 215  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsStateBlockObject@SType@D3DX11Effects@@QBEHXZ ENDP	; D3DX11Effects::SType::IsStateBlockObject
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ?BelongsInConstantBuffer@SType@D3DX11Effects@@QBEHXZ
_TEXT	SEGMENT
tv68 = -208						; size = 4
_this$ = -8						; size = 4
?BelongsInConstantBuffer@SType@D3DX11Effects@@QBEHXZ PROC ; D3DX11Effects::SType::BelongsInConstantBuffer, COMDAT
; _this$ = ecx

; 209  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 210  :         return (VarType == EVT_Numeric) || (VarType == EVT_Struct);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 1
	je	SHORT $LN3@BelongsInC
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 3
	je	SHORT $LN3@BelongsInC
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@BelongsInC
$LN3@BelongsInC:
	mov	DWORD PTR tv68[ebp], 1
$LN4@BelongsInC:
	mov	eax, DWORD PTR tv68[ebp]

; 211  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?BelongsInConstantBuffer@SType@D3DX11Effects@@QBEHXZ ENDP ; D3DX11Effects::SType::BelongsInConstantBuffer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ?IsShader@SType@D3DX11Effects@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsShader@SType@D3DX11Effects@@QBEHXZ PROC		; D3DX11Effects::SType::IsShader, COMDAT
; _this$ = ecx

; 205  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 206  :         return IsShaderHelper(VarType, ObjectType);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	?IsShaderHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z ; D3DX11Effects::IsShaderHelper
	add	esp, 8

; 207  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsShader@SType@D3DX11Effects@@QBEHXZ ENDP		; D3DX11Effects::SType::IsShader
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ?IsObjectType@SType@D3DX11Effects@@QBEHW4EObjectType@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_ObjType$ = 8						; size = 4
?IsObjectType@SType@D3DX11Effects@@QBEHW4EObjectType@2@@Z PROC ; D3DX11Effects::SType::IsObjectType, COMDAT
; _this$ = ecx

; 201  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 202  :         return IsObjectTypeHelper(VarType, ObjectType, ObjType);

	mov	eax, DWORD PTR _ObjType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	?IsObjectTypeHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@1@Z ; D3DX11Effects::IsObjectTypeHelper
	add	esp, 12					; 0000000cH

; 203  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsObjectType@SType@D3DX11Effects@@QBEHW4EObjectType@2@@Z ENDP ; D3DX11Effects::SType::IsObjectType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\effect.h
;	COMDAT ??0SType@D3DX11Effects@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0SType@D3DX11Effects@@QAE@XZ PROC			; D3DX11Effects::SType::SType, COMDAT
; _this$ = ecx

; 191  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ID3DX11EffectType@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7SType@D3DX11Effects@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0

; 192  :         C_ASSERT( sizeof(NumericType) <= sizeof(StructType) );
; 193  :         C_ASSERT( sizeof(ObjectType) <= sizeof(StructType) );
; 194  :         C_ASSERT( sizeof(InterfaceType) <= sizeof(StructType) );
; 195  :         ZeroMemory( &StructType, sizeof(StructType) );

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax

; 196  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0SType@D3DX11Effects@@QAE@XZ ENDP			; D3DX11Effects::SType::SType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\binary\effectbinaryformat.h
;	COMDAT ?RequiresPool@SBinaryHeader@D3DX11Effects@@QBE_NXZ
_TEXT	SEGMENT
tv73 = -208						; size = 4
_this$ = -8						; size = 4
?RequiresPool@SBinaryHeader@D3DX11Effects@@QBE_NXZ PROC	; D3DX11Effects::SBinaryHeader::RequiresPool, COMDAT
; _this$ = ecx

; 406  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 407  :         return (Pool.cCBs != 0) ||
; 408  :                (Pool.cNumericVariables != 0) ||
; 409  :                (Pool.cObjectVariables != 0);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN3@RequiresPo
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	jne	SHORT $LN3@RequiresPo
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], 0
	jne	SHORT $LN3@RequiresPo
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN4@RequiresPo
$LN3@RequiresPo:
	mov	DWORD PTR tv73[ebp], 1
$LN4@RequiresPo:
	mov	al, BYTE PTR tv73[ebp]

; 410  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?RequiresPool@SBinaryHeader@D3DX11Effects@@QBE_NXZ ENDP	; D3DX11Effects::SBinaryHeader::RequiresPool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\binary\effectbinaryformat.h
;	COMDAT ?IsObjectAssignmentHelper@D3DX11Effects@@YAHW4ELhsType@1@@Z
_TEXT	SEGMENT
tv64 = -196						; size = 4
_LhsType$ = 8						; size = 4
?IsObjectAssignmentHelper@D3DX11Effects@@YAHW4ELhsType@1@@Z PROC ; D3DX11Effects::IsObjectAssignmentHelper, COMDAT

; 323  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 324  :     switch(LhsType)

	mov	eax, DWORD PTR _LhsType$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 16			; 00000010H
	jg	SHORT $LN6@IsObjectAs
	cmp	DWORD PTR tv64[ebp], 14			; 0000000eH
	jge	SHORT $LN1@IsObjectAs
	cmp	DWORD PTR tv64[ebp], 0
	jle	SHORT $LN2@IsObjectAs
	cmp	DWORD PTR tv64[ebp], 8
	jle	SHORT $LN1@IsObjectAs
	jmp	SHORT $LN2@IsObjectAs
$LN6@IsObjectAs:
	cmp	DWORD PTR tv64[ebp], 196618		; 0003000aH
	je	SHORT $LN1@IsObjectAs
	jmp	SHORT $LN2@IsObjectAs
$LN1@IsObjectAs:

; 325  :     {
; 326  :     case ELHS_VertexShaderBlock:
; 327  :     case ELHS_HullShaderBlock:
; 328  :     case ELHS_DepthStencilView:
; 329  :     case ELHS_GeometryShaderBlock:
; 330  :     case ELHS_PixelShaderBlock:
; 331  :     case ELHS_ComputeShaderBlock:
; 332  :     case ELHS_DepthStencilBlock:
; 333  :     case ELHS_RasterizerBlock:
; 334  :     case ELHS_BlendBlock:
; 335  :     case ELHS_Texture:
; 336  :     case ELHS_RenderTargetView:
; 337  :     case ELHS_DomainShaderBlock:
; 338  :         return TRUE;

	mov	eax, 1
	jmp	SHORT $LN4@IsObjectAs
$LN2@IsObjectAs:

; 339  :     }
; 340  :     return FALSE;

	xor	eax, eax
$LN4@IsObjectAs:

; 341  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsObjectAssignmentHelper@D3DX11Effects@@YAHW4ELhsType@1@@Z ENDP ; D3DX11Effects::IsObjectAssignmentHelper
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\binary\effectbinaryformat.h
;	COMDAT ?IsDepthStencilViewHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z
_TEXT	SEGMENT
tv66 = -196						; size = 4
_InVarType$ = 8						; size = 4
_InObjType$ = 12					; size = 4
?IsDepthStencilViewHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z PROC ; D3DX11Effects::IsDepthStencilViewHelper, COMDAT

; 318  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 319  :     return (InVarType == EVT_Object) && (InObjType == EOT_DepthStencilView);

	cmp	DWORD PTR _InVarType$[ebp], 2
	jne	SHORT $LN3@IsDepthSte
	cmp	DWORD PTR _InObjType$[ebp], 20		; 00000014H
	jne	SHORT $LN3@IsDepthSte
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@IsDepthSte
$LN3@IsDepthSte:
	mov	DWORD PTR tv66[ebp], 0
$LN4@IsDepthSte:
	mov	eax, DWORD PTR tv66[ebp]

; 320  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDepthStencilViewHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z ENDP ; D3DX11Effects::IsDepthStencilViewHelper
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\binary\effectbinaryformat.h
;	COMDAT ?IsRenderTargetViewHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z
_TEXT	SEGMENT
tv66 = -196						; size = 4
_InVarType$ = 8						; size = 4
_InObjType$ = 12					; size = 4
?IsRenderTargetViewHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z PROC ; D3DX11Effects::IsRenderTargetViewHelper, COMDAT

; 312  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 313  :     return (InVarType == EVT_Object) && (InObjType == EOT_RenderTargetView);

	cmp	DWORD PTR _InVarType$[ebp], 2
	jne	SHORT $LN3@IsRenderTa
	cmp	DWORD PTR _InObjType$[ebp], 19		; 00000013H
	jne	SHORT $LN3@IsRenderTa
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@IsRenderTa
$LN3@IsRenderTa:
	mov	DWORD PTR tv66[ebp], 0
$LN4@IsRenderTa:
	mov	eax, DWORD PTR tv66[ebp]

; 314  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsRenderTargetViewHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z ENDP ; D3DX11Effects::IsRenderTargetViewHelper
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\binary\effectbinaryformat.h
;	COMDAT ?IsUnorderedAccessViewHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z
_TEXT	SEGMENT
tv77 = -196						; size = 4
_InVarType$ = 8						; size = 4
_InObjType$ = 12					; size = 4
?IsUnorderedAccessViewHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z PROC ; D3DX11Effects::IsUnorderedAccessViewHelper, COMDAT

; 294  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 295  :     return (InVarType == EVT_Object) &&
; 296  :         ((InObjType == EOT_RWTexture1D) ||
; 297  :          (InObjType == EOT_RWTexture1DArray) ||
; 298  :          (InObjType == EOT_RWTexture2D) ||
; 299  :          (InObjType == EOT_RWTexture2DArray) ||
; 300  :          (InObjType == EOT_RWTexture3D) ||
; 301  :          (InObjType == EOT_RWBuffer) ||
; 302  :          (InObjType == EOT_RWByteAddressBuffer) ||
; 303  :          (InObjType == EOT_RWStructuredBuffer) ||
; 304  :          (InObjType == EOT_RWStructuredBufferAlloc) ||
; 305  :          (InObjType == EOT_RWStructuredBufferConsume) ||
; 306  :          (InObjType == EOT_AppendStructuredBuffer) ||
; 307  :          (InObjType == EOT_ConsumeStructuredBuffer));

	cmp	DWORD PTR _InVarType$[ebp], 2
	jne	SHORT $LN4@IsUnordere
	cmp	DWORD PTR _InObjType$[ebp], 31		; 0000001fH
	je	SHORT $LN3@IsUnordere
	cmp	DWORD PTR _InObjType$[ebp], 32		; 00000020H
	je	SHORT $LN3@IsUnordere
	cmp	DWORD PTR _InObjType$[ebp], 33		; 00000021H
	je	SHORT $LN3@IsUnordere
	cmp	DWORD PTR _InObjType$[ebp], 34		; 00000022H
	je	SHORT $LN3@IsUnordere
	cmp	DWORD PTR _InObjType$[ebp], 35		; 00000023H
	je	SHORT $LN3@IsUnordere
	cmp	DWORD PTR _InObjType$[ebp], 36		; 00000024H
	je	SHORT $LN3@IsUnordere
	cmp	DWORD PTR _InObjType$[ebp], 38		; 00000026H
	je	SHORT $LN3@IsUnordere
	cmp	DWORD PTR _InObjType$[ebp], 40		; 00000028H
	je	SHORT $LN3@IsUnordere
	cmp	DWORD PTR _InObjType$[ebp], 41		; 00000029H
	je	SHORT $LN3@IsUnordere
	cmp	DWORD PTR _InObjType$[ebp], 42		; 0000002aH
	je	SHORT $LN3@IsUnordere
	cmp	DWORD PTR _InObjType$[ebp], 43		; 0000002bH
	je	SHORT $LN3@IsUnordere
	cmp	DWORD PTR _InObjType$[ebp], 44		; 0000002cH
	jne	SHORT $LN4@IsUnordere
$LN3@IsUnordere:
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN5@IsUnordere
$LN4@IsUnordere:
	mov	DWORD PTR tv77[ebp], 0
$LN5@IsUnordere:
	mov	eax, DWORD PTR tv77[ebp]

; 308  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsUnorderedAccessViewHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z ENDP ; D3DX11Effects::IsUnorderedAccessViewHelper
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\binary\effectbinaryformat.h
;	COMDAT ?IsShaderResourceHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z
_TEXT	SEGMENT
tv78 = -196						; size = 4
_InVarType$ = 8						; size = 4
_InObjType$ = 12					; size = 4
?IsShaderResourceHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z PROC ; D3DX11Effects::IsShaderResourceHelper, COMDAT

; 276  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 277  :     return (InVarType == EVT_Object) && ((InObjType == EOT_Texture) ||
; 278  :                                          (InObjType == EOT_Texture1D) || 
; 279  :                                          (InObjType == EOT_Texture1DArray) ||
; 280  :                                          (InObjType == EOT_Texture2D) || 
; 281  :                                          (InObjType == EOT_Texture2DArray) ||
; 282  :                                          (InObjType == EOT_Texture2DMS) || 
; 283  :                                          (InObjType == EOT_Texture2DMSArray) ||
; 284  :                                          (InObjType == EOT_Texture3D) || 
; 285  :                                          (InObjType == EOT_TextureCube) ||
; 286  :                                          (InObjType == EOT_TextureCubeArray) || 
; 287  :                                          (InObjType == EOT_Buffer) ||
; 288  :                                          (InObjType == EOT_StructuredBuffer) ||
; 289  :                                          (InObjType == EOT_ByteAddressBuffer));

	cmp	DWORD PTR _InVarType$[ebp], 2
	jne	SHORT $LN4@IsShaderRe
	cmp	DWORD PTR _InObjType$[ebp], 9
	je	SHORT $LN3@IsShaderRe
	cmp	DWORD PTR _InObjType$[ebp], 10		; 0000000aH
	je	SHORT $LN3@IsShaderRe
	cmp	DWORD PTR _InObjType$[ebp], 11		; 0000000bH
	je	SHORT $LN3@IsShaderRe
	cmp	DWORD PTR _InObjType$[ebp], 12		; 0000000cH
	je	SHORT $LN3@IsShaderRe
	cmp	DWORD PTR _InObjType$[ebp], 13		; 0000000dH
	je	SHORT $LN3@IsShaderRe
	cmp	DWORD PTR _InObjType$[ebp], 14		; 0000000eH
	je	SHORT $LN3@IsShaderRe
	cmp	DWORD PTR _InObjType$[ebp], 15		; 0000000fH
	je	SHORT $LN3@IsShaderRe
	cmp	DWORD PTR _InObjType$[ebp], 16		; 00000010H
	je	SHORT $LN3@IsShaderRe
	cmp	DWORD PTR _InObjType$[ebp], 17		; 00000011H
	je	SHORT $LN3@IsShaderRe
	cmp	DWORD PTR _InObjType$[ebp], 23		; 00000017H
	je	SHORT $LN3@IsShaderRe
	cmp	DWORD PTR _InObjType$[ebp], 22		; 00000016H
	je	SHORT $LN3@IsShaderRe
	cmp	DWORD PTR _InObjType$[ebp], 39		; 00000027H
	je	SHORT $LN3@IsShaderRe
	cmp	DWORD PTR _InObjType$[ebp], 37		; 00000025H
	jne	SHORT $LN4@IsShaderRe
$LN3@IsShaderRe:
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN5@IsShaderRe
$LN4@IsShaderRe:
	mov	DWORD PTR tv78[ebp], 0
$LN5@IsShaderRe:
	mov	eax, DWORD PTR tv78[ebp]

; 290  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsShaderResourceHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z ENDP ; D3DX11Effects::IsShaderResourceHelper
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\binary\effectbinaryformat.h
;	COMDAT ?IsInterfaceHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z
_TEXT	SEGMENT
tv65 = -196						; size = 4
_InVarType$ = 8						; size = 4
_InObjType$ = 12					; size = 4
?IsInterfaceHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z PROC ; D3DX11Effects::IsInterfaceHelper, COMDAT

; 270  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 271  :     return (InVarType == EVT_Interface);

	cmp	DWORD PTR _InVarType$[ebp], 4
	jne	SHORT $LN3@IsInterfac
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@IsInterfac
$LN3@IsInterfac:
	mov	DWORD PTR tv65[ebp], 0
$LN4@IsInterfac:
	mov	eax, DWORD PTR tv65[ebp]

; 272  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsInterfaceHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z ENDP ; D3DX11Effects::IsInterfaceHelper
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\binary\effectbinaryformat.h
;	COMDAT ?IsShaderHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z
_TEXT	SEGMENT
tv75 = -196						; size = 4
_InVarType$ = 8						; size = 4
_InObjType$ = 12					; size = 4
?IsShaderHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z PROC ; D3DX11Effects::IsShaderHelper, COMDAT

; 244  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 245  :     return (InVarType == EVT_Object) && ((InObjType == EOT_VertexShader) ||
; 246  :                                          (InObjType == EOT_VertexShader5) ||
; 247  :                                          (InObjType == EOT_HullShader5) ||
; 248  :                                          (InObjType == EOT_DomainShader5) ||
; 249  :                                          (InObjType == EOT_ComputeShader5) ||
; 250  :                                          (InObjType == EOT_GeometryShader) ||
; 251  :                                          (InObjType == EOT_GeometryShaderSO) ||
; 252  :                                          (InObjType == EOT_GeometryShader5) ||
; 253  :                                          (InObjType == EOT_PixelShader) ||
; 254  :                                          (InObjType == EOT_PixelShader5));

	cmp	DWORD PTR _InVarType$[ebp], 2
	jne	SHORT $LN4@IsShaderHe
	cmp	DWORD PTR _InObjType$[ebp], 6
	je	SHORT $LN3@IsShaderHe
	cmp	DWORD PTR _InObjType$[ebp], 26		; 0000001aH
	je	SHORT $LN3@IsShaderHe
	cmp	DWORD PTR _InObjType$[ebp], 29		; 0000001dH
	je	SHORT $LN3@IsShaderHe
	cmp	DWORD PTR _InObjType$[ebp], 30		; 0000001eH
	je	SHORT $LN3@IsShaderHe
	cmp	DWORD PTR _InObjType$[ebp], 28		; 0000001cH
	je	SHORT $LN3@IsShaderHe
	cmp	DWORD PTR _InObjType$[ebp], 7
	je	SHORT $LN3@IsShaderHe
	cmp	DWORD PTR _InObjType$[ebp], 8
	je	SHORT $LN3@IsShaderHe
	cmp	DWORD PTR _InObjType$[ebp], 27		; 0000001bH
	je	SHORT $LN3@IsShaderHe
	cmp	DWORD PTR _InObjType$[ebp], 5
	je	SHORT $LN3@IsShaderHe
	cmp	DWORD PTR _InObjType$[ebp], 25		; 00000019H
	jne	SHORT $LN4@IsShaderHe
$LN3@IsShaderHe:
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN5@IsShaderHe
$LN4@IsShaderHe:
	mov	DWORD PTR tv75[ebp], 0
$LN5@IsShaderHe:
	mov	eax, DWORD PTR tv75[ebp]

; 255  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsShaderHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z ENDP ; D3DX11Effects::IsShaderHelper
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\binary\effectbinaryformat.h
;	COMDAT ?IsStateBlockObjectHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z
_TEXT	SEGMENT
tv72 = -196						; size = 4
_InVarType$ = 8						; size = 4
_InObjType$ = 12					; size = 4
?IsStateBlockObjectHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z PROC ; D3DX11Effects::IsStateBlockObjectHelper, COMDAT

; 238  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 239  :     return (InVarType == EVT_Object) && ((InObjType == EOT_Blend) || (InObjType == EOT_DepthStencil) || (InObjType == EOT_Rasterizer) || IsSamplerHelper(InVarType, InObjType));

	cmp	DWORD PTR _InVarType$[ebp], 2
	jne	SHORT $LN4@IsStateBlo
	cmp	DWORD PTR _InObjType$[ebp], 2
	je	SHORT $LN3@IsStateBlo
	cmp	DWORD PTR _InObjType$[ebp], 3
	je	SHORT $LN3@IsStateBlo
	cmp	DWORD PTR _InObjType$[ebp], 4
	je	SHORT $LN3@IsStateBlo
	mov	eax, DWORD PTR _InObjType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _InVarType$[ebp]
	push	ecx
	call	?IsSamplerHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z ; D3DX11Effects::IsSamplerHelper
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@IsStateBlo
$LN3@IsStateBlo:
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN5@IsStateBlo
$LN4@IsStateBlo:
	mov	DWORD PTR tv72[ebp], 0
$LN5@IsStateBlo:
	mov	eax, DWORD PTR tv72[ebp]

; 240  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsStateBlockObjectHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z ENDP ; D3DX11Effects::IsStateBlockObjectHelper
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\binary\effectbinaryformat.h
;	COMDAT ?IsSamplerHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z
_TEXT	SEGMENT
tv66 = -196						; size = 4
_InVarType$ = 8						; size = 4
_InObjType$ = 12					; size = 4
?IsSamplerHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z PROC ; D3DX11Effects::IsSamplerHelper, COMDAT

; 232  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 233  :     return (InVarType == EVT_Object) && (InObjType == EOT_Sampler);

	cmp	DWORD PTR _InVarType$[ebp], 2
	jne	SHORT $LN3@IsSamplerH
	cmp	DWORD PTR _InObjType$[ebp], 21		; 00000015H
	jne	SHORT $LN3@IsSamplerH
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@IsSamplerH
$LN3@IsSamplerH:
	mov	DWORD PTR tv66[ebp], 0
$LN4@IsSamplerH:
	mov	eax, DWORD PTR tv66[ebp]

; 234  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSamplerHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@@Z ENDP ; D3DX11Effects::IsSamplerHelper
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\binary\effectbinaryformat.h
;	COMDAT ?IsObjectTypeHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@1@Z
_TEXT	SEGMENT
tv66 = -196						; size = 4
_InVarType$ = 8						; size = 4
_InObjType$ = 12					; size = 4
_TargetObjType$ = 16					; size = 4
?IsObjectTypeHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@1@Z PROC ; D3DX11Effects::IsObjectTypeHelper, COMDAT

; 226  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 227  :     return (InVarType == EVT_Object) && (InObjType == TargetObjType);

	cmp	DWORD PTR _InVarType$[ebp], 2
	jne	SHORT $LN3@IsObjectTy
	mov	eax, DWORD PTR _InObjType$[ebp]
	cmp	eax, DWORD PTR _TargetObjType$[ebp]
	jne	SHORT $LN3@IsObjectTy
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@IsObjectTy
$LN3@IsObjectTy:
	mov	DWORD PTR tv66[ebp], 0
$LN4@IsObjectTy:
	mov	eax, DWORD PTR tv66[ebp]

; 228  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsObjectTypeHelper@D3DX11Effects@@YAHW4EVarType@1@W4EObjectType@1@1@Z ENDP ; D3DX11Effects::IsObjectTypeHelper
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?ComputeHash@@YAIPAEI@Z
_TEXT	SEGMENT
tv145 = -256						; size = 4
_pdw$1 = -56						; size = 4
_cbLeft$ = -44						; size = 4
_c$ = -32						; size = 4
_b$ = -20						; size = 4
_a$ = -8						; size = 4
_pb$ = 8						; size = 4
_cbToHash$ = 12						; size = 4
?ComputeHash@@YAIPAEI@Z PROC				; ComputeHash, COMDAT

; 696  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 697  :     UINT a;
; 698  :     UINT b;
; 699  :     UINT c;
; 700  :     UINT cbLeft;
; 701  : 
; 702  :     cbLeft = cbToHash;

	mov	eax, DWORD PTR _cbToHash$[ebp]
	mov	DWORD PTR _cbLeft$[ebp], eax

; 703  : 
; 704  :     a = b = 0x9e3779b9; // the golden ratio; an arbitrary value

	mov	DWORD PTR _b$[ebp], -1640531527		; 9e3779b9H
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax

; 705  :     c = 0;

	mov	DWORD PTR _c$[ebp], 0
$LN15@ComputeHas:

; 706  : 
; 707  :     while (cbLeft >= 12)

	cmp	DWORD PTR _cbLeft$[ebp], 12		; 0000000cH
	jb	$LN14@ComputeHas

; 708  :     {
; 709  :         UINT *pdw = reinterpret_cast<UINT *>(pb);

	mov	eax, DWORD PTR _pb$[ebp]
	mov	DWORD PTR _pdw$1[ebp], eax

; 710  : 
; 711  :         a += pdw[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pdw$1[ebp]
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _a$[ebp], eax

; 712  :         b += pdw[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pdw$1[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	add	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _b$[ebp], edx

; 713  :         c += pdw[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _pdw$1[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	add	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _c$[ebp], edx

; 714  : 
; 715  :         HASH_MIX(a,b,c);

	mov	eax, DWORD PTR _a$[ebp]
	sub	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	sub	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 13					; 0000000dH
	xor	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 8
	xor	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 13					; 0000000dH
	xor	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	sub	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	sub	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 12					; 0000000cH
	xor	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 16					; 00000010H
	xor	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 5
	xor	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	sub	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	sub	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 3
	xor	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 10					; 0000000aH
	xor	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 15					; 0000000fH
	xor	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 716  :         pb += 12; 

	mov	eax, DWORD PTR _pb$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _pb$[ebp], eax

; 717  :         cbLeft -= 12;

	mov	eax, DWORD PTR _cbLeft$[ebp]
	sub	eax, 12					; 0000000cH
	mov	DWORD PTR _cbLeft$[ebp], eax

; 718  :     }

	jmp	$LN15@ComputeHas
$LN14@ComputeHas:

; 719  : 
; 720  :     c += cbToHash;

	mov	eax, DWORD PTR _c$[ebp]
	add	eax, DWORD PTR _cbToHash$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 721  : 
; 722  :     switch(cbLeft) // all the case statements fall through

	mov	eax, DWORD PTR _cbLeft$[ebp]
	mov	DWORD PTR tv145[ebp], eax
	mov	ecx, DWORD PTR tv145[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv145[ebp], ecx
	cmp	DWORD PTR tv145[ebp], 10		; 0000000aH
	ja	$LN12@ComputeHas
	mov	edx, DWORD PTR tv145[ebp]
	jmp	DWORD PTR $LN18@ComputeHas[edx*4]
$LN11@ComputeHas:

; 723  :     {
; 724  :     case 11: c+=((UINT) pb[10] << 24);

	mov	eax, 1
	imul	ecx, eax, 10
	mov	edx, DWORD PTR _pb$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	add	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c$[ebp], eax
$LN10@ComputeHas:

; 725  :     case 10: c+=((UINT) pb[9]  << 16);

	mov	eax, 1
	imul	ecx, eax, 9
	mov	edx, DWORD PTR _pb$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 16					; 00000010H
	add	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c$[ebp], eax
$LN9@ComputeHas:

; 726  :     case 9 : c+=((UINT) pb[8]  <<  8);

	mov	eax, 1
	shl	eax, 3
	mov	ecx, DWORD PTR _pb$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 8
	add	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c$[ebp], edx
$LN8@ComputeHas:

; 727  :         // the first byte of c is reserved for the length
; 728  :     case 8 : b+=((UINT) pb[7]  << 24);

	mov	eax, 1
	imul	ecx, eax, 7
	mov	edx, DWORD PTR _pb$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], eax
$LN7@ComputeHas:

; 729  :     case 7 : b+=((UINT) pb[6]  << 16);

	mov	eax, 1
	imul	ecx, eax, 6
	mov	edx, DWORD PTR _pb$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 16					; 00000010H
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], eax
$LN6@ComputeHas:

; 730  :     case 6 : b+=((UINT) pb[5]  <<  8);

	mov	eax, 1
	imul	ecx, eax, 5
	mov	edx, DWORD PTR _pb$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	add	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], eax
$LN5@ComputeHas:

; 731  :     case 5 : b+=pb[4];

	mov	eax, 1
	shl	eax, 2
	mov	ecx, DWORD PTR _pb$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	add	edx, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], edx
$LN4@ComputeHas:

; 732  :     case 4 : a+=((UINT) pb[3]  << 24);

	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _pb$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 24					; 00000018H
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _a$[ebp], eax
$LN3@ComputeHas:

; 733  :     case 3 : a+=((UINT) pb[2]  << 16);

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _pb$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 16					; 00000010H
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _a$[ebp], edx
$LN2@ComputeHas:

; 734  :     case 2 : a+=((UINT) pb[1]  <<  8);

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _pb$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	shl	edx, 8
	add	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR _a$[ebp], edx
$LN1@ComputeHas:

; 735  :     case 1 : a+=pb[0];

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _pb$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	add	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _a$[ebp], eax
$LN12@ComputeHas:

; 736  :     }
; 737  : 
; 738  :     HASH_MIX(a,b,c);

	mov	eax, DWORD PTR _a$[ebp]
	sub	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	sub	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 13					; 0000000dH
	xor	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 8
	xor	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 13					; 0000000dH
	xor	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	sub	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	sub	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 12					; 0000000cH
	xor	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 16					; 00000010H
	xor	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 5
	xor	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	sub	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	sub	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	shr	eax, 3
	xor	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _a$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _a$[ebp]
	shl	eax, 10					; 0000000aH
	xor	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _c$[ebp]
	sub	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR _c$[ebp], eax
	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 15					; 0000000fH
	xor	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 739  : 
; 740  :     return c;

	mov	eax, DWORD PTR _c$[ebp]

; 741  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@ComputeHas:
	DD	$LN1@ComputeHas
	DD	$LN2@ComputeHas
	DD	$LN3@ComputeHas
	DD	$LN4@ComputeHas
	DD	$LN5@ComputeHas
	DD	$LN6@ComputeHas
	DD	$LN7@ComputeHas
	DD	$LN8@ComputeHas
	DD	$LN9@ComputeHas
	DD	$LN10@ComputeHas
	DD	$LN11@ComputeHas
?ComputeHash@@YAIPAEI@Z ENDP				; ComputeHash
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ??3@YAXPAXAAVCDataBlockStore@@@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
_pAllocator$ = 12					; size = 4
??3@YAXPAXAAVCDataBlockStore@@@Z PROC			; operator delete, COMDAT

; 674  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 675  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAXAAVCDataBlockStore@@@Z ENDP			; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ??2@YAPAXIAAVCDataBlockStore@@@Z
_TEXT	SEGMENT
_s$ = 8							; size = 4
_pAllocator$ = 12					; size = 4
??2@YAPAXIAAVCDataBlockStore@@@Z PROC			; operator new, COMDAT

; 668  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN4@operator:

; 669  :     D3DXASSERT( s <= 0xffffffff );

	cmp	DWORD PTR _s$[ebp], -1
	jbe	SHORT $LN3@operator
	push	OFFSET ??_C@_0BA@BGIBFJE@s?5?$DM?$DN?50xffffffff?$AA@
	mov	eax, DWORD PTR ?__LINE__Var@?1???2@YAPAXIAAVCDataBlockStore@@@Z@4JA@af81a2e3
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator

; 670  :     return pAllocator.Allocate( (UINT)s );

	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pAllocator$[ebp]
	call	?Allocate@CDataBlockStore@@QAEPAXI@Z	; CDataBlockStore::Allocate

; 671  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXIAAVCDataBlockStore@@@Z ENDP			; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?AlignToPowerOf2@@YAPAXPAXI@Z
_TEXT	SEGMENT
_pValue$ = 8						; size = 4
_Alignment$ = 12					; size = 4
?AlignToPowerOf2@@YAPAXPAXI@Z PROC			; AlignToPowerOf2, COMDAT

; 66   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN4@AlignToPow:

; 67   :     D3DXASSERT((Alignment & (Alignment - 1)) == 0);

	mov	eax, DWORD PTR _Alignment$[ebp]
	sub	eax, 1
	and	eax, DWORD PTR _Alignment$[ebp]
	je	SHORT $LN3@AlignToPow
	push	OFFSET ??_C@_0CD@GECBLADO@?$CIAlignment?5?$CG?5?$CIAlignment?5?9?51?$CJ?$CJ?5?$DN?$DN@
	mov	eax, DWORD PTR ?__LINE__Var@?1??AlignToPowerOf2@@YAPAXPAXI@Z@4JA
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN3@AlignToPow:
	xor	eax, eax
	jne	SHORT $LN4@AlignToPow

; 68   :     // to align to 2^N, add 2^N - 1 and AND with all but lowest N bits set
; 69   :     return (void *)(((UINT_PTR)pValue + Alignment - 1) & (~((UINT_PTR)Alignment - 1)));

	mov	eax, DWORD PTR _Alignment$[ebp]
	mov	ecx, DWORD PTR _pValue$[ebp]
	lea	eax, DWORD PTR [ecx+eax-1]
	mov	edx, DWORD PTR _Alignment$[ebp]
	sub	edx, 1
	not	edx
	and	eax, edx

; 70   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AlignToPowerOf2@@YAPAXPAXI@Z ENDP			; AlignToPowerOf2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\effects11\inc\d3dxglobal.h
;	COMDAT ?AlignToPowerOf2@@YAIII@Z
_TEXT	SEGMENT
_Value$ = 8						; size = 4
_Alignment$ = 12					; size = 4
?AlignToPowerOf2@@YAIII@Z PROC				; AlignToPowerOf2, COMDAT

; 58   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN12@AlignToPow:

; 59   :     D3DXASSERT((Alignment & (Alignment - 1)) == 0);

	mov	eax, DWORD PTR _Alignment$[ebp]
	sub	eax, 1
	and	eax, DWORD PTR _Alignment$[ebp]
	je	SHORT $LN11@AlignToPow
	push	OFFSET ??_C@_0CD@GECBLADO@?$CIAlignment?5?$CG?5?$CIAlignment?5?9?51?$CJ?$CJ?5?$DN?$DN@
	mov	eax, DWORD PTR ?__LINE__Var@?1??AlignToPowerOf2@@YAIII@Z@4JA
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN11@AlignToPow:
	xor	eax, eax
	jne	SHORT $LN12@AlignToPow
$LN8@AlignToPow:

; 60   :     // to align to 2^N, add 2^N - 1 and AND with all but lowest N bits set
; 61   :     ANALYSIS_ASSUME(Alignment > 0 && Value < MAXDWORD - Alignment);

	cmp	DWORD PTR _Alignment$[ebp], 0
	jbe	SHORT $LN4@AlignToPow
	or	eax, -1
	sub	eax, DWORD PTR _Alignment$[ebp]
	cmp	DWORD PTR _Value$[ebp], eax
	jb	SHORT $LN7@AlignToPow
$LN4@AlignToPow:
	push	OFFSET ??_C@_0DA@FKFDAOLL@Alignment?5?$DO?50?5?$CG?$CG?5Value?5?$DM?50xfffff@
	mov	eax, DWORD PTR ?__LINE__Var@?1??AlignToPowerOf2@@YAIII@Z@4JA
	add	eax, 3
	push	eax
	push	OFFSET ??_C@_0EI@GKHIMBBO@c?3?2users?2simon?2documents?2github?2@
	call	?D3DXDebugAssert@@YGHPBDH0@Z		; D3DXDebugAssert
$LN7@AlignToPow:
	xor	eax, eax
	jne	SHORT $LN8@AlignToPow
$LN2@AlignToPow:
	xor	eax, eax
	jne	SHORT $LN2@AlignToPow

; 62   :     return (Value + Alignment - 1) & (~(Alignment - 1));

	mov	eax, DWORD PTR _Alignment$[ebp]
	mov	ecx, DWORD PTR _Value$[ebp]
	lea	eax, DWORD PTR [ecx+eax-1]
	mov	edx, DWORD PTR _Alignment$[ebp]
	sub	edx, 1
	not	edx
	and	eax, edx

; 63   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AlignToPowerOf2@@YAIII@Z ENDP				; AlignToPowerOf2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 65   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ID3DX11EffectConstantBuffer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0ID3DX11EffectConstantBuffer@@QAE@XZ PROC		; ID3DX11EffectConstantBuffer::ID3DX11EffectConstantBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ID3DX11EffectVariable@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ID3DX11EffectConstantBuffer@@QAE@XZ ENDP		; ID3DX11EffectConstantBuffer::ID3DX11EffectConstantBuffer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ID3DX11EffectVariable@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0ID3DX11EffectVariable@@QAE@XZ PROC			; ID3DX11EffectVariable::ID3DX11EffectVariable, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0ID3DX11EffectVariable@@QAE@XZ ENDP			; ID3DX11EffectVariable::ID3DX11EffectVariable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ID3DX11EffectType@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0ID3DX11EffectType@@QAE@XZ PROC			; ID3DX11EffectType::ID3DX11EffectType, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0ID3DX11EffectType@@QAE@XZ ENDP			; ID3DX11EffectType::ID3DX11EffectType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	esi, esp
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
