; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61030.0 

	TITLE	C:\Users\Simon\Documents\GitHub\UCLAN-sparta\Dissertation Project\Import\Math\CMatrix3x3.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B ; std::ios_base::failure::_Stream_err
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B
CONST	SEGMENT
?_Stream_err@failure@ios_base@std@@0W4io_errc@43@B DD 01H ; std::ios_base::failure::_Stream_err
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
CONST	SEGMENT
_kfPi	DD	040490fdbr			; 3.14159
_kfEpsilon DD	0350637bdr			; 5e-007
_kfPi64	DQ	0400921fb54442d18r		; 3.14159
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
PUBLIC	_fabsf
PUBLIC	_acosf
PUBLIC	_atan2f
PUBLIC	_cosf
PUBLIC	_sinf
PUBLIC	_sqrtf
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??3@YAXPAX0@Z					; operator delete
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	?select_on_container_copy_construction@?$allocator@D@std@@QBE?AV12@XZ ; std::allocator<char>::select_on_container_copy_construction
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction
PUBLIC	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<char> >::select_on_container_copy_construction
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
PUBLIC	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z		; std::_Debug_pointer<char>
PUBLIC	?generic_category@std@@YAABVerror_category@1@XZ	; std::generic_category
PUBLIC	?system_category@std@@YAABVerror_category@1@XZ	; std::system_category
PUBLIC	??0error_category@std@@QAE@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QBE_NABV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UAEPAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	?value@error_code@std@@QBEHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
PUBLIC	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QBEHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8error_condition@std@@QBE_NABV01@@Z		; std::error_condition::operator==
PUBLIC	??0_Generic_error_category@std@@QAE@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UBEPBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UAE@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UAEPAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QAE@XZ		; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UBEPBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UAE@XZ		; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UAEPAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??0_System_error_category@std@@QAE@XZ		; std::_System_error_category::_System_error_category
PUBLIC	?name@_System_error_category@std@@UBEPBDXZ	; std::_System_error_category::name
PUBLIC	?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message
PUBLIC	?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition
PUBLIC	??1_System_error_category@std@@UAE@XZ		; std::_System_error_category::~_System_error_category
PUBLIC	??_G_System_error_category@std@@UAEPAXI@Z	; std::_System_error_category::`scalar deleting destructor'
PUBLIC	?ObjectName@gen@@YAPBDXZ			; gen::ObjectName
PUBLIC	??0CFatalException@gen@@QAE@PBD0H@Z		; gen::CFatalException::CFatalException
PUBLIC	??0CFatalException@gen@@QAE@PBD00@Z		; gen::CFatalException::CFatalException
PUBLIC	??1CFatalException@gen@@QAE@XZ			; gen::CFatalException::~CFatalException
PUBLIC	??0CFatalException@gen@@QAE@ABV01@@Z		; gen::CFatalException::CFatalException
PUBLIC	?Abs@gen@@YAIH@Z				; gen::Abs
PUBLIC	?Abs@gen@@YAMM@Z				; gen::Abs
PUBLIC	?Sqrt@gen@@YAMM@Z				; gen::Sqrt
PUBLIC	?Sin@gen@@YAMM@Z				; gen::Sin
PUBLIC	?Cos@gen@@YAMM@Z				; gen::Cos
PUBLIC	?ACos@gen@@YAMM@Z				; gen::ACos
PUBLIC	?ATan@gen@@YAMMM@Z				; gen::ATan
PUBLIC	?InvSqrt@gen@@YAMM@Z				; gen::InvSqrt
PUBLIC	?SinCos@gen@@YAXMPAM0@Z				; gen::SinCos
PUBLIC	?IsZero@gen@@YA_NMM@Z				; gen::IsZero
PUBLIC	?AreEqual@gen@@YA_NMMI@Z			; gen::AreEqual
PUBLIC	??0CVector2@gen@@QAE@XZ				; gen::CVector2::CVector2
PUBLIC	??0CVector2@gen@@QAE@MM@Z			; gen::CVector2::CVector2
PUBLIC	??0CVector2@gen@@QAE@ABV01@@Z			; gen::CVector2::CVector2
PUBLIC	?IsZero@CVector2@gen@@QBE_NXZ			; gen::CVector2::IsZero
PUBLIC	??Ggen@@YA?AVCVector2@0@ABV10@0@Z		; gen::operator-
PUBLIC	??0CVector3@gen@@QAE@XZ				; gen::CVector3::CVector3
PUBLIC	??0CVector3@gen@@QAE@MMM@Z			; gen::CVector3::CVector3
PUBLIC	??0CVector3@gen@@QAE@PBM@Z			; gen::CVector3::CVector3
PUBLIC	??0CVector3@gen@@QAE@ABV01@@Z			; gen::CVector3::CVector3
PUBLIC	??4CVector3@gen@@QAEAAV01@ABV01@@Z		; gen::CVector3::operator=
PUBLIC	?Set@CVector3@gen@@QAEXMMM@Z			; gen::CVector3::Set
PUBLIC	?IsZero@CVector3@gen@@QBE_NXZ			; gen::CVector3::IsZero
PUBLIC	??Ggen@@YA?AVCVector3@0@ABV10@@Z		; gen::operator-
PUBLIC	?Cross@gen@@YA?AVCVector3@1@ABV21@0@Z		; gen::Cross
PUBLIC	??0CMatrix3x3@gen@@QAE@XZ			; gen::CMatrix3x3::CMatrix3x3
PUBLIC	??0CMatrix3x3@gen@@QAE@MMMMMMMMM@Z		; gen::CMatrix3x3::CMatrix3x3
PUBLIC	??0CMatrix3x3@gen@@QAE@PBM_N@Z			; gen::CMatrix3x3::CMatrix3x3
PUBLIC	??0CMatrix3x3@gen@@QAE@ABVCVector3@1@00_N@Z	; gen::CMatrix3x3::CMatrix3x3
PUBLIC	??0CMatrix3x3@gen@@QAE@ABVCVector2@1@00_N@Z	; gen::CMatrix3x3::CMatrix3x3
PUBLIC	??0CMatrix3x3@gen@@QAE@ABVCVector3@1@W4ERotationOrder@1@0@Z ; gen::CMatrix3x3::CMatrix3x3
PUBLIC	??0CMatrix3x3@gen@@QAE@ABVCQuaternion@1@ABVCVector3@1@@Z ; gen::CMatrix3x3::CMatrix3x3
PUBLIC	??0CMatrix3x3@gen@@QAE@ABVCVector3@1@M0@Z	; gen::CMatrix3x3::CMatrix3x3
PUBLIC	??0CMatrix3x3@gen@@QAE@ABVCVector2@1@@Z		; gen::CMatrix3x3::CMatrix3x3
PUBLIC	??0CMatrix3x3@gen@@QAE@ABVCVector2@1@M0@Z	; gen::CMatrix3x3::CMatrix3x3
PUBLIC	??0CMatrix3x3@gen@@QAE@ABVCMatrix2x2@1@ABVCVector2@1@@Z ; gen::CMatrix3x3::CMatrix3x3
PUBLIC	??0CMatrix3x3@gen@@QAE@ABV01@@Z			; gen::CMatrix3x3::CMatrix3x3
PUBLIC	??4CMatrix3x3@gen@@QAEAAV01@ABV01@@Z		; gen::CMatrix3x3::operator=
PUBLIC	?Set@CMatrix3x3@gen@@QAEXMMMMMMMMM@Z		; gen::CMatrix3x3::Set
PUBLIC	?Set@CMatrix3x3@gen@@QAEXPBM_N@Z		; gen::CMatrix3x3::Set
PUBLIC	?GetRow@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z	; gen::CMatrix3x3::GetRow
PUBLIC	?GetColumn@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z	; gen::CMatrix3x3::GetColumn
PUBLIC	?SetRow@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z	; gen::CMatrix3x3::SetRow
PUBLIC	?SetRow@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z	; gen::CMatrix3x3::SetRow
PUBLIC	?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z ; gen::CMatrix3x3::SetColumn
PUBLIC	?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z ; gen::CMatrix3x3::SetColumn
PUBLIC	?SetRows@CMatrix3x3@gen@@QAEXABVCVector3@2@00@Z	; gen::CMatrix3x3::SetRows
PUBLIC	?SetRows@CMatrix3x3@gen@@QAEXABVCVector2@2@00@Z	; gen::CMatrix3x3::SetRows
PUBLIC	?SetColumns@CMatrix3x3@gen@@QAEXABVCVector3@2@00@Z ; gen::CMatrix3x3::SetColumns
PUBLIC	?SetColumns@CMatrix3x3@gen@@QAEXABVCVector2@2@00@Z ; gen::CMatrix3x3::SetColumns
PUBLIC	?MakeTransformEuler@CMatrix3x3@gen@@QAEXABVCVector3@2@W4ERotationOrder@2@0@Z ; gen::CMatrix3x3::MakeTransformEuler
PUBLIC	?MakeTransformQuaternion@CMatrix3x3@gen@@QAEXABVCQuaternion@2@ABVCVector3@2@@Z ; gen::CMatrix3x3::MakeTransformQuaternion
PUBLIC	?MakeTransformAxisAngle@CMatrix3x3@gen@@QAEXABVCVector3@2@M0@Z ; gen::CMatrix3x3::MakeTransformAxisAngle
PUBLIC	?DecomposeTransformEuler@CMatrix3x3@gen@@QBEXPAVCVector3@2@0W4ERotationOrder@2@@Z ; gen::CMatrix3x3::DecomposeTransformEuler
PUBLIC	?DecomposeTransformQuaternion@CMatrix3x3@gen@@QBEXPAVCQuaternion@2@PAVCVector3@2@@Z ; gen::CMatrix3x3::DecomposeTransformQuaternion
PUBLIC	?DecomposeTransformAxisAngle@CMatrix3x3@gen@@QBEXPAVCVector3@2@PAM0@Z ; gen::CMatrix3x3::DecomposeTransformAxisAngle
PUBLIC	?MakeAffine2D@CMatrix3x3@gen@@QAEXABVCVector2@2@M0@Z ; gen::CMatrix3x3::MakeAffine2D
PUBLIC	?DecomposeAffine2D@CMatrix3x3@gen@@QBEXPAVCVector2@2@PAM0@Z ; gen::CMatrix3x3::DecomposeAffine2D
PUBLIC	?GetScale@CMatrix3x3@gen@@QBE?AVCVector3@2@XZ	; gen::CMatrix3x3::GetScale
PUBLIC	?SetScaleX@CMatrix3x3@gen@@QAEXM@Z		; gen::CMatrix3x3::SetScaleX
PUBLIC	?SetScaleY@CMatrix3x3@gen@@QAEXM@Z		; gen::CMatrix3x3::SetScaleY
PUBLIC	?SetScaleZ@CMatrix3x3@gen@@QAEXM@Z		; gen::CMatrix3x3::SetScaleZ
PUBLIC	?SetScale@CMatrix3x3@gen@@QAEXABVCVector3@2@@Z	; gen::CMatrix3x3::SetScale
PUBLIC	?SetScale@CMatrix3x3@gen@@QAEXM@Z		; gen::CMatrix3x3::SetScale
PUBLIC	?GetPosition2D@CMatrix3x3@gen@@QBE?AVCVector2@2@XZ ; gen::CMatrix3x3::GetPosition2D
PUBLIC	?GetScale2D@CMatrix3x3@gen@@QBE?AVCVector2@2@XZ	; gen::CMatrix3x3::GetScale2D
PUBLIC	?SetScaleX2D@CMatrix3x3@gen@@QAEXM@Z		; gen::CMatrix3x3::SetScaleX2D
PUBLIC	?SetScaleY2D@CMatrix3x3@gen@@QAEXM@Z		; gen::CMatrix3x3::SetScaleY2D
PUBLIC	?SetScale2D@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z ; gen::CMatrix3x3::SetScale2D
PUBLIC	?SetScale2D@CMatrix3x3@gen@@QAEXM@Z		; gen::CMatrix3x3::SetScale2D
PUBLIC	?IsIdentity@CMatrix3x3@gen@@QBE_NXZ		; gen::CMatrix3x3::IsIdentity
PUBLIC	?IsOrthogonal@CMatrix3x3@gen@@QBE_NXZ		; gen::CMatrix3x3::IsOrthogonal
PUBLIC	?IsOrthonormal@CMatrix3x3@gen@@QBE_NXZ		; gen::CMatrix3x3::IsOrthonormal
PUBLIC	?Orthogonalise@CMatrix3x3@gen@@QAEXABVCVector3@2@@Z ; gen::CMatrix3x3::Orthogonalise
PUBLIC	?IsOrthogonal2x2@CMatrix3x3@gen@@QBE_NXZ	; gen::CMatrix3x3::IsOrthogonal2x2
PUBLIC	?IsOrthonormal2x2@CMatrix3x3@gen@@QBE_NXZ	; gen::CMatrix3x3::IsOrthonormal2x2
PUBLIC	?Orthogonalise2x2@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z ; gen::CMatrix3x3::Orthogonalise2x2
PUBLIC	?Transpose@CMatrix3x3@gen@@QAEXXZ		; gen::CMatrix3x3::Transpose
PUBLIC	?InvertRotScale@CMatrix3x3@gen@@QAEXXZ		; gen::CMatrix3x3::InvertRotScale
PUBLIC	?InvertAffine2D@CMatrix3x3@gen@@QAEXXZ		; gen::CMatrix3x3::InvertAffine2D
PUBLIC	?Invert@CMatrix3x3@gen@@QAEXXZ			; gen::CMatrix3x3::Invert
PUBLIC	?MakeIdentity@CMatrix3x3@gen@@QAEXXZ		; gen::CMatrix3x3::MakeIdentity
PUBLIC	?MakeRotationX@CMatrix3x3@gen@@QAEXM@Z		; gen::CMatrix3x3::MakeRotationX
PUBLIC	?MakeRotationY@CMatrix3x3@gen@@QAEXM@Z		; gen::CMatrix3x3::MakeRotationY
PUBLIC	?MakeRotationZ@CMatrix3x3@gen@@QAEXM@Z		; gen::CMatrix3x3::MakeRotationZ
PUBLIC	?MakeRotation@CMatrix3x3@gen@@QAEXVCVector3@2@W4ERotationOrder@2@@Z ; gen::CMatrix3x3::MakeRotation
PUBLIC	?MakeRotation@CMatrix3x3@gen@@QAEXABVCVector3@2@M@Z ; gen::CMatrix3x3::MakeRotation
PUBLIC	?MakeScaling@CMatrix3x3@gen@@QAEXABVCVector3@2@@Z ; gen::CMatrix3x3::MakeScaling
PUBLIC	?MakeScaling@CMatrix3x3@gen@@QAEXM@Z		; gen::CMatrix3x3::MakeScaling
PUBLIC	?MakeTranslation2D@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z ; gen::CMatrix3x3::MakeTranslation2D
PUBLIC	?MakeRotation2D@CMatrix3x3@gen@@QAEXM@Z		; gen::CMatrix3x3::MakeRotation2D
PUBLIC	?MakeScaling2D@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z ; gen::CMatrix3x3::MakeScaling2D
PUBLIC	?MakeScaling2D@CMatrix3x3@gen@@QAEXM@Z		; gen::CMatrix3x3::MakeScaling2D
PUBLIC	?FaceDirection@CMatrix3x3@gen@@QAEXABVCVector3@2@0_N@Z ; gen::CMatrix3x3::FaceDirection
PUBLIC	?FaceTarget2D@CMatrix3x3@gen@@QAEXABVCVector2@2@_N1@Z ; gen::CMatrix3x3::FaceTarget2D
PUBLIC	?FaceDirection2D@CMatrix3x3@gen@@QAEXABVCVector2@2@_N1@Z ; gen::CMatrix3x3::FaceDirection2D
PUBLIC	??XCMatrix3x3@gen@@QAEAAV01@M@Z			; gen::CMatrix3x3::operator*=
PUBLIC	??_0CMatrix3x3@gen@@QAEAAV01@M@Z		; gen::CMatrix3x3::operator/=
PUBLIC	?Transform@CMatrix3x3@gen@@QBE?AVCVector3@2@ABV32@@Z ; gen::CMatrix3x3::Transform
PUBLIC	?TransformVector2D@CMatrix3x3@gen@@QBE?AVCVector2@2@ABV32@@Z ; gen::CMatrix3x3::TransformVector2D
PUBLIC	?TransformPoint2D@CMatrix3x3@gen@@QBE?AVCVector2@2@ABV32@@Z ; gen::CMatrix3x3::TransformPoint2D
PUBLIC	??XCMatrix3x3@gen@@QAEAAV01@ABV01@@Z		; gen::CMatrix3x3::operator*=
PUBLIC	?MultiplyAffine2D@CMatrix3x3@gen@@QAEAAV12@ABV12@@Z ; gen::CMatrix3x3::MultiplyAffine2D
PUBLIC	??8gen@@YA_NABVCMatrix3x3@0@0@Z			; gen::operator==
PUBLIC	??9gen@@YA_NABVCMatrix3x3@0@0@Z			; gen::operator!=
PUBLIC	??Dgen@@YA?AVCMatrix3x3@0@MABV10@@Z		; gen::operator*
PUBLIC	??Dgen@@YA?AVCMatrix3x3@0@ABV10@M@Z		; gen::operator*
PUBLIC	??Kgen@@YA?AVCMatrix3x3@0@ABV10@M@Z		; gen::operator/
PUBLIC	??Dgen@@YA?AVCVector3@0@ABV10@ABVCMatrix3x3@0@@Z ; gen::operator*
PUBLIC	??Dgen@@YA?AVCVector3@0@ABVCMatrix3x3@0@ABV10@@Z ; gen::operator*
PUBLIC	??Dgen@@YA?AVCMatrix3x3@0@ABV10@0@Z		; gen::operator*
PUBLIC	?MultiplyAffine2D@gen@@YA?AVCMatrix3x3@1@ABV21@0@Z ; gen::MultiplyAffine2D
PUBLIC	?Orthogonalise@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector3@1@@Z ; gen::Orthogonalise
PUBLIC	?Orthogonalise2x2@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector2@1@@Z ; gen::Orthogonalise2x2
PUBLIC	?Transpose@gen@@YA?AVCMatrix3x3@1@ABV21@@Z	; gen::Transpose
PUBLIC	?InverseRotScale@gen@@YA?AVCMatrix3x3@1@ABV21@@Z ; gen::InverseRotScale
PUBLIC	?InverseAffine2D@gen@@YA?AVCMatrix3x3@1@ABV21@@Z ; gen::InverseAffine2D
PUBLIC	?Inverse@gen@@YA?AVCMatrix3x3@1@ABV21@@Z	; gen::Inverse
PUBLIC	?Matrix3x3Identity@gen@@YA?AVCMatrix3x3@1@XZ	; gen::Matrix3x3Identity
PUBLIC	?Matrix3x3RotationX@gen@@YA?AVCMatrix3x3@1@M@Z	; gen::Matrix3x3RotationX
PUBLIC	?Matrix3x3RotationY@gen@@YA?AVCMatrix3x3@1@M@Z	; gen::Matrix3x3RotationY
PUBLIC	?Matrix3x3RotationZ@gen@@YA?AVCMatrix3x3@1@M@Z	; gen::Matrix3x3RotationZ
PUBLIC	?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@VCVector3@1@W4ERotationOrder@1@@Z ; gen::Matrix3x3Rotation
PUBLIC	?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@ABVCVector3@1@M@Z ; gen::Matrix3x3Rotation
PUBLIC	?Matrix3x3Scaling@gen@@YA?AVCMatrix3x3@1@ABVCVector3@1@@Z ; gen::Matrix3x3Scaling
PUBLIC	?Matrix3x3Scaling@gen@@YA?AVCMatrix3x3@1@M@Z	; gen::Matrix3x3Scaling
PUBLIC	?MatrixTranslation2D@gen@@YA?AVCMatrix3x3@1@ABVCVector2@1@@Z ; gen::MatrixTranslation2D
PUBLIC	?MatrixRotation2D@gen@@YA?AVCMatrix3x3@1@M@Z	; gen::MatrixRotation2D
PUBLIC	?MatrixScaling2D@gen@@YA?AVCMatrix3x3@1@ABVCVector2@1@@Z ; gen::MatrixScaling2D
PUBLIC	?MatrixScaling2D@gen@@YA?AVCMatrix3x3@1@M@Z	; gen::MatrixScaling2D
PUBLIC	?MatrixFaceDirection@gen@@YA?AVCMatrix3x3@1@ABVCVector3@1@0_N@Z ; gen::MatrixFaceDirection
PUBLIC	?MatrixFaceTarget2D@gen@@YA?AVCMatrix3x3@1@ABVCVector2@1@0_N1@Z ; gen::MatrixFaceTarget2D
PUBLIC	?MatrixFaceDirection2D@gen@@YA?AVCMatrix3x3@1@ABVCVector2@1@0_N1@Z ; gen::MatrixFaceDirection2D
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
PUBLIC	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
PUBLIC	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_C@_0O@BFJCFAAK@unknown?5error?$AA@		; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7_System_error_category@std@@6B@		; std::_System_error_category::`vftable'
PUBLIC	??_C@_06FHFOAHML@system?$AA@			; `string'
PUBLIC	?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
PUBLIC	?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
PUBLIC	?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
PUBLIC	?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
PUBLIC	?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
PUBLIC	??_C@_0CB@NBMGHEOM@Visual?5C?$CL?$CL?58?40?5?$CI2005?$CJ?5or?5greater@ ; `string'
PUBLIC	??_C@_01KICIPPFI@?2?$AA@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_0BE@HBKCGNOA@Unhandled?5Exception?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??InvSqrt@gen@@YAMM@Z@4JA	; `gen::InvSqrt'::`2'::__LINE__Var
PUBLIC	__TI1?AVCFatalException@gen@@
PUBLIC	__CTA1?AVCFatalException@gen@@
PUBLIC	??_R0?AVCFatalException@gen@@@8			; gen::CFatalException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVCFatalException@gen@@@8??0CFatalException@gen@@QAE@ABV01@@Z88
PUBLIC	??_C@_0FJ@NFAFHCB@c?3?2users?2simon?2documents?2github?2@ ; `string'
PUBLIC	??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@	; `string'
PUBLIC	??_C@_0N@HFKAOJGM@gen?3?3InvSqrt?$AA@		; `string'
PUBLIC	??_C@_0BA@KCKIPOBF@gen?3?3operator?5?1?$AA@	; `string'
PUBLIC	??_C@_0FJ@ELBJOFGC@c?3?2users?2simon?2documents?2github?2@ ; `string'
PUBLIC	??_C@_0BI@EGGHICIL@gen?3?3CVector3?3?3CVector3?$AA@ ; `string'
PUBLIC	?kIdentity@CMatrix3x3@gen@@2V12@B		; gen::CMatrix3x3::kIdentity
PUBLIC	??_C@_0BA@EJDDFENM@Singular?5matrix?$AA@	; `string'
PUBLIC	?__LINE__Var@?1???0CMatrix3x3@gen@@QAE@PBM_N@Z@4JA ; `gen::CMatrix3x3::CMatrix3x3'::`2'::__LINE__Var
PUBLIC	??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@ ; `string'
PUBLIC	??_C@_0BM@PKFIPCCH@gen?3?3CMatrix3x3?3?3CMatrix3x3?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??Set@CMatrix3x3@gen@@QAEXPBM_N@Z@4JA ; `gen::CMatrix3x3::Set'::`2'::__LINE__Var
PUBLIC	??_C@_0BF@BKFLDEDO@gen?3?3CMatrix3x3?3?3Set?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??GetRow@CMatrix3x3@gen@@QBE?AVCVector3@3@I@Z@4JA ; `gen::CMatrix3x3::GetRow'::`2'::__LINE__Var
PUBLIC	??_C@_0BI@LIAGKPND@gen?3?3CMatrix3x3?3?3GetRow?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??GetColumn@CMatrix3x3@gen@@QBE?AVCVector3@3@I@Z@4JA ; `gen::CMatrix3x3::GetColumn'::`2'::__LINE__Var
PUBLIC	??_C@_0BL@HODKPBNP@gen?3?3CMatrix3x3?3?3GetColumn?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??SetRow@CMatrix3x3@gen@@QAEXIABVCVector3@3@@Z@4JA ; `gen::CMatrix3x3::SetRow'::`2'::__LINE__Var
PUBLIC	??_C@_0BI@CLJHBHAO@gen?3?3CMatrix3x3?3?3SetRow?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??SetRow@CMatrix3x3@gen@@QAEXIABVCVector2@3@@Z@4JA ; `gen::CMatrix3x3::SetRow'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??SetColumn@CMatrix3x3@gen@@QAEXIABVCVector3@3@@Z@4JA ; `gen::CMatrix3x3::SetColumn'::`2'::__LINE__Var
PUBLIC	??_C@_0BL@FAHPNAEN@gen?3?3CMatrix3x3?3?3SetColumn?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??SetColumn@CMatrix3x3@gen@@QAEXIABVCVector2@3@@Z@4JA ; `gen::CMatrix3x3::SetColumn'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??DecomposeTransformEuler@CMatrix3x3@gen@@QBEXPAVCVector3@3@0W4ERotationOrder@3@@Z@4JA ; `gen::CMatrix3x3::DecomposeTransformEuler'::`2'::__LINE__Var
PUBLIC	??_C@_0CJ@DHMHJNHL@gen?3?3CMatrix3x3?3?3DecomposeTransf@ ; `string'
PUBLIC	?__LINE__Var@?1??DecomposeTransformQuaternion@CMatrix3x3@gen@@QBEXPAVCQuaternion@3@PAVCVector3@3@@Z@4JA ; `gen::CMatrix3x3::DecomposeTransformQuaternion'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??DecomposeTransformAxisAngle@CMatrix3x3@gen@@QBEXPAVCVector3@3@PAM0@Z@4JA ; `gen::CMatrix3x3::DecomposeTransformAxisAngle'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1??DecomposeAffine2D@CMatrix3x3@gen@@QBEXPAVCVector2@3@PAM0@Z@4JA ; `gen::CMatrix3x3::DecomposeAffine2D'::`2'::__LINE__Var
PUBLIC	??_C@_0CD@GODDIFLH@gen?3?3CMatrix3x3?3?3DecomposeAffine@ ; `string'
PUBLIC	?__LINE__Var@?1??Orthogonalise@CMatrix3x3@gen@@QAEXABVCVector3@3@@Z@4JA ; `gen::CMatrix3x3::Orthogonalise'::`2'::__LINE__Var
PUBLIC	??_C@_0BP@PMPEPEBF@gen?3?3CMatrix3x3?3?3Orthogonalise?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??Orthogonalise@gen@@YA?AVCMatrix3x3@2@ABV32@ABVCVector3@2@@Z@4JA ; `gen::Orthogonalise'::`2'::__LINE__Var
PUBLIC	??_C@_0BD@MGLNMEBA@gen?3?3Orthogonalise?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??Orthogonalise2x2@CMatrix3x3@gen@@QAEXABVCVector2@3@@Z@4JA ; `gen::CMatrix3x3::Orthogonalise2x2'::`2'::__LINE__Var
PUBLIC	??_C@_0CC@DNFNCOGI@gen?3?3CMatrix3x3?3?3Orthogonalise2x@ ; `string'
PUBLIC	?__LINE__Var@?1??Orthogonalise2x2@gen@@YA?AVCMatrix3x3@2@ABV32@ABVCVector2@2@@Z@4JA ; `gen::Orthogonalise2x2'::`2'::__LINE__Var
PUBLIC	??_C@_0BG@OLNACDHO@gen?3?3Orthogonalise2x2?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??InvertRotScale@CMatrix3x3@gen@@QAEXXZ@4JA ; `gen::CMatrix3x3::InvertRotScale'::`2'::__LINE__Var
PUBLIC	??_C@_0CA@CAHBGMPM@gen?3?3CMatrix3x3?3?3InvertRotScale?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??InverseRotScale@gen@@YA?AVCMatrix3x3@2@ABV32@@Z@4JA ; `gen::InverseRotScale'::`2'::__LINE__Var
PUBLIC	??_C@_0BF@CDKPJIKO@gen?3?3InverseRotScale?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??InvertAffine2D@CMatrix3x3@gen@@QAEXXZ@4JA ; `gen::CMatrix3x3::InvertAffine2D'::`2'::__LINE__Var
PUBLIC	??_C@_0CA@GCJMOFPA@gen?3?3CMatrix3x3?3?3InvertAffine2D?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??InverseAffine2D@gen@@YA?AVCMatrix3x3@2@ABV32@@Z@4JA ; `gen::InverseAffine2D'::`2'::__LINE__Var
PUBLIC	??_C@_0BF@GBECBBKC@gen?3?3InverseAffine2D?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??Inverse@gen@@YA?AVCMatrix3x3@2@ABV32@@Z@4JA ; `gen::Inverse'::`2'::__LINE__Var
PUBLIC	??_C@_0N@BLGPECID@gen?3?3Inverse?$AA@		; `string'
PUBLIC	?__LINE__Var@?1??MakeRotation@CMatrix3x3@gen@@QAEXVCVector3@3@W4ERotationOrder@3@@Z@4JA ; `gen::CMatrix3x3::MakeRotation'::`2'::__LINE__Var
PUBLIC	??_C@_0BO@FPKFHDMJ@gen?3?3CMatrix3x3?3?3MakeRotation?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??MakeRotation@CMatrix3x3@gen@@QAEXABVCVector3@3@M@Z@4JA ; `gen::CMatrix3x3::MakeRotation'::`2'::__LINE__Var
PUBLIC	??_C@_0BB@OPALDBID@Zero?5length?5axis?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@2@VCVector3@2@W4ERotationOrder@2@@Z@4JA ; `gen::Matrix3x3Rotation'::`2'::__LINE__Var
PUBLIC	??_C@_0BH@KCOELIJE@gen?3?3Matrix3x3Rotation?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1??Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@2@ABVCVector3@2@M@Z@4JA ; `gen::Matrix3x3Rotation'::`2'::__LINE__Var
PUBLIC	?__LINE__Var@?1???_0CMatrix3x3@gen@@QAEAAV12@M@Z@4JA ; `gen::CMatrix3x3::operator/='::`2'::__LINE__Var
PUBLIC	??_C@_0BN@NPNEBJPA@gen?3?3CMatrix3x3?3?3operator?5?1?$DN?$AA@ ; `string'
PUBLIC	?__LINE__Var@?1???Kgen@@YA?AVCMatrix3x3@1@ABV21@M@Z@4JA ; `gen::operator/'::`2'::__LINE__Var
PUBLIC	??_C@_1IO@BLKJFPEG@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error_category@std@@6B@		; std::_System_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_System_error_category@std@@@8		; std::_System_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_System_error_category@std@@8		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error_category@std@@8		; std::_System_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error_category@std@@8	; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	_abs:PROC
EXTRN	_acos:PROC
EXTRN	_atan2:PROC
EXTRN	_cos:PROC
EXTRN	_fabs:PROC
EXTRN	_sin:PROC
EXTRN	_sqrt:PROC
EXTRN	_memcpy:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__memmove:PROC
EXTRN	__imp_?_Debug_message@std@@YAXPB_W0I@Z:PROC
EXTRN	__imp_??0_Container_base12@std@@QAE@XZ:PROC
EXTRN	__imp_??1_Container_base12@std@@QAE@XZ:PROC
EXTRN	__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ:PROC
EXTRN	__imp_?_Xbad_alloc@std@@YAXXZ:PROC
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
EXTRN	__imp_?_Xout_of_range@std@@YAXPBD@Z:PROC
EXTRN	__imp_??0id@locale@std@@QAE@I@Z:PROC
EXTRN	??_Eerror_category@std@@UAEPAXI@Z:PROC		; std::error_category::`vector deleting destructor'
EXTRN	__imp_?_Syserror_map@std@@YAPBDH@Z:PROC
EXTRN	__imp_?_Winerror_map@std@@YAPBDH@Z:PROC
EXTRN	??_E_Generic_error_category@std@@UAEPAXI@Z:PROC	; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_E_System_error_category@std@@UAEPAXI@Z:PROC	; std::_System_error_category::`vector deleting destructor'
EXTRN	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z:PROC ; gen::CFatalException::AppendToCallStack
EXTRN	?Normalise@gen@@YA?AVCVector2@1@ABV21@@Z:PROC	; gen::Normalise
EXTRN	?Normalise@CVector3@gen@@QAEXXZ:PROC		; gen::CVector3::Normalise
EXTRN	?Normalise@gen@@YA?AVCVector3@1@ABV21@@Z:PROC	; gen::Normalise
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?kZAxis@CVector3@gen@@2V12@B:BYTE		; gen::CVector3::kZAxis
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
_BSS	SEGMENT
?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Generic_object
_BSS	ENDS
;	COMDAT ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
_BSS	SEGMENT
?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_Iostream_object
_BSS	ENDS
;	COMDAT ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
_BSS	SEGMENT
?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A DD 01H DUP (?) ; std::_Error_objects<int>::_System_object
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

_ksCompiler DB	01cH DUP (?)
_ksPathSeparator DB 01cH DUP (?)
_ksNewline DB	01cH DUP (?)
?kIdentity@CMatrix3x3@gen@@2V12@B DB 024H DUP (?)	; gen::CMatrix3x3::kIdentity
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error_category@std@@8 DD FLAT:??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error_category@std@@8
rdata$r	SEGMENT
??_R2_System_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error_category@std@@8
rdata$r	SEGMENT
??_R3_System_error_category@std@@8 DD 00H		; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_System_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_System_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_System_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_System_error_category@std@@6B@ DD 00H		; std::_System_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error_category@std@@@8
	DD	FLAT:??_R3_System_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD FLAT:??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 00H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category@std@@@8
	DD	FLAT:??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD FLAT:??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD FLAT:??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
_DATA	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Generic_error_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 00H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Generic_error_category@std@@@8
	DD	FLAT:??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
_DATA	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
_DATA	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 00H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVerror_category@std@@@8
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p'
	DB	00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1IO@BLKJFPEG@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
CONST	SEGMENT
??_C@_1IO@BLKJFPEG@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, '1', 00H, '1', 00H, '.', 00H, '0', 00H, '\', 00H, 'v'
	DB	00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l', 00H
	DB	'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 's', 00H, 't'
	DB	00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1???Kgen@@YA?AVCMatrix3x3@1@ABV21@M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1???Kgen@@YA?AVCMatrix3x3@1@ABV21@M@Z@4JA DD 0bc3H ; `gen::operator/'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BN@NPNEBJPA@gen?3?3CMatrix3x3?3?3operator?5?1?$DN?$AA@
CONST	SEGMENT
??_C@_0BN@NPNEBJPA@gen?3?3CMatrix3x3?3?3operator?5?1?$DN?$AA@ DB 'gen::CM'
	DB	'atrix3x3::operator /=', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1???_0CMatrix3x3@gen@@QAEAAV12@M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1???_0CMatrix3x3@gen@@QAEAAV12@M@Z@4JA DD 0baaH ; `gen::CMatrix3x3::operator/='::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@2@ABVCVector3@2@M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@2@ABVCVector3@2@M@Z@4JA DD 0944H ; `gen::Matrix3x3Rotation'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BH@KCOELIJE@gen?3?3Matrix3x3Rotation?$AA@
CONST	SEGMENT
??_C@_0BH@KCOELIJE@gen?3?3Matrix3x3Rotation?$AA@ DB 'gen::Matrix3x3Rotati'
	DB	'on', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@2@VCVector3@2@W4ERotationOrder@2@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@2@VCVector3@2@W4ERotationOrder@2@@Z@4JA DD 08cdH ; `gen::Matrix3x3Rotation'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BB@OPALDBID@Zero?5length?5axis?$AA@
CONST	SEGMENT
??_C@_0BB@OPALDBID@Zero?5length?5axis?$AA@ DB 'Zero length axis', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??MakeRotation@CMatrix3x3@gen@@QAEXABVCVector3@3@M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??MakeRotation@CMatrix3x3@gen@@QAEXABVCVector3@3@M@Z@4JA DD 0821H ; `gen::CMatrix3x3::MakeRotation'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BO@FPKFHDMJ@gen?3?3CMatrix3x3?3?3MakeRotation?$AA@
CONST	SEGMENT
??_C@_0BO@FPKFHDMJ@gen?3?3CMatrix3x3?3?3MakeRotation?$AA@ DB 'gen::CMatri'
	DB	'x3x3::MakeRotation', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??MakeRotation@CMatrix3x3@gen@@QAEXVCVector3@3@W4ERotationOrder@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??MakeRotation@CMatrix3x3@gen@@QAEXVCVector3@3@W4ERotationOrder@3@@Z@4JA DD 07afH ; `gen::CMatrix3x3::MakeRotation'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0N@BLGPECID@gen?3?3Inverse?$AA@
CONST	SEGMENT
??_C@_0N@BLGPECID@gen?3?3Inverse?$AA@ DB 'gen::Inverse', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Inverse@gen@@YA?AVCMatrix3x3@2@ABV32@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Inverse@gen@@YA?AVCMatrix3x3@2@ABV32@@Z@4JA DD 073aH ; `gen::Inverse'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BF@GBECBBKC@gen?3?3InverseAffine2D?$AA@
CONST	SEGMENT
??_C@_0BF@GBECBBKC@gen?3?3InverseAffine2D?$AA@ DB 'gen::InverseAffine2D', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??InverseAffine2D@gen@@YA?AVCMatrix3x3@2@ABV32@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??InverseAffine2D@gen@@YA?AVCMatrix3x3@2@ABV32@@Z@4JA DD 0714H ; `gen::InverseAffine2D'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CA@GCJMOFPA@gen?3?3CMatrix3x3?3?3InvertAffine2D?$AA@
CONST	SEGMENT
??_C@_0CA@GCJMOFPA@gen?3?3CMatrix3x3?3?3InvertAffine2D?$AA@ DB 'gen::CMat'
	DB	'rix3x3::InvertAffine2D', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??InvertAffine2D@CMatrix3x3@gen@@QAEXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??InvertAffine2D@CMatrix3x3@gen@@QAEXXZ@4JA DD 06faH ; `gen::CMatrix3x3::InvertAffine2D'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BF@CDKPJIKO@gen?3?3InverseRotScale?$AA@
CONST	SEGMENT
??_C@_0BF@CDKPJIKO@gen?3?3InverseRotScale?$AA@ DB 'gen::InverseRotScale', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??InverseRotScale@gen@@YA?AVCMatrix3x3@2@ABV32@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??InverseRotScale@gen@@YA?AVCMatrix3x3@2@ABV32@@Z@4JA DD 06d5H ; `gen::InverseRotScale'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CA@CAHBGMPM@gen?3?3CMatrix3x3?3?3InvertRotScale?$AA@
CONST	SEGMENT
??_C@_0CA@CAHBGMPM@gen?3?3CMatrix3x3?3?3InvertRotScale?$AA@ DB 'gen::CMat'
	DB	'rix3x3::InvertRotScale', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??InvertRotScale@CMatrix3x3@gen@@QAEXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?1??InvertRotScale@CMatrix3x3@gen@@QAEXXZ@4JA DD 06afH ; `gen::CMatrix3x3::InvertRotScale'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BG@OLNACDHO@gen?3?3Orthogonalise2x2?$AA@
CONST	SEGMENT
??_C@_0BG@OLNACDHO@gen?3?3Orthogonalise2x2?$AA@ DB 'gen::Orthogonalise2x2'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Orthogonalise2x2@gen@@YA?AVCMatrix3x3@2@ABV32@ABVCVector2@2@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Orthogonalise2x2@gen@@YA?AVCMatrix3x3@2@ABV32@ABVCVector2@2@@Z@4JA DD 0659H ; `gen::Orthogonalise2x2'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CC@DNFNCOGI@gen?3?3CMatrix3x3?3?3Orthogonalise2x@
CONST	SEGMENT
??_C@_0CC@DNFNCOGI@gen?3?3CMatrix3x3?3?3Orthogonalise2x@ DB 'gen::CMatrix'
	DB	'3x3::Orthogonalise2x2', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Orthogonalise2x2@CMatrix3x3@gen@@QAEXABVCVector2@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Orthogonalise2x2@CMatrix3x3@gen@@QAEXABVCVector2@3@@Z@4JA DD 062fH ; `gen::CMatrix3x3::Orthogonalise2x2'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BD@MGLNMEBA@gen?3?3Orthogonalise?$AA@
CONST	SEGMENT
??_C@_0BD@MGLNMEBA@gen?3?3Orthogonalise?$AA@ DB 'gen::Orthogonalise', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Orthogonalise@gen@@YA?AVCMatrix3x3@2@ABV32@ABVCVector3@2@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Orthogonalise@gen@@YA?AVCMatrix3x3@2@ABV32@ABVCVector3@2@@Z@4JA DD 05e7H ; `gen::Orthogonalise'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BP@PMPEPEBF@gen?3?3CMatrix3x3?3?3Orthogonalise?$AA@
CONST	SEGMENT
??_C@_0BP@PMPEPEBF@gen?3?3CMatrix3x3?3?3Orthogonalise?$AA@ DB 'gen::CMatr'
	DB	'ix3x3::Orthogonalise', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Orthogonalise@CMatrix3x3@gen@@QAEXABVCVector3@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Orthogonalise@CMatrix3x3@gen@@QAEXABVCVector3@3@@Z@4JA DD 05b0H ; `gen::CMatrix3x3::Orthogonalise'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CD@GODDIFLH@gen?3?3CMatrix3x3?3?3DecomposeAffine@
CONST	SEGMENT
??_C@_0CD@GODDIFLH@gen?3?3CMatrix3x3?3?3DecomposeAffine@ DB 'gen::CMatrix'
	DB	'3x3::DecomposeAffine2D', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??DecomposeAffine2D@CMatrix3x3@gen@@QBEXPAVCVector2@3@PAM0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??DecomposeAffine2D@CMatrix3x3@gen@@QBEXPAVCVector2@3@PAM0@Z@4JA DD 048cH ; `gen::CMatrix3x3::DecomposeAffine2D'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??DecomposeTransformAxisAngle@CMatrix3x3@gen@@QBEXPAVCVector3@3@PAM0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??DecomposeTransformAxisAngle@CMatrix3x3@gen@@QBEXPAVCVector3@3@PAM0@Z@4JA DD 0401H ; `gen::CMatrix3x3::DecomposeTransformAxisAngle'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??DecomposeTransformQuaternion@CMatrix3x3@gen@@QBEXPAVCQuaternion@3@PAVCVector3@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??DecomposeTransformQuaternion@CMatrix3x3@gen@@QBEXPAVCQuaternion@3@PAVCVector3@3@@Z@4JA DD 03a1H ; `gen::CMatrix3x3::DecomposeTransformQuaternion'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CJ@DHMHJNHL@gen?3?3CMatrix3x3?3?3DecomposeTransf@
CONST	SEGMENT
??_C@_0CJ@DHMHJNHL@gen?3?3CMatrix3x3?3?3DecomposeTransf@ DB 'gen::CMatrix'
	DB	'3x3::DecomposeTransformEuler', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??DecomposeTransformEuler@CMatrix3x3@gen@@QBEXPAVCVector3@3@0W4ERotationOrder@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??DecomposeTransformEuler@CMatrix3x3@gen@@QBEXPAVCVector3@3@0W4ERotationOrder@3@@Z@4JA DD 02dcH ; `gen::CMatrix3x3::DecomposeTransformEuler'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??SetColumn@CMatrix3x3@gen@@QAEXIABVCVector2@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??SetColumn@CMatrix3x3@gen@@QAEXIABVCVector2@3@@Z@4JA DD 020fH ; `gen::CMatrix3x3::SetColumn'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BL@FAHPNAEN@gen?3?3CMatrix3x3?3?3SetColumn?$AA@
CONST	SEGMENT
??_C@_0BL@FAHPNAEN@gen?3?3CMatrix3x3?3?3SetColumn?$AA@ DB 'gen::CMatrix3x'
	DB	'3::SetColumn', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??SetColumn@CMatrix3x3@gen@@QAEXIABVCVector3@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??SetColumn@CMatrix3x3@gen@@QAEXIABVCVector3@3@@Z@4JA DD 01fdH ; `gen::CMatrix3x3::SetColumn'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?1??SetRow@CMatrix3x3@gen@@QAEXIABVCVector2@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??SetRow@CMatrix3x3@gen@@QAEXIABVCVector2@3@@Z@4JA DD 01ebH ; `gen::CMatrix3x3::SetRow'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BI@CLJHBHAO@gen?3?3CMatrix3x3?3?3SetRow?$AA@
CONST	SEGMENT
??_C@_0BI@CLJHBHAO@gen?3?3CMatrix3x3?3?3SetRow?$AA@ DB 'gen::CMatrix3x3::'
	DB	'SetRow', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??SetRow@CMatrix3x3@gen@@QAEXIABVCVector3@3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??SetRow@CMatrix3x3@gen@@QAEXIABVCVector3@3@@Z@4JA DD 01d9H ; `gen::CMatrix3x3::SetRow'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BL@HODKPBNP@gen?3?3CMatrix3x3?3?3GetColumn?$AA@
CONST	SEGMENT
??_C@_0BL@HODKPBNP@gen?3?3CMatrix3x3?3?3GetColumn?$AA@ DB 'gen::CMatrix3x'
	DB	'3::GetColumn', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??GetColumn@CMatrix3x3@gen@@QBE?AVCVector3@3@I@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetColumn@CMatrix3x3@gen@@QBE?AVCVector3@3@I@Z@4JA DD 01c8H ; `gen::CMatrix3x3::GetColumn'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BI@LIAGKPND@gen?3?3CMatrix3x3?3?3GetRow?$AA@
CONST	SEGMENT
??_C@_0BI@LIAGKPND@gen?3?3CMatrix3x3?3?3GetRow?$AA@ DB 'gen::CMatrix3x3::'
	DB	'GetRow', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??GetRow@CMatrix3x3@gen@@QBE?AVCVector3@3@I@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??GetRow@CMatrix3x3@gen@@QBE?AVCVector3@3@I@Z@4JA DD 01bdH ; `gen::CMatrix3x3::GetRow'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BF@BKFLDEDO@gen?3?3CMatrix3x3?3?3Set?$AA@
CONST	SEGMENT
??_C@_0BF@BKFLDEDO@gen?3?3CMatrix3x3?3?3Set?$AA@ DB 'gen::CMatrix3x3::Set'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Set@CMatrix3x3@gen@@QAEXPBM_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Set@CMatrix3x3@gen@@QAEXPBM_N@Z@4JA DD 0192H ; `gen::CMatrix3x3::Set'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BM@PKFIPCCH@gen?3?3CMatrix3x3?3?3CMatrix3x3?$AA@
CONST	SEGMENT
??_C@_0BM@PKFIPCCH@gen?3?3CMatrix3x3?3?3CMatrix3x3?$AA@ DB 'gen::CMatrix3'
	DB	'x3::CMatrix3x3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
CONST	SEGMENT
??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@ DB 'c:\users\s'
	DB	'imon\documents\github\uclan-sparta\dissertation project\impor'
	DB	't\math\cmatrix3x3.cpp', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1???0CMatrix3x3@gen@@QAE@PBM_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1???0CMatrix3x3@gen@@QAE@PBM_N@Z@4JA DD 03bH ; `gen::CMatrix3x3::CMatrix3x3'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BA@EJDDFENM@Singular?5matrix?$AA@
CONST	SEGMENT
??_C@_0BA@EJDDFENM@Singular?5matrix?$AA@ DB 'Singular matrix', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EGGHICIL@gen?3?3CVector3?3?3CVector3?$AA@
CONST	SEGMENT
??_C@_0BI@EGGHICIL@gen?3?3CVector3?3?3CVector3?$AA@ DB 'gen::CVector3::CV'
	DB	'ector3', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FJ@ELBJOFGC@c?3?2users?2simon?2documents?2github?2@
CONST	SEGMENT
??_C@_0FJ@ELBJOFGC@c?3?2users?2simon?2documents?2github?2@ DB 'c:\users\s'
	DB	'imon\documents\github\uclan-sparta\dissertation project\impor'
	DB	't\math\cvector3.h', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KCKIPOBF@gen?3?3operator?5?1?$AA@
CONST	SEGMENT
??_C@_0BA@KCKIPOBF@gen?3?3operator?5?1?$AA@ DB 'gen::operator /', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HFKAOJGM@gen?3?3InvSqrt?$AA@
CONST	SEGMENT
??_C@_0N@HFKAOJGM@gen?3?3InvSqrt?$AA@ DB 'gen::InvSqrt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@
CONST	SEGMENT
??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@ DB 'Invalid parameter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FJ@NFAFHCB@c?3?2users?2simon?2documents?2github?2@
CONST	SEGMENT
??_C@_0FJ@NFAFHCB@c?3?2users?2simon?2documents?2github?2@ DB 'c:\users\si'
	DB	'mon\documents\github\uclan-sparta\dissertation project\import'
	DB	'\math\basemath.h', 00H			; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVCFatalException@gen@@@8??0CFatalException@gen@@QAE@ABV01@@Z88
xdata$x	SEGMENT
__CT??_R0?AVCFatalException@gen@@@8??0CFatalException@gen@@QAE@ABV01@@Z88 DD 00H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	058H
	DD	FLAT:??0CFatalException@gen@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVCFatalException@gen@@@8
_DATA	SEGMENT
??_R0?AVCFatalException@gen@@@8 DD FLAT:??_7type_info@@6B@ ; gen::CFatalException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCFatalException@gen@@', 00H
_DATA	ENDS
;	COMDAT __CTA1?AVCFatalException@gen@@
xdata$x	SEGMENT
__CTA1?AVCFatalException@gen@@ DD 01H
	DD	FLAT:__CT??_R0?AVCFatalException@gen@@@8??0CFatalException@gen@@QAE@ABV01@@Z88
xdata$x	ENDS
;	COMDAT __TI1?AVCFatalException@gen@@
xdata$x	SEGMENT
__TI1?AVCFatalException@gen@@ DD 00H
	DD	FLAT:??1CFatalException@gen@@QAE@XZ
	DD	00H
	DD	FLAT:__CTA1?AVCFatalException@gen@@
xdata$x	ENDS
;	COMDAT ?__LINE__Var@?1??InvSqrt@gen@@YAMM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??InvSqrt@gen@@YAMM@Z@4JA DD 09eH	; `gen::InvSqrt'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BE@HBKCGNOA@Unhandled?5Exception?$AA@
CONST	SEGMENT
??_C@_0BE@HBKCGNOA@Unhandled?5Exception?$AA@ DB 'Unhandled Exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KICIPPFI@?2?$AA@
CONST	SEGMENT
??_C@_01KICIPPFI@?2?$AA@ DB '\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NBMGHEOM@Visual?5C?$CL?$CL?58?40?5?$CI2005?$CJ?5or?5greater@
CONST	SEGMENT
??_C@_0CB@NBMGHEOM@Visual?5C?$CL?$CL?58?40?5?$CI2005?$CJ?5or?5greater@ DB 'V'
	DB	'isual C++ 8.0 (2005) or greater', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FHFOAHML@system?$AA@
CONST	SEGMENT
??_C@_06FHFOAHML@system?$AA@ DB 'system', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_System_error_category@std@@6B@
CONST	SEGMENT
??_7_System_error_category@std@@6B@ DD FLAT:??_R4_System_error_category@std@@6B@ ; std::_System_error_category::`vftable'
	DD	FLAT:??_E_System_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_System_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DD FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DD	FLAT:??_E_Iostream_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
CONST	SEGMENT
??_C@_0O@BFJCFAAK@unknown?5error?$AA@ DB 'unknown error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DD FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DD	FLAT:??_E_Generic_error_category@std@@UAEPAXI@Z
	DD	FLAT:?name@_Generic_error_category@std@@UBEPBDXZ
	DD	FLAT:?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DD FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DD	FLAT:??_Eerror_category@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
CONST	SEGMENT
?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB DD 0ffffffffH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0
__ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@ABVCVector3@1@M@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@ABVCVector3@1@M@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@ABVCVector3@1@M@Z$3
__catchsym$?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@ABVCVector3@1@M@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffff14H
	DD	FLAT:__catch$?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@ABVCVector3@1@M@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@ABVCVector3@1@M@Z$1
__ehfuncinfo$?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@ABVCVector3@1@M@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@ABVCVector3@1@M@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@ABVCVector3@1@M@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@VCVector3@1@W4ERotationOrder@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@VCVector3@1@W4ERotationOrder@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@VCVector3@1@W4ERotationOrder@1@@Z$3
__catchsym$?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@VCVector3@1@W4ERotationOrder@1@@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffff70H
	DD	FLAT:__catch$?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@VCVector3@1@W4ERotationOrder@1@@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@VCVector3@1@W4ERotationOrder@1@@Z$1
__ehfuncinfo$?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@VCVector3@1@W4ERotationOrder@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@VCVector3@1@W4ERotationOrder@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@VCVector3@1@W4ERotationOrder@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Inverse@gen@@YA?AVCMatrix3x3@1@ABV21@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?Inverse@gen@@YA?AVCMatrix3x3@1@ABV21@@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?Inverse@gen@@YA?AVCMatrix3x3@1@ABV21@@Z$3
__catchsym$?Inverse@gen@@YA?AVCMatrix3x3@1@ABV21@@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffff7cH
	DD	FLAT:__catch$?Inverse@gen@@YA?AVCMatrix3x3@1@ABV21@@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Inverse@gen@@YA?AVCMatrix3x3@1@ABV21@@Z$1
__ehfuncinfo$?Inverse@gen@@YA?AVCMatrix3x3@1@ABV21@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Inverse@gen@@YA?AVCMatrix3x3@1@ABV21@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Inverse@gen@@YA?AVCMatrix3x3@1@ABV21@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?InverseAffine2D@gen@@YA?AVCMatrix3x3@1@ABV21@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?InverseAffine2D@gen@@YA?AVCMatrix3x3@1@ABV21@@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?InverseAffine2D@gen@@YA?AVCMatrix3x3@1@ABV21@@Z$3
__catchsym$?InverseAffine2D@gen@@YA?AVCMatrix3x3@1@ABV21@@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffa0H
	DD	FLAT:__catch$?InverseAffine2D@gen@@YA?AVCMatrix3x3@1@ABV21@@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?InverseAffine2D@gen@@YA?AVCMatrix3x3@1@ABV21@@Z$1
__ehfuncinfo$?InverseAffine2D@gen@@YA?AVCMatrix3x3@1@ABV21@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?InverseAffine2D@gen@@YA?AVCMatrix3x3@1@ABV21@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?InverseAffine2D@gen@@YA?AVCMatrix3x3@1@ABV21@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?InverseRotScale@gen@@YA?AVCMatrix3x3@1@ABV21@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?InverseRotScale@gen@@YA?AVCMatrix3x3@1@ABV21@@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?InverseRotScale@gen@@YA?AVCMatrix3x3@1@ABV21@@Z$3
__catchsym$?InverseRotScale@gen@@YA?AVCMatrix3x3@1@ABV21@@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffff70H
	DD	FLAT:__catch$?InverseRotScale@gen@@YA?AVCMatrix3x3@1@ABV21@@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?InverseRotScale@gen@@YA?AVCMatrix3x3@1@ABV21@@Z$1
__ehfuncinfo$?InverseRotScale@gen@@YA?AVCMatrix3x3@1@ABV21@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?InverseRotScale@gen@@YA?AVCMatrix3x3@1@ABV21@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?InverseRotScale@gen@@YA?AVCMatrix3x3@1@ABV21@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Orthogonalise2x2@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector2@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?Orthogonalise2x2@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector2@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?Orthogonalise2x2@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector2@1@@Z$3
__catchsym$?Orthogonalise2x2@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector2@1@@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffff94H
	DD	FLAT:__catch$?Orthogonalise2x2@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector2@1@@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Orthogonalise2x2@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector2@1@@Z$1
__ehfuncinfo$?Orthogonalise2x2@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector2@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Orthogonalise2x2@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector2@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Orthogonalise2x2@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector2@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Orthogonalise@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector3@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?Orthogonalise@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector3@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?Orthogonalise@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector3@1@@Z$3
__catchsym$?Orthogonalise@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector3@1@@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffff7cH
	DD	FLAT:__catch$?Orthogonalise@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector3@1@@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Orthogonalise@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector3@1@@Z$1
__ehfuncinfo$?Orthogonalise@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector3@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Orthogonalise@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector3@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Orthogonalise@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector3@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??Kgen@@YA?AVCMatrix3x3@0@ABV10@M@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??Kgen@@YA?AVCMatrix3x3@0@ABV10@M@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$??Kgen@@YA?AVCMatrix3x3@0@ABV10@M@Z$3
__catchsym$??Kgen@@YA?AVCMatrix3x3@0@ABV10@M@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffb8H
	DD	FLAT:__catch$??Kgen@@YA?AVCMatrix3x3@0@ABV10@M@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??Kgen@@YA?AVCMatrix3x3@0@ABV10@M@Z$1
__ehfuncinfo$??Kgen@@YA?AVCMatrix3x3@0@ABV10@M@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??Kgen@@YA?AVCMatrix3x3@0@ABV10@M@Z
	DD	01H
	DD	FLAT:__tryblocktable$??Kgen@@YA?AVCMatrix3x3@0@ABV10@M@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??_0CMatrix3x3@gen@@QAEAAV01@M@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??_0CMatrix3x3@gen@@QAEAAV01@M@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$??_0CMatrix3x3@gen@@QAEAAV01@M@Z$3
__catchsym$??_0CMatrix3x3@gen@@QAEAAV01@M@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffdcH
	DD	FLAT:__catch$??_0CMatrix3x3@gen@@QAEAAV01@M@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??_0CMatrix3x3@gen@@QAEAAV01@M@Z$1
__ehfuncinfo$??_0CMatrix3x3@gen@@QAEAAV01@M@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??_0CMatrix3x3@gen@@QAEAAV01@M@Z
	DD	01H
	DD	FLAT:__tryblocktable$??_0CMatrix3x3@gen@@QAEAAV01@M@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?MakeRotation@CMatrix3x3@gen@@QAEXABVCVector3@2@M@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?MakeRotation@CMatrix3x3@gen@@QAEXABVCVector3@2@M@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?MakeRotation@CMatrix3x3@gen@@QAEXABVCVector3@2@M@Z$3
__catchsym$?MakeRotation@CMatrix3x3@gen@@QAEXABVCVector3@2@M@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffff34H
	DD	FLAT:__catch$?MakeRotation@CMatrix3x3@gen@@QAEXABVCVector3@2@M@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?MakeRotation@CMatrix3x3@gen@@QAEXABVCVector3@2@M@Z$1
__ehfuncinfo$?MakeRotation@CMatrix3x3@gen@@QAEXABVCVector3@2@M@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?MakeRotation@CMatrix3x3@gen@@QAEXABVCVector3@2@M@Z
	DD	01H
	DD	FLAT:__tryblocktable$?MakeRotation@CMatrix3x3@gen@@QAEXABVCVector3@2@M@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?MakeRotation@CMatrix3x3@gen@@QAEXVCVector3@2@W4ERotationOrder@2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?MakeRotation@CMatrix3x3@gen@@QAEXVCVector3@2@W4ERotationOrder@2@@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?MakeRotation@CMatrix3x3@gen@@QAEXVCVector3@2@W4ERotationOrder@2@@Z$3
__catchsym$?MakeRotation@CMatrix3x3@gen@@QAEXVCVector3@2@W4ERotationOrder@2@@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffff90H
	DD	FLAT:__catch$?MakeRotation@CMatrix3x3@gen@@QAEXVCVector3@2@W4ERotationOrder@2@@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?MakeRotation@CMatrix3x3@gen@@QAEXVCVector3@2@W4ERotationOrder@2@@Z$1
__ehfuncinfo$?MakeRotation@CMatrix3x3@gen@@QAEXVCVector3@2@W4ERotationOrder@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?MakeRotation@CMatrix3x3@gen@@QAEXVCVector3@2@W4ERotationOrder@2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?MakeRotation@CMatrix3x3@gen@@QAEXVCVector3@2@W4ERotationOrder@2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?InvertAffine2D@CMatrix3x3@gen@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?InvertAffine2D@CMatrix3x3@gen@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?InvertAffine2D@CMatrix3x3@gen@@QAEXXZ$3
__catchsym$?InvertAffine2D@CMatrix3x3@gen@@QAEXXZ$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffb8H
	DD	FLAT:__catch$?InvertAffine2D@CMatrix3x3@gen@@QAEXXZ$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?InvertAffine2D@CMatrix3x3@gen@@QAEXXZ$1
__ehfuncinfo$?InvertAffine2D@CMatrix3x3@gen@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?InvertAffine2D@CMatrix3x3@gen@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?InvertAffine2D@CMatrix3x3@gen@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?InvertRotScale@CMatrix3x3@gen@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?InvertRotScale@CMatrix3x3@gen@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?InvertRotScale@CMatrix3x3@gen@@QAEXXZ$3
__catchsym$?InvertRotScale@CMatrix3x3@gen@@QAEXXZ$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffff88H
	DD	FLAT:__catch$?InvertRotScale@CMatrix3x3@gen@@QAEXXZ$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?InvertRotScale@CMatrix3x3@gen@@QAEXXZ$1
__ehfuncinfo$?InvertRotScale@CMatrix3x3@gen@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?InvertRotScale@CMatrix3x3@gen@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?InvertRotScale@CMatrix3x3@gen@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Orthogonalise2x2@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?Orthogonalise2x2@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?Orthogonalise2x2@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z$3
__catchsym$?Orthogonalise2x2@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffb8H
	DD	FLAT:__catch$?Orthogonalise2x2@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Orthogonalise2x2@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z$1
__ehfuncinfo$?Orthogonalise2x2@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Orthogonalise2x2@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Orthogonalise2x2@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Orthogonalise@CMatrix3x3@gen@@QAEXABVCVector3@2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?Orthogonalise@CMatrix3x3@gen@@QAEXABVCVector3@2@@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?Orthogonalise@CMatrix3x3@gen@@QAEXABVCVector3@2@@Z$3
__catchsym$?Orthogonalise@CMatrix3x3@gen@@QAEXABVCVector3@2@@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffa0H
	DD	FLAT:__catch$?Orthogonalise@CMatrix3x3@gen@@QAEXABVCVector3@2@@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Orthogonalise@CMatrix3x3@gen@@QAEXABVCVector3@2@@Z$1
__ehfuncinfo$?Orthogonalise@CMatrix3x3@gen@@QAEXABVCVector3@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Orthogonalise@CMatrix3x3@gen@@QAEXABVCVector3@2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Orthogonalise@CMatrix3x3@gen@@QAEXABVCVector3@2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?DecomposeAffine2D@CMatrix3x3@gen@@QBEXPAVCVector2@2@PAM0@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?DecomposeAffine2D@CMatrix3x3@gen@@QBEXPAVCVector2@2@PAM0@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?DecomposeAffine2D@CMatrix3x3@gen@@QBEXPAVCVector2@2@PAM0@Z$3
__catchsym$?DecomposeAffine2D@CMatrix3x3@gen@@QBEXPAVCVector2@2@PAM0@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffb8H
	DD	FLAT:__catch$?DecomposeAffine2D@CMatrix3x3@gen@@QBEXPAVCVector2@2@PAM0@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?DecomposeAffine2D@CMatrix3x3@gen@@QBEXPAVCVector2@2@PAM0@Z$1
__ehfuncinfo$?DecomposeAffine2D@CMatrix3x3@gen@@QBEXPAVCVector2@2@PAM0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?DecomposeAffine2D@CMatrix3x3@gen@@QBEXPAVCVector2@2@PAM0@Z
	DD	01H
	DD	FLAT:__tryblocktable$?DecomposeAffine2D@CMatrix3x3@gen@@QBEXPAVCVector2@2@PAM0@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?DecomposeTransformEuler@CMatrix3x3@gen@@QBEXPAVCVector3@2@0W4ERotationOrder@2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?DecomposeTransformEuler@CMatrix3x3@gen@@QBEXPAVCVector3@2@0W4ERotationOrder@2@@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?DecomposeTransformEuler@CMatrix3x3@gen@@QBEXPAVCVector3@2@0W4ERotationOrder@2@@Z$3
__catchsym$?DecomposeTransformEuler@CMatrix3x3@gen@@QBEXPAVCVector3@2@0W4ERotationOrder@2@@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffff04H
	DD	FLAT:__catch$?DecomposeTransformEuler@CMatrix3x3@gen@@QBEXPAVCVector3@2@0W4ERotationOrder@2@@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?DecomposeTransformEuler@CMatrix3x3@gen@@QBEXPAVCVector3@2@0W4ERotationOrder@2@@Z$1
__ehfuncinfo$?DecomposeTransformEuler@CMatrix3x3@gen@@QBEXPAVCVector3@2@0W4ERotationOrder@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?DecomposeTransformEuler@CMatrix3x3@gen@@QBEXPAVCVector3@2@0W4ERotationOrder@2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?DecomposeTransformEuler@CMatrix3x3@gen@@QBEXPAVCVector3@2@0W4ERotationOrder@2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z$3
__catchsym$?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffd0H
	DD	FLAT:__catch$?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z$1
__ehfuncinfo$?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z$3
__catchsym$?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffd0H
	DD	FLAT:__catch$?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z$1
__ehfuncinfo$?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetRow@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?SetRow@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?SetRow@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z$3
__catchsym$?SetRow@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffd0H
	DD	FLAT:__catch$?SetRow@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?SetRow@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z$1
__ehfuncinfo$?SetRow@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SetRow@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?SetRow@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetRow@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?SetRow@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?SetRow@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z$3
__catchsym$?SetRow@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffd0H
	DD	FLAT:__catch$?SetRow@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?SetRow@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z$1
__ehfuncinfo$?SetRow@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SetRow@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?SetRow@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetColumn@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?GetColumn@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?GetColumn@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z$3
__catchsym$?GetColumn@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffd0H
	DD	FLAT:__catch$?GetColumn@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?GetColumn@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z$1
__ehfuncinfo$?GetColumn@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetColumn@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z
	DD	01H
	DD	FLAT:__tryblocktable$?GetColumn@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetRow@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?GetRow@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?GetRow@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z$3
__catchsym$?GetRow@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffdcH
	DD	FLAT:__catch$?GetRow@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?GetRow@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z$1
__ehfuncinfo$?GetRow@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetRow@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z
	DD	01H
	DD	FLAT:__tryblocktable$?GetRow@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Set@CMatrix3x3@gen@@QAEXPBM_N@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?Set@CMatrix3x3@gen@@QAEXPBM_N@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?Set@CMatrix3x3@gen@@QAEXPBM_N@Z$3
__catchsym$?Set@CMatrix3x3@gen@@QAEXPBM_N@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffdcH
	DD	FLAT:__catch$?Set@CMatrix3x3@gen@@QAEXPBM_N@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Set@CMatrix3x3@gen@@QAEXPBM_N@Z$1
__ehfuncinfo$?Set@CMatrix3x3@gen@@QAEXPBM_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Set@CMatrix3x3@gen@@QAEXPBM_N@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Set@CMatrix3x3@gen@@QAEXPBM_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CMatrix3x3@gen@@QAE@PBM_N@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0CMatrix3x3@gen@@QAE@PBM_N@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$??0CMatrix3x3@gen@@QAE@PBM_N@Z$3
__catchsym$??0CMatrix3x3@gen@@QAE@PBM_N@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffdcH
	DD	FLAT:__catch$??0CMatrix3x3@gen@@QAE@PBM_N@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0CMatrix3x3@gen@@QAE@PBM_N@Z$1
__ehfuncinfo$??0CMatrix3x3@gen@@QAE@PBM_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CMatrix3x3@gen@@QAE@PBM_N@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0CMatrix3x3@gen@@QAE@PBM_N@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CVector3@gen@@QAE@PBM@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0CVector3@gen@@QAE@PBM@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$??0CVector3@gen@@QAE@PBM@Z$3
__catchsym$??0CVector3@gen@@QAE@PBM@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffdcH
	DD	FLAT:__catch$??0CVector3@gen@@QAE@PBM@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0CVector3@gen@@QAE@PBM@Z$1
__ehfuncinfo$??0CVector3@gen@@QAE@PBM@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CVector3@gen@@QAE@PBM@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0CVector3@gen@@QAE@PBM@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?InvSqrt@gen@@YAMM@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?InvSqrt@gen@@YAMM@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?InvSqrt@gen@@YAMM@Z$3
__catchsym$?InvSqrt@gen@@YAMM@Z$3 DD 08H
	DD	FLAT:??_R0?AVCFatalException@gen@@@8
	DD	0ffffffe8H
	DD	FLAT:__catch$?InvSqrt@gen@@YAMM@Z$0
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?InvSqrt@gen@@YAMM@Z$1
__ehfuncinfo$?InvSqrt@gen@@YAMM@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?InvSqrt@gen@@YAMM@Z
	DD	01H
	DD	FLAT:__tryblocktable$?InvSqrt@gen@@YAMM@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CFatalException@gen@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CFatalException@gen@@QAE@ABV01@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CFatalException@gen@@QAE@ABV01@@Z$1
__ehfuncinfo$??0CFatalException@gen@@QAE@ABV01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CFatalException@gen@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CFatalException@gen@@QAE@PBD00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CFatalException@gen@@QAE@PBD00@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CFatalException@gen@@QAE@PBD00@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CFatalException@gen@@QAE@PBD00@Z$2
__ehfuncinfo$??0CFatalException@gen@@QAE@PBD00@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CFatalException@gen@@QAE@PBD00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CFatalException@gen@@QAE@PBD0H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CFatalException@gen@@QAE@PBD0H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CFatalException@gen@@QAE@PBD0H@Z$1
__ehfuncinfo$??0CFatalException@gen@@QAE@PBD0H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CFatalException@gen@@QAE@PBD0H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	02H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0
__ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_ksCompiler$initializer$ DD FLAT:??__EksCompiler@gen@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_ksPathSeparator$initializer$ DD FLAT:??__EksPathSeparator@gen@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
_ksNewline$initializer$ DD FLAT:??__EksNewline@gen@@YAXXZ
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?kIdentity$initializer$@CMatrix3x3@gen@@2P6AXXZA DD FLAT:??__E?kIdentity@CMatrix3x3@gen@@2V12@B@@YAXXZ ; gen::CMatrix3x3::kIdentity$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Generic_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_Iostream_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA DD FLAT:??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; std::_Error_objects<int>::_System_object$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
tv73 = -244						; size = 4
$T2 = -236						; size = 4
$T3 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv73[ebp], 0
$LN4@construct:
	mov	edx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T2[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	esi, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id
	call	DWORD PTR __imp_??0id@locale@std@@QAE@I@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id'', COMDAT

; 155  : 		void _Getvals(wchar_t, const lconv *_Ptr, _Locinfo::_Cvtvec)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	esi, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id
	call	DWORD PTR __imp_??0id@locale@std@@QAE@I@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::id''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 755  : 		static void destroy(_Alloc& _Al, _Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>

; 758  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__V0$ = 16						; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1775 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1777 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??1_System_error_category@std@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_System_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object
	call	??0_System_error_category@std@@QAE@XZ	; std::_System_error_category::_System_error_category
	push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_System_object''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_System_object''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??1_Iostream_error_category@std@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; std::_Error_objects<int>::_Iostream_object
	call	??0_Iostream_error_category@std@@QAE@XZ	; std::_Iostream_error_category::_Iostream_error_category
	push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Iostream_object''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Iostream_object''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yd	SEGMENT
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ
text$yc	SEGMENT
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object'', COMDAT

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic atexit destructor for 'std::_Error_objects<int>::_Generic_object''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::_Error_objects<int>::_Generic_object''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Ptr$ = -8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC			; std::_Allocate<char>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], -1
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	mov	esi, esp
	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
_TEXT	SEGMENT
__Ptr$ = -8						; size = 4
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z PROC ; std::_Allocate<std::_Container_proxy>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 23   : 	void *_Ptr = 0;

	mov	DWORD PTR __Ptr$[ebp], 0

; 24   : 
; 25   : 	if (_Count == 0)

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN4@Allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)

	jmp	SHORT $LN3@Allocate
$LN4@Allocate:

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

	cmp	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH
	ja	SHORT $LN1@Allocate
	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR __Ptr$[ebp], eax
	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN3@Allocate
$LN1@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

	mov	esi, esp
	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Allocate:

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN6@Allocate:

; 32   : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ENDP ; std::_Allocate<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>, COMDAT
; _this$ = ecx

; 621  : 		void destroy(_Uty *_Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ENDP ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
_TEXT	SEGMENT
tv74 = -244						; size = 4
$T2 = -236						; size = 4
$T3 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; _this$ = ecx

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T3[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR __V0$[ebp]
	push	ecx
	call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR tv74[ebp], edx
	jmp	SHORT $LN4@construct
$LN3@construct:
	mov	DWORD PTR tv74[ebp], 0
$LN4@construct:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0:
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	eax, DWORD PTR $T3[ebp]
	push	eax
	call	??3@YAXPAX0@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ENDP ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>
	add	esp, 8

; 592  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ PROC	; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ENDP	; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 85   : 	{	// return address of _Val

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

	mov	eax, DWORD PTR __Val$[ebp]

; 89   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 907  : 		void destroy(_Ty *_Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
	add	esp, 8

; 910  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__V0$ = 12						; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __V0$[ebp]
	push	eax
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ??__E?kIdentity@CMatrix3x3@gen@@2V12@B@@YAXXZ
text$yc	SEGMENT
??__E?kIdentity@CMatrix3x3@gen@@2V12@B@@YAXXZ PROC	; `dynamic initializer for 'gen::CMatrix3x3::kIdentity'', COMDAT

; 3224 :                                        0.0f, 0.0f, 1.0f);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?kIdentity@CMatrix3x3@gen@@2V12@B ; gen::CMatrix3x3::kIdentity
	call	??0CMatrix3x3@gen@@QAE@MMMMMMMMM@Z	; gen::CMatrix3x3::CMatrix3x3
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__E?kIdentity@CMatrix3x3@gen@@2V12@B@@YAXXZ ENDP	; `dynamic initializer for 'gen::CMatrix3x3::kIdentity''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?MatrixFaceDirection2D@gen@@YA?AVCMatrix3x3@1@ABVCVector2@1@0_N1@Z
_TEXT	SEGMENT
_axis$ = -60						; size = 8
_m$ = -44						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_position$ = 12						; size = 4
_direction$ = 16					; size = 4
_bUseYAxis$ = 20					; size = 1
_bLH$ = 24						; size = 1
?MatrixFaceDirection2D@gen@@YA?AVCMatrix3x3@1@ABVCVector2@1@0_N1@Z PROC ; gen::MatrixFaceDirection2D, COMDAT

; 2840 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2841 : 	CMatrix3x3 m;

	lea	ecx, DWORD PTR _m$[ebp]
	call	??0CMatrix3x3@gen@@QAE@XZ		; gen::CMatrix3x3::CMatrix3x3

; 2842 : 
; 2843 : 	CVector2 axis = Normalise( direction );

	mov	eax, DWORD PTR _direction$[ebp]
	push	eax
	lea	ecx, DWORD PTR _axis$[ebp]
	push	ecx
	call	?Normalise@gen@@YA?AVCVector2@1@ABV21@@Z ; gen::Normalise
	add	esp, 8

; 2844 : 	if (axis.IsZero()) return CMatrix3x3( position );

	lea	ecx, DWORD PTR _axis$[ebp]
	call	?IsZero@CVector2@gen@@QBE_NXZ		; gen::CVector2::IsZero
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@MatrixFace
	mov	eax, DWORD PTR _position$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABVCVector2@1@@Z	; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN8@MatrixFace
$LN7@MatrixFace:

; 2845 : 	if (bUseYAxis)

	movzx	eax, BYTE PTR _bUseYAxis$[ebp]
	test	eax, eax
	je	SHORT $LN6@MatrixFace

; 2846 : 	{
; 2847 : 		m.e10 = axis.x;

	movss	xmm0, DWORD PTR _axis$[ebp]
	movss	DWORD PTR _m$[ebp+12], xmm0

; 2848 : 		m.e11 = axis.y;

	movss	xmm0, DWORD PTR _axis$[ebp+4]
	movss	DWORD PTR _m$[ebp+16], xmm0

; 2849 : 		m.e12 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+20], xmm0

; 2850 : 		if (bLH)

	movzx	eax, BYTE PTR _bLH$[ebp]
	test	eax, eax
	je	SHORT $LN5@MatrixFace

; 2851 : 		{
; 2852 : 			m.e00 = m.e11;

	movss	xmm0, DWORD PTR _m$[ebp+16]
	movss	DWORD PTR _m$[ebp], xmm0

; 2853 : 			m.e01 = -m.e10;

	movss	xmm0, DWORD PTR _m$[ebp+12]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _m$[ebp+4], xmm0

; 2854 : 		}
; 2855 : 		else

	jmp	SHORT $LN4@MatrixFace
$LN5@MatrixFace:

; 2856 : 		{
; 2857 : 			m.e00 = -m.e11;

	movss	xmm0, DWORD PTR _m$[ebp+16]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _m$[ebp], xmm0

; 2858 : 			m.e01 = m.e10;

	movss	xmm0, DWORD PTR _m$[ebp+12]
	movss	DWORD PTR _m$[ebp+4], xmm0
$LN4@MatrixFace:

; 2859 : 		}
; 2860 : 		m.e02 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+8], xmm0

; 2861 : 	}
; 2862 : 	else

	jmp	SHORT $LN3@MatrixFace
$LN6@MatrixFace:

; 2863 : 	{
; 2864 : 		m.e00 = axis.x;

	movss	xmm0, DWORD PTR _axis$[ebp]
	movss	DWORD PTR _m$[ebp], xmm0

; 2865 : 		m.e01 = axis.y;

	movss	xmm0, DWORD PTR _axis$[ebp+4]
	movss	DWORD PTR _m$[ebp+4], xmm0

; 2866 : 		m.e02 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+8], xmm0

; 2867 : 		if (bLH)

	movzx	eax, BYTE PTR _bLH$[ebp]
	test	eax, eax
	je	SHORT $LN2@MatrixFace

; 2868 : 		{
; 2869 : 			m.e11 = -m.e00;

	movss	xmm0, DWORD PTR _m$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _m$[ebp+16], xmm0

; 2870 : 			m.e10 = m.e01;

	movss	xmm0, DWORD PTR _m$[ebp+4]
	movss	DWORD PTR _m$[ebp+12], xmm0

; 2871 : 		}
; 2872 : 		else

	jmp	SHORT $LN1@MatrixFace
$LN2@MatrixFace:

; 2873 : 		{
; 2874 : 			m.e11 = m.e00;

	movss	xmm0, DWORD PTR _m$[ebp]
	movss	DWORD PTR _m$[ebp+16], xmm0

; 2875 : 			m.e10 = -m.e01;

	movss	xmm0, DWORD PTR _m$[ebp+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _m$[ebp+12], xmm0
$LN1@MatrixFace:

; 2876 : 		}
; 2877 : 		m.e12 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+20], xmm0
$LN3@MatrixFace:

; 2878 : 	}
; 2879 : 
; 2880 : 	m.e20 = position.x;

	mov	eax, DWORD PTR _position$[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _m$[ebp+24], xmm0

; 2881 : 	m.e21 = position.y;

	mov	eax, DWORD PTR _position$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _m$[ebp+28], xmm0

; 2882 : 	m.e22 = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _m$[ebp+32], xmm0

; 2883 : 
; 2884 : 	return m;

	lea	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABV01@@Z		; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN8@MatrixFace:

; 2885 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@MatrixFace
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@MatrixFace:
	DD	2
	DD	$LN12@MatrixFace
$LN12@MatrixFace:
	DD	-44					; ffffffd4H
	DD	36					; 00000024H
	DD	$LN10@MatrixFace
	DD	-60					; ffffffc4H
	DD	8
	DD	$LN11@MatrixFace
$LN11@MatrixFace:
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	0
$LN10@MatrixFace:
	DB	109					; 0000006dH
	DB	0
?MatrixFaceDirection2D@gen@@YA?AVCMatrix3x3@1@ABVCVector2@1@0_N1@Z ENDP ; gen::MatrixFaceDirection2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?MatrixFaceTarget2D@gen@@YA?AVCMatrix3x3@1@ABVCVector2@1@0_N1@Z
_TEXT	SEGMENT
$T1 = -268						; size = 8
_axis$ = -60						; size = 8
_m$ = -44						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_position$ = 12						; size = 4
_target$ = 16						; size = 4
_bUseYAxis$ = 20					; size = 1
_bLH$ = 24						; size = 1
?MatrixFaceTarget2D@gen@@YA?AVCMatrix3x3@1@ABVCVector2@1@0_N1@Z PROC ; gen::MatrixFaceTarget2D, COMDAT

; 2739 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2740 : 	CMatrix3x3 m;

	lea	ecx, DWORD PTR _m$[ebp]
	call	??0CMatrix3x3@gen@@QAE@XZ		; gen::CMatrix3x3::CMatrix3x3

; 2741 : 
; 2742 : 	CVector2 axis = Normalise(target - position);

	mov	eax, DWORD PTR _position$[ebp]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??Ggen@@YA?AVCVector2@0@ABV10@0@Z	; gen::operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _axis$[ebp]
	push	eax
	call	?Normalise@gen@@YA?AVCVector2@1@ABV21@@Z ; gen::Normalise
	add	esp, 8

; 2743 : 	if (axis.IsZero()) return CMatrix3x3( position );

	lea	ecx, DWORD PTR _axis$[ebp]
	call	?IsZero@CVector2@gen@@QBE_NXZ		; gen::CVector2::IsZero
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@MatrixFace
	mov	eax, DWORD PTR _position$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABVCVector2@1@@Z	; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN8@MatrixFace
$LN7@MatrixFace:

; 2744 : 	if (bUseYAxis)

	movzx	eax, BYTE PTR _bUseYAxis$[ebp]
	test	eax, eax
	je	SHORT $LN6@MatrixFace

; 2745 : 	{
; 2746 : 		m.e10 = axis.x;

	movss	xmm0, DWORD PTR _axis$[ebp]
	movss	DWORD PTR _m$[ebp+12], xmm0

; 2747 : 		m.e11 = axis.y;

	movss	xmm0, DWORD PTR _axis$[ebp+4]
	movss	DWORD PTR _m$[ebp+16], xmm0

; 2748 : 		m.e12 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+20], xmm0

; 2749 : 		if (bLH)

	movzx	eax, BYTE PTR _bLH$[ebp]
	test	eax, eax
	je	SHORT $LN5@MatrixFace

; 2750 : 		{
; 2751 : 			m.e00 = m.e11;

	movss	xmm0, DWORD PTR _m$[ebp+16]
	movss	DWORD PTR _m$[ebp], xmm0

; 2752 : 			m.e01 = -m.e10;

	movss	xmm0, DWORD PTR _m$[ebp+12]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _m$[ebp+4], xmm0

; 2753 : 		}
; 2754 : 		else

	jmp	SHORT $LN4@MatrixFace
$LN5@MatrixFace:

; 2755 : 		{
; 2756 : 			m.e00 = -m.e11;

	movss	xmm0, DWORD PTR _m$[ebp+16]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _m$[ebp], xmm0

; 2757 : 			m.e01 = m.e10;

	movss	xmm0, DWORD PTR _m$[ebp+12]
	movss	DWORD PTR _m$[ebp+4], xmm0
$LN4@MatrixFace:

; 2758 : 		}
; 2759 : 		m.e02 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+8], xmm0

; 2760 : 	}
; 2761 : 	else

	jmp	SHORT $LN3@MatrixFace
$LN6@MatrixFace:

; 2762 : 	{
; 2763 : 		m.e00 = axis.x;

	movss	xmm0, DWORD PTR _axis$[ebp]
	movss	DWORD PTR _m$[ebp], xmm0

; 2764 : 		m.e01 = axis.y;

	movss	xmm0, DWORD PTR _axis$[ebp+4]
	movss	DWORD PTR _m$[ebp+4], xmm0

; 2765 : 		m.e02 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+8], xmm0

; 2766 : 		if (bLH)

	movzx	eax, BYTE PTR _bLH$[ebp]
	test	eax, eax
	je	SHORT $LN2@MatrixFace

; 2767 : 		{
; 2768 : 			m.e11 = -m.e00;

	movss	xmm0, DWORD PTR _m$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _m$[ebp+16], xmm0

; 2769 : 			m.e10 = m.e01;

	movss	xmm0, DWORD PTR _m$[ebp+4]
	movss	DWORD PTR _m$[ebp+12], xmm0

; 2770 : 		}
; 2771 : 		else

	jmp	SHORT $LN1@MatrixFace
$LN2@MatrixFace:

; 2772 : 		{
; 2773 : 			m.e11 = m.e00;

	movss	xmm0, DWORD PTR _m$[ebp]
	movss	DWORD PTR _m$[ebp+16], xmm0

; 2774 : 			m.e10 = -m.e01;

	movss	xmm0, DWORD PTR _m$[ebp+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _m$[ebp+12], xmm0
$LN1@MatrixFace:

; 2775 : 		}
; 2776 : 		m.e12 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+20], xmm0
$LN3@MatrixFace:

; 2777 : 	}
; 2778 : 
; 2779 : 	m.e20 = position.x;

	mov	eax, DWORD PTR _position$[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _m$[ebp+24], xmm0

; 2780 : 	m.e21 = position.y;

	mov	eax, DWORD PTR _position$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _m$[ebp+28], xmm0

; 2781 : 	m.e22 = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _m$[ebp+32], xmm0

; 2782 : 
; 2783 : 	return m;

	lea	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABV01@@Z		; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN8@MatrixFace:

; 2784 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@MatrixFace
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@MatrixFace:
	DD	2
	DD	$LN12@MatrixFace
$LN12@MatrixFace:
	DD	-44					; ffffffd4H
	DD	36					; 00000024H
	DD	$LN10@MatrixFace
	DD	-60					; ffffffc4H
	DD	8
	DD	$LN11@MatrixFace
$LN11@MatrixFace:
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	0
$LN10@MatrixFace:
	DB	109					; 0000006dH
	DB	0
?MatrixFaceTarget2D@gen@@YA?AVCMatrix3x3@1@ABVCVector2@1@0_N1@Z ENDP ; gen::MatrixFaceTarget2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?MatrixFaceDirection@gen@@YA?AVCMatrix3x3@1@ABVCVector3@1@0_N@Z
_TEXT	SEGMENT
$T1 = -432						; size = 12
$T2 = -412						; size = 12
$T3 = -392						; size = 12
$T4 = -372						; size = 12
$T5 = -352						; size = 12
$T6 = -332						; size = 12
$T7 = -312						; size = 12
$T8 = -292						; size = 12
$T9 = -272						; size = 12
_axisZ$ = -60						; size = 12
_axisY$ = -40						; size = 12
_axisX$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_direction$ = 12					; size = 4
_up$ = 16						; size = 4
_bLH$ = 20						; size = 1
?MatrixFaceDirection@gen@@YA?AVCMatrix3x3@1@ABVCVector3@1@0_N@Z PROC ; gen::MatrixFaceDirection, COMDAT

; 2663 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 436				; 000001b4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-436]
	mov	ecx, 109				; 0000006dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2664 : 	CVector3 axisX, axisY, axisZ;

	lea	ecx, DWORD PTR _axisX$[ebp]
	call	??0CVector3@gen@@QAE@XZ			; gen::CVector3::CVector3
	lea	ecx, DWORD PTR _axisY$[ebp]
	call	??0CVector3@gen@@QAE@XZ			; gen::CVector3::CVector3
	lea	ecx, DWORD PTR _axisZ$[ebp]
	call	??0CVector3@gen@@QAE@XZ			; gen::CVector3::CVector3

; 2665 : 	if (bLH)

	movzx	eax, BYTE PTR _bLH$[ebp]
	test	eax, eax
	je	$LN6@MatrixFace

; 2666 : 	{
; 2667 : 		axisZ = Normalise( direction );

	mov	eax, DWORD PTR _direction$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	?Normalise@gen@@YA?AVCVector3@1@ABV21@@Z ; gen::Normalise
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _axisZ$[ebp]
	call	??4CVector3@gen@@QAEAAV01@ABV01@@Z	; gen::CVector3::operator=

; 2668 : 		if (axisZ.IsZero()) return CMatrix3x3::kIdentity;

	lea	ecx, DWORD PTR _axisZ$[ebp]
	call	?IsZero@CVector3@gen@@QBE_NXZ		; gen::CVector3::IsZero
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@MatrixFace
	push	OFFSET ?kIdentity@CMatrix3x3@gen@@2V12@B ; gen::CMatrix3x3::kIdentity
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABV01@@Z		; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN7@MatrixFace
$LN5@MatrixFace:

; 2669 : 		axisX = Normalise( Cross( up, axisZ ) );

	lea	eax, DWORD PTR _axisZ$[ebp]
	push	eax
	mov	ecx, DWORD PTR _up$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	?Cross@gen@@YA?AVCVector3@1@ABV21@0@Z	; gen::Cross
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	?Normalise@gen@@YA?AVCVector3@1@ABV21@@Z ; gen::Normalise
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _axisX$[ebp]
	call	??4CVector3@gen@@QAEAAV01@ABV01@@Z	; gen::CVector3::operator=

; 2670 : 		if (axisX.IsZero()) return CMatrix3x3::kIdentity;

	lea	ecx, DWORD PTR _axisX$[ebp]
	call	?IsZero@CVector3@gen@@QBE_NXZ		; gen::CVector3::IsZero
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@MatrixFace
	push	OFFSET ?kIdentity@CMatrix3x3@gen@@2V12@B ; gen::CMatrix3x3::kIdentity
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABV01@@Z		; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN7@MatrixFace
$LN4@MatrixFace:

; 2671 : 		axisY = Cross( axisZ, axisX ); // Will already be normalised

	lea	eax, DWORD PTR _axisX$[ebp]
	push	eax
	lea	ecx, DWORD PTR _axisZ$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	call	?Cross@gen@@YA?AVCVector3@1@ABV21@0@Z	; gen::Cross
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _axisY$[ebp]
	call	??4CVector3@gen@@QAEAAV01@ABV01@@Z	; gen::CVector3::operator=

; 2672 : 	}
; 2673 : 	else

	jmp	$LN3@MatrixFace
$LN6@MatrixFace:

; 2674 : 	{
; 2675 : 		axisZ = Normalise( -direction );

	mov	eax, DWORD PTR _direction$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	call	??Ggen@@YA?AVCVector3@0@ABV10@@Z	; gen::operator-
	add	esp, 8
	push	eax
	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	call	?Normalise@gen@@YA?AVCVector3@1@ABV21@@Z ; gen::Normalise
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _axisZ$[ebp]
	call	??4CVector3@gen@@QAEAAV01@ABV01@@Z	; gen::CVector3::operator=

; 2676 : 		if (axisZ.IsZero()) return CMatrix3x3::kIdentity;

	lea	ecx, DWORD PTR _axisZ$[ebp]
	call	?IsZero@CVector3@gen@@QBE_NXZ		; gen::CVector3::IsZero
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@MatrixFace
	push	OFFSET ?kIdentity@CMatrix3x3@gen@@2V12@B ; gen::CMatrix3x3::kIdentity
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABV01@@Z		; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN7@MatrixFace
$LN2@MatrixFace:

; 2677 : 		axisX = Normalise( Cross( axisZ, up ) );

	mov	eax, DWORD PTR _up$[ebp]
	push	eax
	lea	ecx, DWORD PTR _axisZ$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T7[ebp]
	push	edx
	call	?Cross@gen@@YA?AVCVector3@1@ABV21@0@Z	; gen::Cross
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T8[ebp]
	push	eax
	call	?Normalise@gen@@YA?AVCVector3@1@ABV21@@Z ; gen::Normalise
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _axisX$[ebp]
	call	??4CVector3@gen@@QAEAAV01@ABV01@@Z	; gen::CVector3::operator=

; 2678 : 		if (axisX.IsZero()) return CMatrix3x3::kIdentity;

	lea	ecx, DWORD PTR _axisX$[ebp]
	call	?IsZero@CVector3@gen@@QBE_NXZ		; gen::CVector3::IsZero
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@MatrixFace
	push	OFFSET ?kIdentity@CMatrix3x3@gen@@2V12@B ; gen::CMatrix3x3::kIdentity
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABV01@@Z		; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN7@MatrixFace
$LN1@MatrixFace:

; 2679 : 		axisY = Cross( axisX, axisZ ); // Will already be normalised

	lea	eax, DWORD PTR _axisZ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _axisX$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T9[ebp]
	push	edx
	call	?Cross@gen@@YA?AVCVector3@1@ABV21@0@Z	; gen::Cross
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _axisY$[ebp]
	call	??4CVector3@gen@@QAEAAV01@ABV01@@Z	; gen::CVector3::operator=
$LN3@MatrixFace:

; 2680 : 	}
; 2681 : 	
; 2682 : 	return CMatrix3x3( axisX, axisY, axisZ );

	push	1
	lea	eax, DWORD PTR _axisZ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _axisY$[ebp]
	push	ecx
	lea	edx, DWORD PTR _axisX$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABVCVector3@1@00_N@Z ; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN7@MatrixFace:

; 2683 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@MatrixFace
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 436				; 000001b4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN13@MatrixFace:
	DD	3
	DD	$LN12@MatrixFace
$LN12@MatrixFace:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN9@MatrixFace
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN10@MatrixFace
	DD	-60					; ffffffc4H
	DD	12					; 0000000cH
	DD	$LN11@MatrixFace
$LN11@MatrixFace:
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	90					; 0000005aH
	DB	0
$LN10@MatrixFace:
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	89					; 00000059H
	DB	0
$LN9@MatrixFace:
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	88					; 00000058H
	DB	0
?MatrixFaceDirection@gen@@YA?AVCMatrix3x3@1@ABVCVector3@1@0_N@Z ENDP ; gen::MatrixFaceDirection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?MatrixScaling2D@gen@@YA?AVCMatrix3x3@1@M@Z
_TEXT	SEGMENT
_m$ = -44						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_fScale$ = 12						; size = 4
?MatrixScaling2D@gen@@YA?AVCMatrix3x3@1@M@Z PROC	; gen::MatrixScaling2D, COMDAT

; 2600 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2601 : 	CMatrix3x3 m;

	lea	ecx, DWORD PTR _m$[ebp]
	call	??0CMatrix3x3@gen@@QAE@XZ		; gen::CMatrix3x3::CMatrix3x3

; 2602 : 
; 2603 : 	m.e00 = fScale;

	movss	xmm0, DWORD PTR _fScale$[ebp]
	movss	DWORD PTR _m$[ebp], xmm0

; 2604 : 	m.e01 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+4], xmm0

; 2605 : 	m.e02 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+8], xmm0

; 2606 : 
; 2607 : 	m.e10 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+12], xmm0

; 2608 : 	m.e11 = fScale;

	movss	xmm0, DWORD PTR _fScale$[ebp]
	movss	DWORD PTR _m$[ebp+16], xmm0

; 2609 : 	m.e12 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+20], xmm0

; 2610 : 
; 2611 : 	m.e20 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+24], xmm0

; 2612 : 	m.e21 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+28], xmm0

; 2613 : 	m.e22 = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _m$[ebp+32], xmm0

; 2614 : 
; 2615 : 	return m;

	lea	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABV01@@Z		; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2616 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@MatrixScal
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@MatrixScal:
	DD	1
	DD	$LN4@MatrixScal
$LN4@MatrixScal:
	DD	-44					; ffffffd4H
	DD	36					; 00000024H
	DD	$LN3@MatrixScal
$LN3@MatrixScal:
	DB	109					; 0000006dH
	DB	0
?MatrixScaling2D@gen@@YA?AVCMatrix3x3@1@M@Z ENDP	; gen::MatrixScaling2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?MatrixScaling2D@gen@@YA?AVCMatrix3x3@1@ABVCVector2@1@@Z
_TEXT	SEGMENT
_m$ = -44						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_scale$ = 12						; size = 4
?MatrixScaling2D@gen@@YA?AVCMatrix3x3@1@ABVCVector2@1@@Z PROC ; gen::MatrixScaling2D, COMDAT

; 2580 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2581 : 	CMatrix3x3 m;

	lea	ecx, DWORD PTR _m$[ebp]
	call	??0CMatrix3x3@gen@@QAE@XZ		; gen::CMatrix3x3::CMatrix3x3

; 2582 : 
; 2583 : 	m.e00 = scale.x;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _m$[ebp], xmm0

; 2584 : 	m.e01 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+4], xmm0

; 2585 : 	m.e02 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+8], xmm0

; 2586 : 
; 2587 : 	m.e10 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+12], xmm0

; 2588 : 	m.e11 = scale.y;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _m$[ebp+16], xmm0

; 2589 : 	m.e12 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+20], xmm0

; 2590 : 
; 2591 : 	m.e20 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+24], xmm0

; 2592 : 	m.e21 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+28], xmm0

; 2593 : 	m.e22 = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _m$[ebp+32], xmm0

; 2594 : 
; 2595 : 	return m;

	lea	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABV01@@Z		; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2596 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@MatrixScal
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@MatrixScal:
	DD	1
	DD	$LN4@MatrixScal
$LN4@MatrixScal:
	DD	-44					; ffffffd4H
	DD	36					; 00000024H
	DD	$LN3@MatrixScal
$LN3@MatrixScal:
	DB	109					; 0000006dH
	DB	0
?MatrixScaling2D@gen@@YA?AVCMatrix3x3@1@ABVCVector2@1@@Z ENDP ; gen::MatrixScaling2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?MatrixRotation2D@gen@@YA?AVCMatrix3x3@1@M@Z
_TEXT	SEGMENT
_c$ = -68						; size = 4
_s$ = -56						; size = 4
_m$ = -44						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_fAngle$ = 12						; size = 4
?MatrixRotation2D@gen@@YA?AVCMatrix3x3@1@M@Z PROC	; gen::MatrixRotation2D, COMDAT

; 2556 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2557 : 	CMatrix3x3 m;

	lea	ecx, DWORD PTR _m$[ebp]
	call	??0CMatrix3x3@gen@@QAE@XZ		; gen::CMatrix3x3::CMatrix3x3

; 2558 : 
; 2559 : 	TFloat32 s, c;
; 2560 : 	SinCos( fAngle, &s, &c );

	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _fAngle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SinCos@gen@@YAXMPAM0@Z			; gen::SinCos
	add	esp, 12					; 0000000cH

; 2561 : 
; 2562 : 	m.e00 = c;

	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR _m$[ebp], xmm0

; 2563 : 	m.e01 = s;

	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _m$[ebp+4], xmm0

; 2564 : 	m.e02 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+8], xmm0

; 2565 : 
; 2566 : 	m.e10 = -s;

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _m$[ebp+12], xmm0

; 2567 : 	m.e11 = c;

	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR _m$[ebp+16], xmm0

; 2568 : 	m.e12 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+20], xmm0

; 2569 : 
; 2570 : 	m.e20 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+24], xmm0

; 2571 : 	m.e21 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+28], xmm0

; 2572 : 	m.e22 = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _m$[ebp+32], xmm0

; 2573 : 
; 2574 : 	return m;

	lea	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABV01@@Z		; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2575 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@MatrixRota
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@MatrixRota:
	DD	3
	DD	$LN6@MatrixRota
$LN6@MatrixRota:
	DD	-44					; ffffffd4H
	DD	36					; 00000024H
	DD	$LN3@MatrixRota
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN4@MatrixRota
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN5@MatrixRota
$LN5@MatrixRota:
	DB	99					; 00000063H
	DB	0
$LN4@MatrixRota:
	DB	115					; 00000073H
	DB	0
$LN3@MatrixRota:
	DB	109					; 0000006dH
	DB	0
?MatrixRotation2D@gen@@YA?AVCMatrix3x3@1@M@Z ENDP	; gen::MatrixRotation2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?MatrixTranslation2D@gen@@YA?AVCMatrix3x3@1@ABVCVector2@1@@Z
_TEXT	SEGMENT
_m$ = -44						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_translate$ = 12					; size = 4
?MatrixTranslation2D@gen@@YA?AVCMatrix3x3@1@ABVCVector2@1@@Z PROC ; gen::MatrixTranslation2D, COMDAT

; 2535 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2536 : 	CMatrix3x3 m;

	lea	ecx, DWORD PTR _m$[ebp]
	call	??0CMatrix3x3@gen@@QAE@XZ		; gen::CMatrix3x3::CMatrix3x3

; 2537 : 
; 2538 : 	m.e00 = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _m$[ebp], xmm0

; 2539 : 	m.e01 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+4], xmm0

; 2540 : 	m.e02 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+8], xmm0

; 2541 : 
; 2542 : 	m.e10 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+12], xmm0

; 2543 : 	m.e11 = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _m$[ebp+16], xmm0

; 2544 : 	m.e12 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+20], xmm0

; 2545 : 
; 2546 : 	m.e20 = translate.x;

	mov	eax, DWORD PTR _translate$[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _m$[ebp+24], xmm0

; 2547 : 	m.e21 = translate.y;

	mov	eax, DWORD PTR _translate$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _m$[ebp+28], xmm0

; 2548 : 	m.e22 = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _m$[ebp+32], xmm0

; 2549 : 
; 2550 : 	return m;

	lea	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABV01@@Z		; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2551 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@MatrixTran
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@MatrixTran:
	DD	1
	DD	$LN4@MatrixTran
$LN4@MatrixTran:
	DD	-44					; ffffffd4H
	DD	36					; 00000024H
	DD	$LN3@MatrixTran
$LN3@MatrixTran:
	DB	109					; 0000006dH
	DB	0
?MatrixTranslation2D@gen@@YA?AVCMatrix3x3@1@ABVCVector2@1@@Z ENDP ; gen::MatrixTranslation2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?Matrix3x3Scaling@gen@@YA?AVCMatrix3x3@1@M@Z
_TEXT	SEGMENT
_m$ = -44						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_fScale$ = 12						; size = 4
?Matrix3x3Scaling@gen@@YA?AVCMatrix3x3@1@M@Z PROC	; gen::Matrix3x3Scaling, COMDAT

; 2435 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2436 : 	CMatrix3x3 m;

	lea	ecx, DWORD PTR _m$[ebp]
	call	??0CMatrix3x3@gen@@QAE@XZ		; gen::CMatrix3x3::CMatrix3x3

; 2437 : 
; 2438 : 	m.e00 = fScale;

	movss	xmm0, DWORD PTR _fScale$[ebp]
	movss	DWORD PTR _m$[ebp], xmm0

; 2439 : 	m.e01 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+4], xmm0

; 2440 : 	m.e02 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+8], xmm0

; 2441 : 
; 2442 : 	m.e10 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+12], xmm0

; 2443 : 	m.e11 = fScale;

	movss	xmm0, DWORD PTR _fScale$[ebp]
	movss	DWORD PTR _m$[ebp+16], xmm0

; 2444 : 	m.e12 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+20], xmm0

; 2445 : 
; 2446 : 	m.e20 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+24], xmm0

; 2447 : 	m.e21 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+28], xmm0

; 2448 : 	m.e22 = fScale;

	movss	xmm0, DWORD PTR _fScale$[ebp]
	movss	DWORD PTR _m$[ebp+32], xmm0

; 2449 : 
; 2450 : 	return m;

	lea	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABV01@@Z		; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2451 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Matrix3x3S
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@Matrix3x3S:
	DD	1
	DD	$LN4@Matrix3x3S
$LN4@Matrix3x3S:
	DD	-44					; ffffffd4H
	DD	36					; 00000024H
	DD	$LN3@Matrix3x3S
$LN3@Matrix3x3S:
	DB	109					; 0000006dH
	DB	0
?Matrix3x3Scaling@gen@@YA?AVCMatrix3x3@1@M@Z ENDP	; gen::Matrix3x3Scaling
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?Matrix3x3Scaling@gen@@YA?AVCMatrix3x3@1@ABVCVector3@1@@Z
_TEXT	SEGMENT
_m$ = -44						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_scale$ = 12						; size = 4
?Matrix3x3Scaling@gen@@YA?AVCMatrix3x3@1@ABVCVector3@1@@Z PROC ; gen::Matrix3x3Scaling, COMDAT

; 2415 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2416 : 	CMatrix3x3 m;

	lea	ecx, DWORD PTR _m$[ebp]
	call	??0CMatrix3x3@gen@@QAE@XZ		; gen::CMatrix3x3::CMatrix3x3

; 2417 : 
; 2418 : 	m.e00 = scale.x;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _m$[ebp], xmm0

; 2419 : 	m.e01 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+4], xmm0

; 2420 : 	m.e02 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+8], xmm0

; 2421 : 
; 2422 : 	m.e10 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+12], xmm0

; 2423 : 	m.e11 = scale.y;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _m$[ebp+16], xmm0

; 2424 : 	m.e12 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+20], xmm0

; 2425 : 
; 2426 : 	m.e20 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+24], xmm0

; 2427 : 	m.e21 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+28], xmm0

; 2428 : 	m.e22 = scale.z;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _m$[ebp+32], xmm0

; 2429 : 
; 2430 : 	return m;

	lea	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABV01@@Z		; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2431 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Matrix3x3S
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@Matrix3x3S:
	DD	1
	DD	$LN4@Matrix3x3S
$LN4@Matrix3x3S:
	DD	-44					; ffffffd4H
	DD	36					; 00000024H
	DD	$LN3@Matrix3x3S
$LN3@Matrix3x3S:
	DB	109					; 0000006dH
	DB	0
?Matrix3x3Scaling@gen@@YA?AVCMatrix3x3@1@ABVCVector3@1@@Z ENDP ; gen::Matrix3x3Scaling
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@ABVCVector3@1@M@Z
_TEXT	SEGMENT
tv187 = -721						; size = 1
$T2 = -716						; size = 88
$T3 = -620						; size = 88
$T4 = -524						; size = 88
_e$5 = -236						; size = 4
_tzx$6 = -224						; size = 4
_tyz$7 = -212						; size = 4
_txy$8 = -200						; size = 4
_tz$9 = -188						; size = 4
_ty$10 = -176						; size = 4
_tx$11 = -164						; size = 4
_sz$12 = -152						; size = 4
_sy$13 = -140						; size = 4
_sx$14 = -128						; size = 4
_axisNorm$15 = -116					; size = 12
_t$16 = -96						; size = 4
_c$17 = -84						; size = 4
_s$18 = -72						; size = 4
_m$19 = -60						; size = 36
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_axis$ = 12						; size = 4
_fAngle$ = 16						; size = 4
?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@ABVCVector3@1@M@Z PROC ; gen::Matrix3x3Rotation, COMDAT

; 2372 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@ABVCVector3@1@M@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 708				; 000002c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-724]
	mov	ecx, 177				; 000000b1H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 2373 : 	GEN_GUARD;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2374 : 
; 2375 : 	CMatrix3x3 m;

	lea	ecx, DWORD PTR _m$19[ebp]
	call	??0CMatrix3x3@gen@@QAE@XZ		; gen::CMatrix3x3::CMatrix3x3

; 2376 : 
; 2377 : 	TFloat32 s, c;
; 2378 : 	SinCos( fAngle, &s, &c );

	lea	eax, DWORD PTR _c$17[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$18[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _fAngle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SinCos@gen@@YAXMPAM0@Z			; gen::SinCos
	add	esp, 12					; 0000000cH

; 2379 : 	TFloat32 t = 1.0f - c;

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _c$17[ebp]
	movss	DWORD PTR _t$16[ebp], xmm0

; 2380 : 
; 2381 : 	CVector3 axisNorm = Normalise( axis );

	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	lea	ecx, DWORD PTR _axisNorm$15[ebp]
	push	ecx
	call	?Normalise@gen@@YA?AVCVector3@1@ABV21@@Z ; gen::Normalise
	add	esp, 8

; 2382 : 	GEN_ASSERT( !axisNorm.IsZero(), "Zero length axis" );

	lea	ecx, DWORD PTR _axisNorm$15[ebp]
	call	?IsZero@CVector3@gen@@QBE_NXZ		; gen::CVector3::IsZero
	mov	BYTE PTR tv187[ebp], al
	movzx	eax, BYTE PTR tv187[ebp]
	test	eax, eax
	je	SHORT $LN1@Matrix3x3R
	mov	eax, DWORD PTR ?__LINE__Var@?1??Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@2@ABVCVector3@2@M@Z@4JA
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BB@OPALDBID@Zero?5length?5axis?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN1@Matrix3x3R:

; 2383 : 
; 2384 : 	TFloat32 sx = s * axisNorm.x;

	movss	xmm0, DWORD PTR _s$18[ebp]
	mulss	xmm0, DWORD PTR _axisNorm$15[ebp]
	movss	DWORD PTR _sx$14[ebp], xmm0

; 2385 : 	TFloat32 sy = s * axisNorm.y;

	movss	xmm0, DWORD PTR _s$18[ebp]
	mulss	xmm0, DWORD PTR _axisNorm$15[ebp+4]
	movss	DWORD PTR _sy$13[ebp], xmm0

; 2386 : 	TFloat32 sz = s * axisNorm.z;

	movss	xmm0, DWORD PTR _s$18[ebp]
	mulss	xmm0, DWORD PTR _axisNorm$15[ebp+8]
	movss	DWORD PTR _sz$12[ebp], xmm0

; 2387 : 	TFloat32 tx = t * axisNorm.x;  

	movss	xmm0, DWORD PTR _t$16[ebp]
	mulss	xmm0, DWORD PTR _axisNorm$15[ebp]
	movss	DWORD PTR _tx$11[ebp], xmm0

; 2388 : 	TFloat32 ty = t * axisNorm.y;

	movss	xmm0, DWORD PTR _t$16[ebp]
	mulss	xmm0, DWORD PTR _axisNorm$15[ebp+4]
	movss	DWORD PTR _ty$10[ebp], xmm0

; 2389 : 	TFloat32 tz = t * axisNorm.z;

	movss	xmm0, DWORD PTR _t$16[ebp]
	mulss	xmm0, DWORD PTR _axisNorm$15[ebp+8]
	movss	DWORD PTR _tz$9[ebp], xmm0

; 2390 : 	TFloat32 txy = ty * axisNorm.x;

	movss	xmm0, DWORD PTR _ty$10[ebp]
	mulss	xmm0, DWORD PTR _axisNorm$15[ebp]
	movss	DWORD PTR _txy$8[ebp], xmm0

; 2391 : 	TFloat32 tyz = tz * axisNorm.y;

	movss	xmm0, DWORD PTR _tz$9[ebp]
	mulss	xmm0, DWORD PTR _axisNorm$15[ebp+4]
	movss	DWORD PTR _tyz$7[ebp], xmm0

; 2392 : 	TFloat32 tzx = tx * axisNorm.z;

	movss	xmm0, DWORD PTR _tx$11[ebp]
	mulss	xmm0, DWORD PTR _axisNorm$15[ebp+8]
	movss	DWORD PTR _tzx$6[ebp], xmm0

; 2393 : 
; 2394 : 	m.e00 = tx * axisNorm.x + c;

	movss	xmm0, DWORD PTR _tx$11[ebp]
	mulss	xmm0, DWORD PTR _axisNorm$15[ebp]
	addss	xmm0, DWORD PTR _c$17[ebp]
	movss	DWORD PTR _m$19[ebp], xmm0

; 2395 : 	m.e01 = txy + sz;

	movss	xmm0, DWORD PTR _txy$8[ebp]
	addss	xmm0, DWORD PTR _sz$12[ebp]
	movss	DWORD PTR _m$19[ebp+4], xmm0

; 2396 : 	m.e02 = tzx - sy;

	movss	xmm0, DWORD PTR _tzx$6[ebp]
	subss	xmm0, DWORD PTR _sy$13[ebp]
	movss	DWORD PTR _m$19[ebp+8], xmm0

; 2397 : 
; 2398 : 	m.e10 = txy - sz; 

	movss	xmm0, DWORD PTR _txy$8[ebp]
	subss	xmm0, DWORD PTR _sz$12[ebp]
	movss	DWORD PTR _m$19[ebp+12], xmm0

; 2399 : 	m.e11 = ty * axisNorm.y + c;

	movss	xmm0, DWORD PTR _ty$10[ebp]
	mulss	xmm0, DWORD PTR _axisNorm$15[ebp+4]
	addss	xmm0, DWORD PTR _c$17[ebp]
	movss	DWORD PTR _m$19[ebp+16], xmm0

; 2400 : 	m.e12 = tyz + sx;

	movss	xmm0, DWORD PTR _tyz$7[ebp]
	addss	xmm0, DWORD PTR _sx$14[ebp]
	movss	DWORD PTR _m$19[ebp+20], xmm0

; 2401 : 
; 2402 : 	m.e20 = tzx + sy;

	movss	xmm0, DWORD PTR _tzx$6[ebp]
	addss	xmm0, DWORD PTR _sy$13[ebp]
	movss	DWORD PTR _m$19[ebp+24], xmm0

; 2403 : 	m.e21 = tyz - sx;

	movss	xmm0, DWORD PTR _tyz$7[ebp]
	subss	xmm0, DWORD PTR _sx$14[ebp]
	movss	DWORD PTR _m$19[ebp+28], xmm0

; 2404 : 	m.e22 = tz * axisNorm.z + c;

	movss	xmm0, DWORD PTR _tz$9[ebp]
	mulss	xmm0, DWORD PTR _axisNorm$15[ebp+8]
	addss	xmm0, DWORD PTR _c$17[ebp]
	movss	DWORD PTR _m$19[ebp+32], xmm0

; 2405 : 
; 2406 : 	return m;

	lea	eax, DWORD PTR _m$19[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABV01@@Z		; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN8@Matrix3x3R
__catch$?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@ABVCVector3@1@M@Z$0:

; 2407 : 
; 2408 : 	GEN_ENDGUARD;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BH@KCOELIJE@gen?3?3Matrix3x3Rotation?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN9@Matrix3x3R
	ret	0
__catch$?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@ABVCVector3@1@M@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BH@KCOELIJE@gen?3?3Matrix3x3Rotation?$AA@
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN11@Matrix3x3R
	ret	0
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@Matrix3x3R
$LN11@Matrix3x3R:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN8@Matrix3x3R
$LN10@Matrix3x3R:
	jmp	SHORT $LN8@Matrix3x3R
$LN9@Matrix3x3R:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN8@Matrix3x3R:

; 2409 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@Matrix3x3R
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 724				; 000002d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN19@Matrix3x3R:
	DD	5
	DD	$LN18@Matrix3x3R
$LN18@Matrix3x3R:
	DD	-60					; ffffffc4H
	DD	36					; 00000024H
	DD	$LN12@Matrix3x3R
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN13@Matrix3x3R
	DD	-84					; ffffffacH
	DD	4
	DD	$LN14@Matrix3x3R
	DD	-116					; ffffff8cH
	DD	12					; 0000000cH
	DD	$LN15@Matrix3x3R
	DD	-236					; ffffff14H
	DD	4
	DD	$LN16@Matrix3x3R
$LN16@Matrix3x3R:
	DB	101					; 00000065H
	DB	0
$LN15@Matrix3x3R:
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	78					; 0000004eH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
$LN14@Matrix3x3R:
	DB	99					; 00000063H
	DB	0
$LN13@Matrix3x3R:
	DB	115					; 00000073H
	DB	0
$LN12@Matrix3x3R:
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@ABVCVector3@1@M@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-728]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@ABVCVector3@1@M@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@ABVCVector3@1@M@Z ENDP ; gen::Matrix3x3Rotation
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@VCVector3@1@W4ERotationOrder@1@@Z
_TEXT	SEGMENT
tv74 = -632						; size = 4
$T2 = -624						; size = 88
$T3 = -528						; size = 88
$T4 = -432						; size = 88
_e$5 = -144						; size = 4
_cZ$6 = -132						; size = 4
_sZ$7 = -120						; size = 4
_cY$8 = -108						; size = 4
_sY$9 = -96						; size = 4
_cX$10 = -84						; size = 4
_sX$11 = -72						; size = 4
_m$12 = -60						; size = 36
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_angles$ = 12						; size = 12
_eRotOrder$ = 24					; size = 4
?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@VCVector3@1@W4ERotationOrder@1@@Z PROC ; gen::Matrix3x3Rotation, COMDAT

; 2253 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@VCVector3@1@W4ERotationOrder@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 616				; 00000268H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-632]
	mov	ecx, 154				; 0000009aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 2254 : 	GEN_GUARD;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2255 : 
; 2256 : 	CMatrix3x3 m;

	lea	ecx, DWORD PTR _m$12[ebp]
	call	??0CMatrix3x3@gen@@QAE@XZ		; gen::CMatrix3x3::CMatrix3x3

; 2257 : 
; 2258 : 	TFloat32 sX, cX, sY, cY, sZ, cZ;
; 2259 : 	SinCos( angles.x, &sX, &cX );

	lea	eax, DWORD PTR _cX$10[ebp]
	push	eax
	lea	ecx, DWORD PTR _sX$11[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _angles$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SinCos@gen@@YAXMPAM0@Z			; gen::SinCos
	add	esp, 12					; 0000000cH

; 2260 : 	SinCos( angles.y, &sY, &cY );

	lea	eax, DWORD PTR _cY$8[ebp]
	push	eax
	lea	ecx, DWORD PTR _sY$9[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _angles$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	call	?SinCos@gen@@YAXMPAM0@Z			; gen::SinCos
	add	esp, 12					; 0000000cH

; 2261 : 	SinCos( angles.z, &sZ, &cZ );

	lea	eax, DWORD PTR _cZ$6[ebp]
	push	eax
	lea	ecx, DWORD PTR _sZ$7[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _angles$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	call	?SinCos@gen@@YAXMPAM0@Z			; gen::SinCos
	add	esp, 12					; 0000000cH

; 2262 : 
; 2263 : 	switch (eRotOrder)

	mov	eax, DWORD PTR _eRotOrder$[ebp]
	mov	DWORD PTR tv74[ebp], eax
	cmp	DWORD PTR tv74[ebp], 5
	ja	$LN1@Matrix3x3R
	mov	ecx, DWORD PTR tv74[ebp]
	jmp	DWORD PTR $LN31@Matrix3x3R[ecx*4]
$LN7@Matrix3x3R:

; 2264 : 	{
; 2265 : 		case kZYX:
; 2266 : 		{
; 2267 : 			m.e00 = cZ * cY;

	movss	xmm0, DWORD PTR _cZ$6[ebp]
	mulss	xmm0, DWORD PTR _cY$8[ebp]
	movss	DWORD PTR _m$12[ebp], xmm0

; 2268 : 			m.e01 = sZ * cX + cZ * sY * sX;

	movss	xmm0, DWORD PTR _cZ$6[ebp]
	mulss	xmm0, DWORD PTR _sY$9[ebp]
	mulss	xmm0, DWORD PTR _sX$11[ebp]
	movss	xmm1, DWORD PTR _sZ$7[ebp]
	mulss	xmm1, DWORD PTR _cX$10[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _m$12[ebp+4], xmm1

; 2269 : 			m.e02 = sZ * sX + -cZ * sY * cX;

	movss	xmm0, DWORD PTR _cZ$6[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _sY$9[ebp]
	mulss	xmm0, DWORD PTR _cX$10[ebp]
	movss	xmm1, DWORD PTR _sZ$7[ebp]
	mulss	xmm1, DWORD PTR _sX$11[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _m$12[ebp+8], xmm1

; 2270 : 
; 2271 : 			m.e10 = -sZ * cY;

	movss	xmm0, DWORD PTR _sZ$7[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _cY$8[ebp]
	movss	DWORD PTR _m$12[ebp+12], xmm0

; 2272 : 			m.e11 = cZ * cX + -sZ * sY * sX;

	movss	xmm0, DWORD PTR _sZ$7[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _sY$9[ebp]
	mulss	xmm0, DWORD PTR _sX$11[ebp]
	movss	xmm1, DWORD PTR _cZ$6[ebp]
	mulss	xmm1, DWORD PTR _cX$10[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _m$12[ebp+16], xmm1

; 2273 : 			m.e12 = cZ * sX + sZ * sY * cX;

	movss	xmm0, DWORD PTR _sZ$7[ebp]
	mulss	xmm0, DWORD PTR _sY$9[ebp]
	mulss	xmm0, DWORD PTR _cX$10[ebp]
	movss	xmm1, DWORD PTR _cZ$6[ebp]
	mulss	xmm1, DWORD PTR _sX$11[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _m$12[ebp+20], xmm1

; 2274 : 
; 2275 : 			m.e20 = sY;

	movss	xmm0, DWORD PTR _sY$9[ebp]
	movss	DWORD PTR _m$12[ebp+24], xmm0

; 2276 : 			m.e21 = -cY * sX;

	movss	xmm0, DWORD PTR _cY$8[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _sX$11[ebp]
	movss	DWORD PTR _m$12[ebp+28], xmm0

; 2277 : 			m.e22 = cY * cX;

	movss	xmm0, DWORD PTR _cY$8[ebp]
	mulss	xmm0, DWORD PTR _cX$10[ebp]
	movss	DWORD PTR _m$12[ebp+32], xmm0

; 2278 : 			break;

	jmp	$LN8@Matrix3x3R
$LN6@Matrix3x3R:

; 2279 : 		}
; 2280 : 		case kYZX:
; 2281 : 		{
; 2282 : 			m.e00 = cY * cZ;

	movss	xmm0, DWORD PTR _cY$8[ebp]
	mulss	xmm0, DWORD PTR _cZ$6[ebp]
	movss	DWORD PTR _m$12[ebp], xmm0

; 2283 : 			m.e01 = cY * sZ * cX + sY * sX;

	movss	xmm0, DWORD PTR _sY$9[ebp]
	mulss	xmm0, DWORD PTR _sX$11[ebp]
	movss	xmm1, DWORD PTR _cY$8[ebp]
	mulss	xmm1, DWORD PTR _sZ$7[ebp]
	mulss	xmm1, DWORD PTR _cX$10[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _m$12[ebp+4], xmm1

; 2284 : 			m.e02 = cY * sZ * sX + -sY * cX;

	movss	xmm0, DWORD PTR _sY$9[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _cX$10[ebp]
	movss	xmm1, DWORD PTR _cY$8[ebp]
	mulss	xmm1, DWORD PTR _sZ$7[ebp]
	mulss	xmm1, DWORD PTR _sX$11[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _m$12[ebp+8], xmm1

; 2285 : 
; 2286 : 			m.e10 = -sZ;

	movss	xmm0, DWORD PTR _sZ$7[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _m$12[ebp+12], xmm0

; 2287 : 			m.e11 = cZ * cX;

	movss	xmm0, DWORD PTR _cZ$6[ebp]
	mulss	xmm0, DWORD PTR _cX$10[ebp]
	movss	DWORD PTR _m$12[ebp+16], xmm0

; 2288 : 			m.e12 = cZ * sX;

	movss	xmm0, DWORD PTR _cZ$6[ebp]
	mulss	xmm0, DWORD PTR _sX$11[ebp]
	movss	DWORD PTR _m$12[ebp+20], xmm0

; 2289 : 
; 2290 : 			m.e20 = sY * cZ;

	movss	xmm0, DWORD PTR _sY$9[ebp]
	mulss	xmm0, DWORD PTR _cZ$6[ebp]
	movss	DWORD PTR _m$12[ebp+24], xmm0

; 2291 : 			m.e21 = sY * sZ * cX + -cY * sX;

	movss	xmm0, DWORD PTR _cY$8[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _sX$11[ebp]
	movss	xmm1, DWORD PTR _sY$9[ebp]
	mulss	xmm1, DWORD PTR _sZ$7[ebp]
	mulss	xmm1, DWORD PTR _cX$10[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _m$12[ebp+28], xmm1

; 2292 : 			m.e22 = sY * sZ * sX + cY * cX;

	movss	xmm0, DWORD PTR _cY$8[ebp]
	mulss	xmm0, DWORD PTR _cX$10[ebp]
	movss	xmm1, DWORD PTR _sY$9[ebp]
	mulss	xmm1, DWORD PTR _sZ$7[ebp]
	mulss	xmm1, DWORD PTR _sX$11[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _m$12[ebp+32], xmm1

; 2293 : 			break;

	jmp	$LN8@Matrix3x3R
$LN5@Matrix3x3R:

; 2294 : 		}
; 2295 : 		case kXZY:
; 2296 : 		{
; 2297 : 			m.e00 = cZ * cY;

	movss	xmm0, DWORD PTR _cZ$6[ebp]
	mulss	xmm0, DWORD PTR _cY$8[ebp]
	movss	DWORD PTR _m$12[ebp], xmm0

; 2298 : 			m.e01 = sZ;

	movss	xmm0, DWORD PTR _sZ$7[ebp]
	movss	DWORD PTR _m$12[ebp+4], xmm0

; 2299 : 			m.e02 = -cZ * sY;

	movss	xmm0, DWORD PTR _cZ$6[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _sY$9[ebp]
	movss	DWORD PTR _m$12[ebp+8], xmm0

; 2300 : 
; 2301 : 			m.e10 = -cX * sZ * cY + sX * sY;

	movss	xmm0, DWORD PTR _sX$11[ebp]
	mulss	xmm0, DWORD PTR _sY$9[ebp]
	movss	xmm1, DWORD PTR _cX$10[ebp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm1, DWORD PTR _sZ$7[ebp]
	mulss	xmm1, DWORD PTR _cY$8[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _m$12[ebp+12], xmm1

; 2302 : 			m.e11 = cX * cZ;

	movss	xmm0, DWORD PTR _cX$10[ebp]
	mulss	xmm0, DWORD PTR _cZ$6[ebp]
	movss	DWORD PTR _m$12[ebp+16], xmm0

; 2303 : 			m.e12 = cX * sZ * sY + sX * cY;

	movss	xmm0, DWORD PTR _sX$11[ebp]
	mulss	xmm0, DWORD PTR _cY$8[ebp]
	movss	xmm1, DWORD PTR _cX$10[ebp]
	mulss	xmm1, DWORD PTR _sZ$7[ebp]
	mulss	xmm1, DWORD PTR _sY$9[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _m$12[ebp+20], xmm1

; 2304 : 
; 2305 : 			m.e20 = sX * sZ * cY + cX * sY;

	movss	xmm0, DWORD PTR _cX$10[ebp]
	mulss	xmm0, DWORD PTR _sY$9[ebp]
	movss	xmm1, DWORD PTR _sX$11[ebp]
	mulss	xmm1, DWORD PTR _sZ$7[ebp]
	mulss	xmm1, DWORD PTR _cY$8[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _m$12[ebp+24], xmm1

; 2306 : 			m.e21 = -sX * cZ;

	movss	xmm0, DWORD PTR _sX$11[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _cZ$6[ebp]
	movss	DWORD PTR _m$12[ebp+28], xmm0

; 2307 : 			m.e22 = -sX * sZ * sY + cX * cY;

	movss	xmm0, DWORD PTR _cX$10[ebp]
	mulss	xmm0, DWORD PTR _cY$8[ebp]
	movss	xmm1, DWORD PTR _sX$11[ebp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm1, DWORD PTR _sZ$7[ebp]
	mulss	xmm1, DWORD PTR _sY$9[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _m$12[ebp+32], xmm1

; 2308 : 			break;

	jmp	$LN8@Matrix3x3R
$LN4@Matrix3x3R:

; 2309 : 		}
; 2310 : 		case kZXY:
; 2311 : 		{
; 2312 : 			m.e00 = cZ * cY + sZ * sX * sY;

	movss	xmm0, DWORD PTR _sZ$7[ebp]
	mulss	xmm0, DWORD PTR _sX$11[ebp]
	mulss	xmm0, DWORD PTR _sY$9[ebp]
	movss	xmm1, DWORD PTR _cZ$6[ebp]
	mulss	xmm1, DWORD PTR _cY$8[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _m$12[ebp], xmm1

; 2313 : 			m.e01 = sZ * cX;

	movss	xmm0, DWORD PTR _sZ$7[ebp]
	mulss	xmm0, DWORD PTR _cX$10[ebp]
	movss	DWORD PTR _m$12[ebp+4], xmm0

; 2314 : 			m.e02 = -cZ * sY + sZ * sX * cY;

	movss	xmm0, DWORD PTR _sZ$7[ebp]
	mulss	xmm0, DWORD PTR _sX$11[ebp]
	mulss	xmm0, DWORD PTR _cY$8[ebp]
	movss	xmm1, DWORD PTR _cZ$6[ebp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm1, DWORD PTR _sY$9[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _m$12[ebp+8], xmm1

; 2315 : 
; 2316 : 			m.e10 = -sZ * cY + cZ * sX * sY;

	movss	xmm0, DWORD PTR _cZ$6[ebp]
	mulss	xmm0, DWORD PTR _sX$11[ebp]
	mulss	xmm0, DWORD PTR _sY$9[ebp]
	movss	xmm1, DWORD PTR _sZ$7[ebp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm1, DWORD PTR _cY$8[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _m$12[ebp+12], xmm1

; 2317 : 			m.e11 = cZ * cX;

	movss	xmm0, DWORD PTR _cZ$6[ebp]
	mulss	xmm0, DWORD PTR _cX$10[ebp]
	movss	DWORD PTR _m$12[ebp+16], xmm0

; 2318 : 			m.e12 = sZ * sY + cZ * sX * cY;

	movss	xmm0, DWORD PTR _cZ$6[ebp]
	mulss	xmm0, DWORD PTR _sX$11[ebp]
	mulss	xmm0, DWORD PTR _cY$8[ebp]
	movss	xmm1, DWORD PTR _sZ$7[ebp]
	mulss	xmm1, DWORD PTR _sY$9[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _m$12[ebp+20], xmm1

; 2319 : 
; 2320 : 			m.e20 = cX * sY;

	movss	xmm0, DWORD PTR _cX$10[ebp]
	mulss	xmm0, DWORD PTR _sY$9[ebp]
	movss	DWORD PTR _m$12[ebp+24], xmm0

; 2321 : 			m.e21 = -sX;

	movss	xmm0, DWORD PTR _sX$11[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _m$12[ebp+28], xmm0

; 2322 : 			m.e22 = cX * cY;

	movss	xmm0, DWORD PTR _cX$10[ebp]
	mulss	xmm0, DWORD PTR _cY$8[ebp]
	movss	DWORD PTR _m$12[ebp+32], xmm0

; 2323 : 			break;

	jmp	$LN8@Matrix3x3R
$LN3@Matrix3x3R:

; 2324 : 		}
; 2325 : 		case kYXZ:
; 2326 : 		{
; 2327 : 			m.e00 = cY * cZ + -sY * sX * sZ;

	movss	xmm0, DWORD PTR _sY$9[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _sX$11[ebp]
	mulss	xmm0, DWORD PTR _sZ$7[ebp]
	movss	xmm1, DWORD PTR _cY$8[ebp]
	mulss	xmm1, DWORD PTR _cZ$6[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _m$12[ebp], xmm1

; 2328 : 			m.e01 = cY * sZ + sY * sX * cZ;

	movss	xmm0, DWORD PTR _sY$9[ebp]
	mulss	xmm0, DWORD PTR _sX$11[ebp]
	mulss	xmm0, DWORD PTR _cZ$6[ebp]
	movss	xmm1, DWORD PTR _cY$8[ebp]
	mulss	xmm1, DWORD PTR _sZ$7[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _m$12[ebp+4], xmm1

; 2329 : 			m.e02 = -sY * cX;

	movss	xmm0, DWORD PTR _sY$9[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _cX$10[ebp]
	movss	DWORD PTR _m$12[ebp+8], xmm0

; 2330 : 
; 2331 : 			m.e10 = -cX * sZ;

	movss	xmm0, DWORD PTR _cX$10[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _sZ$7[ebp]
	movss	DWORD PTR _m$12[ebp+12], xmm0

; 2332 : 			m.e11 = cX * cZ;

	movss	xmm0, DWORD PTR _cX$10[ebp]
	mulss	xmm0, DWORD PTR _cZ$6[ebp]
	movss	DWORD PTR _m$12[ebp+16], xmm0

; 2333 : 			m.e12 = sX;

	movss	xmm0, DWORD PTR _sX$11[ebp]
	movss	DWORD PTR _m$12[ebp+20], xmm0

; 2334 : 
; 2335 : 			m.e20 = sY * cZ + cY * sX * sZ;

	movss	xmm0, DWORD PTR _cY$8[ebp]
	mulss	xmm0, DWORD PTR _sX$11[ebp]
	mulss	xmm0, DWORD PTR _sZ$7[ebp]
	movss	xmm1, DWORD PTR _sY$9[ebp]
	mulss	xmm1, DWORD PTR _cZ$6[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _m$12[ebp+24], xmm1

; 2336 : 			m.e21 = sY * sZ + -cY * sX * cZ;

	movss	xmm0, DWORD PTR _cY$8[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _sX$11[ebp]
	mulss	xmm0, DWORD PTR _cZ$6[ebp]
	movss	xmm1, DWORD PTR _sY$9[ebp]
	mulss	xmm1, DWORD PTR _sZ$7[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _m$12[ebp+28], xmm1

; 2337 : 			m.e22 = cY * cX;

	movss	xmm0, DWORD PTR _cY$8[ebp]
	mulss	xmm0, DWORD PTR _cX$10[ebp]
	movss	DWORD PTR _m$12[ebp+32], xmm0

; 2338 : 			break;

	jmp	$LN8@Matrix3x3R
$LN2@Matrix3x3R:

; 2339 : 		}
; 2340 : 		case kXYZ:
; 2341 : 		{
; 2342 : 			m.e00 = cY * cZ;

	movss	xmm0, DWORD PTR _cY$8[ebp]
	mulss	xmm0, DWORD PTR _cZ$6[ebp]
	movss	DWORD PTR _m$12[ebp], xmm0

; 2343 : 			m.e01 = cY * sZ;

	movss	xmm0, DWORD PTR _cY$8[ebp]
	mulss	xmm0, DWORD PTR _sZ$7[ebp]
	movss	DWORD PTR _m$12[ebp+4], xmm0

; 2344 : 			m.e02 = -sY;

	movss	xmm0, DWORD PTR _sY$9[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _m$12[ebp+8], xmm0

; 2345 : 
; 2346 : 			m.e10 = sX * sY * cZ + -cX * sZ;

	movss	xmm0, DWORD PTR _cX$10[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _sZ$7[ebp]
	movss	xmm1, DWORD PTR _sX$11[ebp]
	mulss	xmm1, DWORD PTR _sY$9[ebp]
	mulss	xmm1, DWORD PTR _cZ$6[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _m$12[ebp+12], xmm1

; 2347 : 			m.e11 = sX * sY * sZ + cX * cZ;

	movss	xmm0, DWORD PTR _cX$10[ebp]
	mulss	xmm0, DWORD PTR _cZ$6[ebp]
	movss	xmm1, DWORD PTR _sX$11[ebp]
	mulss	xmm1, DWORD PTR _sY$9[ebp]
	mulss	xmm1, DWORD PTR _sZ$7[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _m$12[ebp+16], xmm1

; 2348 : 			m.e12 = sX * cY;

	movss	xmm0, DWORD PTR _sX$11[ebp]
	mulss	xmm0, DWORD PTR _cY$8[ebp]
	movss	DWORD PTR _m$12[ebp+20], xmm0

; 2349 : 
; 2350 : 			m.e20 = cX * sY * cZ + sX * sZ;

	movss	xmm0, DWORD PTR _sX$11[ebp]
	mulss	xmm0, DWORD PTR _sZ$7[ebp]
	movss	xmm1, DWORD PTR _cX$10[ebp]
	mulss	xmm1, DWORD PTR _sY$9[ebp]
	mulss	xmm1, DWORD PTR _cZ$6[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _m$12[ebp+24], xmm1

; 2351 : 			m.e21 = cX * sY * sZ + -sX * cZ;

	movss	xmm0, DWORD PTR _sX$11[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _cZ$6[ebp]
	movss	xmm1, DWORD PTR _cX$10[ebp]
	mulss	xmm1, DWORD PTR _sY$9[ebp]
	mulss	xmm1, DWORD PTR _sZ$7[ebp]
	addss	xmm1, xmm0
	movss	DWORD PTR _m$12[ebp+28], xmm1

; 2352 : 			m.e22 = cX * cY;

	movss	xmm0, DWORD PTR _cX$10[ebp]
	mulss	xmm0, DWORD PTR _cY$8[ebp]
	movss	DWORD PTR _m$12[ebp+32], xmm0

; 2353 : 			break;

	jmp	SHORT $LN8@Matrix3x3R
$LN1@Matrix3x3R:

; 2354 : 		}
; 2355 : 
; 2356 : 		default:
; 2357 : 			GEN_ERROR( "Invalid parameter" );

	mov	eax, DWORD PTR ?__LINE__Var@?1??Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@2@VCVector3@2@W4ERotationOrder@2@@Z@4JA
	add	eax, 104				; 00000068H
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN8@Matrix3x3R:

; 2358 : 	}
; 2359 : 
; 2360 : 	return m;

	lea	eax, DWORD PTR _m$12[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABV01@@Z		; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN16@Matrix3x3R
__catch$?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@VCVector3@1@W4ERotationOrder@1@@Z$0:

; 2361 : 
; 2362 : 	GEN_ENDGUARD;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BH@KCOELIJE@gen?3?3Matrix3x3Rotation?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN17@Matrix3x3R
	ret	0
__catch$?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@VCVector3@1@W4ERotationOrder@1@@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BH@KCOELIJE@gen?3?3Matrix3x3Rotation?$AA@
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN19@Matrix3x3R
	ret	0
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN18@Matrix3x3R
$LN19@Matrix3x3R:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN16@Matrix3x3R
$LN18@Matrix3x3R:
	jmp	SHORT $LN16@Matrix3x3R
$LN17@Matrix3x3R:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN16@Matrix3x3R:

; 2363 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@Matrix3x3R
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 632				; 00000278H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN30@Matrix3x3R:
	DD	8
	DD	$LN29@Matrix3x3R
$LN29@Matrix3x3R:
	DD	-60					; ffffffc4H
	DD	36					; 00000024H
	DD	$LN20@Matrix3x3R
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN21@Matrix3x3R
	DD	-84					; ffffffacH
	DD	4
	DD	$LN22@Matrix3x3R
	DD	-96					; ffffffa0H
	DD	4
	DD	$LN23@Matrix3x3R
	DD	-108					; ffffff94H
	DD	4
	DD	$LN24@Matrix3x3R
	DD	-120					; ffffff88H
	DD	4
	DD	$LN25@Matrix3x3R
	DD	-132					; ffffff7cH
	DD	4
	DD	$LN26@Matrix3x3R
	DD	-144					; ffffff70H
	DD	4
	DD	$LN27@Matrix3x3R
$LN27@Matrix3x3R:
	DB	101					; 00000065H
	DB	0
$LN26@Matrix3x3R:
	DB	99					; 00000063H
	DB	90					; 0000005aH
	DB	0
$LN25@Matrix3x3R:
	DB	115					; 00000073H
	DB	90					; 0000005aH
	DB	0
$LN24@Matrix3x3R:
	DB	99					; 00000063H
	DB	89					; 00000059H
	DB	0
$LN23@Matrix3x3R:
	DB	115					; 00000073H
	DB	89					; 00000059H
	DB	0
$LN22@Matrix3x3R:
	DB	99					; 00000063H
	DB	88					; 00000058H
	DB	0
$LN21@Matrix3x3R:
	DB	115					; 00000073H
	DB	88					; 00000058H
	DB	0
$LN20@Matrix3x3R:
	DB	109					; 0000006dH
	DB	0
	npad	2
$LN31@Matrix3x3R:
	DD	$LN2@Matrix3x3R
	DD	$LN5@Matrix3x3R
	DD	$LN6@Matrix3x3R
	DD	$LN3@Matrix3x3R
	DD	$LN4@Matrix3x3R
	DD	$LN7@Matrix3x3R
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@VCVector3@1@W4ERotationOrder@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-636]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@VCVector3@1@W4ERotationOrder@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Matrix3x3Rotation@gen@@YA?AVCMatrix3x3@1@VCVector3@1@W4ERotationOrder@1@@Z ENDP ; gen::Matrix3x3Rotation
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?Matrix3x3RotationZ@gen@@YA?AVCMatrix3x3@1@M@Z
_TEXT	SEGMENT
_cZ$ = -68						; size = 4
_sZ$ = -56						; size = 4
_m$ = -44						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_z$ = 12						; size = 4
?Matrix3x3RotationZ@gen@@YA?AVCMatrix3x3@1@M@Z PROC	; gen::Matrix3x3RotationZ, COMDAT

; 2225 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2226 : 	CMatrix3x3 m;

	lea	ecx, DWORD PTR _m$[ebp]
	call	??0CMatrix3x3@gen@@QAE@XZ		; gen::CMatrix3x3::CMatrix3x3

; 2227 : 
; 2228 : 	TFloat32 sZ, cZ;
; 2229 : 	SinCos( z, &sZ, &cZ );

	lea	eax, DWORD PTR _cZ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sZ$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SinCos@gen@@YAXMPAM0@Z			; gen::SinCos
	add	esp, 12					; 0000000cH

; 2230 : 
; 2231 : 	m.e00 = cZ;

	movss	xmm0, DWORD PTR _cZ$[ebp]
	movss	DWORD PTR _m$[ebp], xmm0

; 2232 : 	m.e01 = sZ;

	movss	xmm0, DWORD PTR _sZ$[ebp]
	movss	DWORD PTR _m$[ebp+4], xmm0

; 2233 : 	m.e02 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+8], xmm0

; 2234 : 
; 2235 : 	m.e10 = -sZ;

	movss	xmm0, DWORD PTR _sZ$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _m$[ebp+12], xmm0

; 2236 : 	m.e11 = cZ;

	movss	xmm0, DWORD PTR _cZ$[ebp]
	movss	DWORD PTR _m$[ebp+16], xmm0

; 2237 : 	m.e12 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+20], xmm0

; 2238 : 
; 2239 : 	m.e20 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+24], xmm0

; 2240 : 	m.e21 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+28], xmm0

; 2241 : 	m.e22 = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _m$[ebp+32], xmm0

; 2242 : 
; 2243 : 	return m;

	lea	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABV01@@Z		; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2244 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Matrix3x3R
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Matrix3x3R:
	DD	3
	DD	$LN6@Matrix3x3R
$LN6@Matrix3x3R:
	DD	-44					; ffffffd4H
	DD	36					; 00000024H
	DD	$LN3@Matrix3x3R
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN4@Matrix3x3R
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN5@Matrix3x3R
$LN5@Matrix3x3R:
	DB	99					; 00000063H
	DB	90					; 0000005aH
	DB	0
$LN4@Matrix3x3R:
	DB	115					; 00000073H
	DB	90					; 0000005aH
	DB	0
$LN3@Matrix3x3R:
	DB	109					; 0000006dH
	DB	0
?Matrix3x3RotationZ@gen@@YA?AVCMatrix3x3@1@M@Z ENDP	; gen::Matrix3x3RotationZ
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?Matrix3x3RotationY@gen@@YA?AVCMatrix3x3@1@M@Z
_TEXT	SEGMENT
_cY$ = -68						; size = 4
_sY$ = -56						; size = 4
_m$ = -44						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_y$ = 12						; size = 4
?Matrix3x3RotationY@gen@@YA?AVCMatrix3x3@1@M@Z PROC	; gen::Matrix3x3RotationY, COMDAT

; 2202 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2203 : 	CMatrix3x3 m;

	lea	ecx, DWORD PTR _m$[ebp]
	call	??0CMatrix3x3@gen@@QAE@XZ		; gen::CMatrix3x3::CMatrix3x3

; 2204 : 
; 2205 : 	TFloat32 sY, cY;
; 2206 : 	SinCos( y, &sY, &cY );

	lea	eax, DWORD PTR _cY$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sY$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SinCos@gen@@YAXMPAM0@Z			; gen::SinCos
	add	esp, 12					; 0000000cH

; 2207 : 
; 2208 : 	m.e00 = cY;

	movss	xmm0, DWORD PTR _cY$[ebp]
	movss	DWORD PTR _m$[ebp], xmm0

; 2209 : 	m.e01 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+4], xmm0

; 2210 : 	m.e02 = -sY;

	movss	xmm0, DWORD PTR _sY$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _m$[ebp+8], xmm0

; 2211 : 
; 2212 : 	m.e10 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+12], xmm0

; 2213 : 	m.e11 = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _m$[ebp+16], xmm0

; 2214 : 	m.e12 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+20], xmm0

; 2215 : 
; 2216 : 	m.e20 = sY;

	movss	xmm0, DWORD PTR _sY$[ebp]
	movss	DWORD PTR _m$[ebp+24], xmm0

; 2217 : 	m.e21 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+28], xmm0

; 2218 : 	m.e22 = cY;

	movss	xmm0, DWORD PTR _cY$[ebp]
	movss	DWORD PTR _m$[ebp+32], xmm0

; 2219 : 
; 2220 : 	return m;

	lea	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABV01@@Z		; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2221 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Matrix3x3R
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Matrix3x3R:
	DD	3
	DD	$LN6@Matrix3x3R
$LN6@Matrix3x3R:
	DD	-44					; ffffffd4H
	DD	36					; 00000024H
	DD	$LN3@Matrix3x3R
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN4@Matrix3x3R
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN5@Matrix3x3R
$LN5@Matrix3x3R:
	DB	99					; 00000063H
	DB	89					; 00000059H
	DB	0
$LN4@Matrix3x3R:
	DB	115					; 00000073H
	DB	89					; 00000059H
	DB	0
$LN3@Matrix3x3R:
	DB	109					; 0000006dH
	DB	0
?Matrix3x3RotationY@gen@@YA?AVCMatrix3x3@1@M@Z ENDP	; gen::Matrix3x3RotationY
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?Matrix3x3RotationX@gen@@YA?AVCMatrix3x3@1@M@Z
_TEXT	SEGMENT
_cX$ = -68						; size = 4
_sX$ = -56						; size = 4
_m$ = -44						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
?Matrix3x3RotationX@gen@@YA?AVCMatrix3x3@1@M@Z PROC	; gen::Matrix3x3RotationX, COMDAT

; 2179 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2180 : 	CMatrix3x3 m;

	lea	ecx, DWORD PTR _m$[ebp]
	call	??0CMatrix3x3@gen@@QAE@XZ		; gen::CMatrix3x3::CMatrix3x3

; 2181 : 
; 2182 : 	TFloat32 sX, cX;
; 2183 : 	SinCos( x, &sX, &cX );

	lea	eax, DWORD PTR _cX$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sX$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SinCos@gen@@YAXMPAM0@Z			; gen::SinCos
	add	esp, 12					; 0000000cH

; 2184 : 
; 2185 : 	m.e00 = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _m$[ebp], xmm0

; 2186 : 	m.e01 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+4], xmm0

; 2187 : 	m.e02 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+8], xmm0

; 2188 : 
; 2189 : 	m.e10 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+12], xmm0

; 2190 : 	m.e11 = cX;

	movss	xmm0, DWORD PTR _cX$[ebp]
	movss	DWORD PTR _m$[ebp+16], xmm0

; 2191 : 	m.e12 = sX;

	movss	xmm0, DWORD PTR _sX$[ebp]
	movss	DWORD PTR _m$[ebp+20], xmm0

; 2192 : 
; 2193 : 	m.e20 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+24], xmm0

; 2194 : 	m.e21 = -sX;

	movss	xmm0, DWORD PTR _sX$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _m$[ebp+28], xmm0

; 2195 : 	m.e22 = cX;

	movss	xmm0, DWORD PTR _cX$[ebp]
	movss	DWORD PTR _m$[ebp+32], xmm0

; 2196 : 
; 2197 : 	return m;

	lea	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABV01@@Z		; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2198 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Matrix3x3R
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN7@Matrix3x3R:
	DD	3
	DD	$LN6@Matrix3x3R
$LN6@Matrix3x3R:
	DD	-44					; ffffffd4H
	DD	36					; 00000024H
	DD	$LN3@Matrix3x3R
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN4@Matrix3x3R
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN5@Matrix3x3R
$LN5@Matrix3x3R:
	DB	99					; 00000063H
	DB	88					; 00000058H
	DB	0
$LN4@Matrix3x3R:
	DB	115					; 00000073H
	DB	88					; 00000058H
	DB	0
$LN3@Matrix3x3R:
	DB	109					; 0000006dH
	DB	0
?Matrix3x3RotationX@gen@@YA?AVCMatrix3x3@1@M@Z ENDP	; gen::Matrix3x3RotationX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?Matrix3x3Identity@gen@@YA?AVCMatrix3x3@1@XZ
_TEXT	SEGMENT
_m$ = -44						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?Matrix3x3Identity@gen@@YA?AVCMatrix3x3@1@XZ PROC	; gen::Matrix3x3Identity, COMDAT

; 2158 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2159 : 	CMatrix3x3 m;

	lea	ecx, DWORD PTR _m$[ebp]
	call	??0CMatrix3x3@gen@@QAE@XZ		; gen::CMatrix3x3::CMatrix3x3

; 2160 : 
; 2161 : 	m.e00 = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _m$[ebp], xmm0

; 2162 : 	m.e01 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+4], xmm0

; 2163 : 	m.e02 = 0.0f; 

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+8], xmm0

; 2164 : 
; 2165 : 	m.e10 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+12], xmm0

; 2166 : 	m.e11 = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _m$[ebp+16], xmm0

; 2167 : 	m.e12 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+20], xmm0

; 2168 : 
; 2169 : 	m.e20 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+24], xmm0

; 2170 : 	m.e21 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _m$[ebp+28], xmm0

; 2171 : 	m.e22 = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _m$[ebp+32], xmm0

; 2172 : 
; 2173 : 	return m;

	lea	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABV01@@Z		; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2174 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Matrix3x3I
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Matrix3x3I:
	DD	1
	DD	$LN4@Matrix3x3I
$LN4@Matrix3x3I:
	DD	-44					; ffffffd4H
	DD	36					; 00000024H
	DD	$LN3@Matrix3x3I
$LN3@Matrix3x3I:
	DB	109					; 0000006dH
	DB	0
?Matrix3x3Identity@gen@@YA?AVCMatrix3x3@1@XZ ENDP	; gen::Matrix3x3Identity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?Inverse@gen@@YA?AVCMatrix3x3@1@ABV21@@Z
_TEXT	SEGMENT
tv216 = -617						; size = 1
$T2 = -612						; size = 88
$T3 = -516						; size = 88
$T4 = -420						; size = 88
_e$5 = -132						; size = 4
_invDet$6 = -120					; size = 4
_det$7 = -108						; size = 4
_det2$8 = -96						; size = 4
_det1$9 = -84						; size = 4
_det0$10 = -72						; size = 4
_mOut$11 = -60						; size = 36
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
?Inverse@gen@@YA?AVCMatrix3x3@1@ABV21@@Z PROC		; gen::Inverse, COMDAT

; 1850 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Inverse@gen@@YA?AVCMatrix3x3@1@ABV21@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 604				; 0000025cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-620]
	mov	ecx, 151				; 00000097H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 1851 : 	GEN_GUARD;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1852 : 
; 1853 : 	CMatrix3x3 mOut;

	lea	ecx, DWORD PTR _mOut$11[ebp]
	call	??0CMatrix3x3@gen@@QAE@XZ		; gen::CMatrix3x3::CMatrix3x3

; 1854 : 
; 1855 : 	// Calculate determinant of upper left 3x3
; 1856 : 	TFloat32 det0 = m.e11*m.e22 - m.e21*m.e12;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	mulss	xmm0, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [eax+32]
	subss	xmm1, xmm0
	movss	DWORD PTR _det0$10[ebp], xmm1

; 1857 : 	TFloat32 det1 = m.e12*m.e20 - m.e22*m.e10;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+20]
	mulss	xmm1, DWORD PTR [eax+24]
	subss	xmm1, xmm0
	movss	DWORD PTR _det1$9[ebp], xmm1

; 1858 : 	TFloat32 det2 = m.e10*m.e21 - m.e20*m.e11;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+12]
	mulss	xmm1, DWORD PTR [eax+28]
	subss	xmm1, xmm0
	movss	DWORD PTR _det2$8[ebp], xmm1

; 1859 : 	TFloat32 det = m.e00*det0 +m.e01*det1 + m.e02*det2;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _det2$8[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [ecx+4]
	mulss	xmm1, DWORD PTR _det1$9[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	movss	xmm2, DWORD PTR [edx]
	mulss	xmm2, DWORD PTR _det0$10[ebp]
	addss	xmm2, xmm1
	addss	xmm2, xmm0
	movss	DWORD PTR _det$7[ebp], xmm2

; 1860 : 	GEN_ASSERT( !IsZero(det), "Singular matrix" );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _det$7[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv216[ebp], al
	movzx	eax, BYTE PTR tv216[ebp]
	test	eax, eax
	je	SHORT $LN1@Inverse
	mov	eax, DWORD PTR ?__LINE__Var@?1??Inverse@gen@@YA?AVCMatrix3x3@2@ABV32@@Z@4JA
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BA@EJDDFENM@Singular?5matrix?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN1@Inverse:

; 1861 : 
; 1862 : 	// Calculate inverse of upper left 3x3
; 1863 : 	TFloat32 invDet = 1.0f / det;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _det$7[ebp]
	movss	DWORD PTR _invDet$6[ebp], xmm0

; 1864 : 	mOut.e00 = invDet * det0;

	movss	xmm0, DWORD PTR _invDet$6[ebp]
	mulss	xmm0, DWORD PTR _det0$10[ebp]
	movss	DWORD PTR _mOut$11[ebp], xmm0

; 1865 : 	mOut.e10 = invDet * det1;

	movss	xmm0, DWORD PTR _invDet$6[ebp]
	mulss	xmm0, DWORD PTR _det1$9[ebp]
	movss	DWORD PTR _mOut$11[ebp+12], xmm0

; 1866 : 	mOut.e20 = invDet * det2;

	movss	xmm0, DWORD PTR _invDet$6[ebp]
	mulss	xmm0, DWORD PTR _det2$8[ebp]
	movss	DWORD PTR _mOut$11[ebp+24], xmm0

; 1867 : 		  
; 1868 : 	mOut.e01 = invDet * (m.e21*m.e02 - m.e01*m.e22);

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+28]
	mulss	xmm1, DWORD PTR [eax+8]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _invDet$6[ebp]
	movss	DWORD PTR _mOut$11[ebp+4], xmm1

; 1869 : 	mOut.e11 = invDet * (m.e22*m.e00 - m.e02*m.e20);

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+32]
	mulss	xmm1, DWORD PTR [eax]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _invDet$6[ebp]
	movss	DWORD PTR _mOut$11[ebp+16], xmm1

; 1870 : 	mOut.e21 = invDet * (m.e20*m.e01 - m.e00*m.e21);

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+24]
	mulss	xmm1, DWORD PTR [eax+4]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _invDet$6[ebp]
	movss	DWORD PTR _mOut$11[ebp+28], xmm1

; 1871 : 		  
; 1872 : 	mOut.e02 = invDet * (m.e01*m.e12 - m.e11*m.e02);

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+20]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _invDet$6[ebp]
	movss	DWORD PTR _mOut$11[ebp+8], xmm1

; 1873 : 	mOut.e12 = invDet * (m.e02*m.e10 - m.e12*m.e00);

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+8]
	mulss	xmm1, DWORD PTR [eax+12]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _invDet$6[ebp]
	movss	DWORD PTR _mOut$11[ebp+20], xmm1

; 1874 : 	mOut.e22 = invDet * (m.e00*m.e11 - m.e10*m.e01);

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx]
	mulss	xmm1, DWORD PTR [eax+16]
	subss	xmm1, xmm0
	mulss	xmm1, DWORD PTR _invDet$6[ebp]
	movss	DWORD PTR _mOut$11[ebp+32], xmm1

; 1875 : 
; 1876 : 	return mOut;

	lea	eax, DWORD PTR _mOut$11[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABV01@@Z		; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN8@Inverse
__catch$?Inverse@gen@@YA?AVCMatrix3x3@1@ABV21@@Z$0:

; 1877 : 
; 1878 : 	GEN_ENDGUARD;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0N@BLGPECID@gen?3?3Inverse?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN9@Inverse
	ret	0
__catch$?Inverse@gen@@YA?AVCMatrix3x3@1@ABV21@@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0N@BLGPECID@gen?3?3Inverse?$AA@
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN11@Inverse
	ret	0
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@Inverse
$LN11@Inverse:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN8@Inverse
$LN10@Inverse:
	jmp	SHORT $LN8@Inverse
$LN9@Inverse:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN8@Inverse:

; 1879 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@Inverse
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 620				; 0000026cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN16@Inverse:
	DD	2
	DD	$LN15@Inverse
$LN15@Inverse:
	DD	-60					; ffffffc4H
	DD	36					; 00000024H
	DD	$LN12@Inverse
	DD	-132					; ffffff7cH
	DD	4
	DD	$LN13@Inverse
$LN13@Inverse:
	DB	101					; 00000065H
	DB	0
$LN12@Inverse:
	DB	109					; 0000006dH
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?Inverse@gen@@YA?AVCMatrix3x3@1@ABV21@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-624]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Inverse@gen@@YA?AVCMatrix3x3@1@ABV21@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Inverse@gen@@YA?AVCMatrix3x3@1@ABV21@@Z ENDP		; gen::Inverse
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?InverseAffine2D@gen@@YA?AVCMatrix3x3@1@ABV21@@Z
_TEXT	SEGMENT
tv157 = -581						; size = 1
$T2 = -576						; size = 88
$T3 = -480						; size = 88
$T4 = -384						; size = 88
_e$5 = -96						; size = 4
_invDet$6 = -84						; size = 4
_det$7 = -72						; size = 4
_mOut$8 = -60						; size = 36
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
?InverseAffine2D@gen@@YA?AVCMatrix3x3@1@ABV21@@Z PROC	; gen::InverseAffine2D, COMDAT

; 1812 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?InverseAffine2D@gen@@YA?AVCMatrix3x3@1@ABV21@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 568				; 00000238H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-584]
	mov	ecx, 142				; 0000008eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 1813 : 	GEN_GUARD;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1814 : 
; 1815 : 	CMatrix3x3 mOut;

	lea	ecx, DWORD PTR _mOut$8[ebp]
	call	??0CMatrix3x3@gen@@QAE@XZ		; gen::CMatrix3x3::CMatrix3x3

; 1816 : 
; 1817 : 	// Calculate determinant of upper left 2x2
; 1818 : 	TFloat32 det = m.e00*m.e11 - m.e01*m.e10;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx]
	mulss	xmm1, DWORD PTR [eax+16]
	subss	xmm1, xmm0
	movss	DWORD PTR _det$7[ebp], xmm1

; 1819 : 	GEN_ASSERT( !IsZero(det), "Singular matrix" );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _det$7[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv157[ebp], al
	movzx	eax, BYTE PTR tv157[ebp]
	test	eax, eax
	je	SHORT $LN1@InverseAff
	mov	eax, DWORD PTR ?__LINE__Var@?1??InverseAffine2D@gen@@YA?AVCMatrix3x3@2@ABV32@@Z@4JA
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BA@EJDDFENM@Singular?5matrix?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN1@InverseAff:

; 1820 : 
; 1821 : 	// Calculate inverse of upper left 2x2
; 1822 : 	TFloat32 invDet = 1.0f / det;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _det$7[ebp]
	movss	DWORD PTR _invDet$6[ebp], xmm0

; 1823 : 	mOut.e00 = invDet * m.e11;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR _invDet$6[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR _mOut$8[ebp], xmm0

; 1824 : 	mOut.e01 = invDet * m.e01;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR _invDet$6[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _mOut$8[ebp+4], xmm0

; 1825 : 	mOut.e02 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _mOut$8[ebp+8], xmm0

; 1826 : 
; 1827 : 	mOut.e10 = invDet * m.e10;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR _invDet$6[ebp]
	mulss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _mOut$8[ebp+12], xmm0

; 1828 : 	mOut.e11 = invDet * m.e00;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR _invDet$6[ebp]
	mulss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _mOut$8[ebp+16], xmm0

; 1829 : 	mOut.e12 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _mOut$8[ebp+20], xmm0

; 1830 : 
; 1831 : 	// Transform negative translation by inverted 3x3 to get inverse
; 1832 : 	mOut.e20 = -m.e20*mOut.e00 - m.e21*mOut.e10;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	mulss	xmm0, DWORD PTR _mOut$8[ebp+12]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [ecx+24]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm1, DWORD PTR _mOut$8[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _mOut$8[ebp+24], xmm1

; 1833 : 	mOut.e21 = -m.e20*mOut.e01 - m.e21*mOut.e11;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	mulss	xmm0, DWORD PTR _mOut$8[ebp+16]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [ecx+24]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm1, DWORD PTR _mOut$8[ebp+4]
	subss	xmm1, xmm0
	movss	DWORD PTR _mOut$8[ebp+28], xmm1

; 1834 : 	mOut.e22 = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _mOut$8[ebp+32], xmm0

; 1835 : 
; 1836 : 	return mOut;

	lea	eax, DWORD PTR _mOut$8[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABV01@@Z		; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN8@InverseAff
__catch$?InverseAffine2D@gen@@YA?AVCMatrix3x3@1@ABV21@@Z$0:

; 1837 : 
; 1838 : 	GEN_ENDGUARD;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BF@GBECBBKC@gen?3?3InverseAffine2D?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN9@InverseAff
	ret	0
__catch$?InverseAffine2D@gen@@YA?AVCMatrix3x3@1@ABV21@@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BF@GBECBBKC@gen?3?3InverseAffine2D?$AA@
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN11@InverseAff
	ret	0
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@InverseAff
$LN11@InverseAff:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN8@InverseAff
$LN10@InverseAff:
	jmp	SHORT $LN8@InverseAff
$LN9@InverseAff:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN8@InverseAff:

; 1839 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@InverseAff
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 584				; 00000248H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN16@InverseAff:
	DD	2
	DD	$LN15@InverseAff
$LN15@InverseAff:
	DD	-60					; ffffffc4H
	DD	36					; 00000024H
	DD	$LN12@InverseAff
	DD	-96					; ffffffa0H
	DD	4
	DD	$LN13@InverseAff
$LN13@InverseAff:
	DB	101					; 00000065H
	DB	0
$LN12@InverseAff:
	DB	109					; 0000006dH
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?InverseAffine2D@gen@@YA?AVCMatrix3x3@1@ABV21@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-588]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?InverseAffine2D@gen@@YA?AVCMatrix3x3@1@ABV21@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?InverseAffine2D@gen@@YA?AVCMatrix3x3@1@ABV21@@Z ENDP	; gen::InverseAffine2D
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?InverseRotScale@gen@@YA?AVCMatrix3x3@1@ABV21@@Z
_TEXT	SEGMENT
tv195 = -629						; size = 1
tv194 = -629						; size = 1
tv193 = -629						; size = 1
$T2 = -624						; size = 88
$T3 = -528						; size = 88
$T4 = -432						; size = 88
_e$5 = -144						; size = 4
_invScaleZ$6 = -132					; size = 4
_invScaleY$7 = -120					; size = 4
_invScaleX$8 = -108					; size = 4
_scaleSqZ$9 = -96					; size = 4
_scaleSqY$10 = -84					; size = 4
_scaleSqX$11 = -72					; size = 4
_mOut$12 = -60						; size = 36
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
?InverseRotScale@gen@@YA?AVCMatrix3x3@1@ABV21@@Z PROC	; gen::InverseRotScale, COMDAT

; 1749 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?InverseRotScale@gen@@YA?AVCMatrix3x3@1@ABV21@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 616				; 00000268H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-632]
	mov	ecx, 154				; 0000009aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 1750 : 	GEN_GUARD;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1751 : 
; 1752 : 	CMatrix3x3 mOut;

	lea	ecx, DWORD PTR _mOut$12[ebp]
	call	??0CMatrix3x3@gen@@QAE@XZ		; gen::CMatrix3x3::CMatrix3x3

; 1753 : 
; 1754 : 	// Get X, Y & Z scaling (squared)
; 1755 : 	TFloat32 scaleSqX = m.e00*m.e00 + m.e01*m.e01 + m.e02*m.e02;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	movss	xmm2, DWORD PTR [ecx]
	mulss	xmm2, DWORD PTR [edx]
	addss	xmm2, xmm1
	addss	xmm2, xmm0
	movss	DWORD PTR _scaleSqX$11[ebp], xmm2

; 1756 : 	TFloat32 scaleSqY = m.e10*m.e10 + m.e11*m.e11 + m.e12*m.e12;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	movss	xmm2, DWORD PTR [ecx+12]
	mulss	xmm2, DWORD PTR [edx+12]
	addss	xmm2, xmm1
	addss	xmm2, xmm0
	movss	DWORD PTR _scaleSqY$10[ebp], xmm2

; 1757 : 	TFloat32 scaleSqZ = m.e20*m.e20 + m.e21*m.e21 + m.e22*m.e22;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+28]
	mulss	xmm1, DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	movss	xmm2, DWORD PTR [ecx+24]
	mulss	xmm2, DWORD PTR [edx+24]
	addss	xmm2, xmm1
	addss	xmm2, xmm0
	movss	DWORD PTR _scaleSqZ$9[ebp], xmm2

; 1758 : 	
; 1759 : 	// Calculate scaling inverse
; 1760 : 	GEN_ASSERT( !IsZero(scaleSqX) && !IsZero(scaleSqY) && !IsZero(scaleSqZ), "Singular matrix" );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleSqX$11[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv193[ebp], al
	movzx	eax, BYTE PTR tv193[ebp]
	test	eax, eax
	jne	SHORT $LN1@InverseRot
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleSqY$10[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv194[ebp], al
	movzx	eax, BYTE PTR tv194[ebp]
	test	eax, eax
	jne	SHORT $LN1@InverseRot
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleSqZ$9[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv195[ebp], al
	movzx	eax, BYTE PTR tv195[ebp]
	test	eax, eax
	je	SHORT $LN2@InverseRot
$LN1@InverseRot:
	mov	eax, DWORD PTR ?__LINE__Var@?1??InverseRotScale@gen@@YA?AVCMatrix3x3@2@ABV32@@Z@4JA
	add	eax, 11					; 0000000bH
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BA@EJDDFENM@Singular?5matrix?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@InverseRot:

; 1761 : 	TFloat32 invScaleX = 1.0f / scaleSqX;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _scaleSqX$11[ebp]
	movss	DWORD PTR _invScaleX$8[ebp], xmm0

; 1762 : 	TFloat32 invScaleY = 1.0f / scaleSqY;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _scaleSqY$10[ebp]
	movss	DWORD PTR _invScaleY$7[ebp], xmm0

; 1763 : 	TFloat32 invScaleZ = 1.0f / scaleSqZ;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _scaleSqZ$9[ebp]
	movss	DWORD PTR _invScaleZ$6[ebp], xmm0

; 1764 : 
; 1765 : 	// Inverse is just the transpose with scaling inverse factored in
; 1766 : 	mOut.e00 = m.e00 * invScaleX;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _invScaleX$8[ebp]
	movss	DWORD PTR _mOut$12[ebp], xmm0

; 1767 : 	mOut.e01 = m.e10 * invScaleY;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _invScaleY$7[ebp]
	movss	DWORD PTR _mOut$12[ebp+4], xmm0

; 1768 : 	mOut.e02 = m.e20 * invScaleZ;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR _invScaleZ$6[ebp]
	movss	DWORD PTR _mOut$12[ebp+8], xmm0

; 1769 : 	
; 1770 : 	mOut.e10 = m.e01 * invScaleX;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _invScaleX$8[ebp]
	movss	DWORD PTR _mOut$12[ebp+12], xmm0

; 1771 : 	mOut.e11 = m.e11 * invScaleY;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR _invScaleY$7[ebp]
	movss	DWORD PTR _mOut$12[ebp+16], xmm0

; 1772 : 	mOut.e12 = m.e21 * invScaleZ;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	mulss	xmm0, DWORD PTR _invScaleZ$6[ebp]
	movss	DWORD PTR _mOut$12[ebp+20], xmm0

; 1773 : 
; 1774 : 	mOut.e20 = m.e02 * invScaleX;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _invScaleX$8[ebp]
	movss	DWORD PTR _mOut$12[ebp+24], xmm0

; 1775 : 	mOut.e21 = m.e12 * invScaleY;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR _invScaleY$7[ebp]
	movss	DWORD PTR _mOut$12[ebp+28], xmm0

; 1776 : 	mOut.e22 = m.e22 * invScaleZ;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR _invScaleZ$6[ebp]
	movss	DWORD PTR _mOut$12[ebp+32], xmm0

; 1777 : 
; 1778 : 	return mOut;

	lea	eax, DWORD PTR _mOut$12[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABV01@@Z		; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN9@InverseRot
__catch$?InverseRotScale@gen@@YA?AVCMatrix3x3@1@ABV21@@Z$0:

; 1779 : 
; 1780 : 	GEN_ENDGUARD;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BF@CDKPJIKO@gen?3?3InverseRotScale?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN10@InverseRot
	ret	0
__catch$?InverseRotScale@gen@@YA?AVCMatrix3x3@1@ABV21@@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BF@CDKPJIKO@gen?3?3InverseRotScale?$AA@
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN12@InverseRot
	ret	0
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN11@InverseRot
$LN12@InverseRot:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN9@InverseRot
$LN11@InverseRot:
	jmp	SHORT $LN9@InverseRot
$LN10@InverseRot:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@InverseRot:

; 1781 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@InverseRot
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 632				; 00000278H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN17@InverseRot:
	DD	2
	DD	$LN16@InverseRot
$LN16@InverseRot:
	DD	-60					; ffffffc4H
	DD	36					; 00000024H
	DD	$LN13@InverseRot
	DD	-144					; ffffff70H
	DD	4
	DD	$LN14@InverseRot
$LN14@InverseRot:
	DB	101					; 00000065H
	DB	0
$LN13@InverseRot:
	DB	109					; 0000006dH
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?InverseRotScale@gen@@YA?AVCMatrix3x3@1@ABV21@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-636]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?InverseRotScale@gen@@YA?AVCMatrix3x3@1@ABV21@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?InverseRotScale@gen@@YA?AVCMatrix3x3@1@ABV21@@Z ENDP	; gen::InverseRotScale
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?Transpose@gen@@YA?AVCMatrix3x3@1@ABV21@@Z
_TEXT	SEGMENT
_transMat$ = -44					; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
?Transpose@gen@@YA?AVCMatrix3x3@1@ABV21@@Z PROC		; gen::Transpose, COMDAT

; 1689 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1690 : 	CMatrix3x3 transMat;

	lea	ecx, DWORD PTR _transMat$[ebp]
	call	??0CMatrix3x3@gen@@QAE@XZ		; gen::CMatrix3x3::CMatrix3x3

; 1691 : 
; 1692 : 	transMat.e00 = m.e00;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _transMat$[ebp], xmm0

; 1693 : 	transMat.e01 = m.e10;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _transMat$[ebp+4], xmm0

; 1694 : 	transMat.e02 = m.e20;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR _transMat$[ebp+8], xmm0

; 1695 : 
; 1696 : 	transMat.e10 = m.e01;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _transMat$[ebp+12], xmm0

; 1697 : 	transMat.e11 = m.e11;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR _transMat$[ebp+16], xmm0

; 1698 : 	transMat.e12 = m.e21;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR _transMat$[ebp+20], xmm0

; 1699 : 
; 1700 : 	transMat.e20 = m.e02;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _transMat$[ebp+24], xmm0

; 1701 : 	transMat.e21 = m.e12;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR _transMat$[ebp+28], xmm0

; 1702 : 	transMat.e22 = m.e22;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR _transMat$[ebp+32], xmm0

; 1703 : 
; 1704 : 	return transMat;

	lea	eax, DWORD PTR _transMat$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABV01@@Z		; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1705 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Transpose
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@Transpose:
	DD	1
	DD	$LN4@Transpose
$LN4@Transpose:
	DD	-44					; ffffffd4H
	DD	36					; 00000024H
	DD	$LN3@Transpose
$LN3@Transpose:
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
?Transpose@gen@@YA?AVCMatrix3x3@1@ABV21@@Z ENDP		; gen::Transpose
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?Orthogonalise2x2@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector2@1@@Z
_TEXT	SEGMENT
tv159 = -596						; size = 4
tv158 = -593						; size = 1
$T2 = -588						; size = 88
$T3 = -492						; size = 88
$T4 = -396						; size = 88
_e$5 = -108						; size = 4
_ccwPerpDot$6 = -96					; size = 4
_invOrigScaleX$7 = -84					; size = 4
_origScaleX$8 = -72					; size = 4
_mOut$9 = -60						; size = 36
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
_scale$ = 16						; size = 4
?Orthogonalise2x2@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector2@1@@Z PROC ; gen::Orthogonalise2x2, COMDAT

; 1625 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Orthogonalise2x2@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector2@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 580				; 00000244H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-596]
	mov	ecx, 145				; 00000091H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 1626 : 	GEN_GUARD;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1627 : 
; 1628 : 	CMatrix3x3 mOut;

	lea	ecx, DWORD PTR _mOut$9[ebp]
	call	??0CMatrix3x3@gen@@QAE@XZ		; gen::CMatrix3x3::CMatrix3x3

; 1629 : 
; 1630 : 	// Normalise first vector
; 1631 : 	TFloat32 origScaleX = m.e00*m.e00 + m.e01*m.e01;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx]
	mulss	xmm1, DWORD PTR [eax]
	addss	xmm1, xmm0
	movss	DWORD PTR _origScaleX$8[ebp], xmm1

; 1632 : 	GEN_ASSERT( !IsZero(origScaleX), "Singular matrix" );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _origScaleX$8[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv158[ebp], al
	movzx	eax, BYTE PTR tv158[ebp]
	test	eax, eax
	je	SHORT $LN3@Orthogonal
	mov	eax, DWORD PTR ?__LINE__Var@?1??Orthogonalise2x2@gen@@YA?AVCMatrix3x3@2@ABV32@ABVCVector2@2@@Z@4JA
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BA@EJDDFENM@Singular?5matrix?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN3@Orthogonal:

; 1633 : 	TFloat32 invOrigScaleX = InvSqrt( origScaleX );

	push	ecx
	movss	xmm0, DWORD PTR _origScaleX$8[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?InvSqrt@gen@@YAMM@Z			; gen::InvSqrt
	add	esp, 4
	fstp	DWORD PTR tv159[ebp]
	movss	xmm0, DWORD PTR tv159[ebp]
	movss	DWORD PTR _invOrigScaleX$7[ebp], xmm0

; 1634 : 	mOut.e00 = m.e00 * invOrigScaleX;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _invOrigScaleX$7[ebp]
	movss	DWORD PTR _mOut$9[ebp], xmm0

; 1635 : 	mOut.e01 = m.e01 * invOrigScaleX;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _invOrigScaleX$7[ebp]
	movss	DWORD PTR _mOut$9[ebp+4], xmm0

; 1636 : 
; 1637 : 	// Second vector is simply perpendicular to first, only need to select cw or ccw direction
; 1638 : 	TFloat32 ccwPerpDot = mOut.e00*m.e11 - mOut.e01*m.e10;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR _mOut$9[ebp+4]
	mulss	xmm0, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR _mOut$9[ebp]
	mulss	xmm1, DWORD PTR [ecx+16]
	subss	xmm1, xmm0
	movss	DWORD PTR _ccwPerpDot$6[ebp], xmm1

; 1639 : 	if (ccwPerpDot >= 0.0f)

	movss	xmm0, DWORD PTR _ccwPerpDot$6[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN2@Orthogonal

; 1640 : 	{
; 1641 : 		mOut.e11 = mOut.e00;

	movss	xmm0, DWORD PTR _mOut$9[ebp]
	movss	DWORD PTR _mOut$9[ebp+16], xmm0

; 1642 : 		mOut.e10 = -mOut.e01;

	movss	xmm0, DWORD PTR _mOut$9[ebp+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _mOut$9[ebp+12], xmm0

; 1643 : 	}
; 1644 : 	else

	jmp	SHORT $LN1@Orthogonal
$LN2@Orthogonal:

; 1645 : 	{
; 1646 : 		mOut.e11 = -mOut.e00;

	movss	xmm0, DWORD PTR _mOut$9[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR _mOut$9[ebp+16], xmm0

; 1647 : 		mOut.e10 = mOut.e01;

	movss	xmm0, DWORD PTR _mOut$9[ebp+4]
	movss	DWORD PTR _mOut$9[ebp+12], xmm0
$LN1@Orthogonal:

; 1648 : 	}
; 1649 : 
; 1650 : 	// Rescale each vector
; 1651 : 	mOut.e00 *= scale.x;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR _mOut$9[ebp]
	mulss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _mOut$9[ebp], xmm0

; 1652 : 	mOut.e01 *= scale.x;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR _mOut$9[ebp+4]
	mulss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _mOut$9[ebp+4], xmm0

; 1653 : 
; 1654 : 	mOut.e10 *= scale.y;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR _mOut$9[ebp+12]
	mulss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _mOut$9[ebp+12], xmm0

; 1655 : 	mOut.e11 *= scale.y;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR _mOut$9[ebp+16]
	mulss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _mOut$9[ebp+16], xmm0

; 1656 : 
; 1657 : 	return mOut;

	lea	eax, DWORD PTR _mOut$9[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABV01@@Z		; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN10@Orthogonal
__catch$?Orthogonalise2x2@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector2@1@@Z$0:

; 1658 : 
; 1659 : 	GEN_ENDGUARD;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BG@OLNACDHO@gen?3?3Orthogonalise2x2?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN11@Orthogonal
	ret	0
__catch$?Orthogonalise2x2@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector2@1@@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BG@OLNACDHO@gen?3?3Orthogonalise2x2?$AA@
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN13@Orthogonal
	ret	0
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN12@Orthogonal
$LN13@Orthogonal:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@Orthogonal
$LN12@Orthogonal:
	jmp	SHORT $LN10@Orthogonal
$LN11@Orthogonal:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN10@Orthogonal:

; 1660 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@Orthogonal
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 596				; 00000254H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@Orthogonal:
	DD	2
	DD	$LN17@Orthogonal
$LN17@Orthogonal:
	DD	-60					; ffffffc4H
	DD	36					; 00000024H
	DD	$LN14@Orthogonal
	DD	-108					; ffffff94H
	DD	4
	DD	$LN15@Orthogonal
$LN15@Orthogonal:
	DB	101					; 00000065H
	DB	0
$LN14@Orthogonal:
	DB	109					; 0000006dH
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?Orthogonalise2x2@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector2@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-600]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Orthogonalise2x2@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector2@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Orthogonalise2x2@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector2@1@@Z ENDP ; gen::Orthogonalise2x2
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?Orthogonalise@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector3@1@@Z
_TEXT	SEGMENT
tv217 = -716						; size = 4
tv215 = -716						; size = 4
tv216 = -713						; size = 1
tv214 = -713						; size = 1
$T2 = -708						; size = 88
$T3 = -612						; size = 88
$T4 = -516						; size = 88
$T5 = -420						; size = 88
_e$6 = -132						; size = 4
_invOrigScaleY$7 = -120					; size = 4
_origScaleY$8 = -108					; size = 4
_proj10$9 = -96						; size = 4
_invOrigScaleX$10 = -84					; size = 4
_origScaleX$11 = -72					; size = 4
_mOut$12 = -60						; size = 36
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
_scale$ = 16						; size = 4
?Orthogonalise@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector3@1@@Z PROC ; gen::Orthogonalise, COMDAT

; 1511 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Orthogonalise@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector3@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 700				; 000002bcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-716]
	mov	ecx, 175				; 000000afH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 1512 : 	GEN_GUARD;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1513 : 
; 1514 : 	CMatrix3x3 mOut;

	lea	ecx, DWORD PTR _mOut$12[ebp]
	call	??0CMatrix3x3@gen@@QAE@XZ		; gen::CMatrix3x3::CMatrix3x3

; 1515 : 
; 1516 : 	// Normalise first vector (x-axis)
; 1517 : 	TFloat32 origScaleX = m.e00*m.e00 + m.e01*m.e01 + m.e02*m.e02;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	movss	xmm2, DWORD PTR [ecx]
	mulss	xmm2, DWORD PTR [edx]
	addss	xmm2, xmm1
	addss	xmm2, xmm0
	movss	DWORD PTR _origScaleX$11[ebp], xmm2

; 1518 : 	GEN_ASSERT( !IsZero(origScaleX), "Singular matrix" );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _origScaleX$11[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv214[ebp], al
	movzx	eax, BYTE PTR tv214[ebp]
	test	eax, eax
	je	SHORT $LN2@Orthogonal
	mov	eax, DWORD PTR ?__LINE__Var@?1??Orthogonalise@gen@@YA?AVCMatrix3x3@2@ABV32@ABVCVector3@2@@Z@4JA
	add	eax, 7
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BA@EJDDFENM@Singular?5matrix?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Orthogonal:

; 1519 : 	TFloat32 invOrigScaleX = InvSqrt( origScaleX );

	push	ecx
	movss	xmm0, DWORD PTR _origScaleX$11[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?InvSqrt@gen@@YAMM@Z			; gen::InvSqrt
	add	esp, 4
	fstp	DWORD PTR tv215[ebp]
	movss	xmm0, DWORD PTR tv215[ebp]
	movss	DWORD PTR _invOrigScaleX$10[ebp], xmm0

; 1520 : 	mOut.e00 = m.e00 * invOrigScaleX;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _invOrigScaleX$10[ebp]
	movss	DWORD PTR _mOut$12[ebp], xmm0

; 1521 : 	mOut.e01 = m.e01 * invOrigScaleX;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _invOrigScaleX$10[ebp]
	movss	DWORD PTR _mOut$12[ebp+4], xmm0

; 1522 : 	mOut.e02 = m.e02 * invOrigScaleX;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _invOrigScaleX$10[ebp]
	movss	DWORD PTR _mOut$12[ebp+8], xmm0

; 1523 : 
; 1524 : 	// Orthogonalise second vector (y-axis) with first
; 1525 : 	TFloat32 proj10 = m.e10*mOut.e00 + m.e11*mOut.e01 + m.e12*mOut.e02;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR _mOut$12[ebp+8]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [ecx+16]
	mulss	xmm1, DWORD PTR _mOut$12[ebp+4]
	mov	edx, DWORD PTR _m$[ebp]
	movss	xmm2, DWORD PTR [edx+12]
	mulss	xmm2, DWORD PTR _mOut$12[ebp]
	addss	xmm2, xmm1
	addss	xmm2, xmm0
	movss	DWORD PTR _proj10$9[ebp], xmm2

; 1526 : 	mOut.e10 = m.e10 - proj10 * mOut.e00;

	movss	xmm0, DWORD PTR _proj10$9[ebp]
	mulss	xmm0, DWORD PTR _mOut$12[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [eax+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _mOut$12[ebp+12], xmm1

; 1527 : 	mOut.e11 = m.e11 - proj10 * mOut.e01;

	movss	xmm0, DWORD PTR _proj10$9[ebp]
	mulss	xmm0, DWORD PTR _mOut$12[ebp+4]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [eax+16]
	subss	xmm1, xmm0
	movss	DWORD PTR _mOut$12[ebp+16], xmm1

; 1528 : 	mOut.e12 = m.e12 - proj10 * mOut.e02;

	movss	xmm0, DWORD PTR _proj10$9[ebp]
	mulss	xmm0, DWORD PTR _mOut$12[ebp+8]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [eax+20]
	subss	xmm1, xmm0
	movss	DWORD PTR _mOut$12[ebp+20], xmm1

; 1529 : 
; 1530 : 	// Normalise second vector
; 1531 : 	TFloat32 origScaleY = mOut.e10*mOut.e10 + mOut.e11*mOut.e11 + mOut.e12*mOut.e12;

	movss	xmm0, DWORD PTR _mOut$12[ebp+20]
	mulss	xmm0, DWORD PTR _mOut$12[ebp+20]
	movss	xmm1, DWORD PTR _mOut$12[ebp+16]
	mulss	xmm1, DWORD PTR _mOut$12[ebp+16]
	movss	xmm2, DWORD PTR _mOut$12[ebp+12]
	mulss	xmm2, DWORD PTR _mOut$12[ebp+12]
	addss	xmm2, xmm1
	addss	xmm2, xmm0
	movss	DWORD PTR _origScaleY$8[ebp], xmm2

; 1532 : 	GEN_ASSERT( !IsZero(origScaleY), "Singular matrix" );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _origScaleY$8[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv216[ebp], al
	movzx	eax, BYTE PTR tv216[ebp]
	test	eax, eax
	je	SHORT $LN1@Orthogonal
	mov	eax, DWORD PTR ?__LINE__Var@?1??Orthogonalise@gen@@YA?AVCMatrix3x3@2@ABV32@ABVCVector3@2@@Z@4JA
	add	eax, 21					; 00000015H
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BA@EJDDFENM@Singular?5matrix?$AA@
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN1@Orthogonal:

; 1533 : 	TFloat32 invOrigScaleY = InvSqrt( origScaleY );

	push	ecx
	movss	xmm0, DWORD PTR _origScaleY$8[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?InvSqrt@gen@@YAMM@Z			; gen::InvSqrt
	add	esp, 4
	fstp	DWORD PTR tv217[ebp]
	movss	xmm0, DWORD PTR tv217[ebp]
	movss	DWORD PTR _invOrigScaleY$7[ebp], xmm0

; 1534 : 	mOut.e10 *= invOrigScaleY;

	movss	xmm0, DWORD PTR _mOut$12[ebp+12]
	mulss	xmm0, DWORD PTR _invOrigScaleY$7[ebp]
	movss	DWORD PTR _mOut$12[ebp+12], xmm0

; 1535 : 	mOut.e11 *= invOrigScaleY;

	movss	xmm0, DWORD PTR _mOut$12[ebp+16]
	mulss	xmm0, DWORD PTR _invOrigScaleY$7[ebp]
	movss	DWORD PTR _mOut$12[ebp+16], xmm0

; 1536 : 	mOut.e12 *= invOrigScaleY;

	movss	xmm0, DWORD PTR _mOut$12[ebp+20]
	mulss	xmm0, DWORD PTR _invOrigScaleY$7[ebp]
	movss	DWORD PTR _mOut$12[ebp+20], xmm0

; 1537 : 
; 1538 : 	// Get third vector from cross product of first two (result is already normalised)
; 1539 : 	mOut.e20 = mOut.e01*mOut.e12 - mOut.e02*mOut.e11;

	movss	xmm0, DWORD PTR _mOut$12[ebp+8]
	mulss	xmm0, DWORD PTR _mOut$12[ebp+16]
	movss	xmm1, DWORD PTR _mOut$12[ebp+4]
	mulss	xmm1, DWORD PTR _mOut$12[ebp+20]
	subss	xmm1, xmm0
	movss	DWORD PTR _mOut$12[ebp+24], xmm1

; 1540 : 	mOut.e21 = mOut.e02*mOut.e10 - mOut.e00*mOut.e12;

	movss	xmm0, DWORD PTR _mOut$12[ebp]
	mulss	xmm0, DWORD PTR _mOut$12[ebp+20]
	movss	xmm1, DWORD PTR _mOut$12[ebp+8]
	mulss	xmm1, DWORD PTR _mOut$12[ebp+12]
	subss	xmm1, xmm0
	movss	DWORD PTR _mOut$12[ebp+28], xmm1

; 1541 : 	mOut.e22 = mOut.e00*mOut.e11 - mOut.e01*mOut.e10;

	movss	xmm0, DWORD PTR _mOut$12[ebp+4]
	mulss	xmm0, DWORD PTR _mOut$12[ebp+12]
	movss	xmm1, DWORD PTR _mOut$12[ebp]
	mulss	xmm1, DWORD PTR _mOut$12[ebp+16]
	subss	xmm1, xmm0
	movss	DWORD PTR _mOut$12[ebp+32], xmm1

; 1542 : 	
; 1543 : 	// Rescale each vector
; 1544 : 	mOut.e00 *= scale.x;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR _mOut$12[ebp]
	mulss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _mOut$12[ebp], xmm0

; 1545 : 	mOut.e01 *= scale.x;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR _mOut$12[ebp+4]
	mulss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _mOut$12[ebp+4], xmm0

; 1546 : 	mOut.e02 *= scale.x;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR _mOut$12[ebp+8]
	mulss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _mOut$12[ebp+8], xmm0

; 1547 : 
; 1548 : 	mOut.e10 *= scale.y;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR _mOut$12[ebp+12]
	mulss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _mOut$12[ebp+12], xmm0

; 1549 : 	mOut.e11 *= scale.y;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR _mOut$12[ebp+16]
	mulss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _mOut$12[ebp+16], xmm0

; 1550 : 	mOut.e12 *= scale.y;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR _mOut$12[ebp+20]
	mulss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _mOut$12[ebp+20], xmm0

; 1551 : 
; 1552 : 	mOut.e20 *= scale.z;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR _mOut$12[ebp+24]
	mulss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _mOut$12[ebp+24], xmm0

; 1553 : 	mOut.e21 *= scale.z;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR _mOut$12[ebp+28]
	mulss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _mOut$12[ebp+28], xmm0

; 1554 : 	mOut.e22 *= scale.z;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR _mOut$12[ebp+32]
	mulss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _mOut$12[ebp+32], xmm0

; 1555 : 
; 1556 : 	return mOut;

	lea	eax, DWORD PTR _mOut$12[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABV01@@Z		; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN9@Orthogonal
__catch$?Orthogonalise@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector3@1@@Z$0:

; 1557 : 
; 1558 : 	GEN_ENDGUARD;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BD@MGLNMEBA@gen?3?3Orthogonalise?$AA@
	mov	ecx, DWORD PTR _e$6[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$6[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN10@Orthogonal
	ret	0
__catch$?Orthogonalise@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector3@1@@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BD@MGLNMEBA@gen?3?3Orthogonalise?$AA@
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T5[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN12@Orthogonal
	ret	0
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN11@Orthogonal
$LN12@Orthogonal:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN9@Orthogonal
$LN11@Orthogonal:
	jmp	SHORT $LN9@Orthogonal
$LN10@Orthogonal:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Orthogonal:

; 1559 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@Orthogonal
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 716				; 000002ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN17@Orthogonal:
	DD	2
	DD	$LN16@Orthogonal
$LN16@Orthogonal:
	DD	-60					; ffffffc4H
	DD	36					; 00000024H
	DD	$LN13@Orthogonal
	DD	-132					; ffffff7cH
	DD	4
	DD	$LN14@Orthogonal
$LN14@Orthogonal:
	DB	101					; 00000065H
	DB	0
$LN13@Orthogonal:
	DB	109					; 0000006dH
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?Orthogonalise@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector3@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-720]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Orthogonalise@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector3@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Orthogonalise@gen@@YA?AVCMatrix3x3@1@ABV21@ABVCVector3@1@@Z ENDP ; gen::Orthogonalise
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?MultiplyAffine2D@gen@@YA?AVCMatrix3x3@1@ABV21@0@Z
_TEXT	SEGMENT
_mOut$ = -44						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_m1$ = 12						; size = 4
_m2$ = 16						; size = 4
?MultiplyAffine2D@gen@@YA?AVCMatrix3x3@1@ABV21@0@Z PROC	; gen::MultiplyAffine2D, COMDAT

; 3198 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 3199 : 	CMatrix3x3 mOut;

	lea	ecx, DWORD PTR _mOut$[ebp]
	call	??0CMatrix3x3@gen@@QAE@XZ		; gen::CMatrix3x3::CMatrix3x3

; 3200 : 
; 3201 : 	mOut.e00 = m1.e00*m2.e00 + m1.e01*m2.e10;

	mov	eax, DWORD PTR _m1$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _m1$[ebp]
	mov	eax, DWORD PTR _m2$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm1
	movss	DWORD PTR _mOut$[ebp], xmm0

; 3202 : 	mOut.e01 = m1.e00*m2.e01 + m1.e01*m2.e11;

	mov	eax, DWORD PTR _m1$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _m1$[ebp]
	mov	eax, DWORD PTR _m2$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	movss	DWORD PTR _mOut$[ebp+4], xmm0

; 3203 : 	mOut.e02 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _mOut$[ebp+8], xmm0

; 3204 : 
; 3205 : 	mOut.e10 = m1.e10*m2.e00 + m1.e11*m2.e10;

	mov	eax, DWORD PTR _m1$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _m1$[ebp]
	mov	eax, DWORD PTR _m2$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm1
	movss	DWORD PTR _mOut$[ebp+12], xmm0

; 3206 : 	mOut.e11 = m1.e10*m2.e01 + m1.e11*m2.e11;

	mov	eax, DWORD PTR _m1$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _m1$[ebp]
	mov	eax, DWORD PTR _m2$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	movss	DWORD PTR _mOut$[ebp+16], xmm0

; 3207 : 	mOut.e12 = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _mOut$[ebp+20], xmm0

; 3208 : 
; 3209 : 	mOut.e20 = m1.e20*m2.e00 + m1.e21*m2.e10 + m2.e20;

	mov	eax, DWORD PTR _m1$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _m1$[ebp]
	mov	eax, DWORD PTR _m2$[ebp]
	movss	xmm1, DWORD PTR [edx+28]
	mulss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _m2$[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR _mOut$[ebp+24], xmm0

; 3210 : 	mOut.e21 = m1.e20*m2.e01 + m1.e21*m2.e11 + m2.e21;

	mov	eax, DWORD PTR _m1$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _m1$[ebp]
	mov	eax, DWORD PTR _m2$[ebp]
	movss	xmm1, DWORD PTR [edx+28]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _m2$[ebp]
	addss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR _mOut$[ebp+28], xmm0

; 3211 : 	mOut.e22 = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _mOut$[ebp+32], xmm0

; 3212 : 
; 3213 : 	return mOut;

	lea	eax, DWORD PTR _mOut$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABV01@@Z		; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3214 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@MultiplyAf
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@MultiplyAf:
	DD	1
	DD	$LN4@MultiplyAf
$LN4@MultiplyAf:
	DD	-44					; ffffffd4H
	DD	36					; 00000024H
	DD	$LN3@MultiplyAf
$LN3@MultiplyAf:
	DB	109					; 0000006dH
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
?MultiplyAffine2D@gen@@YA?AVCMatrix3x3@1@ABV21@0@Z ENDP	; gen::MultiplyAffine2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ??Dgen@@YA?AVCMatrix3x3@0@ABV10@0@Z
_TEXT	SEGMENT
_mOut$ = -44						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_m1$ = 12						; size = 4
_m2$ = 16						; size = 4
??Dgen@@YA?AVCMatrix3x3@0@ABV10@0@Z PROC		; gen::operator*, COMDAT

; 3145 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 3146 : 	CMatrix3x3 mOut;

	lea	ecx, DWORD PTR _mOut$[ebp]
	call	??0CMatrix3x3@gen@@QAE@XZ		; gen::CMatrix3x3::CMatrix3x3

; 3147 : 
; 3148 : 	mOut.e00 = m1.e00*m2.e00 + m1.e01*m2.e10 + m1.e02*m2.e20;

	mov	eax, DWORD PTR _m1$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _m1$[ebp]
	mov	eax, DWORD PTR _m2$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _m1$[ebp]
	mov	edx, DWORD PTR _m2$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+24]
	addss	xmm0, xmm1
	movss	DWORD PTR _mOut$[ebp], xmm0

; 3149 : 	mOut.e01 = m1.e00*m2.e01 + m1.e01*m2.e11 + m1.e02*m2.e21;

	mov	eax, DWORD PTR _m1$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _m1$[ebp]
	mov	eax, DWORD PTR _m2$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _m1$[ebp]
	mov	edx, DWORD PTR _m2$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+28]
	addss	xmm0, xmm1
	movss	DWORD PTR _mOut$[ebp+4], xmm0

; 3150 : 	mOut.e02 = m1.e00*m2.e02 + m1.e01*m2.e12 + m1.e02*m2.e22;

	mov	eax, DWORD PTR _m1$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _m1$[ebp]
	mov	eax, DWORD PTR _m2$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+20]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _m1$[ebp]
	mov	edx, DWORD PTR _m2$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+32]
	addss	xmm0, xmm1
	movss	DWORD PTR _mOut$[ebp+8], xmm0

; 3151 : 
; 3152 : 	mOut.e10 = m1.e10*m2.e00 + m1.e11*m2.e10 + m1.e12*m2.e20;

	mov	eax, DWORD PTR _m1$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _m1$[ebp]
	mov	eax, DWORD PTR _m2$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _m1$[ebp]
	mov	edx, DWORD PTR _m2$[ebp]
	movss	xmm1, DWORD PTR [ecx+20]
	mulss	xmm1, DWORD PTR [edx+24]
	addss	xmm0, xmm1
	movss	DWORD PTR _mOut$[ebp+12], xmm0

; 3153 : 	mOut.e11 = m1.e10*m2.e01 + m1.e11*m2.e11 + m1.e12*m2.e21;

	mov	eax, DWORD PTR _m1$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _m1$[ebp]
	mov	eax, DWORD PTR _m2$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _m1$[ebp]
	mov	edx, DWORD PTR _m2$[ebp]
	movss	xmm1, DWORD PTR [ecx+20]
	mulss	xmm1, DWORD PTR [edx+28]
	addss	xmm0, xmm1
	movss	DWORD PTR _mOut$[ebp+16], xmm0

; 3154 : 	mOut.e12 = m1.e10*m2.e02 + m1.e11*m2.e12 + m1.e12*m2.e22;

	mov	eax, DWORD PTR _m1$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _m1$[ebp]
	mov	eax, DWORD PTR _m2$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [eax+20]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _m1$[ebp]
	mov	edx, DWORD PTR _m2$[ebp]
	movss	xmm1, DWORD PTR [ecx+20]
	mulss	xmm1, DWORD PTR [edx+32]
	addss	xmm0, xmm1
	movss	DWORD PTR _mOut$[ebp+20], xmm0

; 3155 : 
; 3156 : 	mOut.e20 = m1.e20*m2.e00 + m1.e21*m2.e10 + m1.e22*m2.e20;

	mov	eax, DWORD PTR _m1$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _m1$[ebp]
	mov	eax, DWORD PTR _m2$[ebp]
	movss	xmm1, DWORD PTR [edx+28]
	mulss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _m1$[ebp]
	mov	edx, DWORD PTR _m2$[ebp]
	movss	xmm1, DWORD PTR [ecx+32]
	mulss	xmm1, DWORD PTR [edx+24]
	addss	xmm0, xmm1
	movss	DWORD PTR _mOut$[ebp+24], xmm0

; 3157 : 	mOut.e21 = m1.e20*m2.e01 + m1.e21*m2.e11 + m1.e22*m2.e21;

	mov	eax, DWORD PTR _m1$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _m1$[ebp]
	mov	eax, DWORD PTR _m2$[ebp]
	movss	xmm1, DWORD PTR [edx+28]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _m1$[ebp]
	mov	edx, DWORD PTR _m2$[ebp]
	movss	xmm1, DWORD PTR [ecx+32]
	mulss	xmm1, DWORD PTR [edx+28]
	addss	xmm0, xmm1
	movss	DWORD PTR _mOut$[ebp+28], xmm0

; 3158 : 	mOut.e22 = m1.e20*m2.e02 + m1.e21*m2.e12 + m1.e22*m2.e22;

	mov	eax, DWORD PTR _m1$[ebp]
	mov	ecx, DWORD PTR _m2$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _m1$[ebp]
	mov	eax, DWORD PTR _m2$[ebp]
	movss	xmm1, DWORD PTR [edx+28]
	mulss	xmm1, DWORD PTR [eax+20]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _m1$[ebp]
	mov	edx, DWORD PTR _m2$[ebp]
	movss	xmm1, DWORD PTR [ecx+32]
	mulss	xmm1, DWORD PTR [edx+32]
	addss	xmm0, xmm1
	movss	DWORD PTR _mOut$[ebp+32], xmm0

; 3159 : 
; 3160 : 	return mOut;

	lea	eax, DWORD PTR _mOut$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABV01@@Z		; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3161 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@operator:
	DD	1
	DD	$LN4@operator
$LN4@operator:
	DD	-44					; ffffffd4H
	DD	36					; 00000024H
	DD	$LN3@operator
$LN3@operator:
	DB	109					; 0000006dH
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
??Dgen@@YA?AVCMatrix3x3@0@ABV10@0@Z ENDP		; gen::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ??Dgen@@YA?AVCVector3@0@ABVCMatrix3x3@0@ABV10@@Z
_TEXT	SEGMENT
_vOut$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
_v$ = 16						; size = 4
??Dgen@@YA?AVCVector3@0@ABVCMatrix3x3@0@ABV10@@Z PROC	; gen::operator*, COMDAT

; 3058 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 3059 :     CVector3 vOut;

	lea	ecx, DWORD PTR _vOut$[ebp]
	call	??0CVector3@gen@@QAE@XZ			; gen::CVector3::CVector3

; 3060 :     vOut.x = m.e00*v.x + m.e01*v.y + m.e02*v.z;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _vOut$[ebp], xmm0

; 3061 :     vOut.y = m.e10*v.x + m.e11*v.y + m.e12*v.z;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [ecx+20]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _vOut$[ebp+4], xmm0

; 3062 :     vOut.z = m.e20*v.x + m.e21*v.y + m.e22*v.z;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _m$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [edx+28]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm1, DWORD PTR [ecx+32]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	movss	DWORD PTR _vOut$[ebp+8], xmm0

; 3063 : 
; 3064 :     return vOut;

	lea	eax, DWORD PTR _vOut$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CVector3@gen@@QAE@ABV01@@Z		; gen::CVector3::CVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3065 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@operator:
	DD	1
	DD	$LN4@operator
$LN4@operator:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN3@operator
$LN3@operator:
	DB	118					; 00000076H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
??Dgen@@YA?AVCVector3@0@ABVCMatrix3x3@0@ABV10@@Z ENDP	; gen::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ??Dgen@@YA?AVCVector3@0@ABV10@ABVCMatrix3x3@0@@Z
_TEXT	SEGMENT
_vOut$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_m$ = 16						; size = 4
??Dgen@@YA?AVCVector3@0@ABV10@ABVCMatrix3x3@0@@Z PROC	; gen::operator*, COMDAT

; 3042 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 3043 :     CVector3 vOut;

	lea	ecx, DWORD PTR _vOut$[ebp]
	call	??0CVector3@gen@@QAE@XZ			; gen::CVector3::CVector3

; 3044 :     vOut.x = v.x*m.e00 + v.y*m.e10 + v.z*m.e20;

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+24]
	addss	xmm0, xmm1
	movss	DWORD PTR _vOut$[ebp], xmm0

; 3045 :     vOut.y = v.x*m.e01 + v.y*m.e11 + v.z*m.e21;

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+28]
	addss	xmm0, xmm1
	movss	DWORD PTR _vOut$[ebp+4], xmm0

; 3046 :     vOut.z = v.x*m.e02 + v.y*m.e12 + v.z*m.e22;

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+20]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+32]
	addss	xmm0, xmm1
	movss	DWORD PTR _vOut$[ebp+8], xmm0

; 3047 : 
; 3048 :     return vOut;

	lea	eax, DWORD PTR _vOut$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CVector3@gen@@QAE@ABV01@@Z		; gen::CVector3::CVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3049 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@operator:
	DD	1
	DD	$LN4@operator
$LN4@operator:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN3@operator
$LN3@operator:
	DB	118					; 00000076H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
??Dgen@@YA?AVCVector3@0@ABV10@ABVCMatrix3x3@0@@Z ENDP	; gen::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ??Kgen@@YA?AVCMatrix3x3@0@ABV10@M@Z
_TEXT	SEGMENT
tv147 = -557						; size = 1
$T2 = -552						; size = 88
$T3 = -456						; size = 88
$T4 = -360						; size = 88
_e$5 = -72						; size = 4
_mOut$6 = -60						; size = 36
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
_s$ = 16						; size = 4
??Kgen@@YA?AVCMatrix3x3@0@ABV10@M@Z PROC		; gen::operator/, COMDAT

; 3011 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??Kgen@@YA?AVCMatrix3x3@0@ABV10@M@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 544				; 00000220H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-560]
	mov	ecx, 136				; 00000088H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 3012 : 	GEN_GUARD_OPT;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 3013 : 	GEN_ASSERT_OPT( !IsZero(s), "Invalid parameter" );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv147[ebp], al
	movzx	eax, BYTE PTR tv147[ebp]
	test	eax, eax
	je	SHORT $LN1@operator
	mov	eax, DWORD PTR ?__LINE__Var@?1???Kgen@@YA?AVCMatrix3x3@1@ABV21@M@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN1@operator:

; 3014 : 
; 3015 : 	CMatrix3x3 mOut;

	lea	ecx, DWORD PTR _mOut$6[ebp]
	call	??0CMatrix3x3@gen@@QAE@XZ		; gen::CMatrix3x3::CMatrix3x3

; 3016 :     mOut.e00 = m.e00 / s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax]
	divss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$6[ebp], xmm0

; 3017 :     mOut.e01 = m.e01 / s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	divss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$6[ebp+4], xmm0

; 3018 :     mOut.e02 = m.e02 / s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	divss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$6[ebp+8], xmm0

; 3019 :     mOut.e10 = m.e10 / s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	divss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$6[ebp+12], xmm0

; 3020 :     mOut.e11 = m.e11 / s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	divss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$6[ebp+16], xmm0

; 3021 :     mOut.e12 = m.e12 / s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	divss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$6[ebp+20], xmm0

; 3022 :     mOut.e20 = m.e20 / s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	divss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$6[ebp+24], xmm0

; 3023 :     mOut.e21 = m.e21 / s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	divss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$6[ebp+28], xmm0

; 3024 :     mOut.e22 = m.e22 / s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	divss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$6[ebp+32], xmm0

; 3025 : 
; 3026 : 	return mOut;

	lea	eax, DWORD PTR _mOut$6[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABV01@@Z		; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN8@operator
__catch$??Kgen@@YA?AVCMatrix3x3@0@ABV10@M@Z$0:

; 3027 : 
; 3028 : 	GEN_ENDGUARD_OPT;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BA@KCKIPOBF@gen?3?3operator?5?1?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN9@operator
	ret	0
__catch$??Kgen@@YA?AVCMatrix3x3@0@ABV10@M@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BA@KCKIPOBF@gen?3?3operator?5?1?$AA@
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN11@operator
	ret	0
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@operator
$LN11@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN8@operator
$LN10@operator:
	jmp	SHORT $LN8@operator
$LN9@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN8@operator:

; 3029 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 560				; 00000230H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN16@operator:
	DD	2
	DD	$LN15@operator
$LN15@operator:
	DD	-60					; ffffffc4H
	DD	36					; 00000024H
	DD	$LN12@operator
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN13@operator
$LN13@operator:
	DB	101					; 00000065H
	DB	0
$LN12@operator:
	DB	109					; 0000006dH
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??Kgen@@YA?AVCMatrix3x3@0@ABV10@M@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-564]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??Kgen@@YA?AVCMatrix3x3@0@ABV10@M@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??Kgen@@YA?AVCMatrix3x3@0@ABV10@M@Z ENDP		; gen::operator/
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ??Dgen@@YA?AVCMatrix3x3@0@ABV10@M@Z
_TEXT	SEGMENT
_mOut$ = -44						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
_s$ = 16						; size = 4
??Dgen@@YA?AVCMatrix3x3@0@ABV10@M@Z PROC		; gen::operator*, COMDAT

; 2947 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2948 : 	CMatrix3x3 mOut;

	lea	ecx, DWORD PTR _mOut$[ebp]
	call	??0CMatrix3x3@gen@@QAE@XZ		; gen::CMatrix3x3::CMatrix3x3

; 2949 :     mOut.e00 = m.e00 * s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$[ebp], xmm0

; 2950 :     mOut.e01 = m.e01 * s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$[ebp+4], xmm0

; 2951 :     mOut.e02 = m.e02 * s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$[ebp+8], xmm0

; 2952 :     mOut.e10 = m.e10 * s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$[ebp+12], xmm0

; 2953 :     mOut.e11 = m.e11 * s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$[ebp+16], xmm0

; 2954 :     mOut.e12 = m.e12 * s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$[ebp+20], xmm0

; 2955 :     mOut.e20 = m.e20 * s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$[ebp+24], xmm0

; 2956 :     mOut.e21 = m.e21 * s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$[ebp+28], xmm0

; 2957 :     mOut.e22 = m.e22 * s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$[ebp+32], xmm0

; 2958 : 
; 2959 : 	return mOut;

	lea	eax, DWORD PTR _mOut$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABV01@@Z		; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2960 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@operator:
	DD	1
	DD	$LN4@operator
$LN4@operator:
	DD	-44					; ffffffd4H
	DD	36					; 00000024H
	DD	$LN3@operator
$LN3@operator:
	DB	109					; 0000006dH
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
??Dgen@@YA?AVCMatrix3x3@0@ABV10@M@Z ENDP		; gen::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ??Dgen@@YA?AVCMatrix3x3@0@MABV10@@Z
_TEXT	SEGMENT
_mOut$ = -44						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
_m$ = 16						; size = 4
??Dgen@@YA?AVCMatrix3x3@0@MABV10@@Z PROC		; gen::operator*, COMDAT

; 2968 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 2969 : 	CMatrix3x3 mOut;

	lea	ecx, DWORD PTR _mOut$[ebp]
	call	??0CMatrix3x3@gen@@QAE@XZ		; gen::CMatrix3x3::CMatrix3x3

; 2970 :     mOut.e00 = m.e00 * s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$[ebp], xmm0

; 2971 :     mOut.e01 = m.e01 * s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$[ebp+4], xmm0

; 2972 :     mOut.e02 = m.e02 * s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$[ebp+8], xmm0

; 2973 :     mOut.e10 = m.e10 * s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$[ebp+12], xmm0

; 2974 :     mOut.e11 = m.e11 * s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$[ebp+16], xmm0

; 2975 :     mOut.e12 = m.e12 * s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$[ebp+20], xmm0

; 2976 :     mOut.e20 = m.e20 * s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$[ebp+24], xmm0

; 2977 :     mOut.e21 = m.e21 * s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$[ebp+28], xmm0

; 2978 :     mOut.e22 = m.e22 * s;

	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR _mOut$[ebp+32], xmm0

; 2979 : 
; 2980 : 	return mOut;

	lea	eax, DWORD PTR _mOut$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CMatrix3x3@gen@@QAE@ABV01@@Z		; gen::CMatrix3x3::CMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2981 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@operator:
	DD	1
	DD	$LN4@operator
$LN4@operator:
	DD	-44					; ffffffd4H
	DD	36					; 00000024H
	DD	$LN3@operator
$LN3@operator:
	DB	109					; 0000006dH
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
??Dgen@@YA?AVCMatrix3x3@0@MABV10@@Z ENDP		; gen::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ??9gen@@YA_NABVCMatrix3x3@0@0@Z
_TEXT	SEGMENT
tv168 = -196						; size = 4
_m1$ = 8						; size = 4
_m2$ = 12						; size = 4
??9gen@@YA_NABVCMatrix3x3@0@0@Z PROC			; gen::operator!=, COMDAT

; 2915 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2916 : 	return !AreEqual(m1.e00, m2.e00) || !AreEqual(m1.e01, m2.e01) || !AreEqual(m1.e02, m2.e02) ||
; 2917 : 		   !AreEqual(m1.e10, m2.e10) || !AreEqual(m1.e11, m2.e11) || !AreEqual(m1.e12, m2.e12) ||
; 2918 : 	       !AreEqual(m1.e20, m2.e20) || !AreEqual(m1.e21, m2.e21) || !AreEqual(m1.e22, m2.e22);

	push	4
	mov	eax, DWORD PTR _m2$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _m1$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [esp], xmm0
	call	?AreEqual@gen@@YA_NMMI@Z		; gen::AreEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	$LN3@operator
	push	4
	mov	eax, DWORD PTR _m2$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _m1$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [esp], xmm0
	call	?AreEqual@gen@@YA_NMMI@Z		; gen::AreEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	$LN3@operator
	push	4
	mov	eax, DWORD PTR _m2$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _m1$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR [esp], xmm0
	call	?AreEqual@gen@@YA_NMMI@Z		; gen::AreEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	$LN3@operator
	push	4
	mov	eax, DWORD PTR _m2$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _m1$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR [esp], xmm0
	call	?AreEqual@gen@@YA_NMMI@Z		; gen::AreEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	$LN3@operator
	push	4
	mov	eax, DWORD PTR _m2$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _m1$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR [esp], xmm0
	call	?AreEqual@gen@@YA_NMMI@Z		; gen::AreEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	$LN3@operator
	push	4
	mov	eax, DWORD PTR _m2$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _m1$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+20]
	movss	DWORD PTR [esp], xmm0
	call	?AreEqual@gen@@YA_NMMI@Z		; gen::AreEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	$LN3@operator
	push	4
	mov	eax, DWORD PTR _m2$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _m1$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR [esp], xmm0
	call	?AreEqual@gen@@YA_NMMI@Z		; gen::AreEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@operator
	push	4
	mov	eax, DWORD PTR _m2$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _m1$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR [esp], xmm0
	call	?AreEqual@gen@@YA_NMMI@Z		; gen::AreEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@operator
	push	4
	mov	eax, DWORD PTR _m2$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _m1$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR [esp], xmm0
	call	?AreEqual@gen@@YA_NMMI@Z		; gen::AreEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@operator
	mov	DWORD PTR tv168[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv168[ebp], 1
$LN4@operator:
	mov	al, BYTE PTR tv168[ebp]

; 2919 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??9gen@@YA_NABVCMatrix3x3@0@0@Z ENDP			; gen::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ??8gen@@YA_NABVCMatrix3x3@0@0@Z
_TEXT	SEGMENT
tv168 = -196						; size = 4
_m1$ = 8						; size = 4
_m2$ = 12						; size = 4
??8gen@@YA_NABVCMatrix3x3@0@0@Z PROC			; gen::operator==, COMDAT

; 2902 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2903 : 	return AreEqual(m1.e00, m2.e00) && AreEqual(m1.e01, m2.e01) && AreEqual(m1.e02, m2.e02) &&
; 2904 : 		   AreEqual(m1.e10, m2.e10) && AreEqual(m1.e11, m2.e11) && AreEqual(m1.e12, m2.e12) &&
; 2905 : 	       AreEqual(m1.e20, m2.e20) && AreEqual(m1.e21, m2.e21) && AreEqual(m1.e22, m2.e22);

	push	4
	mov	eax, DWORD PTR _m2$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _m1$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [esp], xmm0
	call	?AreEqual@gen@@YA_NMMI@Z		; gen::AreEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	$LN3@operator
	push	4
	mov	eax, DWORD PTR _m2$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _m1$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [esp], xmm0
	call	?AreEqual@gen@@YA_NMMI@Z		; gen::AreEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	$LN3@operator
	push	4
	mov	eax, DWORD PTR _m2$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _m1$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR [esp], xmm0
	call	?AreEqual@gen@@YA_NMMI@Z		; gen::AreEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	$LN3@operator
	push	4
	mov	eax, DWORD PTR _m2$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _m1$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR [esp], xmm0
	call	?AreEqual@gen@@YA_NMMI@Z		; gen::AreEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	$LN3@operator
	push	4
	mov	eax, DWORD PTR _m2$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+16]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _m1$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+16]
	movss	DWORD PTR [esp], xmm0
	call	?AreEqual@gen@@YA_NMMI@Z		; gen::AreEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	$LN3@operator
	push	4
	mov	eax, DWORD PTR _m2$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _m1$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+20]
	movss	DWORD PTR [esp], xmm0
	call	?AreEqual@gen@@YA_NMMI@Z		; gen::AreEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	$LN3@operator
	push	4
	mov	eax, DWORD PTR _m2$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+24]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _m1$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR [esp], xmm0
	call	?AreEqual@gen@@YA_NMMI@Z		; gen::AreEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@operator
	push	4
	mov	eax, DWORD PTR _m2$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _m1$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR [esp], xmm0
	call	?AreEqual@gen@@YA_NMMI@Z		; gen::AreEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@operator
	push	4
	mov	eax, DWORD PTR _m2$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+32]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _m1$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+32]
	movss	DWORD PTR [esp], xmm0
	call	?AreEqual@gen@@YA_NMMI@Z		; gen::AreEqual
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@operator
	mov	DWORD PTR tv168[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv168[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv168[ebp]

; 2906 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??8gen@@YA_NABVCMatrix3x3@0@0@Z ENDP			; gen::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?MultiplyAffine2D@CMatrix3x3@gen@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
$T1 = -256						; size = 36
_t$2 = -20						; size = 4
_this$ = -8						; size = 4
_m$ = 8							; size = 4
?MultiplyAffine2D@CMatrix3x3@gen@@QAEAAV12@ABV12@@Z PROC ; gen::CMatrix3x3::MultiplyAffine2D, COMDAT
; _this$ = ecx

; 3166 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3167 : 	if ( this == &m )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _m$[ebp]
	jne	SHORT $LN2@MultiplyAf

; 3168 : 	{
; 3169 : 		// Special case of multiplying by self - no copy optimisations so use binary version
; 3170 : 		*this = gen::MultiplyAffine2D( m, m );

	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	?MultiplyAffine2D@gen@@YA?AVCMatrix3x3@1@ABV21@0@Z ; gen::MultiplyAffine2D
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4CMatrix3x3@gen@@QAEAAV01@ABV01@@Z	; gen::CMatrix3x3::operator=

; 3171 : 	}
; 3172 : 	else

	jmp	$LN1@MultiplyAf
$LN2@MultiplyAf:

; 3173 : 	{
; 3174 : 		TFloat32 t;
; 3175 : 
; 3176 : 		t   = e00*m.e00 + e01*m.e10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm1
	movss	DWORD PTR _t$2[ebp], xmm0

; 3177 : 		e01 = e00*m.e01 + e01*m.e11;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 3178 : 		e00 = t;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _t$2[ebp]
	movss	DWORD PTR [eax], xmm0

; 3179 : 
; 3180 : 		t   = e10*m.e00 + e11*m.e10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm1
	movss	DWORD PTR _t$2[ebp], xmm0

; 3181 : 		e11 = e10*m.e01 + e11*m.e11;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+16], xmm0

; 3182 : 		e10 = t;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _t$2[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 3183 : 
; 3184 : 		t   = e20*m.e00 + e21*m.e10 + m.e20;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+28]
	mulss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _m$[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR _t$2[ebp], xmm0

; 3185 : 		e21 = e20*m.e01 + e21*m.e11 + m.e21;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+28]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _m$[ebp]
	addss	xmm0, DWORD PTR [ecx+28]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+28], xmm0

; 3186 : 		e20 = t;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _t$2[ebp]
	movss	DWORD PTR [eax+24], xmm0
$LN1@MultiplyAf:

; 3187 : 	}
; 3188 : 
; 3189 : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 3190 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?MultiplyAffine2D@CMatrix3x3@gen@@QAEAAV12@ABV12@@Z ENDP ; gen::CMatrix3x3::MultiplyAffine2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ??XCMatrix3x3@gen@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
$T1 = -268						; size = 36
_t1$2 = -32						; size = 4
_t0$3 = -20						; size = 4
_this$ = -8						; size = 4
_m$ = 8							; size = 4
??XCMatrix3x3@gen@@QAEAAV01@ABV01@@Z PROC		; gen::CMatrix3x3::operator*=, COMDAT
; _this$ = ecx

; 3107 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3108 : 	if ( this == &m )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _m$[ebp]
	jne	SHORT $LN2@operator

; 3109 : 	{
; 3110 : 		// Special case of multiplying by self - no copy optimisations so use binary version
; 3111 : 		*this = m * m;

	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??Dgen@@YA?AVCMatrix3x3@0@ABV10@0@Z	; gen::operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4CMatrix3x3@gen@@QAEAAV01@ABV01@@Z	; gen::CMatrix3x3::operator=

; 3112 : 	}
; 3113 : 	else

	jmp	$LN1@operator
$LN2@operator:

; 3114 : 	{
; 3115 : 		TFloat32 t0, t1;
; 3116 : 
; 3117 : 		t0  = e00*m.e00 + e01*m.e10 + e02*m.e20;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+24]
	addss	xmm0, xmm1
	movss	DWORD PTR _t0$3[ebp], xmm0

; 3118 : 		t1  = e00*m.e01 + e01*m.e11 + e02*m.e21;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+28]
	addss	xmm0, xmm1
	movss	DWORD PTR _t1$2[ebp], xmm0

; 3119 : 		e02 = e00*m.e02 + e01*m.e12 + e02*m.e22;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+20]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+32]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 3120 : 		e00 = t0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _t0$3[ebp]
	movss	DWORD PTR [eax], xmm0

; 3121 : 		e01 = t1;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _t1$2[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 3122 : 
; 3123 : 		t0  = e10*m.e00 + e11*m.e10 + e12*m.e20;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [ecx+20]
	mulss	xmm1, DWORD PTR [edx+24]
	addss	xmm0, xmm1
	movss	DWORD PTR _t0$3[ebp], xmm0

; 3124 : 		t1  = e10*m.e01 + e11*m.e11 + e12*m.e21;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [ecx+20]
	mulss	xmm1, DWORD PTR [edx+28]
	addss	xmm0, xmm1
	movss	DWORD PTR _t1$2[ebp], xmm0

; 3125 : 		e12 = e10*m.e02 + e11*m.e12 + e12*m.e22;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [eax+20]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [ecx+20]
	mulss	xmm1, DWORD PTR [edx+32]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+20], xmm0

; 3126 : 		e10 = t0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _t0$3[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 3127 : 		e11 = t1;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _t1$2[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 3128 : 
; 3129 : 		t0  = e20*m.e00 + e21*m.e10 + e22*m.e20;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+28]
	mulss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [ecx+32]
	mulss	xmm1, DWORD PTR [edx+24]
	addss	xmm0, xmm1
	movss	DWORD PTR _t0$3[ebp], xmm0

; 3130 : 		t1  = e20*m.e01 + e21*m.e11 + e22*m.e21;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+28]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [ecx+32]
	mulss	xmm1, DWORD PTR [edx+28]
	addss	xmm0, xmm1
	movss	DWORD PTR _t1$2[ebp], xmm0

; 3131 : 		e22 = e20*m.e02 + e21*m.e12 + e22*m.e22;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [edx+28]
	mulss	xmm1, DWORD PTR [eax+20]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	movss	xmm1, DWORD PTR [ecx+32]
	mulss	xmm1, DWORD PTR [edx+32]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+32], xmm0

; 3132 : 		e20 = t0;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _t0$3[ebp]
	movss	DWORD PTR [eax+24], xmm0

; 3133 : 		e21 = t1;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _t1$2[ebp]
	movss	DWORD PTR [eax+28], xmm0
$LN1@operator:

; 3134 : 	}
; 3135 : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 3136 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??XCMatrix3x3@gen@@QAEAAV01@ABV01@@Z ENDP		; gen::CMatrix3x3::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?TransformPoint2D@CMatrix3x3@gen@@QBE?AVCVector2@2@ABV32@@Z
_TEXT	SEGMENT
_pOut$ = -28						; size = 8
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_p$ = 12						; size = 4
?TransformPoint2D@CMatrix3x3@gen@@QBE?AVCVector2@2@ABV32@@Z PROC ; gen::CMatrix3x3::TransformPoint2D, COMDAT
; _this$ = ecx

; 3093 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 3094 : 	CVector2 pOut;

	lea	ecx, DWORD PTR _pOut$[ebp]
	call	??0CVector2@gen@@QAE@XZ			; gen::CVector2::CVector2

; 3095 : 	pOut.x = p.x*e00 + p.y*e10 + e20;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR _pOut$[ebp], xmm0

; 3096 : 	pOut.y = p.x*e01 + p.y*e11 + e21;

	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR _pOut$[ebp+4], xmm0

; 3097 : 
; 3098 : 	return pOut;

	lea	eax, DWORD PTR _pOut$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CVector2@gen@@QAE@ABV01@@Z		; gen::CVector2::CVector2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3099 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@TransformP
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN5@TransformP:
	DD	1
	DD	$LN4@TransformP
$LN4@TransformP:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN3@TransformP
$LN3@TransformP:
	DB	112					; 00000070H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
?TransformPoint2D@CMatrix3x3@gen@@QBE?AVCVector2@2@ABV32@@Z ENDP ; gen::CMatrix3x3::TransformPoint2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?TransformVector2D@CMatrix3x3@gen@@QBE?AVCVector2@2@ABV32@@Z
_TEXT	SEGMENT
_vOut$ = -28						; size = 8
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
?TransformVector2D@CMatrix3x3@gen@@QBE?AVCVector2@2@ABV32@@Z PROC ; gen::CMatrix3x3::TransformVector2D, COMDAT
; _this$ = ecx

; 3082 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 3083 : 	CVector2 vOut;

	lea	ecx, DWORD PTR _vOut$[ebp]
	call	??0CVector2@gen@@QAE@XZ			; gen::CVector2::CVector2

; 3084 : 	vOut.x = v.x*e00 + v.y*e10;

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm1
	movss	DWORD PTR _vOut$[ebp], xmm0

; 3085 : 	vOut.y = v.x*e01 + v.y*e11;

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	movss	DWORD PTR _vOut$[ebp+4], xmm0

; 3086 : 
; 3087 : 	return vOut;

	lea	eax, DWORD PTR _vOut$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CVector2@gen@@QAE@ABV01@@Z		; gen::CVector2::CVector2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3088 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@TransformV
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN5@TransformV:
	DD	1
	DD	$LN4@TransformV
$LN4@TransformV:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN3@TransformV
$LN3@TransformV:
	DB	118					; 00000076H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
?TransformVector2D@CMatrix3x3@gen@@QBE?AVCVector2@2@ABV32@@Z ENDP ; gen::CMatrix3x3::TransformVector2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?Transform@CMatrix3x3@gen@@QBE?AVCVector3@2@ABV32@@Z
_TEXT	SEGMENT
_vOut$ = -32						; size = 12
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
?Transform@CMatrix3x3@gen@@QBE?AVCVector3@2@ABV32@@Z PROC ; gen::CMatrix3x3::Transform, COMDAT
; _this$ = ecx

; 3070 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 3071 : 	CVector3 vOut;

	lea	ecx, DWORD PTR _vOut$[ebp]
	call	??0CVector3@gen@@QAE@XZ			; gen::CVector3::CVector3

; 3072 : 	vOut.x = v.x*e00 + v.y*e10 + v.z*e20;

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+12]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+24]
	addss	xmm0, xmm1
	movss	DWORD PTR _vOut$[ebp], xmm0

; 3073 : 	vOut.y = v.x*e01 + v.y*e11 + v.z*e21;

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+28]
	addss	xmm0, xmm1
	movss	DWORD PTR _vOut$[ebp+4], xmm0

; 3074 : 	vOut.z = v.x*e02 + v.y*e12 + v.z*e22;

	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+20]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+32]
	addss	xmm0, xmm1
	movss	DWORD PTR _vOut$[ebp+8], xmm0

; 3075 : 
; 3076 : 	return vOut;

	lea	eax, DWORD PTR _vOut$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CVector3@gen@@QAE@ABV01@@Z		; gen::CVector3::CVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3077 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Transform
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN5@Transform:
	DD	1
	DD	$LN4@Transform
$LN4@Transform:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN3@Transform
$LN3@Transform:
	DB	118					; 00000076H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
?Transform@CMatrix3x3@gen@@QBE?AVCVector3@2@ABV32@@Z ENDP ; gen::CMatrix3x3::Transform
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ??_0CMatrix3x3@gen@@QAEAAV01@M@Z
_TEXT	SEGMENT
tv153 = -521						; size = 1
$T2 = -516						; size = 88
$T3 = -420						; size = 88
$T4 = -324						; size = 88
_e$5 = -36						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
_s$ = 8							; size = 4
??_0CMatrix3x3@gen@@QAEAAV01@M@Z PROC			; gen::CMatrix3x3::operator/=, COMDAT
; _this$ = ecx

; 2986 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??_0CMatrix3x3@gen@@QAEAAV01@M@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 508				; 000001fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 127				; 0000007fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2987 : 	GEN_GUARD_OPT;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2988 : 	GEN_ASSERT_OPT( !IsZero(s), "Invalid parameter" );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv153[ebp], al
	movzx	eax, BYTE PTR tv153[ebp]
	test	eax, eax
	je	SHORT $LN1@operator
	mov	eax, DWORD PTR ?__LINE__Var@?1???_0CMatrix3x3@gen@@QAEAAV12@M@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN1@operator:

; 2989 : 
; 2990 : 	e00 /= s;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	divss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 2991 : 	e01 /= s;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	divss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 2992 : 	e02 /= s;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	divss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 2993 : 	e10 /= s;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	divss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 2994 : 	e11 /= s;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	divss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+16], xmm0

; 2995 : 	e12 /= s;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	divss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+20], xmm0

; 2996 : 	e20 /= s;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	divss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+24], xmm0

; 2997 : 	e21 /= s;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	divss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+28], xmm0

; 2998 : 	e22 /= s;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	divss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+32], xmm0

; 2999 : 
; 3000 : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN8@operator
__catch$??_0CMatrix3x3@gen@@QAEAAV01@M@Z$0:

; 3001 : 
; 3002 : 	GEN_ENDGUARD_OPT;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BN@NPNEBJPA@gen?3?3CMatrix3x3?3?3operator?5?1?$DN?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN9@operator
	ret	0
__catch$??_0CMatrix3x3@gen@@QAEAAV01@M@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BN@NPNEBJPA@gen?3?3CMatrix3x3?3?3operator?5?1?$DN?$AA@
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN11@operator
	ret	0
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@operator
$LN11@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN8@operator
$LN10@operator:
	jmp	SHORT $LN8@operator
$LN9@operator:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN8@operator:

; 3003 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN15@operator:
	DD	1
	DD	$LN14@operator
$LN14@operator:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN12@operator
$LN12@operator:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??_0CMatrix3x3@gen@@QAEAAV01@M@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-528]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??_0CMatrix3x3@gen@@QAEAAV01@M@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??_0CMatrix3x3@gen@@QAEAAV01@M@Z ENDP			; gen::CMatrix3x3::operator/=
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ??XCMatrix3x3@gen@@QAEAAV01@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_s$ = 8							; size = 4
??XCMatrix3x3@gen@@QAEAAV01@M@Z PROC			; gen::CMatrix3x3::operator*=, COMDAT
; _this$ = ecx

; 2927 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2928 : 	e00 *= s;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 2929 : 	e01 *= s;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 2930 : 	e02 *= s;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 2931 : 	e10 *= s;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 2932 : 	e11 *= s;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+16], xmm0

; 2933 : 	e12 *= s;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+20], xmm0

; 2934 : 	e20 *= s;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+24], xmm0

; 2935 : 	e21 *= s;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+28], xmm0

; 2936 : 	e22 *= s;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+32], xmm0

; 2937 : 
; 2938 : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 2939 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??XCMatrix3x3@gen@@QAEAAV01@M@Z ENDP			; gen::CMatrix3x3::operator*=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?FaceDirection2D@CMatrix3x3@gen@@QAEXABVCVector2@2@_N1@Z
_TEXT	SEGMENT
_axis$ = -44						; size = 8
_scale$ = -28						; size = 8
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_direction$ = 8						; size = 4
_bUseYAxis$ = 12					; size = 1
_bLH$ = 16						; size = 1
?FaceDirection2D@CMatrix3x3@gen@@QAEXABVCVector2@2@_N1@Z PROC ; gen::CMatrix3x3::FaceDirection2D, COMDAT
; _this$ = ecx

; 2795 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2796 : 	CVector2 scale = GetScale2D();

	lea	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetScale2D@CMatrix3x3@gen@@QBE?AVCVector2@2@XZ ; gen::CMatrix3x3::GetScale2D

; 2797 : 	CVector2 axis = Normalise( direction );

	mov	eax, DWORD PTR _direction$[ebp]
	push	eax
	lea	ecx, DWORD PTR _axis$[ebp]
	push	ecx
	call	?Normalise@gen@@YA?AVCVector2@1@ABV21@@Z ; gen::Normalise
	add	esp, 8

; 2798 : 	if (axis.IsZero()) return;

	lea	ecx, DWORD PTR _axis$[ebp]
	call	?IsZero@CVector2@gen@@QBE_NXZ		; gen::CVector2::IsZero
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@FaceDirect
	jmp	$LN8@FaceDirect
$LN7@FaceDirect:

; 2799 : 	if (bUseYAxis)

	movzx	eax, BYTE PTR _bUseYAxis$[ebp]
	test	eax, eax
	je	$LN6@FaceDirect

; 2800 : 	{
; 2801 : 		e10 = axis.x * scale.y;

	movss	xmm0, DWORD PTR _axis$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp+4]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 2802 : 		e11 = axis.y * scale.y;

	movss	xmm0, DWORD PTR _axis$[ebp+4]
	mulss	xmm0, DWORD PTR _scale$[ebp+4]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 2803 : 		if (bLH)

	movzx	eax, BYTE PTR _bLH$[ebp]
	test	eax, eax
	je	SHORT $LN5@FaceDirect

; 2804 : 		{
; 2805 : 			e00 = e11 * scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 2806 : 			e01 = -e10 * scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 2807 : 		}
; 2808 : 		else

	jmp	SHORT $LN4@FaceDirect
$LN5@FaceDirect:

; 2809 : 		{
; 2810 : 			e00 = -e11 * scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 2811 : 			e01 = e10 * scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
$LN4@FaceDirect:

; 2812 : 		}
; 2813 : 	}
; 2814 : 	else

	jmp	$LN1@FaceDirect
$LN6@FaceDirect:

; 2815 : 	{
; 2816 : 		e00 = axis.x * scale.x;

	movss	xmm0, DWORD PTR _axis$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax], xmm0

; 2817 : 		e01 = axis.y * scale.x;

	movss	xmm0, DWORD PTR _axis$[ebp+4]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 2818 : 		if (bLH)

	movzx	eax, BYTE PTR _bLH$[ebp]
	test	eax, eax
	je	SHORT $LN2@FaceDirect

; 2819 : 		{
; 2820 : 			e11 = -e00 * scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _scale$[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+16], xmm0

; 2821 : 			e10 = e01 * scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _scale$[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 2822 : 		}
; 2823 : 		else

	jmp	SHORT $LN1@FaceDirect
$LN2@FaceDirect:

; 2824 : 		{
; 2825 : 			e11 = e00 * scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+16], xmm0

; 2826 : 			e10 = -e01 * scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _scale$[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0
$LN1@FaceDirect:
$LN8@FaceDirect:

; 2827 : 		}
; 2828 : 	}
; 2829 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@FaceDirect
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN13@FaceDirect:
	DD	2
	DD	$LN12@FaceDirect
$LN12@FaceDirect:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN10@FaceDirect
	DD	-44					; ffffffd4H
	DD	8
	DD	$LN11@FaceDirect
$LN11@FaceDirect:
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	0
$LN10@FaceDirect:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
?FaceDirection2D@CMatrix3x3@gen@@QAEXABVCVector2@2@_N1@Z ENDP ; gen::CMatrix3x3::FaceDirection2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?FaceTarget2D@CMatrix3x3@gen@@QAEXABVCVector2@2@_N1@Z
_TEXT	SEGMENT
$T1 = -268						; size = 8
$T2 = -252						; size = 8
_axis$ = -44						; size = 8
_scale$ = -28						; size = 8
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_target$ = 8						; size = 4
_bUseYAxis$ = 12					; size = 1
_bLH$ = 16						; size = 1
?FaceTarget2D@CMatrix3x3@gen@@QAEXABVCVector2@2@_N1@Z PROC ; gen::CMatrix3x3::FaceTarget2D, COMDAT
; _this$ = ecx

; 2694 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2695 : 	CVector2 scale = GetScale2D();

	lea	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetScale2D@CMatrix3x3@gen@@QBE?AVCVector2@2@XZ ; gen::CMatrix3x3::GetScale2D

; 2696 : 	CVector2 axis = Normalise(target - GetPosition2D());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPosition2D@CMatrix3x3@gen@@QBE?AVCVector2@2@XZ ; gen::CMatrix3x3::GetPosition2D
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??Ggen@@YA?AVCVector2@0@ABV10@0@Z	; gen::operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _axis$[ebp]
	push	eax
	call	?Normalise@gen@@YA?AVCVector2@1@ABV21@@Z ; gen::Normalise
	add	esp, 8

; 2697 : 	if (axis.IsZero()) return;

	lea	ecx, DWORD PTR _axis$[ebp]
	call	?IsZero@CVector2@gen@@QBE_NXZ		; gen::CVector2::IsZero
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@FaceTarget
	jmp	$LN8@FaceTarget
$LN7@FaceTarget:

; 2698 : 	if (bUseYAxis)

	movzx	eax, BYTE PTR _bUseYAxis$[ebp]
	test	eax, eax
	je	$LN6@FaceTarget

; 2699 : 	{
; 2700 : 		e10 = axis.x * scale.y;

	movss	xmm0, DWORD PTR _axis$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp+4]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 2701 : 		e11 = axis.y * scale.y;

	movss	xmm0, DWORD PTR _axis$[ebp+4]
	mulss	xmm0, DWORD PTR _scale$[ebp+4]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 2702 : 		if (bLH)

	movzx	eax, BYTE PTR _bLH$[ebp]
	test	eax, eax
	je	SHORT $LN5@FaceTarget

; 2703 : 		{
; 2704 : 			e00 = e11 * scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 2705 : 			e01 = -e10 * scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 2706 : 		}
; 2707 : 		else

	jmp	SHORT $LN4@FaceTarget
$LN5@FaceTarget:

; 2708 : 		{
; 2709 : 			e00 = -e11 * scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 2710 : 			e01 = e10 * scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
$LN4@FaceTarget:

; 2711 : 		}
; 2712 : 	}
; 2713 : 	else

	jmp	$LN1@FaceTarget
$LN6@FaceTarget:

; 2714 : 	{
; 2715 : 		e00 = axis.x * scale.x;

	movss	xmm0, DWORD PTR _axis$[ebp]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax], xmm0

; 2716 : 		e01 = axis.y * scale.x;

	movss	xmm0, DWORD PTR _axis$[ebp+4]
	mulss	xmm0, DWORD PTR _scale$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 2717 : 		if (bLH)

	movzx	eax, BYTE PTR _bLH$[ebp]
	test	eax, eax
	je	SHORT $LN2@FaceTarget

; 2718 : 		{
; 2719 : 			e11 = -e00 * scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _scale$[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+16], xmm0

; 2720 : 			e10 = e01 * scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _scale$[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 2721 : 		}
; 2722 : 		else

	jmp	SHORT $LN1@FaceTarget
$LN2@FaceTarget:

; 2723 : 		{
; 2724 : 			e11 = e00 * scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _scale$[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+16], xmm0

; 2725 : 			e10 = -e01 * scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _scale$[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0
$LN1@FaceTarget:
$LN8@FaceTarget:

; 2726 : 		}
; 2727 : 	}
; 2728 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@FaceTarget
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN13@FaceTarget:
	DD	2
	DD	$LN12@FaceTarget
$LN12@FaceTarget:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN10@FaceTarget
	DD	-44					; ffffffd4H
	DD	8
	DD	$LN11@FaceTarget
$LN11@FaceTarget:
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	0
$LN10@FaceTarget:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
?FaceTarget2D@CMatrix3x3@gen@@QAEXABVCVector2@2@_N1@Z ENDP ; gen::CMatrix3x3::FaceTarget2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?FaceDirection@CMatrix3x3@gen@@QAEXABVCVector3@2@0_N@Z
_TEXT	SEGMENT
$T1 = -444						; size = 12
$T2 = -424						; size = 12
$T3 = -404						; size = 12
$T4 = -384						; size = 12
$T5 = -364						; size = 12
$T6 = -344						; size = 12
$T7 = -324						; size = 12
$T8 = -304						; size = 12
$T9 = -284						; size = 12
_axisZ$ = -72						; size = 12
_axisY$ = -52						; size = 12
_axisX$ = -32						; size = 12
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_direction$ = 8						; size = 4
_up$ = 12						; size = 4
_bLH$ = 16						; size = 1
?FaceDirection@CMatrix3x3@gen@@QAEXABVCVector3@2@0_N@Z PROC ; gen::CMatrix3x3::FaceDirection, COMDAT
; _this$ = ecx

; 2632 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 448				; 000001c0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-448]
	mov	ecx, 112				; 00000070H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2633 : 	CVector3 axisX, axisY, axisZ;

	lea	ecx, DWORD PTR _axisX$[ebp]
	call	??0CVector3@gen@@QAE@XZ			; gen::CVector3::CVector3
	lea	ecx, DWORD PTR _axisY$[ebp]
	call	??0CVector3@gen@@QAE@XZ			; gen::CVector3::CVector3
	lea	ecx, DWORD PTR _axisZ$[ebp]
	call	??0CVector3@gen@@QAE@XZ			; gen::CVector3::CVector3

; 2634 : 	if (bLH)

	movzx	eax, BYTE PTR _bLH$[ebp]
	test	eax, eax
	je	$LN6@FaceDirect

; 2635 : 	{
; 2636 : 		axisZ = Normalise( direction );

	mov	eax, DWORD PTR _direction$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	?Normalise@gen@@YA?AVCVector3@1@ABV21@@Z ; gen::Normalise
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _axisZ$[ebp]
	call	??4CVector3@gen@@QAEAAV01@ABV01@@Z	; gen::CVector3::operator=

; 2637 : 		if (axisZ.IsZero()) return;

	lea	ecx, DWORD PTR _axisZ$[ebp]
	call	?IsZero@CVector3@gen@@QBE_NXZ		; gen::CVector3::IsZero
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@FaceDirect
	jmp	$LN7@FaceDirect
$LN5@FaceDirect:

; 2638 : 		axisX = Normalise( Cross( up, axisZ ) );

	lea	eax, DWORD PTR _axisZ$[ebp]
	push	eax
	mov	ecx, DWORD PTR _up$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	?Cross@gen@@YA?AVCVector3@1@ABV21@0@Z	; gen::Cross
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	?Normalise@gen@@YA?AVCVector3@1@ABV21@@Z ; gen::Normalise
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _axisX$[ebp]
	call	??4CVector3@gen@@QAEAAV01@ABV01@@Z	; gen::CVector3::operator=

; 2639 : 		if (axisX.IsZero()) return;

	lea	ecx, DWORD PTR _axisX$[ebp]
	call	?IsZero@CVector3@gen@@QBE_NXZ		; gen::CVector3::IsZero
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@FaceDirect
	jmp	$LN7@FaceDirect
$LN4@FaceDirect:

; 2640 : 		axisY = Cross( axisZ, axisX ); // Will already be normalised

	lea	eax, DWORD PTR _axisX$[ebp]
	push	eax
	lea	ecx, DWORD PTR _axisZ$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	call	?Cross@gen@@YA?AVCVector3@1@ABV21@0@Z	; gen::Cross
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _axisY$[ebp]
	call	??4CVector3@gen@@QAEAAV01@ABV01@@Z	; gen::CVector3::operator=

; 2641 : 	}
; 2642 : 	else

	jmp	$LN3@FaceDirect
$LN6@FaceDirect:

; 2643 : 	{
; 2644 : 		axisZ = Normalise( -direction );

	mov	eax, DWORD PTR _direction$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	call	??Ggen@@YA?AVCVector3@0@ABV10@@Z	; gen::operator-
	add	esp, 8
	push	eax
	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	call	?Normalise@gen@@YA?AVCVector3@1@ABV21@@Z ; gen::Normalise
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _axisZ$[ebp]
	call	??4CVector3@gen@@QAEAAV01@ABV01@@Z	; gen::CVector3::operator=

; 2645 : 		if (axisZ.IsZero()) return;

	lea	ecx, DWORD PTR _axisZ$[ebp]
	call	?IsZero@CVector3@gen@@QBE_NXZ		; gen::CVector3::IsZero
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@FaceDirect
	jmp	$LN7@FaceDirect
$LN2@FaceDirect:

; 2646 : 		axisX = Normalise( Cross( axisZ, up ) );

	mov	eax, DWORD PTR _up$[ebp]
	push	eax
	lea	ecx, DWORD PTR _axisZ$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T7[ebp]
	push	edx
	call	?Cross@gen@@YA?AVCVector3@1@ABV21@0@Z	; gen::Cross
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T8[ebp]
	push	eax
	call	?Normalise@gen@@YA?AVCVector3@1@ABV21@@Z ; gen::Normalise
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _axisX$[ebp]
	call	??4CVector3@gen@@QAEAAV01@ABV01@@Z	; gen::CVector3::operator=

; 2647 : 		if (axisX.IsZero()) return;

	lea	ecx, DWORD PTR _axisX$[ebp]
	call	?IsZero@CVector3@gen@@QBE_NXZ		; gen::CVector3::IsZero
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@FaceDirect
	jmp	SHORT $LN7@FaceDirect
$LN1@FaceDirect:

; 2648 : 		axisY = Cross( axisX, axisZ ); // Will already be normalised

	lea	eax, DWORD PTR _axisZ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _axisX$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T9[ebp]
	push	edx
	call	?Cross@gen@@YA?AVCVector3@1@ABV21@0@Z	; gen::Cross
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _axisY$[ebp]
	call	??4CVector3@gen@@QAEAAV01@ABV01@@Z	; gen::CVector3::operator=
$LN3@FaceDirect:

; 2649 : 	}
; 2650 : 	SetRow( 0, axisX );

	lea	eax, DWORD PTR _axisX$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRow@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z ; gen::CMatrix3x3::SetRow

; 2651 : 	SetRow( 1, axisY );

	lea	eax, DWORD PTR _axisY$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRow@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z ; gen::CMatrix3x3::SetRow

; 2652 : 	SetRow( 2, axisZ );

	lea	eax, DWORD PTR _axisZ$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRow@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z ; gen::CMatrix3x3::SetRow
$LN7@FaceDirect:

; 2653 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@FaceDirect
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 448				; 000001c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN13@FaceDirect:
	DD	3
	DD	$LN12@FaceDirect
$LN12@FaceDirect:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN9@FaceDirect
	DD	-52					; ffffffccH
	DD	12					; 0000000cH
	DD	$LN10@FaceDirect
	DD	-72					; ffffffb8H
	DD	12					; 0000000cH
	DD	$LN11@FaceDirect
$LN11@FaceDirect:
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	90					; 0000005aH
	DB	0
$LN10@FaceDirect:
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	89					; 00000059H
	DB	0
$LN9@FaceDirect:
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	88					; 00000058H
	DB	0
?FaceDirection@CMatrix3x3@gen@@QAEXABVCVector3@2@0_N@Z ENDP ; gen::CMatrix3x3::FaceDirection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?MakeScaling2D@CMatrix3x3@gen@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fScale$ = 8						; size = 4
?MakeScaling2D@CMatrix3x3@gen@@QAEXM@Z PROC		; gen::CMatrix3x3::MakeScaling2D, COMDAT
; _this$ = ecx

; 2513 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2514 : 	e00 = fScale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fScale$[ebp]
	movss	DWORD PTR [eax], xmm0

; 2515 : 	e01 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+4], xmm0

; 2516 : 	e02 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0

; 2517 : 
; 2518 : 	e10 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+12], xmm0

; 2519 : 	e11 = fScale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fScale$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 2520 : 	e12 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+20], xmm0

; 2521 : 
; 2522 : 	e20 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+24], xmm0

; 2523 : 	e21 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+28], xmm0

; 2524 : 	e22 = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+32], xmm0

; 2525 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?MakeScaling2D@CMatrix3x3@gen@@QAEXM@Z ENDP		; gen::CMatrix3x3::MakeScaling2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?MakeScaling2D@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_scale$ = 8						; size = 4
?MakeScaling2D@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z PROC ; gen::CMatrix3x3::MakeScaling2D, COMDAT
; _this$ = ecx

; 2497 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2498 : 	e00 = scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 2499 : 	e01 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+4], xmm0

; 2500 : 	e02 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0

; 2501 : 
; 2502 : 	e10 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+12], xmm0

; 2503 : 	e11 = scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+16], edx

; 2504 : 	e12 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+20], xmm0

; 2505 : 
; 2506 : 	e20 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+24], xmm0

; 2507 : 	e21 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+28], xmm0

; 2508 : 	e22 = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+32], xmm0

; 2509 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?MakeScaling2D@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z ENDP ; gen::CMatrix3x3::MakeScaling2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?MakeRotation2D@CMatrix3x3@gen@@QAEXM@Z
_TEXT	SEGMENT
_c$ = -36						; size = 4
_s$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_fAngle$ = 8						; size = 4
?MakeRotation2D@CMatrix3x3@gen@@QAEXM@Z PROC		; gen::CMatrix3x3::MakeRotation2D, COMDAT
; _this$ = ecx

; 2477 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2478 : 	TFloat32 s, c;
; 2479 : 	SinCos( fAngle, &s, &c );

	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _fAngle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SinCos@gen@@YAXMPAM0@Z			; gen::SinCos
	add	esp, 12					; 0000000cH

; 2480 : 
; 2481 : 	e00 = c;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [eax], xmm0

; 2482 : 	e01 = s;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _s$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 2483 : 	e02 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0

; 2484 : 
; 2485 : 	e10 = -s;

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 2486 : 	e11 = c;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _c$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 2487 : 	e12 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+20], xmm0

; 2488 : 
; 2489 : 	e20 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+24], xmm0

; 2490 : 	e21 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+28], xmm0

; 2491 : 	e22 = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+32], xmm0

; 2492 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@MakeRotati
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN6@MakeRotati:
	DD	2
	DD	$LN5@MakeRotati
$LN5@MakeRotati:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN3@MakeRotati
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN4@MakeRotati
$LN4@MakeRotati:
	DB	99					; 00000063H
	DB	0
$LN3@MakeRotati:
	DB	115					; 00000073H
	DB	0
?MakeRotation2D@CMatrix3x3@gen@@QAEXM@Z ENDP		; gen::CMatrix3x3::MakeRotation2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?MakeTranslation2D@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_translate$ = 8						; size = 4
?MakeTranslation2D@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z PROC ; gen::CMatrix3x3::MakeTranslation2D, COMDAT
; _this$ = ecx

; 2460 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2461 : 	e00 = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax], xmm0

; 2462 : 	e01 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+4], xmm0

; 2463 : 	e02 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0

; 2464 : 
; 2465 : 	e10 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+12], xmm0

; 2466 : 	e11 = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+16], xmm0

; 2467 : 	e12 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+20], xmm0

; 2468 : 
; 2469 : 	e20 = translate.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _translate$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+24], edx

; 2470 : 	e21 = translate.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _translate$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+28], edx

; 2471 : 	e22 = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+32], xmm0

; 2472 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?MakeTranslation2D@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z ENDP ; gen::CMatrix3x3::MakeTranslation2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?MakeScaling@CMatrix3x3@gen@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fScale$ = 8						; size = 4
?MakeScaling@CMatrix3x3@gen@@QAEXM@Z PROC		; gen::CMatrix3x3::MakeScaling, COMDAT
; _this$ = ecx

; 2134 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2135 : 	e00 = fScale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fScale$[ebp]
	movss	DWORD PTR [eax], xmm0

; 2136 : 	e01 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+4], xmm0

; 2137 : 	e02 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0

; 2138 : 
; 2139 : 	e10 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+12], xmm0

; 2140 : 	e11 = fScale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fScale$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 2141 : 	e12 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+20], xmm0

; 2142 : 
; 2143 : 	e20 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+24], xmm0

; 2144 : 	e21 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+28], xmm0

; 2145 : 	e22 = fScale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fScale$[ebp]
	movss	DWORD PTR [eax+32], xmm0

; 2146 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?MakeScaling@CMatrix3x3@gen@@QAEXM@Z ENDP		; gen::CMatrix3x3::MakeScaling
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?MakeScaling@CMatrix3x3@gen@@QAEXABVCVector3@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_scale$ = 8						; size = 4
?MakeScaling@CMatrix3x3@gen@@QAEXABVCVector3@2@@Z PROC	; gen::CMatrix3x3::MakeScaling, COMDAT
; _this$ = ecx

; 2118 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2119 : 	e00 = scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 2120 : 	e01 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+4], xmm0

; 2121 : 	e02 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0

; 2122 : 
; 2123 : 	e10 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+12], xmm0

; 2124 : 	e11 = scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+16], edx

; 2125 : 	e12 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+20], xmm0

; 2126 : 
; 2127 : 	e20 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+24], xmm0

; 2128 : 	e21 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+28], xmm0

; 2129 : 	e22 = scale.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+32], edx

; 2130 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?MakeScaling@CMatrix3x3@gen@@QAEXABVCVector3@2@@Z ENDP	; gen::CMatrix3x3::MakeScaling
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?MakeRotation@CMatrix3x3@gen@@QAEXABVCVector3@2@M@Z
_TEXT	SEGMENT
tv161 = -689						; size = 1
$T2 = -684						; size = 88
$T3 = -588						; size = 88
$T4 = -492						; size = 88
_e$5 = -204						; size = 4
_tzx$6 = -192						; size = 4
_tyz$7 = -180						; size = 4
_txy$8 = -168						; size = 4
_tz$9 = -156						; size = 4
_ty$10 = -144						; size = 4
_tx$11 = -132						; size = 4
_sz$12 = -120						; size = 4
_sy$13 = -108						; size = 4
_sx$14 = -96						; size = 4
_axisNorm$15 = -84					; size = 12
_t$16 = -64						; size = 4
_c$17 = -52						; size = 4
_s$18 = -40						; size = 4
_this$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_axis$ = 8						; size = 4
_fAngle$ = 12						; size = 4
?MakeRotation@CMatrix3x3@gen@@QAEXABVCVector3@2@M@Z PROC ; gen::CMatrix3x3::MakeRotation, COMDAT
; _this$ = ecx

; 2081 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?MakeRotation@CMatrix3x3@gen@@QAEXABVCVector3@2@M@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 676				; 000002a4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-692]
	mov	ecx, 169				; 000000a9H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2082 : 	GEN_GUARD;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2083 : 
; 2084 : 	TFloat32 s, c;
; 2085 : 	SinCos( fAngle, &s, &c );

	lea	eax, DWORD PTR _c$17[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$18[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _fAngle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SinCos@gen@@YAXMPAM0@Z			; gen::SinCos
	add	esp, 12					; 0000000cH

; 2086 : 	TFloat32 t = 1.0f - c;

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _c$17[ebp]
	movss	DWORD PTR _t$16[ebp], xmm0

; 2087 : 
; 2088 : 	CVector3 axisNorm = Normalise( axis );

	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	lea	ecx, DWORD PTR _axisNorm$15[ebp]
	push	ecx
	call	?Normalise@gen@@YA?AVCVector3@1@ABV21@@Z ; gen::Normalise
	add	esp, 8

; 2089 : 	GEN_ASSERT( !axisNorm.IsZero(), "Zero length axis" );

	lea	ecx, DWORD PTR _axisNorm$15[ebp]
	call	?IsZero@CVector3@gen@@QBE_NXZ		; gen::CVector3::IsZero
	mov	BYTE PTR tv161[ebp], al
	movzx	eax, BYTE PTR tv161[ebp]
	test	eax, eax
	je	SHORT $LN1@MakeRotati
	mov	eax, DWORD PTR ?__LINE__Var@?1??MakeRotation@CMatrix3x3@gen@@QAEXABVCVector3@3@M@Z@4JA
	add	eax, 8
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BB@OPALDBID@Zero?5length?5axis?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN1@MakeRotati:

; 2090 : 
; 2091 : 	TFloat32 sx = s * axisNorm.x;

	movss	xmm0, DWORD PTR _s$18[ebp]
	mulss	xmm0, DWORD PTR _axisNorm$15[ebp]
	movss	DWORD PTR _sx$14[ebp], xmm0

; 2092 : 	TFloat32 sy = s * axisNorm.y;

	movss	xmm0, DWORD PTR _s$18[ebp]
	mulss	xmm0, DWORD PTR _axisNorm$15[ebp+4]
	movss	DWORD PTR _sy$13[ebp], xmm0

; 2093 : 	TFloat32 sz = s * axisNorm.z;

	movss	xmm0, DWORD PTR _s$18[ebp]
	mulss	xmm0, DWORD PTR _axisNorm$15[ebp+8]
	movss	DWORD PTR _sz$12[ebp], xmm0

; 2094 : 	TFloat32 tx = t * axisNorm.x;  

	movss	xmm0, DWORD PTR _t$16[ebp]
	mulss	xmm0, DWORD PTR _axisNorm$15[ebp]
	movss	DWORD PTR _tx$11[ebp], xmm0

; 2095 : 	TFloat32 ty = t * axisNorm.y;

	movss	xmm0, DWORD PTR _t$16[ebp]
	mulss	xmm0, DWORD PTR _axisNorm$15[ebp+4]
	movss	DWORD PTR _ty$10[ebp], xmm0

; 2096 : 	TFloat32 tz = t * axisNorm.z;

	movss	xmm0, DWORD PTR _t$16[ebp]
	mulss	xmm0, DWORD PTR _axisNorm$15[ebp+8]
	movss	DWORD PTR _tz$9[ebp], xmm0

; 2097 : 	TFloat32 txy = ty * axisNorm.x;

	movss	xmm0, DWORD PTR _ty$10[ebp]
	mulss	xmm0, DWORD PTR _axisNorm$15[ebp]
	movss	DWORD PTR _txy$8[ebp], xmm0

; 2098 : 	TFloat32 tyz = tz * axisNorm.y;

	movss	xmm0, DWORD PTR _tz$9[ebp]
	mulss	xmm0, DWORD PTR _axisNorm$15[ebp+4]
	movss	DWORD PTR _tyz$7[ebp], xmm0

; 2099 : 	TFloat32 tzx = tx * axisNorm.z;

	movss	xmm0, DWORD PTR _tx$11[ebp]
	mulss	xmm0, DWORD PTR _axisNorm$15[ebp+8]
	movss	DWORD PTR _tzx$6[ebp], xmm0

; 2100 : 
; 2101 : 	e00 = tx * axisNorm.x + c;

	movss	xmm0, DWORD PTR _tx$11[ebp]
	mulss	xmm0, DWORD PTR _axisNorm$15[ebp]
	addss	xmm0, DWORD PTR _c$17[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax], xmm0

; 2102 : 	e01 = txy + sz;

	movss	xmm0, DWORD PTR _txy$8[ebp]
	addss	xmm0, DWORD PTR _sz$12[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 2103 : 	e02 = tzx - sy;

	movss	xmm0, DWORD PTR _tzx$6[ebp]
	subss	xmm0, DWORD PTR _sy$13[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 2104 : 
; 2105 : 	e10 = txy - sz; 

	movss	xmm0, DWORD PTR _txy$8[ebp]
	subss	xmm0, DWORD PTR _sz$12[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 2106 : 	e11 = ty * axisNorm.y + c;

	movss	xmm0, DWORD PTR _ty$10[ebp]
	mulss	xmm0, DWORD PTR _axisNorm$15[ebp+4]
	addss	xmm0, DWORD PTR _c$17[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 2107 : 	e12 = tyz + sx;

	movss	xmm0, DWORD PTR _tyz$7[ebp]
	addss	xmm0, DWORD PTR _sx$14[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+20], xmm0

; 2108 : 
; 2109 : 	e20 = tzx + sy;

	movss	xmm0, DWORD PTR _tzx$6[ebp]
	addss	xmm0, DWORD PTR _sy$13[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+24], xmm0

; 2110 : 	e21 = tyz - sx;

	movss	xmm0, DWORD PTR _tyz$7[ebp]
	subss	xmm0, DWORD PTR _sx$14[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+28], xmm0

; 2111 : 	e22 = tz * axisNorm.z + c;

	movss	xmm0, DWORD PTR _tz$9[ebp]
	mulss	xmm0, DWORD PTR _axisNorm$15[ebp+8]
	addss	xmm0, DWORD PTR _c$17[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+32], xmm0
	jmp	SHORT $LN5@MakeRotati
__catch$?MakeRotation@CMatrix3x3@gen@@QAEXABVCVector3@2@M@Z$0:

; 2112 : 
; 2113 : 	GEN_ENDGUARD;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BO@FPKFHDMJ@gen?3?3CMatrix3x3?3?3MakeRotation?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN9@MakeRotati
	ret	0
__catch$?MakeRotation@CMatrix3x3@gen@@QAEXABVCVector3@2@M@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BO@FPKFHDMJ@gen?3?3CMatrix3x3?3?3MakeRotation?$AA@
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN11@MakeRotati
	ret	0
$LN5@MakeRotati:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@MakeRotati
$LN11@MakeRotati:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN8@MakeRotati
$LN10@MakeRotati:
	jmp	SHORT $LN8@MakeRotati
$LN9@MakeRotati:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN8@MakeRotati:
$LN3@MakeRotati:

; 2114 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@MakeRotati
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 692				; 000002b4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN18@MakeRotati:
	DD	4
	DD	$LN17@MakeRotati
$LN17@MakeRotati:
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN12@MakeRotati
	DD	-52					; ffffffccH
	DD	4
	DD	$LN13@MakeRotati
	DD	-84					; ffffffacH
	DD	12					; 0000000cH
	DD	$LN14@MakeRotati
	DD	-204					; ffffff34H
	DD	4
	DD	$LN15@MakeRotati
$LN15@MakeRotati:
	DB	101					; 00000065H
	DB	0
$LN14@MakeRotati:
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	78					; 0000004eH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
$LN13@MakeRotati:
	DB	99					; 00000063H
	DB	0
$LN12@MakeRotati:
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?MakeRotation@CMatrix3x3@gen@@QAEXABVCVector3@2@M@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-696]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?MakeRotation@CMatrix3x3@gen@@QAEXABVCVector3@2@M@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?MakeRotation@CMatrix3x3@gen@@QAEXABVCVector3@2@M@Z ENDP ; gen::CMatrix3x3::MakeRotation
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?MakeRotation@CMatrix3x3@gen@@QAEXVCVector3@2@W4ERotationOrder@2@@Z
_TEXT	SEGMENT
tv73 = -600						; size = 4
$T2 = -592						; size = 88
$T3 = -496						; size = 88
$T4 = -400						; size = 88
_e$5 = -112						; size = 4
_cZ$6 = -100						; size = 4
_sZ$7 = -88						; size = 4
_cY$8 = -76						; size = 4
_sY$9 = -64						; size = 4
_cX$10 = -52						; size = 4
_sX$11 = -40						; size = 4
_this$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_angles$ = 8						; size = 12
_eRotOrder$ = 20					; size = 4
?MakeRotation@CMatrix3x3@gen@@QAEXVCVector3@2@W4ERotationOrder@2@@Z PROC ; gen::CMatrix3x3::MakeRotation, COMDAT
; _this$ = ecx

; 1967 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?MakeRotation@CMatrix3x3@gen@@QAEXVCVector3@2@W4ERotationOrder@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 584				; 00000248H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-600]
	mov	ecx, 146				; 00000092H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1968 : 	GEN_GUARD;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1969 : 
; 1970 : 	TFloat32 sX, cX, sY, cY, sZ, cZ;
; 1971 : 	SinCos( angles.x, &sX, &cX );

	lea	eax, DWORD PTR _cX$10[ebp]
	push	eax
	lea	ecx, DWORD PTR _sX$11[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _angles$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SinCos@gen@@YAXMPAM0@Z			; gen::SinCos
	add	esp, 12					; 0000000cH

; 1972 : 	SinCos( angles.y, &sY, &cY );

	lea	eax, DWORD PTR _cY$8[ebp]
	push	eax
	lea	ecx, DWORD PTR _sY$9[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _angles$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	call	?SinCos@gen@@YAXMPAM0@Z			; gen::SinCos
	add	esp, 12					; 0000000cH

; 1973 : 	SinCos( angles.z, &sZ, &cZ );

	lea	eax, DWORD PTR _cZ$6[ebp]
	push	eax
	lea	ecx, DWORD PTR _sZ$7[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _angles$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	call	?SinCos@gen@@YAXMPAM0@Z			; gen::SinCos
	add	esp, 12					; 0000000cH

; 1974 : 
; 1975 : 	switch (eRotOrder)

	mov	eax, DWORD PTR _eRotOrder$[ebp]
	mov	DWORD PTR tv73[ebp], eax
	cmp	DWORD PTR tv73[ebp], 5
	ja	$LN1@MakeRotati
	mov	ecx, DWORD PTR tv73[ebp]
	jmp	DWORD PTR $LN30@MakeRotati[ecx*4]
$LN7@MakeRotati:

; 1976 : 	{
; 1977 : 		case kZYX:
; 1978 : 		{
; 1979 : 			e00 = cZ * cY;

	movss	xmm0, DWORD PTR _cZ$6[ebp]
	mulss	xmm0, DWORD PTR _cY$8[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax], xmm0

; 1980 : 			e01 = sZ * cX + cZ * sY * sX;

	movss	xmm0, DWORD PTR _cZ$6[ebp]
	mulss	xmm0, DWORD PTR _sY$9[ebp]
	mulss	xmm0, DWORD PTR _sX$11[ebp]
	movss	xmm1, DWORD PTR _sZ$7[ebp]
	mulss	xmm1, DWORD PTR _cX$10[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+4], xmm1

; 1981 : 			e02 = sZ * sX + -cZ * sY * cX;

	movss	xmm0, DWORD PTR _cZ$6[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _sY$9[ebp]
	mulss	xmm0, DWORD PTR _cX$10[ebp]
	movss	xmm1, DWORD PTR _sZ$7[ebp]
	mulss	xmm1, DWORD PTR _sX$11[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+8], xmm1

; 1982 : 
; 1983 : 			e10 = -sZ * cY;

	movss	xmm0, DWORD PTR _sZ$7[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _cY$8[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 1984 : 			e11 = cZ * cX + -sZ * sY * sX;

	movss	xmm0, DWORD PTR _sZ$7[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _sY$9[ebp]
	mulss	xmm0, DWORD PTR _sX$11[ebp]
	movss	xmm1, DWORD PTR _cZ$6[ebp]
	mulss	xmm1, DWORD PTR _cX$10[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+16], xmm1

; 1985 : 			e12 = cZ * sX + sZ * sY * cX;

	movss	xmm0, DWORD PTR _sZ$7[ebp]
	mulss	xmm0, DWORD PTR _sY$9[ebp]
	mulss	xmm0, DWORD PTR _cX$10[ebp]
	movss	xmm1, DWORD PTR _cZ$6[ebp]
	mulss	xmm1, DWORD PTR _sX$11[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+20], xmm1

; 1986 : 
; 1987 : 			e20 = sY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _sY$9[ebp]
	movss	DWORD PTR [eax+24], xmm0

; 1988 : 			e21 = -cY * sX;

	movss	xmm0, DWORD PTR _cY$8[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _sX$11[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+28], xmm0

; 1989 : 			e22 = cY * cX;

	movss	xmm0, DWORD PTR _cY$8[ebp]
	mulss	xmm0, DWORD PTR _cX$10[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+32], xmm0

; 1990 : 			break;

	jmp	$LN8@MakeRotati
$LN6@MakeRotati:

; 1991 : 		}
; 1992 : 		case kYZX:
; 1993 : 		{
; 1994 : 			e00 = cY * cZ;

	movss	xmm0, DWORD PTR _cY$8[ebp]
	mulss	xmm0, DWORD PTR _cZ$6[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax], xmm0

; 1995 : 			e01 = cY * sZ * cX + sY * sX;

	movss	xmm0, DWORD PTR _sY$9[ebp]
	mulss	xmm0, DWORD PTR _sX$11[ebp]
	movss	xmm1, DWORD PTR _cY$8[ebp]
	mulss	xmm1, DWORD PTR _sZ$7[ebp]
	mulss	xmm1, DWORD PTR _cX$10[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+4], xmm1

; 1996 : 			e02 = cY * sZ * sX + -sY * cX;

	movss	xmm0, DWORD PTR _sY$9[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _cX$10[ebp]
	movss	xmm1, DWORD PTR _cY$8[ebp]
	mulss	xmm1, DWORD PTR _sZ$7[ebp]
	mulss	xmm1, DWORD PTR _sX$11[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+8], xmm1

; 1997 : 
; 1998 : 			e10 = -sZ;

	movss	xmm0, DWORD PTR _sZ$7[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 1999 : 			e11 = cZ * cX;

	movss	xmm0, DWORD PTR _cZ$6[ebp]
	mulss	xmm0, DWORD PTR _cX$10[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 2000 : 			e12 = cZ * sX;

	movss	xmm0, DWORD PTR _cZ$6[ebp]
	mulss	xmm0, DWORD PTR _sX$11[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+20], xmm0

; 2001 : 
; 2002 : 			e20 = sY * cZ;

	movss	xmm0, DWORD PTR _sY$9[ebp]
	mulss	xmm0, DWORD PTR _cZ$6[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+24], xmm0

; 2003 : 			e21 = sY * sZ * cX + -cY * sX;

	movss	xmm0, DWORD PTR _cY$8[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _sX$11[ebp]
	movss	xmm1, DWORD PTR _sY$9[ebp]
	mulss	xmm1, DWORD PTR _sZ$7[ebp]
	mulss	xmm1, DWORD PTR _cX$10[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+28], xmm1

; 2004 : 			e22 = sY * sZ * sX + cY * cX;

	movss	xmm0, DWORD PTR _cY$8[ebp]
	mulss	xmm0, DWORD PTR _cX$10[ebp]
	movss	xmm1, DWORD PTR _sY$9[ebp]
	mulss	xmm1, DWORD PTR _sZ$7[ebp]
	mulss	xmm1, DWORD PTR _sX$11[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+32], xmm1

; 2005 : 			break;

	jmp	$LN8@MakeRotati
$LN5@MakeRotati:

; 2006 : 		}
; 2007 : 		case kXZY:
; 2008 : 		{
; 2009 : 			e00 = cZ * cY;

	movss	xmm0, DWORD PTR _cZ$6[ebp]
	mulss	xmm0, DWORD PTR _cY$8[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax], xmm0

; 2010 : 			e01 = sZ;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _sZ$7[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 2011 : 			e02 = -cZ * sY;

	movss	xmm0, DWORD PTR _cZ$6[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _sY$9[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 2012 : 
; 2013 : 			e10 = -cX * sZ * cY + sX * sY;

	movss	xmm0, DWORD PTR _sX$11[ebp]
	mulss	xmm0, DWORD PTR _sY$9[ebp]
	movss	xmm1, DWORD PTR _cX$10[ebp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm1, DWORD PTR _sZ$7[ebp]
	mulss	xmm1, DWORD PTR _cY$8[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+12], xmm1

; 2014 : 			e11 = cX * cZ;

	movss	xmm0, DWORD PTR _cX$10[ebp]
	mulss	xmm0, DWORD PTR _cZ$6[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 2015 : 			e12 = cX * sZ * sY + sX * cY;

	movss	xmm0, DWORD PTR _sX$11[ebp]
	mulss	xmm0, DWORD PTR _cY$8[ebp]
	movss	xmm1, DWORD PTR _cX$10[ebp]
	mulss	xmm1, DWORD PTR _sZ$7[ebp]
	mulss	xmm1, DWORD PTR _sY$9[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+20], xmm1

; 2016 : 
; 2017 : 			e20 = sX * sZ * cY + cX * sY;

	movss	xmm0, DWORD PTR _cX$10[ebp]
	mulss	xmm0, DWORD PTR _sY$9[ebp]
	movss	xmm1, DWORD PTR _sX$11[ebp]
	mulss	xmm1, DWORD PTR _sZ$7[ebp]
	mulss	xmm1, DWORD PTR _cY$8[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+24], xmm1

; 2018 : 			e21 = -sX * cZ;

	movss	xmm0, DWORD PTR _sX$11[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _cZ$6[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+28], xmm0

; 2019 : 			e22 = -sX * sZ * sY + cX * cY;

	movss	xmm0, DWORD PTR _cX$10[ebp]
	mulss	xmm0, DWORD PTR _cY$8[ebp]
	movss	xmm1, DWORD PTR _sX$11[ebp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm1, DWORD PTR _sZ$7[ebp]
	mulss	xmm1, DWORD PTR _sY$9[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+32], xmm1

; 2020 : 			break;

	jmp	$LN8@MakeRotati
$LN4@MakeRotati:

; 2021 : 		}
; 2022 : 		case kZXY:
; 2023 : 		{
; 2024 : 			e00 = cZ * cY + sZ * sX * sY;

	movss	xmm0, DWORD PTR _sZ$7[ebp]
	mulss	xmm0, DWORD PTR _sX$11[ebp]
	mulss	xmm0, DWORD PTR _sY$9[ebp]
	movss	xmm1, DWORD PTR _cZ$6[ebp]
	mulss	xmm1, DWORD PTR _cY$8[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax], xmm1

; 2025 : 			e01 = sZ * cX;

	movss	xmm0, DWORD PTR _sZ$7[ebp]
	mulss	xmm0, DWORD PTR _cX$10[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 2026 : 			e02 = -cZ * sY + sZ * sX * cY;

	movss	xmm0, DWORD PTR _sZ$7[ebp]
	mulss	xmm0, DWORD PTR _sX$11[ebp]
	mulss	xmm0, DWORD PTR _cY$8[ebp]
	movss	xmm1, DWORD PTR _cZ$6[ebp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm1, DWORD PTR _sY$9[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+8], xmm1

; 2027 : 
; 2028 : 			e10 = -sZ * cY + cZ * sX * sY;

	movss	xmm0, DWORD PTR _cZ$6[ebp]
	mulss	xmm0, DWORD PTR _sX$11[ebp]
	mulss	xmm0, DWORD PTR _sY$9[ebp]
	movss	xmm1, DWORD PTR _sZ$7[ebp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm1, DWORD PTR _cY$8[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+12], xmm1

; 2029 : 			e11 = cZ * cX;

	movss	xmm0, DWORD PTR _cZ$6[ebp]
	mulss	xmm0, DWORD PTR _cX$10[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 2030 : 			e12 = sZ * sY + cZ * sX * cY;

	movss	xmm0, DWORD PTR _cZ$6[ebp]
	mulss	xmm0, DWORD PTR _sX$11[ebp]
	mulss	xmm0, DWORD PTR _cY$8[ebp]
	movss	xmm1, DWORD PTR _sZ$7[ebp]
	mulss	xmm1, DWORD PTR _sY$9[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+20], xmm1

; 2031 : 
; 2032 : 			e20 = cX * sY;

	movss	xmm0, DWORD PTR _cX$10[ebp]
	mulss	xmm0, DWORD PTR _sY$9[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+24], xmm0

; 2033 : 			e21 = -sX;

	movss	xmm0, DWORD PTR _sX$11[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+28], xmm0

; 2034 : 			e22 = cX * cY;

	movss	xmm0, DWORD PTR _cX$10[ebp]
	mulss	xmm0, DWORD PTR _cY$8[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+32], xmm0

; 2035 : 			break;

	jmp	$LN8@MakeRotati
$LN3@MakeRotati:

; 2036 : 		}
; 2037 : 		case kYXZ:
; 2038 : 		{
; 2039 : 			e00 = cY * cZ + -sY * sX * sZ;

	movss	xmm0, DWORD PTR _sY$9[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _sX$11[ebp]
	mulss	xmm0, DWORD PTR _sZ$7[ebp]
	movss	xmm1, DWORD PTR _cY$8[ebp]
	mulss	xmm1, DWORD PTR _cZ$6[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax], xmm1

; 2040 : 			e01 = cY * sZ + sY * sX * cZ;

	movss	xmm0, DWORD PTR _sY$9[ebp]
	mulss	xmm0, DWORD PTR _sX$11[ebp]
	mulss	xmm0, DWORD PTR _cZ$6[ebp]
	movss	xmm1, DWORD PTR _cY$8[ebp]
	mulss	xmm1, DWORD PTR _sZ$7[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+4], xmm1

; 2041 : 			e02 = -sY * cX;

	movss	xmm0, DWORD PTR _sY$9[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _cX$10[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 2042 : 
; 2043 : 			e10 = -cX * sZ;

	movss	xmm0, DWORD PTR _cX$10[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _sZ$7[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 2044 : 			e11 = cX * cZ;

	movss	xmm0, DWORD PTR _cX$10[ebp]
	mulss	xmm0, DWORD PTR _cZ$6[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 2045 : 			e12 = sX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _sX$11[ebp]
	movss	DWORD PTR [eax+20], xmm0

; 2046 : 
; 2047 : 			e20 = sY * cZ + cY * sX * sZ;

	movss	xmm0, DWORD PTR _cY$8[ebp]
	mulss	xmm0, DWORD PTR _sX$11[ebp]
	mulss	xmm0, DWORD PTR _sZ$7[ebp]
	movss	xmm1, DWORD PTR _sY$9[ebp]
	mulss	xmm1, DWORD PTR _cZ$6[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+24], xmm1

; 2048 : 			e21 = sY * sZ + -cY * sX * cZ;

	movss	xmm0, DWORD PTR _cY$8[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _sX$11[ebp]
	mulss	xmm0, DWORD PTR _cZ$6[ebp]
	movss	xmm1, DWORD PTR _sY$9[ebp]
	mulss	xmm1, DWORD PTR _sZ$7[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+28], xmm1

; 2049 : 			e22 = cY * cX;

	movss	xmm0, DWORD PTR _cY$8[ebp]
	mulss	xmm0, DWORD PTR _cX$10[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+32], xmm0

; 2050 : 			break;

	jmp	$LN8@MakeRotati
$LN2@MakeRotati:

; 2051 : 		}
; 2052 : 		case kXYZ:
; 2053 : 		{
; 2054 : 			e00 = cY * cZ;

	movss	xmm0, DWORD PTR _cY$8[ebp]
	mulss	xmm0, DWORD PTR _cZ$6[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax], xmm0

; 2055 : 			e01 = cY * sZ;

	movss	xmm0, DWORD PTR _cY$8[ebp]
	mulss	xmm0, DWORD PTR _sZ$7[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 2056 : 			e02 = -sY;

	movss	xmm0, DWORD PTR _sY$9[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 2057 : 
; 2058 : 			e10 = sX * sY * cZ + -cX * sZ;

	movss	xmm0, DWORD PTR _cX$10[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _sZ$7[ebp]
	movss	xmm1, DWORD PTR _sX$11[ebp]
	mulss	xmm1, DWORD PTR _sY$9[ebp]
	mulss	xmm1, DWORD PTR _cZ$6[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+12], xmm1

; 2059 : 			e11 = sX * sY * sZ + cX * cZ;

	movss	xmm0, DWORD PTR _cX$10[ebp]
	mulss	xmm0, DWORD PTR _cZ$6[ebp]
	movss	xmm1, DWORD PTR _sX$11[ebp]
	mulss	xmm1, DWORD PTR _sY$9[ebp]
	mulss	xmm1, DWORD PTR _sZ$7[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+16], xmm1

; 2060 : 			e12 = sX * cY;

	movss	xmm0, DWORD PTR _sX$11[ebp]
	mulss	xmm0, DWORD PTR _cY$8[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+20], xmm0

; 2061 : 
; 2062 : 			e20 = cX * sY * cZ + sX * sZ;

	movss	xmm0, DWORD PTR _sX$11[ebp]
	mulss	xmm0, DWORD PTR _sZ$7[ebp]
	movss	xmm1, DWORD PTR _cX$10[ebp]
	mulss	xmm1, DWORD PTR _sY$9[ebp]
	mulss	xmm1, DWORD PTR _cZ$6[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+24], xmm1

; 2063 : 			e21 = cX * sY * sZ + -sX * cZ;

	movss	xmm0, DWORD PTR _sX$11[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _cZ$6[ebp]
	movss	xmm1, DWORD PTR _cX$10[ebp]
	mulss	xmm1, DWORD PTR _sY$9[ebp]
	mulss	xmm1, DWORD PTR _sZ$7[ebp]
	addss	xmm1, xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+28], xmm1

; 2064 : 			e22 = cX * cY;

	movss	xmm0, DWORD PTR _cX$10[ebp]
	mulss	xmm0, DWORD PTR _cY$8[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+32], xmm0

; 2065 : 			break;

	jmp	SHORT $LN8@MakeRotati
$LN1@MakeRotati:

; 2066 : 		}
; 2067 : 
; 2068 : 		default:
; 2069 : 			GEN_ERROR( "Invalid parameter" );

	mov	eax, DWORD PTR ?__LINE__Var@?1??MakeRotation@CMatrix3x3@gen@@QAEXVCVector3@3@W4ERotationOrder@3@@Z@4JA
	add	eax, 102				; 00000066H
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN8@MakeRotati:

; 2070 : 	}

	jmp	SHORT $LN13@MakeRotati
__catch$?MakeRotation@CMatrix3x3@gen@@QAEXVCVector3@2@W4ERotationOrder@2@@Z$0:

; 2071 : 
; 2072 : 	GEN_ENDGUARD;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BO@FPKFHDMJ@gen?3?3CMatrix3x3?3?3MakeRotation?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN17@MakeRotati
	ret	0
__catch$?MakeRotation@CMatrix3x3@gen@@QAEXVCVector3@2@W4ERotationOrder@2@@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BO@FPKFHDMJ@gen?3?3CMatrix3x3?3?3MakeRotation?$AA@
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN19@MakeRotati
	ret	0
$LN13@MakeRotati:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN18@MakeRotati
$LN19@MakeRotati:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN16@MakeRotati
$LN18@MakeRotati:
	jmp	SHORT $LN16@MakeRotati
$LN17@MakeRotati:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN16@MakeRotati:
$LN11@MakeRotati:

; 2073 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@MakeRotati
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 600				; 00000258H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN29@MakeRotati:
	DD	7
	DD	$LN28@MakeRotati
$LN28@MakeRotati:
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN20@MakeRotati
	DD	-52					; ffffffccH
	DD	4
	DD	$LN21@MakeRotati
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN22@MakeRotati
	DD	-76					; ffffffb4H
	DD	4
	DD	$LN23@MakeRotati
	DD	-88					; ffffffa8H
	DD	4
	DD	$LN24@MakeRotati
	DD	-100					; ffffff9cH
	DD	4
	DD	$LN25@MakeRotati
	DD	-112					; ffffff90H
	DD	4
	DD	$LN26@MakeRotati
$LN26@MakeRotati:
	DB	101					; 00000065H
	DB	0
$LN25@MakeRotati:
	DB	99					; 00000063H
	DB	90					; 0000005aH
	DB	0
$LN24@MakeRotati:
	DB	115					; 00000073H
	DB	90					; 0000005aH
	DB	0
$LN23@MakeRotati:
	DB	99					; 00000063H
	DB	89					; 00000059H
	DB	0
$LN22@MakeRotati:
	DB	115					; 00000073H
	DB	89					; 00000059H
	DB	0
$LN21@MakeRotati:
	DB	99					; 00000063H
	DB	88					; 00000058H
	DB	0
$LN20@MakeRotati:
	DB	115					; 00000073H
	DB	88					; 00000058H
	DB	0
$LN30@MakeRotati:
	DD	$LN2@MakeRotati
	DD	$LN5@MakeRotati
	DD	$LN6@MakeRotati
	DD	$LN3@MakeRotati
	DD	$LN4@MakeRotati
	DD	$LN7@MakeRotati
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?MakeRotation@CMatrix3x3@gen@@QAEXVCVector3@2@W4ERotationOrder@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-604]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?MakeRotation@CMatrix3x3@gen@@QAEXVCVector3@2@W4ERotationOrder@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?MakeRotation@CMatrix3x3@gen@@QAEXVCVector3@2@W4ERotationOrder@2@@Z ENDP ; gen::CMatrix3x3::MakeRotation
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?MakeRotationZ@CMatrix3x3@gen@@QAEXM@Z
_TEXT	SEGMENT
_cZ$ = -36						; size = 4
_sZ$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_z$ = 8							; size = 4
?MakeRotationZ@CMatrix3x3@gen@@QAEXM@Z PROC		; gen::CMatrix3x3::MakeRotationZ, COMDAT
; _this$ = ecx

; 1943 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1944 : 	TFloat32 sZ, cZ;
; 1945 : 	SinCos( z, &sZ, &cZ );

	lea	eax, DWORD PTR _cZ$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sZ$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SinCos@gen@@YAXMPAM0@Z			; gen::SinCos
	add	esp, 12					; 0000000cH

; 1946 : 
; 1947 : 	e00 = cZ;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _cZ$[ebp]
	movss	DWORD PTR [eax], xmm0

; 1948 : 	e01 = sZ;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _sZ$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 1949 : 	e02 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0

; 1950 : 
; 1951 : 	e10 = -sZ;

	movss	xmm0, DWORD PTR _sZ$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 1952 : 	e11 = cZ;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _cZ$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 1953 : 	e12 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+20], xmm0

; 1954 : 
; 1955 : 	e20 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+24], xmm0

; 1956 : 	e21 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+28], xmm0

; 1957 : 	e22 = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+32], xmm0

; 1958 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@MakeRotati
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN6@MakeRotati:
	DD	2
	DD	$LN5@MakeRotati
$LN5@MakeRotati:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN3@MakeRotati
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN4@MakeRotati
$LN4@MakeRotati:
	DB	99					; 00000063H
	DB	90					; 0000005aH
	DB	0
$LN3@MakeRotati:
	DB	115					; 00000073H
	DB	90					; 0000005aH
	DB	0
?MakeRotationZ@CMatrix3x3@gen@@QAEXM@Z ENDP		; gen::CMatrix3x3::MakeRotationZ
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?MakeRotationY@CMatrix3x3@gen@@QAEXM@Z
_TEXT	SEGMENT
_cY$ = -36						; size = 4
_sY$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_y$ = 8							; size = 4
?MakeRotationY@CMatrix3x3@gen@@QAEXM@Z PROC		; gen::CMatrix3x3::MakeRotationY, COMDAT
; _this$ = ecx

; 1924 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1925 : 	TFloat32 sY, cY;
; 1926 : 	SinCos( y, &sY, &cY );

	lea	eax, DWORD PTR _cY$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sY$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SinCos@gen@@YAXMPAM0@Z			; gen::SinCos
	add	esp, 12					; 0000000cH

; 1927 : 
; 1928 : 	e00 = cY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _cY$[ebp]
	movss	DWORD PTR [eax], xmm0

; 1929 : 	e01 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+4], xmm0

; 1930 : 	e02 = -sY;

	movss	xmm0, DWORD PTR _sY$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 1931 : 
; 1932 : 	e10 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+12], xmm0

; 1933 : 	e11 = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+16], xmm0

; 1934 : 	e12 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+20], xmm0

; 1935 : 
; 1936 : 	e20 = sY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _sY$[ebp]
	movss	DWORD PTR [eax+24], xmm0

; 1937 : 	e21 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+28], xmm0

; 1938 : 	e22 = cY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _cY$[ebp]
	movss	DWORD PTR [eax+32], xmm0

; 1939 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@MakeRotati
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN6@MakeRotati:
	DD	2
	DD	$LN5@MakeRotati
$LN5@MakeRotati:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN3@MakeRotati
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN4@MakeRotati
$LN4@MakeRotati:
	DB	99					; 00000063H
	DB	89					; 00000059H
	DB	0
$LN3@MakeRotati:
	DB	115					; 00000073H
	DB	89					; 00000059H
	DB	0
?MakeRotationY@CMatrix3x3@gen@@QAEXM@Z ENDP		; gen::CMatrix3x3::MakeRotationY
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?MakeRotationX@CMatrix3x3@gen@@QAEXM@Z
_TEXT	SEGMENT
_cX$ = -36						; size = 4
_sX$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
?MakeRotationX@CMatrix3x3@gen@@QAEXM@Z PROC		; gen::CMatrix3x3::MakeRotationX, COMDAT
; _this$ = ecx

; 1905 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1906 : 	TFloat32 sX, cX;
; 1907 : 	SinCos( x, &sX, &cX );

	lea	eax, DWORD PTR _cX$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sX$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SinCos@gen@@YAXMPAM0@Z			; gen::SinCos
	add	esp, 12					; 0000000cH

; 1908 : 
; 1909 : 	e00 = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax], xmm0

; 1910 : 	e01 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+4], xmm0

; 1911 : 	e02 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0

; 1912 : 
; 1913 : 	e10 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+12], xmm0

; 1914 : 	e11 = cX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _cX$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 1915 : 	e12 = sX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _sX$[ebp]
	movss	DWORD PTR [eax+20], xmm0

; 1916 : 
; 1917 : 	e20 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+24], xmm0

; 1918 : 	e21 = -sX;

	movss	xmm0, DWORD PTR _sX$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+28], xmm0

; 1919 : 	e22 = cX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _cX$[ebp]
	movss	DWORD PTR [eax+32], xmm0

; 1920 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@MakeRotati
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN6@MakeRotati:
	DD	2
	DD	$LN5@MakeRotati
$LN5@MakeRotati:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN3@MakeRotati
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN4@MakeRotati
$LN4@MakeRotati:
	DB	99					; 00000063H
	DB	88					; 00000058H
	DB	0
$LN3@MakeRotati:
	DB	115					; 00000073H
	DB	88					; 00000058H
	DB	0
?MakeRotationX@CMatrix3x3@gen@@QAEXM@Z ENDP		; gen::CMatrix3x3::MakeRotationX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?MakeIdentity@CMatrix3x3@gen@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?MakeIdentity@CMatrix3x3@gen@@QAEXXZ PROC		; gen::CMatrix3x3::MakeIdentity, COMDAT
; _this$ = ecx

; 1888 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1889 : 	e00 = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax], xmm0

; 1890 : 	e01 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+4], xmm0

; 1891 : 	e02 = 0.0f; 

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0

; 1892 : 
; 1893 : 	e10 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+12], xmm0

; 1894 : 	e11 = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+16], xmm0

; 1895 : 	e12 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+20], xmm0

; 1896 : 
; 1897 : 	e20 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+24], xmm0

; 1898 : 	e21 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+28], xmm0

; 1899 : 	e22 = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+32], xmm0

; 1900 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?MakeIdentity@CMatrix3x3@gen@@QAEXXZ ENDP		; gen::CMatrix3x3::MakeIdentity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?Invert@CMatrix3x3@gen@@QAEXXZ
_TEXT	SEGMENT
$T1 = -244						; size = 36
_this$ = -8						; size = 4
?Invert@CMatrix3x3@gen@@QAEXXZ PROC			; gen::CMatrix3x3::Invert, COMDAT
; _this$ = ecx

; 1844 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1845 : 	*this = Inverse( *this ); // TODO: Just use non-member version

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	?Inverse@gen@@YA?AVCMatrix3x3@1@ABV21@@Z ; gen::Inverse
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4CMatrix3x3@gen@@QAEAAV01@ABV01@@Z	; gen::CMatrix3x3::operator=

; 1846 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Invert@CMatrix3x3@gen@@QAEXXZ ENDP			; gen::CMatrix3x3::Invert
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?InvertAffine2D@CMatrix3x3@gen@@QAEXXZ
_TEXT	SEGMENT
tv164 = -557						; size = 1
$T2 = -552						; size = 88
$T3 = -456						; size = 88
$T4 = -360						; size = 88
_e$5 = -72						; size = 4
_t$6 = -60						; size = 4
_invDet$7 = -48						; size = 4
_det$8 = -36						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
?InvertAffine2D@CMatrix3x3@gen@@QAEXXZ PROC		; gen::CMatrix3x3::InvertAffine2D, COMDAT
; _this$ = ecx

; 1786 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?InvertAffine2D@CMatrix3x3@gen@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 544				; 00000220H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-560]
	mov	ecx, 136				; 00000088H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1787 : 	GEN_GUARD;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1788 : 
; 1789 : 	// Calculate determinant of upper left 2x2
; 1790 : 	TFloat32 det = e00*e11 - e01*e10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx]
	mulss	xmm1, DWORD PTR [eax+16]
	subss	xmm1, xmm0
	movss	DWORD PTR _det$8[ebp], xmm1

; 1791 : 	GEN_ASSERT( !IsZero(det), "Singular matrix" );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _det$8[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv164[ebp], al
	movzx	eax, BYTE PTR tv164[ebp]
	test	eax, eax
	je	SHORT $LN1@InvertAffi
	mov	eax, DWORD PTR ?__LINE__Var@?1??InvertAffine2D@CMatrix3x3@gen@@QAEXXZ@4JA
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BA@EJDDFENM@Singular?5matrix?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN1@InvertAffi:

; 1792 : 
; 1793 : 	// Calculate inverse of upper left 2x2
; 1794 : 	TFloat32 invDet = 1.0f / det;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _det$8[ebp]
	movss	DWORD PTR _invDet$7[ebp], xmm0

; 1795 : 	TFloat32 t;
; 1796 : 	t   = invDet * e00;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _invDet$7[ebp]
	mulss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _t$6[ebp], xmm0

; 1797 : 	e00 = invDet * e11;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _invDet$7[ebp]
	mulss	xmm0, DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1798 : 	e11 = t;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _t$6[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 1799 : 
; 1800 : 	e01 *= invDet;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _invDet$7[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 1801 : 	e10 *= invDet;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _invDet$7[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 1802 : 
; 1803 : 	// Transform negative translation by inverted 3x3 to get inverse
; 1804 : 	e20 = -e20*e00 - e21*e10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	mulss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+24]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+24], xmm1

; 1805 : 	e21 = -e20*e01 - e21*e11;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	mulss	xmm0, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+24]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _this$[ebp]
	mulss	xmm1, DWORD PTR [eax+4]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+28], xmm1
	jmp	SHORT $LN5@InvertAffi
__catch$?InvertAffine2D@CMatrix3x3@gen@@QAEXXZ$0:

; 1806 : 
; 1807 : 	GEN_ENDGUARD;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0CA@GCJMOFPA@gen?3?3CMatrix3x3?3?3InvertAffine2D?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN9@InvertAffi
	ret	0
__catch$?InvertAffine2D@CMatrix3x3@gen@@QAEXXZ$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0CA@GCJMOFPA@gen?3?3CMatrix3x3?3?3InvertAffine2D?$AA@
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN11@InvertAffi
	ret	0
$LN5@InvertAffi:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@InvertAffi
$LN11@InvertAffi:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN8@InvertAffi
$LN10@InvertAffi:
	jmp	SHORT $LN8@InvertAffi
$LN9@InvertAffi:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN8@InvertAffi:
$LN3@InvertAffi:

; 1808 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@InvertAffi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 560				; 00000230H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN15@InvertAffi:
	DD	1
	DD	$LN14@InvertAffi
$LN14@InvertAffi:
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN12@InvertAffi
$LN12@InvertAffi:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?InvertAffine2D@CMatrix3x3@gen@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-564]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?InvertAffine2D@CMatrix3x3@gen@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?InvertAffine2D@CMatrix3x3@gen@@QAEXXZ ENDP		; gen::CMatrix3x3::InvertAffine2D
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?InvertRotScale@CMatrix3x3@gen@@QAEXXZ
_TEXT	SEGMENT
tv201 = -605						; size = 1
tv200 = -605						; size = 1
tv199 = -605						; size = 1
$T2 = -600						; size = 88
$T3 = -504						; size = 88
$T4 = -408						; size = 88
_e$5 = -120						; size = 4
_t$6 = -108						; size = 4
_invScaleZ$7 = -96					; size = 4
_invScaleY$8 = -84					; size = 4
_invScaleX$9 = -72					; size = 4
_scaleSqZ$10 = -60					; size = 4
_scaleSqY$11 = -48					; size = 4
_scaleSqX$12 = -36					; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
?InvertRotScale@CMatrix3x3@gen@@QAEXXZ PROC		; gen::CMatrix3x3::InvertRotScale, COMDAT
; _this$ = ecx

; 1711 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?InvertRotScale@CMatrix3x3@gen@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 592				; 00000250H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-608]
	mov	ecx, 148				; 00000094H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1712 : 	GEN_GUARD;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1713 : 
; 1714 : 	// Get X, Y & Z scaling (squared)
; 1715 : 	TFloat32 scaleSqX = e00*e00 + e01*e01 + e02*e02;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [ecx]
	mulss	xmm2, DWORD PTR [edx]
	addss	xmm2, xmm1
	addss	xmm2, xmm0
	movss	DWORD PTR _scaleSqX$12[ebp], xmm2

; 1716 : 	TFloat32 scaleSqY = e10*e10 + e11*e11 + e12*e12;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [ecx+12]
	mulss	xmm2, DWORD PTR [edx+12]
	addss	xmm2, xmm1
	addss	xmm2, xmm0
	movss	DWORD PTR _scaleSqY$11[ebp], xmm2

; 1717 : 	TFloat32 scaleSqZ = e20*e20 + e21*e21 + e22*e22;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+28]
	mulss	xmm1, DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [ecx+24]
	mulss	xmm2, DWORD PTR [edx+24]
	addss	xmm2, xmm1
	addss	xmm2, xmm0
	movss	DWORD PTR _scaleSqZ$10[ebp], xmm2

; 1718 : 	
; 1719 : 	// Calculate scaling inverse
; 1720 : 	GEN_ASSERT( !IsZero(scaleSqX) && !IsZero(scaleSqY) && !IsZero(scaleSqZ), "Singular matrix" );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleSqX$12[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv199[ebp], al
	movzx	eax, BYTE PTR tv199[ebp]
	test	eax, eax
	jne	SHORT $LN1@InvertRotS
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleSqY$11[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv200[ebp], al
	movzx	eax, BYTE PTR tv200[ebp]
	test	eax, eax
	jne	SHORT $LN1@InvertRotS
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleSqZ$10[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv201[ebp], al
	movzx	eax, BYTE PTR tv201[ebp]
	test	eax, eax
	je	SHORT $LN2@InvertRotS
$LN1@InvertRotS:
	mov	eax, DWORD PTR ?__LINE__Var@?1??InvertRotScale@CMatrix3x3@gen@@QAEXXZ@4JA
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BA@EJDDFENM@Singular?5matrix?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@InvertRotS:

; 1721 : 	TFloat32 invScaleX = 1.0f / scaleSqX;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _scaleSqX$12[ebp]
	movss	DWORD PTR _invScaleX$9[ebp], xmm0

; 1722 : 	TFloat32 invScaleY = 1.0f / scaleSqY;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _scaleSqY$11[ebp]
	movss	DWORD PTR _invScaleY$8[ebp], xmm0

; 1723 : 	TFloat32 invScaleZ = 1.0f / scaleSqZ;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _scaleSqZ$10[ebp]
	movss	DWORD PTR _invScaleZ$7[ebp], xmm0

; 1724 : 
; 1725 : 	// Inverse is just the transpose with scaling inverse factored in
; 1726 : 	TFloat32 t;
; 1727 : 	e00 *= invScaleX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _invScaleX$9[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1728 : 	e11 *= invScaleY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR _invScaleY$8[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+16], xmm0

; 1729 : 	e22 *= invScaleZ;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR _invScaleZ$7[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+32], xmm0

; 1730 : 
; 1731 : 	t   = e01;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _t$6[ebp], xmm0

; 1732 : 	e01 = e10 * invScaleY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _invScaleY$8[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 1733 : 	e10 = t * invScaleX;

	movss	xmm0, DWORD PTR _t$6[ebp]
	mulss	xmm0, DWORD PTR _invScaleX$9[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 1734 : 
; 1735 : 	t   = e02;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _t$6[ebp], xmm0

; 1736 : 	e02 = e20 * invScaleZ;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR _invScaleZ$7[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 1737 : 	e20 = t  * invScaleX;

	movss	xmm0, DWORD PTR _t$6[ebp]
	mulss	xmm0, DWORD PTR _invScaleX$9[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+24], xmm0

; 1738 : 
; 1739 : 	t   = e12;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR _t$6[ebp], xmm0

; 1740 : 	e12 = e21 * invScaleZ;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	mulss	xmm0, DWORD PTR _invScaleZ$7[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+20], xmm0

; 1741 : 	e21 = t * invScaleY;

	movss	xmm0, DWORD PTR _t$6[ebp]
	mulss	xmm0, DWORD PTR _invScaleY$8[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+28], xmm0
	jmp	SHORT $LN6@InvertRotS
__catch$?InvertRotScale@CMatrix3x3@gen@@QAEXXZ$0:

; 1742 : 
; 1743 : 	GEN_ENDGUARD;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0CA@CAHBGMPM@gen?3?3CMatrix3x3?3?3InvertRotScale?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN10@InvertRotS
	ret	0
__catch$?InvertRotScale@CMatrix3x3@gen@@QAEXXZ$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0CA@CAHBGMPM@gen?3?3CMatrix3x3?3?3InvertRotScale?$AA@
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN12@InvertRotS
	ret	0
$LN6@InvertRotS:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN11@InvertRotS
$LN12@InvertRotS:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN9@InvertRotS
$LN11@InvertRotS:
	jmp	SHORT $LN9@InvertRotS
$LN10@InvertRotS:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@InvertRotS:
$LN4@InvertRotS:

; 1744 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@InvertRotS
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 608				; 00000260H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@InvertRotS:
	DD	1
	DD	$LN15@InvertRotS
$LN15@InvertRotS:
	DD	-120					; ffffff88H
	DD	4
	DD	$LN13@InvertRotS
$LN13@InvertRotS:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?InvertRotScale@CMatrix3x3@gen@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-612]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?InvertRotScale@CMatrix3x3@gen@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?InvertRotScale@CMatrix3x3@gen@@QAEXXZ ENDP		; gen::CMatrix3x3::InvertRotScale
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?Transpose@CMatrix3x3@gen@@QAEXXZ
_TEXT	SEGMENT
_t$ = -20						; size = 4
_this$ = -8						; size = 4
?Transpose@CMatrix3x3@gen@@QAEXXZ PROC			; gen::CMatrix3x3::Transpose, COMDAT
; _this$ = ecx

; 1670 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1671 : 	TFloat32 t;
; 1672 : 
; 1673 : 	t   = e01;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _t$[ebp], xmm0

; 1674 : 	e01 = e10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+4], edx

; 1675 : 	e10 = t;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 1676 : 
; 1677 : 	t   = e02;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _t$[ebp], xmm0

; 1678 : 	e02 = e20;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+8], edx

; 1679 : 	e20 = t;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR [eax+24], xmm0

; 1680 : 
; 1681 : 	t   = e12;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR _t$[ebp], xmm0

; 1682 : 	e12 = e21;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+20], edx

; 1683 : 	e21 = t;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _t$[ebp]
	movss	DWORD PTR [eax+28], xmm0

; 1684 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Transpose@CMatrix3x3@gen@@QAEXXZ ENDP			; gen::CMatrix3x3::Transpose
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?Orthogonalise2x2@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z
_TEXT	SEGMENT
tv176 = -560						; size = 4
tv175 = -557						; size = 1
$T2 = -552						; size = 88
$T3 = -456						; size = 88
$T4 = -360						; size = 88
_e$5 = -72						; size = 4
_ccwPerpDot$6 = -60					; size = 4
_invOrigScaleX$7 = -48					; size = 4
_origScaleX$8 = -36					; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
_scale$ = 8						; size = 4
?Orthogonalise2x2@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z PROC ; gen::CMatrix3x3::Orthogonalise2x2, COMDAT
; _this$ = ecx

; 1583 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Orthogonalise2x2@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 544				; 00000220H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-560]
	mov	ecx, 136				; 00000088H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1584 : 	GEN_GUARD;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1585 : 
; 1586 : 	// Normalise first vector
; 1587 : 	TFloat32 origScaleX = e00*e00 + e01*e01;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx]
	mulss	xmm1, DWORD PTR [eax]
	addss	xmm1, xmm0
	movss	DWORD PTR _origScaleX$8[ebp], xmm1

; 1588 : 	GEN_ASSERT( !IsZero(origScaleX), "Singular matrix" );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _origScaleX$8[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv175[ebp], al
	movzx	eax, BYTE PTR tv175[ebp]
	test	eax, eax
	je	SHORT $LN3@Orthogonal
	mov	eax, DWORD PTR ?__LINE__Var@?1??Orthogonalise2x2@CMatrix3x3@gen@@QAEXABVCVector2@3@@Z@4JA
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BA@EJDDFENM@Singular?5matrix?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN3@Orthogonal:

; 1589 : 	TFloat32 invOrigScaleX = InvSqrt( origScaleX );

	push	ecx
	movss	xmm0, DWORD PTR _origScaleX$8[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?InvSqrt@gen@@YAMM@Z			; gen::InvSqrt
	add	esp, 4
	fstp	DWORD PTR tv176[ebp]
	movss	xmm0, DWORD PTR tv176[ebp]
	movss	DWORD PTR _invOrigScaleX$7[ebp], xmm0

; 1590 : 	e00 *= invOrigScaleX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _invOrigScaleX$7[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1591 : 	e01 *= invOrigScaleX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _invOrigScaleX$7[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 1592 : 
; 1593 : 	// Second vector is simply perpendicular to first, only need to select cw or ccw direction
; 1594 : 	TFloat32 ccwPerpDot = e00*e11 - e01*e10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx]
	mulss	xmm1, DWORD PTR [eax+16]
	subss	xmm1, xmm0
	movss	DWORD PTR _ccwPerpDot$6[ebp], xmm1

; 1595 : 	if (ccwPerpDot >= 0.0f)

	movss	xmm0, DWORD PTR _ccwPerpDot$6[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN2@Orthogonal

; 1596 : 	{
; 1597 : 		e11 = e00;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+16], edx

; 1598 : 		e10 = -e01;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 1599 : 	}
; 1600 : 	else

	jmp	SHORT $LN1@Orthogonal
$LN2@Orthogonal:

; 1601 : 	{
; 1602 : 		e11 = -e00;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+16], xmm0

; 1603 : 		e10 = e01;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+12], edx
$LN1@Orthogonal:

; 1604 : 	}
; 1605 : 
; 1606 : 	// Rescale each vector
; 1607 : 	e00 *= scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0

; 1608 : 	e01 *= scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 1609 : 
; 1610 : 	e10 *= scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+12], xmm0

; 1611 : 	e11 *= scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+16], xmm0
	jmp	SHORT $LN7@Orthogonal
__catch$?Orthogonalise2x2@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z$0:

; 1612 : 
; 1613 : 	GEN_ENDGUARD;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0CC@DNFNCOGI@gen?3?3CMatrix3x3?3?3Orthogonalise2x@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN11@Orthogonal
	ret	0
__catch$?Orthogonalise2x2@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0CC@DNFNCOGI@gen?3?3CMatrix3x3?3?3Orthogonalise2x@
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN13@Orthogonal
	ret	0
$LN7@Orthogonal:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN12@Orthogonal
$LN13@Orthogonal:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@Orthogonal
$LN12@Orthogonal:
	jmp	SHORT $LN10@Orthogonal
$LN11@Orthogonal:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN10@Orthogonal:
$LN5@Orthogonal:

; 1614 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@Orthogonal
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 560				; 00000230H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN17@Orthogonal:
	DD	1
	DD	$LN16@Orthogonal
$LN16@Orthogonal:
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN14@Orthogonal
$LN14@Orthogonal:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?Orthogonalise2x2@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-564]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Orthogonalise2x2@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Orthogonalise2x2@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z ENDP ; gen::CMatrix3x3::Orthogonalise2x2
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?IsOrthonormal2x2@CMatrix3x3@gen@@QBE_NXZ
_TEXT	SEGMENT
tv146 = -208						; size = 4
_this$ = -8						; size = 4
?IsOrthonormal2x2@CMatrix3x3@gen@@QBE_NXZ PROC		; gen::CMatrix3x3::IsOrthonormal2x2, COMDAT
; _this$ = ecx

; 1573 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1574 : 	// Check each row is length 1 and dot product of each pair of rows is zero
; 1575 : 	return IsZero( e00*e00 + e01*e01 - 1.0f ) && IsZero( e10*e10 + e11*e11 - 1.0f ) &&
; 1576 : 	       IsZero( e00*e10 + e01*e11 ) && IsZero( e10*e20 + e11*e21 );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	subss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	$LN3@IsOrthonor
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+12]
	mulss	xmm0, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+16]
	mulss	xmm1, DWORD PTR [edx+16]
	addss	xmm0, xmm1
	subss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	$LN3@IsOrthonor
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+4]
	mulss	xmm1, DWORD PTR [ecx+16]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@IsOrthonor
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [eax+28]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@IsOrthonor
	mov	DWORD PTR tv146[ebp], 1
	jmp	SHORT $LN4@IsOrthonor
$LN3@IsOrthonor:
	mov	DWORD PTR tv146[ebp], 0
$LN4@IsOrthonor:
	mov	al, BYTE PTR tv146[ebp]

; 1577 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsOrthonormal2x2@CMatrix3x3@gen@@QBE_NXZ ENDP		; gen::CMatrix3x3::IsOrthonormal2x2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?IsOrthogonal2x2@CMatrix3x3@gen@@QBE_NXZ
_TEXT	SEGMENT
tv88 = -208						; size = 4
_this$ = -8						; size = 4
?IsOrthogonal2x2@CMatrix3x3@gen@@QBE_NXZ PROC		; gen::CMatrix3x3::IsOrthogonal2x2, COMDAT
; _this$ = ecx

; 1565 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1566 : 	// Check dot product of each pair of rows is zero
; 1567 : 	return IsZero( e00*e10 + e01*e11) && IsZero( e10*e20 + e11*e21);

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@IsOrthogon
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+12]
	mulss	xmm0, DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+16]
	mulss	xmm1, DWORD PTR [edx+28]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@IsOrthogon
	mov	DWORD PTR tv88[ebp], 1
	jmp	SHORT $LN4@IsOrthogon
$LN3@IsOrthogon:
	mov	DWORD PTR tv88[ebp], 0
$LN4@IsOrthogon:
	mov	al, BYTE PTR tv88[ebp]

; 1568 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsOrthogonal2x2@CMatrix3x3@gen@@QBE_NXZ ENDP		; gen::CMatrix3x3::IsOrthogonal2x2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?Orthogonalise@CMatrix3x3@gen@@QAEXABVCVector3@2@@Z
_TEXT	SEGMENT
tv271 = -680						; size = 4
tv269 = -680						; size = 4
tv270 = -677						; size = 1
tv268 = -677						; size = 1
$T2 = -672						; size = 88
$T3 = -576						; size = 88
$T4 = -480						; size = 88
$T5 = -384						; size = 88
_e$6 = -96						; size = 4
_invOrigScaleY$7 = -84					; size = 4
_origScaleY$8 = -72					; size = 4
_proj10$9 = -60						; size = 4
_invOrigScaleX$10 = -48					; size = 4
_origScaleX$11 = -36					; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
_scale$ = 8						; size = 4
?Orthogonalise@CMatrix3x3@gen@@QAEXABVCVector3@2@@Z PROC ; gen::CMatrix3x3::Orthogonalise, COMDAT
; _this$ = ecx

; 1456 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Orthogonalise@CMatrix3x3@gen@@QAEXABVCVector3@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 664				; 00000298H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-680]
	mov	ecx, 166				; 000000a6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1457 : 	GEN_GUARD;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1458 : 
; 1459 : 	// Normalise first vector (x-axis)
; 1460 : 	TFloat32 origScaleX = e00*e00 + e01*e01 + e02*e02;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [ecx]
	mulss	xmm2, DWORD PTR [edx]
	addss	xmm2, xmm1
	addss	xmm2, xmm0
	movss	DWORD PTR _origScaleX$11[ebp], xmm2

; 1461 : 	GEN_ASSERT( !IsZero(origScaleX), "Singular matrix" );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _origScaleX$11[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv268[ebp], al
	movzx	eax, BYTE PTR tv268[ebp]
	test	eax, eax
	je	SHORT $LN2@Orthogonal
	mov	eax, DWORD PTR ?__LINE__Var@?1??Orthogonalise@CMatrix3x3@gen@@QAEXABVCVector3@3@@Z@4JA
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BA@EJDDFENM@Singular?5matrix?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@Orthogonal:

; 1462 : 	TFloat32 invOrigScaleX = InvSqrt( origScaleX );

	push	ecx
	movss	xmm0, DWORD PTR _origScaleX$11[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?InvSqrt@gen@@YAMM@Z			; gen::InvSqrt
	add	esp, 4
	fstp	DWORD PTR tv269[ebp]
	movss	xmm0, DWORD PTR tv269[ebp]
	movss	DWORD PTR _invOrigScaleX$10[ebp], xmm0

; 1463 : 	e00 *= invOrigScaleX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _invOrigScaleX$10[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1464 : 	e01 *= invOrigScaleX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _invOrigScaleX$10[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 1465 : 	e02 *= invOrigScaleX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _invOrigScaleX$10[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 1466 : 
; 1467 : 	// Orthogonalise second vector (y-axis) with first
; 1468 : 	TFloat32 proj10 = e10*e00 + e11*e01 + e12*e02;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [ecx+12]
	mulss	xmm2, DWORD PTR [edx]
	addss	xmm2, xmm1
	addss	xmm2, xmm0
	movss	DWORD PTR _proj10$9[ebp], xmm2

; 1469 : 	e10 -= proj10 * e00;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _proj10$9[ebp]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+12]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+12], xmm1

; 1470 : 	e11 -= proj10 * e01;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _proj10$9[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+16]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+16], xmm1

; 1471 : 	e12 -= proj10 * e02;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _proj10$9[ebp]
	mulss	xmm0, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+20]
	subss	xmm1, xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+20], xmm1

; 1472 : 
; 1473 : 	// Normalise second vector
; 1474 : 	TFloat32 origScaleY = e10*e10 + e11*e11 + e12*e12;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [ecx+12]
	mulss	xmm2, DWORD PTR [edx+12]
	addss	xmm2, xmm1
	addss	xmm2, xmm0
	movss	DWORD PTR _origScaleY$8[ebp], xmm2

; 1475 : 	GEN_ASSERT( !IsZero(origScaleY), "Singular matrix" );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _origScaleY$8[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv270[ebp], al
	movzx	eax, BYTE PTR tv270[ebp]
	test	eax, eax
	je	SHORT $LN1@Orthogonal
	mov	eax, DWORD PTR ?__LINE__Var@?1??Orthogonalise@CMatrix3x3@gen@@QAEXABVCVector3@3@@Z@4JA
	add	eax, 19					; 00000013H
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BA@EJDDFENM@Singular?5matrix?$AA@
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN1@Orthogonal:

; 1476 : 	TFloat32 invOrigScaleY = InvSqrt( origScaleY );

	push	ecx
	movss	xmm0, DWORD PTR _origScaleY$8[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?InvSqrt@gen@@YAMM@Z			; gen::InvSqrt
	add	esp, 4
	fstp	DWORD PTR tv271[ebp]
	movss	xmm0, DWORD PTR tv271[ebp]
	movss	DWORD PTR _invOrigScaleY$7[ebp], xmm0

; 1477 : 	e10 *= invOrigScaleY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _invOrigScaleY$7[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 1478 : 	e11 *= invOrigScaleY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR _invOrigScaleY$7[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+16], xmm0

; 1479 : 	e12 *= invOrigScaleY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR _invOrigScaleY$7[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+20], xmm0

; 1480 : 
; 1481 : 	// Get third vector from cross product of first two (result is already normalised)
; 1482 : 	e20 = e01*e12 - e02*e11;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+20]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+24], xmm1

; 1483 : 	e21 = e02*e10 - e00*e12;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+8]
	mulss	xmm1, DWORD PTR [eax+12]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+28], xmm1

; 1484 : 	e22 = e00*e11 - e01*e10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx]
	mulss	xmm1, DWORD PTR [eax+16]
	subss	xmm1, xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+32], xmm1

; 1485 : 	
; 1486 : 	// Rescale each vector
; 1487 : 	e00 *= scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0

; 1488 : 	e01 *= scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 1489 : 	e02 *= scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 1490 : 
; 1491 : 	e10 *= scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+12], xmm0

; 1492 : 	e11 *= scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+16], xmm0

; 1493 : 	e12 *= scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+20], xmm0

; 1494 : 
; 1495 : 	e20 *= scale.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+24], xmm0

; 1496 : 	e21 *= scale.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+28], xmm0

; 1497 : 	e22 *= scale.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+32], xmm0
	jmp	SHORT $LN6@Orthogonal
__catch$?Orthogonalise@CMatrix3x3@gen@@QAEXABVCVector3@2@@Z$0:

; 1498 : 
; 1499 : 	GEN_ENDGUARD;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BP@PMPEPEBF@gen?3?3CMatrix3x3?3?3Orthogonalise?$AA@
	mov	ecx, DWORD PTR _e$6[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$6[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN10@Orthogonal
	ret	0
__catch$?Orthogonalise@CMatrix3x3@gen@@QAEXABVCVector3@2@@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BP@PMPEPEBF@gen?3?3CMatrix3x3?3?3Orthogonalise?$AA@
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T5[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN12@Orthogonal
	ret	0
$LN6@Orthogonal:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN11@Orthogonal
$LN12@Orthogonal:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN9@Orthogonal
$LN11@Orthogonal:
	jmp	SHORT $LN9@Orthogonal
$LN10@Orthogonal:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Orthogonal:
$LN4@Orthogonal:

; 1500 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@Orthogonal
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 680				; 000002a8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN16@Orthogonal:
	DD	1
	DD	$LN15@Orthogonal
$LN15@Orthogonal:
	DD	-96					; ffffffa0H
	DD	4
	DD	$LN13@Orthogonal
$LN13@Orthogonal:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?Orthogonalise@CMatrix3x3@gen@@QAEXABVCVector3@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-684]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Orthogonalise@CMatrix3x3@gen@@QAEXABVCVector3@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Orthogonalise@CMatrix3x3@gen@@QAEXABVCVector3@2@@Z ENDP ; gen::CMatrix3x3::Orthogonalise
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?IsOrthonormal@CMatrix3x3@gen@@QBE_NXZ
_TEXT	SEGMENT
tv195 = -208						; size = 4
_this$ = -8						; size = 4
?IsOrthonormal@CMatrix3x3@gen@@QBE_NXZ PROC		; gen::CMatrix3x3::IsOrthonormal, COMDAT
; _this$ = ecx

; 1442 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1443 : 	// Check each row is length 1 and dot product of each pair of rows is zero
; 1444 : 	return IsZero( e00*e00 + e01*e01 + e02*e02 - 1.0f ) &&
; 1445 : 	       IsZero( e10*e10 + e11*e11 + e12*e12 - 1.0f ) &&
; 1446 : 	       IsZero( e20*e20 + e21*e21 + e22*e22 - 1.0f ) &&
; 1447 : 	       IsZero( e00*e10 + e01*e11 + e02*e12 ) &&
; 1448 : 	       IsZero( e10*e20 + e11*e21 + e12*e22 ) &&
; 1449 : 	       IsZero( e20*e00 + e21*e01 + e22*e02 );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	subss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	$LN3@IsOrthonor
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+12]
	mulss	xmm0, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+16]
	mulss	xmm1, DWORD PTR [ecx+16]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+20]
	mulss	xmm1, DWORD PTR [eax+20]
	addss	xmm0, xmm1
	subss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	$LN3@IsOrthonor
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+24]
	mulss	xmm0, DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+28]
	mulss	xmm1, DWORD PTR [edx+28]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+32]
	mulss	xmm1, DWORD PTR [ecx+32]
	addss	xmm0, xmm1
	subss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	$LN3@IsOrthonor
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+20]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	$LN3@IsOrthonor
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+12]
	mulss	xmm0, DWORD PTR [edx+24]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+16]
	mulss	xmm1, DWORD PTR [ecx+28]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+20]
	mulss	xmm1, DWORD PTR [eax+32]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@IsOrthonor
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+24]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+28]
	mulss	xmm1, DWORD PTR [edx+4]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+32]
	mulss	xmm1, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@IsOrthonor
	mov	DWORD PTR tv195[ebp], 1
	jmp	SHORT $LN4@IsOrthonor
$LN3@IsOrthonor:
	mov	DWORD PTR tv195[ebp], 0
$LN4@IsOrthonor:
	mov	al, BYTE PTR tv195[ebp]

; 1450 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsOrthonormal@CMatrix3x3@gen@@QBE_NXZ ENDP		; gen::CMatrix3x3::IsOrthonormal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?IsOrthogonal@CMatrix3x3@gen@@QBE_NXZ
_TEXT	SEGMENT
tv144 = -208						; size = 4
_this$ = -8						; size = 4
?IsOrthogonal@CMatrix3x3@gen@@QBE_NXZ PROC		; gen::CMatrix3x3::IsOrthogonal, COMDAT
; _this$ = ecx

; 1432 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1433 : 	// Check dot product of each pair of rows is zero
; 1434 : 	return IsZero( e00*e10 + e01*e11 + e02*e12 ) &&
; 1435 : 	       IsZero( e10*e20 + e11*e21 + e12*e22 ) &&
; 1436 : 	       IsZero( e20*e00 + e21*e01 + e22*e02 );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+20]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	$LN3@IsOrthogon
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+12]
	mulss	xmm0, DWORD PTR [edx+24]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+16]
	mulss	xmm1, DWORD PTR [ecx+28]
	addss	xmm0, xmm1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+20]
	mulss	xmm1, DWORD PTR [eax+32]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@IsOrthogon
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+24]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+28]
	mulss	xmm1, DWORD PTR [edx+4]
	addss	xmm0, xmm1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+32]
	mulss	xmm1, DWORD PTR [ecx+8]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@IsOrthogon
	mov	DWORD PTR tv144[ebp], 1
	jmp	SHORT $LN4@IsOrthogon
$LN3@IsOrthogon:
	mov	DWORD PTR tv144[ebp], 0
$LN4@IsOrthogon:
	mov	al, BYTE PTR tv144[ebp]

; 1437 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsOrthogonal@CMatrix3x3@gen@@QBE_NXZ ENDP		; gen::CMatrix3x3::IsOrthogonal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?IsIdentity@CMatrix3x3@gen@@QBE_NXZ
_TEXT	SEGMENT
tv153 = -208						; size = 4
_this$ = -8						; size = 4
?IsIdentity@CMatrix3x3@gen@@QBE_NXZ PROC		; gen::CMatrix3x3::IsIdentity, COMDAT
; _this$ = ecx

; 1415 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1416 : 	return IsZero( e00 - 1.0f ) && IsZero( e11 - 1.0f ) && IsZero( e22 - 1.0f ) && 
; 1417 : 	       IsZero( e01 ) && IsZero( e02 ) && 
; 1418 : 	       IsZero( e10 ) && IsZero( e12 ) && 
; 1419 : 	       IsZero( e20 ) && IsZero( e21 );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	subss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	$LN3@IsIdentity
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+16]
	subss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	$LN3@IsIdentity
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+32]
	subss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	$LN3@IsIdentity
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	$LN3@IsIdentity
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+8]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	$LN3@IsIdentity
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+12]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	$LN3@IsIdentity
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@IsIdentity
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+24]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@IsIdentity
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+28]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@IsIdentity
	mov	DWORD PTR tv153[ebp], 1
	jmp	SHORT $LN4@IsIdentity
$LN3@IsIdentity:
	mov	DWORD PTR tv153[ebp], 0
$LN4@IsIdentity:
	mov	al, BYTE PTR tv153[ebp]

; 1420 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsIdentity@CMatrix3x3@gen@@QBE_NXZ ENDP		; gen::CMatrix3x3::IsIdentity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?SetScale2D@CMatrix3x3@gen@@QAEXM@Z
_TEXT	SEGMENT
tv189 = -232						; size = 4
tv162 = -232						; size = 4
_scaleSq$ = -32						; size = 4
_rescale$ = -20						; size = 4
_this$ = -8						; size = 4
_fScale$ = 8						; size = 4
?SetScale2D@CMatrix3x3@gen@@QAEXM@Z PROC		; gen::CMatrix3x3::SetScale2D, COMDAT
; _this$ = ecx

; 1388 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1389 : 	TFloat32 rescale;
; 1390 : 	TFloat32 scaleSq = Sqrt( e00*e00 + e01*e01 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scaleSq$[ebp]

; 1391 : 	if (!IsZero(scaleSq)) // No effect on zero axes

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@SetScale2D

; 1392 : 	{
; 1393 : 		rescale = fScale * InvSqrt( scaleSq );

	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?InvSqrt@gen@@YAMM@Z			; gen::InvSqrt
	add	esp, 4
	fstp	DWORD PTR tv162[ebp]
	movss	xmm0, DWORD PTR tv162[ebp]
	mulss	xmm0, DWORD PTR _fScale$[ebp]
	movss	DWORD PTR _rescale$[ebp], xmm0

; 1394 : 		e00 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1395 : 		e01 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
$LN2@SetScale2D:

; 1396 : 	}
; 1397 : 	
; 1398 : 	scaleSq = Sqrt( e10*e10 + e11*e11 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scaleSq$[ebp]

; 1399 : 	if (!IsZero(scaleSq)) // No effect on zero axes

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@SetScale2D

; 1400 : 	{
; 1401 : 		rescale = fScale * InvSqrt( scaleSq );

	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?InvSqrt@gen@@YAMM@Z			; gen::InvSqrt
	add	esp, 4
	fstp	DWORD PTR tv189[ebp]
	movss	xmm0, DWORD PTR tv189[ebp]
	mulss	xmm0, DWORD PTR _fScale$[ebp]
	movss	DWORD PTR _rescale$[ebp], xmm0

; 1402 : 		e10 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 1403 : 		e11 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+16], xmm0
$LN1@SetScale2D:

; 1404 : 	}
; 1405 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetScale2D@CMatrix3x3@gen@@QAEXM@Z ENDP		; gen::CMatrix3x3::SetScale2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?SetScale2D@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z
_TEXT	SEGMENT
tv192 = -232						; size = 4
tv164 = -232						; size = 4
_scaleSq$ = -32						; size = 4
_rescale$ = -20						; size = 4
_this$ = -8						; size = 4
_scale$ = 8						; size = 4
?SetScale2D@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z PROC	; gen::CMatrix3x3::SetScale2D, COMDAT
; _this$ = ecx

; 1366 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1367 : 	TFloat32 rescale;
; 1368 : 	TFloat32 scaleSq = Sqrt( e00*e00 + e01*e01 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scaleSq$[ebp]

; 1369 : 	if (!IsZero(scaleSq)) // No effect on zero axes

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@SetScale2D

; 1370 : 	{
; 1371 : 		rescale = scale.x * InvSqrt( scaleSq );

	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?InvSqrt@gen@@YAMM@Z			; gen::InvSqrt
	add	esp, 4
	fstp	DWORD PTR tv164[ebp]
	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR tv164[ebp]
	mulss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _rescale$[ebp], xmm0

; 1372 : 		e00 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1373 : 		e01 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
$LN2@SetScale2D:

; 1374 : 	}
; 1375 : 	
; 1376 : 	scaleSq = Sqrt( e10*e10 + e11*e11 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scaleSq$[ebp]

; 1377 : 	if (!IsZero(scaleSq)) // No effect on zero axes

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@SetScale2D

; 1378 : 	{
; 1379 : 		rescale = scale.y * InvSqrt( scaleSq );

	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?InvSqrt@gen@@YAMM@Z			; gen::InvSqrt
	add	esp, 4
	fstp	DWORD PTR tv192[ebp]
	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR tv192[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _rescale$[ebp], xmm0

; 1380 : 		e10 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 1381 : 		e11 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+16], xmm0
$LN1@SetScale2D:

; 1382 : 	}
; 1383 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetScale2D@CMatrix3x3@gen@@QAEXABVCVector2@2@@Z ENDP	; gen::CMatrix3x3::SetScale2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?SetScaleY2D@CMatrix3x3@gen@@QAEXM@Z
_TEXT	SEGMENT
tv138 = -232						; size = 4
_rescale$1 = -32					; size = 4
_scaleSq$ = -20						; size = 4
_this$ = -8						; size = 4
_y$ = 8							; size = 4
?SetScaleY2D@CMatrix3x3@gen@@QAEXM@Z PROC		; gen::CMatrix3x3::SetScaleY2D, COMDAT
; _this$ = ecx

; 1353 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1354 : 	TFloat32 scaleSq = Sqrt( e10*e10 + e11*e11 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scaleSq$[ebp]

; 1355 : 	if (!IsZero(scaleSq)) // No effect on zero axes

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@SetScaleY2

; 1356 : 	{
; 1357 : 		TFloat32 rescale = y * InvSqrt( scaleSq );

	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?InvSqrt@gen@@YAMM@Z			; gen::InvSqrt
	add	esp, 4
	fstp	DWORD PTR tv138[ebp]
	movss	xmm0, DWORD PTR tv138[ebp]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR _rescale$1[ebp], xmm0

; 1358 : 		e10 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _rescale$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 1359 : 		e11 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR _rescale$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+16], xmm0
$LN1@SetScaleY2:

; 1360 : 	}
; 1361 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetScaleY2D@CMatrix3x3@gen@@QAEXM@Z ENDP		; gen::CMatrix3x3::SetScaleY2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?SetScaleX2D@CMatrix3x3@gen@@QAEXM@Z
_TEXT	SEGMENT
tv138 = -232						; size = 4
_rescale$1 = -32					; size = 4
_scaleSq$ = -20						; size = 4
_this$ = -8						; size = 4
_x$ = 8							; size = 4
?SetScaleX2D@CMatrix3x3@gen@@QAEXM@Z PROC		; gen::CMatrix3x3::SetScaleX2D, COMDAT
; _this$ = ecx

; 1340 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1341 : 	TFloat32 scaleSq = Sqrt( e00*e00 + e01*e01 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scaleSq$[ebp]

; 1342 : 	if (!IsZero(scaleSq)) // No effect on zero axes

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@SetScaleX2

; 1343 : 	{
; 1344 : 		TFloat32 rescale = x * InvSqrt( scaleSq );

	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?InvSqrt@gen@@YAMM@Z			; gen::InvSqrt
	add	esp, 4
	fstp	DWORD PTR tv138[ebp]
	movss	xmm0, DWORD PTR tv138[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR _rescale$1[ebp], xmm0

; 1345 : 		e00 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _rescale$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1346 : 		e01 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _rescale$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
$LN1@SetScaleX2:

; 1347 : 	}
; 1348 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetScaleX2D@CMatrix3x3@gen@@QAEXM@Z ENDP		; gen::CMatrix3x3::SetScaleX2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?GetScale2D@CMatrix3x3@gen@@QBE?AVCVector2@2@XZ
_TEXT	SEGMENT
_scale$ = -28						; size = 8
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetScale2D@CMatrix3x3@gen@@QBE?AVCVector2@2@XZ PROC	; gen::CMatrix3x3::GetScale2D, COMDAT
; _this$ = ecx

; 1329 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1330 : 	CVector2 scale;

	lea	ecx, DWORD PTR _scale$[ebp]
	call	??0CVector2@gen@@QAE@XZ			; gen::CVector2::CVector2

; 1331 : 	scale.x = Sqrt( e00*e00 + e01*e01 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scale$[ebp]

; 1332 : 	scale.y = Sqrt( e10*e10 + e11*e11 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scale$[ebp+4]

; 1333 : 	return scale;

	lea	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CVector2@gen@@QAE@ABV01@@Z		; gen::CVector2::CVector2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1334 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@GetScale2D
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN5@GetScale2D:
	DD	1
	DD	$LN4@GetScale2D
$LN4@GetScale2D:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN3@GetScale2D
$LN3@GetScale2D:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
?GetScale2D@CMatrix3x3@gen@@QBE?AVCVector2@2@XZ ENDP	; gen::CMatrix3x3::GetScale2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.h
;	COMDAT ?GetPosition2D@CMatrix3x3@gen@@QBE?AVCVector2@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetPosition2D@CMatrix3x3@gen@@QBE?AVCVector2@2@XZ PROC	; gen::CMatrix3x3::GetPosition2D, COMDAT
; _this$ = ecx

; 771  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 772  : 		return CVector2(e20, e21);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+28]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CVector2@gen@@QAE@MM@Z		; gen::CVector2::CVector2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 773  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetPosition2D@CMatrix3x3@gen@@QBE?AVCVector2@2@XZ ENDP	; gen::CMatrix3x3::GetPosition2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?SetScale@CMatrix3x3@gen@@QAEXM@Z
_TEXT	SEGMENT
tv276 = -232						; size = 4
tv243 = -232						; size = 4
tv210 = -232						; size = 4
_scaleSq$ = -32						; size = 4
_rescale$ = -20						; size = 4
_this$ = -8						; size = 4
_fScale$ = 8						; size = 4
?SetScale@CMatrix3x3@gen@@QAEXM@Z PROC			; gen::CMatrix3x3::SetScale, COMDAT
; _this$ = ecx

; 1292 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1293 : 	TFloat32 rescale;
; 1294 : 	TFloat32 scaleSq = Sqrt( e00*e00 + e01*e01 + e02*e02 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scaleSq$[ebp]

; 1295 : 	if (!IsZero(scaleSq)) // No effect on zero axes

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@SetScale

; 1296 : 	{
; 1297 : 		rescale = fScale * InvSqrt( scaleSq );

	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?InvSqrt@gen@@YAMM@Z			; gen::InvSqrt
	add	esp, 4
	fstp	DWORD PTR tv210[ebp]
	movss	xmm0, DWORD PTR tv210[ebp]
	mulss	xmm0, DWORD PTR _fScale$[ebp]
	movss	DWORD PTR _rescale$[ebp], xmm0

; 1298 : 		e00 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1299 : 		e01 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 1300 : 		e02 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
$LN3@SetScale:

; 1301 : 	}
; 1302 : 	
; 1303 : 	scaleSq = Sqrt( e10*e10 + e11*e11 + e12*e12 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+20]
	mulss	xmm1, DWORD PTR [edx+20]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scaleSq$[ebp]

; 1304 : 	if (!IsZero(scaleSq)) // No effect on zero axes

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@SetScale

; 1305 : 	{
; 1306 : 		rescale = fScale * InvSqrt( scaleSq );

	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?InvSqrt@gen@@YAMM@Z			; gen::InvSqrt
	add	esp, 4
	fstp	DWORD PTR tv243[ebp]
	movss	xmm0, DWORD PTR tv243[ebp]
	mulss	xmm0, DWORD PTR _fScale$[ebp]
	movss	DWORD PTR _rescale$[ebp], xmm0

; 1307 : 		e10 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 1308 : 		e11 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+16], xmm0

; 1309 : 		e12 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+20], xmm0
$LN2@SetScale:

; 1310 : 	}
; 1311 : 
; 1312 : 	scaleSq = Sqrt( e20*e20 + e21*e21 + e22*e22 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+28]
	mulss	xmm1, DWORD PTR [eax+28]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+32]
	mulss	xmm1, DWORD PTR [edx+32]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scaleSq$[ebp]

; 1313 : 	if (!IsZero(scaleSq)) // No effect on zero axes

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@SetScale

; 1314 : 	{
; 1315 : 		rescale = fScale * InvSqrt( scaleSq );

	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?InvSqrt@gen@@YAMM@Z			; gen::InvSqrt
	add	esp, 4
	fstp	DWORD PTR tv276[ebp]
	movss	xmm0, DWORD PTR tv276[ebp]
	mulss	xmm0, DWORD PTR _fScale$[ebp]
	movss	DWORD PTR _rescale$[ebp], xmm0

; 1316 : 		e20 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+24], xmm0

; 1317 : 		e21 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+28], xmm0

; 1318 : 		e22 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+32], xmm0
$LN1@SetScale:

; 1319 : 	}
; 1320 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetScale@CMatrix3x3@gen@@QAEXM@Z ENDP			; gen::CMatrix3x3::SetScale
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?SetScale@CMatrix3x3@gen@@QAEXABVCVector3@2@@Z
_TEXT	SEGMENT
tv281 = -232						; size = 4
tv247 = -232						; size = 4
tv213 = -232						; size = 4
_scaleSq$ = -32						; size = 4
_rescale$ = -20						; size = 4
_this$ = -8						; size = 4
_scale$ = 8						; size = 4
?SetScale@CMatrix3x3@gen@@QAEXABVCVector3@2@@Z PROC	; gen::CMatrix3x3::SetScale, COMDAT
; _this$ = ecx

; 1259 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1260 : 	TFloat32 rescale;
; 1261 : 	TFloat32 scaleSq = Sqrt( e00*e00 + e01*e01 + e02*e02 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scaleSq$[ebp]

; 1262 : 	if (!IsZero(scaleSq)) // No effect on zero axes

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@SetScale

; 1263 : 	{
; 1264 : 		rescale = scale.x * InvSqrt( scaleSq );

	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?InvSqrt@gen@@YAMM@Z			; gen::InvSqrt
	add	esp, 4
	fstp	DWORD PTR tv213[ebp]
	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR tv213[ebp]
	mulss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR _rescale$[ebp], xmm0

; 1265 : 		e00 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1266 : 		e01 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 1267 : 		e02 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
$LN3@SetScale:

; 1268 : 	}
; 1269 : 	
; 1270 : 	scaleSq = Sqrt( e10*e10 + e11*e11 + e12*e12 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+20]
	mulss	xmm1, DWORD PTR [edx+20]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scaleSq$[ebp]

; 1271 : 	if (!IsZero(scaleSq)) // No effect on zero axes

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@SetScale

; 1272 : 	{
; 1273 : 		rescale = scale.y * InvSqrt( scaleSq );

	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?InvSqrt@gen@@YAMM@Z			; gen::InvSqrt
	add	esp, 4
	fstp	DWORD PTR tv247[ebp]
	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR tv247[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _rescale$[ebp], xmm0

; 1274 : 		e10 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 1275 : 		e11 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+16], xmm0

; 1276 : 		e12 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+20], xmm0
$LN2@SetScale:

; 1277 : 	}
; 1278 : 
; 1279 : 	scaleSq = Sqrt( e20*e20 + e21*e21 + e22*e22 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+28]
	mulss	xmm1, DWORD PTR [eax+28]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+32]
	mulss	xmm1, DWORD PTR [edx+32]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scaleSq$[ebp]

; 1280 : 	if (!IsZero(scaleSq)) // No effect on zero axes

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@SetScale

; 1281 : 	{
; 1282 : 		rescale = scale.z * InvSqrt( scaleSq );

	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?InvSqrt@gen@@YAMM@Z			; gen::InvSqrt
	add	esp, 4
	fstp	DWORD PTR tv281[ebp]
	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR tv281[ebp]
	mulss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _rescale$[ebp], xmm0

; 1283 : 		e20 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+24], xmm0

; 1284 : 		e21 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+28], xmm0

; 1285 : 		e22 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR _rescale$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+32], xmm0
$LN1@SetScale:

; 1286 : 	}
; 1287 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetScale@CMatrix3x3@gen@@QAEXABVCVector3@2@@Z ENDP	; gen::CMatrix3x3::SetScale
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?SetScaleZ@CMatrix3x3@gen@@QAEXM@Z
_TEXT	SEGMENT
tv148 = -232						; size = 4
_rescale$1 = -32					; size = 4
_scaleSq$ = -20						; size = 4
_this$ = -8						; size = 4
_z$ = 8							; size = 4
?SetScaleZ@CMatrix3x3@gen@@QAEXM@Z PROC			; gen::CMatrix3x3::SetScaleZ, COMDAT
; _this$ = ecx

; 1245 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1246 : 	TFloat32 scaleSq = Sqrt( e20*e20 + e21*e21 + e22*e22 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+28]
	mulss	xmm1, DWORD PTR [eax+28]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+32]
	mulss	xmm1, DWORD PTR [edx+32]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scaleSq$[ebp]

; 1247 : 	if (!IsZero(scaleSq)) // No effect on zero axes

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@SetScaleZ

; 1248 : 	{
; 1249 : 		TFloat32 rescale = z * InvSqrt( scaleSq );

	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?InvSqrt@gen@@YAMM@Z			; gen::InvSqrt
	add	esp, 4
	fstp	DWORD PTR tv148[ebp]
	movss	xmm0, DWORD PTR tv148[ebp]
	mulss	xmm0, DWORD PTR _z$[ebp]
	movss	DWORD PTR _rescale$1[ebp], xmm0

; 1250 : 		e20 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR _rescale$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+24], xmm0

; 1251 : 		e21 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	mulss	xmm0, DWORD PTR _rescale$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+28], xmm0

; 1252 : 		e22 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR _rescale$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+32], xmm0
$LN1@SetScaleZ:

; 1253 : 	}
; 1254 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetScaleZ@CMatrix3x3@gen@@QAEXM@Z ENDP			; gen::CMatrix3x3::SetScaleZ
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?SetScaleY@CMatrix3x3@gen@@QAEXM@Z
_TEXT	SEGMENT
tv148 = -232						; size = 4
_rescale$1 = -32					; size = 4
_scaleSq$ = -20						; size = 4
_this$ = -8						; size = 4
_y$ = 8							; size = 4
?SetScaleY@CMatrix3x3@gen@@QAEXM@Z PROC			; gen::CMatrix3x3::SetScaleY, COMDAT
; _this$ = ecx

; 1231 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1232 : 	TFloat32 scaleSq = Sqrt( e10*e10 + e11*e11 + e12*e12 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+20]
	mulss	xmm1, DWORD PTR [edx+20]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scaleSq$[ebp]

; 1233 : 	if (!IsZero(scaleSq)) // No effect on zero axes

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@SetScaleY

; 1234 : 	{
; 1235 : 		TFloat32 rescale = y * InvSqrt( scaleSq );

	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?InvSqrt@gen@@YAMM@Z			; gen::InvSqrt
	add	esp, 4
	fstp	DWORD PTR tv148[ebp]
	movss	xmm0, DWORD PTR tv148[ebp]
	mulss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR _rescale$1[ebp], xmm0

; 1236 : 		e10 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR _rescale$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 1237 : 		e11 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR _rescale$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+16], xmm0

; 1238 : 		e12 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR _rescale$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+20], xmm0
$LN1@SetScaleY:

; 1239 : 	}
; 1240 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetScaleY@CMatrix3x3@gen@@QAEXM@Z ENDP			; gen::CMatrix3x3::SetScaleY
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?SetScaleX@CMatrix3x3@gen@@QAEXM@Z
_TEXT	SEGMENT
tv148 = -232						; size = 4
_rescale$1 = -32					; size = 4
_scaleSq$ = -20						; size = 4
_this$ = -8						; size = 4
_x$ = 8							; size = 4
?SetScaleX@CMatrix3x3@gen@@QAEXM@Z PROC			; gen::CMatrix3x3::SetScaleX, COMDAT
; _this$ = ecx

; 1217 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1218 : 	TFloat32 scaleSq = Sqrt( e00*e00 + e01*e01 + e02*e02 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scaleSq$[ebp]

; 1219 : 	if (!IsZero(scaleSq)) // No effect on zero axes

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@SetScaleX

; 1220 : 	{
; 1221 : 		TFloat32 rescale = x * InvSqrt( scaleSq );

	push	ecx
	movss	xmm0, DWORD PTR _scaleSq$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?InvSqrt@gen@@YAMM@Z			; gen::InvSqrt
	add	esp, 4
	fstp	DWORD PTR tv148[ebp]
	movss	xmm0, DWORD PTR tv148[ebp]
	mulss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR _rescale$1[ebp], xmm0

; 1222 : 		e00 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _rescale$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1223 : 		e01 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _rescale$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 1224 : 		e02 *= rescale;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _rescale$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0
$LN1@SetScaleX:

; 1225 : 	}
; 1226 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetScaleX@CMatrix3x3@gen@@QAEXM@Z ENDP			; gen::CMatrix3x3::SetScaleX
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?GetScale@CMatrix3x3@gen@@QBE?AVCVector3@2@XZ
_TEXT	SEGMENT
_scale$ = -32						; size = 12
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetScale@CMatrix3x3@gen@@QBE?AVCVector3@2@XZ PROC	; gen::CMatrix3x3::GetScale, COMDAT
; _this$ = ecx

; 1205 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1206 : 	CVector3 scale;

	lea	ecx, DWORD PTR _scale$[ebp]
	call	??0CVector3@gen@@QAE@XZ			; gen::CVector3::CVector3

; 1207 : 	scale.x = Sqrt( e00*e00 + e01*e01 + e02*e02 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scale$[ebp]

; 1208 : 	scale.y = Sqrt( e10*e10 + e11*e11 + e12*e12 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+20]
	mulss	xmm1, DWORD PTR [edx+20]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scale$[ebp+4]

; 1209 : 	scale.z = Sqrt( e20*e20 + e21*e21 + e22*e22 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+28]
	mulss	xmm1, DWORD PTR [eax+28]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+32]
	mulss	xmm1, DWORD PTR [edx+32]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scale$[ebp+8]

; 1210 : 	return scale;

	lea	eax, DWORD PTR _scale$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CVector3@gen@@QAE@ABV01@@Z		; gen::CVector3::CVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1211 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@GetScale
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN5@GetScale:
	DD	1
	DD	$LN4@GetScale
$LN4@GetScale:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN3@GetScale
$LN3@GetScale:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
?GetScale@CMatrix3x3@gen@@QBE?AVCVector3@2@XZ ENDP	; gen::CMatrix3x3::GetScale
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?DecomposeAffine2D@CMatrix3x3@gen@@QBEXPAVCVector2@2@PAM0@Z
_TEXT	SEGMENT
tv170 = -560						; size = 4
tv167 = -560						; size = 4
tv166 = -560						; size = 4
tv169 = -557						; size = 1
tv168 = -557						; size = 1
$T2 = -552						; size = 88
$T3 = -456						; size = 88
$T4 = -360						; size = 88
_e$5 = -72						; size = 4
_invScaleX$6 = -60					; size = 4
_scaleY$7 = -48						; size = 4
_scaleX$8 = -36						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
_pPosition$ = 8						; size = 4
_pfAngle$ = 12						; size = 4
_pScale$ = 16						; size = 4
?DecomposeAffine2D@CMatrix3x3@gen@@QBEXPAVCVector2@2@PAM0@Z PROC ; gen::CMatrix3x3::DecomposeAffine2D, COMDAT
; _this$ = ecx

; 1164 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DecomposeAffine2D@CMatrix3x3@gen@@QBEXPAVCVector2@2@PAM0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 544				; 00000220H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-560]
	mov	ecx, 136				; 00000088H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1165 : 	GEN_GUARD;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1166 : 
; 1167 : 	// Get position if required
; 1168 : 	if (pPosition)

	cmp	DWORD PTR _pPosition$[ebp], 0
	je	SHORT $LN5@DecomposeA

; 1169 : 	{
; 1170 : 		pPosition->x = e20;

	mov	eax, DWORD PTR _pPosition$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax], edx

; 1171 : 		pPosition->y = e21;

	mov	eax, DWORD PTR _pPosition$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+4], edx
$LN5@DecomposeA:

; 1172 : 	}
; 1173 : 
; 1174 : 	// Calculate matrix scaling
; 1175 : 	TFloat32 scaleX = Sqrt( e00*e00 + e01*e01 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx]
	mulss	xmm1, DWORD PTR [eax]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR tv166[ebp]
	movss	xmm0, DWORD PTR tv166[ebp]
	movss	DWORD PTR _scaleX$8[ebp], xmm0

; 1176 : 	TFloat32 scaleY = Sqrt( e10*e10 + e11*e11 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+12]
	mulss	xmm1, DWORD PTR [eax+12]
	addss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR tv167[ebp]
	movss	xmm0, DWORD PTR tv167[ebp]
	movss	DWORD PTR _scaleY$7[ebp], xmm0

; 1177 : 
; 1178 : 	// Get rotation angle if required
; 1179 : 	if (pfAngle)

	cmp	DWORD PTR _pfAngle$[ebp], 0
	je	$LN4@DecomposeA

; 1180 : 	{
; 1181 : 		// Calculate inverse scaling to extract rotational values only
; 1182 : 		GEN_ASSERT( !IsZero(scaleX) && !IsZero(scaleY), "Singular matrix" );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleX$8[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv168[ebp], al
	movzx	eax, BYTE PTR tv168[ebp]
	test	eax, eax
	jne	SHORT $LN2@DecomposeA
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleY$7[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv169[ebp], al
	movzx	eax, BYTE PTR tv169[ebp]
	test	eax, eax
	je	SHORT $LN3@DecomposeA
$LN2@DecomposeA:
	mov	eax, DWORD PTR ?__LINE__Var@?1??DecomposeAffine2D@CMatrix3x3@gen@@QBEXPAVCVector2@3@PAM0@Z@4JA
	add	eax, 18					; 00000012H
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BA@EJDDFENM@Singular?5matrix?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN3@DecomposeA:

; 1183 : 		TFloat32 invScaleX = 1.0f / scaleX;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _scaleX$8[ebp]
	movss	DWORD PTR _invScaleX$6[ebp], xmm0

; 1184 : 
; 1185 : 		*pfAngle = ATan( e01 * invScaleX, e00 * invScaleX );

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _invScaleX$6[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	mulss	xmm0, DWORD PTR _invScaleX$6[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?ATan@gen@@YAMMM@Z			; gen::ATan
	add	esp, 8
	fstp	DWORD PTR tv170[ebp]
	mov	edx, DWORD PTR _pfAngle$[ebp]
	movss	xmm0, DWORD PTR tv170[ebp]
	movss	DWORD PTR [edx], xmm0
$LN4@DecomposeA:

; 1186 : 	}
; 1187 : 
; 1188 : 	// Return scale if required
; 1189 : 	if (pScale)

	cmp	DWORD PTR _pScale$[ebp], 0
	je	SHORT $LN1@DecomposeA

; 1190 : 	{
; 1191 : 		pScale->x = scaleX;

	mov	eax, DWORD PTR _pScale$[ebp]
	movss	xmm0, DWORD PTR _scaleX$8[ebp]
	movss	DWORD PTR [eax], xmm0

; 1192 : 		pScale->y = scaleY;

	mov	eax, DWORD PTR _pScale$[ebp]
	movss	xmm0, DWORD PTR _scaleY$7[ebp]
	movss	DWORD PTR [eax+4], xmm0
$LN1@DecomposeA:
	jmp	SHORT $LN9@DecomposeA
__catch$?DecomposeAffine2D@CMatrix3x3@gen@@QBEXPAVCVector2@2@PAM0@Z$0:

; 1193 : 	}
; 1194 : 
; 1195 : 	GEN_ENDGUARD;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0CD@GODDIFLH@gen?3?3CMatrix3x3?3?3DecomposeAffine@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN13@DecomposeA
	ret	0
__catch$?DecomposeAffine2D@CMatrix3x3@gen@@QBEXPAVCVector2@2@PAM0@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0CD@GODDIFLH@gen?3?3CMatrix3x3?3?3DecomposeAffine@
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN15@DecomposeA
	ret	0
$LN9@DecomposeA:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN14@DecomposeA
$LN15@DecomposeA:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN12@DecomposeA
$LN14@DecomposeA:
	jmp	SHORT $LN12@DecomposeA
$LN13@DecomposeA:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN12@DecomposeA:
$LN7@DecomposeA:

; 1196 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@DecomposeA
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 560				; 00000230H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN19@DecomposeA:
	DD	1
	DD	$LN18@DecomposeA
$LN18@DecomposeA:
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN16@DecomposeA
$LN16@DecomposeA:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?DecomposeAffine2D@CMatrix3x3@gen@@QBEXPAVCVector2@2@PAM0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-564]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DecomposeAffine2D@CMatrix3x3@gen@@QBEXPAVCVector2@2@PAM0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?DecomposeAffine2D@CMatrix3x3@gen@@QBEXPAVCVector2@2@PAM0@Z ENDP ; gen::CMatrix3x3::DecomposeAffine2D
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?MakeAffine2D@CMatrix3x3@gen@@QAEXABVCVector2@2@M0@Z
_TEXT	SEGMENT
_c$ = -36						; size = 4
_s$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_position$ = 8						; size = 4
_fAngle$ = 12						; size = 4
_scale$ = 16						; size = 4
?MakeAffine2D@CMatrix3x3@gen@@QAEXABVCVector2@2@M0@Z PROC ; gen::CMatrix3x3::MakeAffine2D, COMDAT
; _this$ = ecx

; 1139 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 1140 : 	TFloat32 s, c;
; 1141 : 	SinCos( fAngle, &s, &c );

	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _fAngle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SinCos@gen@@YAXMPAM0@Z			; gen::SinCos
	add	esp, 12					; 0000000cH

; 1142 : 
; 1143 : 	e00 = c * scale.x;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1144 : 	e01 = s * scale.x;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 1145 : 	e02 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0

; 1146 : 
; 1147 : 	e10 = -s * scale.y;

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 1148 : 	e11 = c * scale.y;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+16], xmm0

; 1149 : 	e12 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+20], xmm0

; 1150 : 
; 1151 : 	e20 = position.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+24], edx

; 1152 : 	e21 = position.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+28], edx

; 1153 : 	e22 = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+32], xmm0

; 1154 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@MakeAffine
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN6@MakeAffine:
	DD	2
	DD	$LN5@MakeAffine
$LN5@MakeAffine:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN3@MakeAffine
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN4@MakeAffine
$LN4@MakeAffine:
	DB	99					; 00000063H
	DB	0
$LN3@MakeAffine:
	DB	115					; 00000073H
	DB	0
?MakeAffine2D@CMatrix3x3@gen@@QAEXABVCVector2@2@M0@Z ENDP ; gen::CMatrix3x3::MakeAffine2D
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?DecomposeTransformAxisAngle@CMatrix3x3@gen@@QBEXPAVCVector3@2@PAM0@Z
_TEXT	SEGMENT
$T1 = -452						; size = 88
_invMaxAxis$2 = -164					; size = 4
_maxAxis$3 = -152					; size = 4
_angle$4 = -140						; size = 4
_cosAngle$5 = -128					; size = 4
_diagZ$6 = -116						; size = 4
_diagY$7 = -104						; size = 4
_diagX$8 = -92						; size = 4
_invScaleZ$9 = -80					; size = 4
_invScaleY$10 = -68					; size = 4
_invScaleX$11 = -56					; size = 4
_scaleZ$ = -44						; size = 4
_scaleY$ = -32						; size = 4
_scaleX$ = -20						; size = 4
_this$ = -8						; size = 4
_pAxis$ = 8						; size = 4
_pfAngle$ = 12						; size = 4
_pScale$ = 16						; size = 4
?DecomposeTransformAxisAngle@CMatrix3x3@gen@@QBEXPAVCVector3@2@PAM0@Z PROC ; gen::CMatrix3x3::DecomposeTransformAxisAngle, COMDAT
; _this$ = ecx

; 1025 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 456				; 000001c8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-456]
	mov	ecx, 114				; 00000072H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1026 : 	// Calculate matrix scaling
; 1027 : 	TFloat32 scaleX = Sqrt( e00*e00 + e01*e01 + e02*e02 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scaleX$[ebp]

; 1028 : 	TFloat32 scaleY = Sqrt( e10*e10 + e11*e11 + e12*e12 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+20]
	mulss	xmm1, DWORD PTR [edx+20]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scaleY$[ebp]

; 1029 : 	TFloat32 scaleZ = Sqrt( e20*e20 + e21*e21 + e22*e22 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+28]
	mulss	xmm1, DWORD PTR [eax+28]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+32]
	mulss	xmm1, DWORD PTR [edx+32]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scaleZ$[ebp]

; 1030 : 
; 1031 : 	// Return angle/axis if required
; 1032 : 	if (pAxis || pfAngle)

	cmp	DWORD PTR _pAxis$[ebp], 0
	jne	SHORT $LN16@DecomposeT
	cmp	DWORD PTR _pfAngle$[ebp], 0
	je	$LN2@DecomposeT
$LN16@DecomposeT:

; 1033 : 	{
; 1034 : 		// Calculate inverse scaling to extract rotational values only
; 1035 : 		GEN_ASSERT( !IsZero(scaleX) && !IsZero(scaleY) && !IsZero(scaleZ), "Singular matrix" );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleX$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN14@DecomposeT
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleY$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN14@DecomposeT
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleZ$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@DecomposeT
$LN14@DecomposeT:
	mov	eax, DWORD PTR ?__LINE__Var@?1??DecomposeTransformAxisAngle@CMatrix3x3@gen@@QBEXPAVCVector3@3@PAM0@Z@4JA
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BA@EJDDFENM@Singular?5matrix?$AA@
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN15@DecomposeT:

; 1036 : 		TFloat32 invScaleX = 1.0f / scaleX;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _scaleX$[ebp]
	movss	DWORD PTR _invScaleX$11[ebp], xmm0

; 1037 : 		TFloat32 invScaleY = 1.0f / scaleY;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _scaleY$[ebp]
	movss	DWORD PTR _invScaleY$10[ebp], xmm0

; 1038 : 		TFloat32 invScaleZ = 1.0f / scaleZ;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _scaleZ$[ebp]
	movss	DWORD PTR _invScaleZ$9[ebp], xmm0

; 1039 : 
; 1040 : 		// Calculate rotation using trace of matrix (the sum of diagonal elements) 
; 1041 : 		TFloat32 diagX = e00 * invScaleX; // Remove scaling

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _invScaleX$11[ebp]
	movss	DWORD PTR _diagX$8[ebp], xmm0

; 1042 : 		TFloat32 diagY = e11 * invScaleY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR _invScaleY$10[ebp]
	movss	DWORD PTR _diagY$7[ebp], xmm0

; 1043 : 		TFloat32 diagZ = e22 * invScaleZ;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR _invScaleZ$9[ebp]
	movss	DWORD PTR _diagZ$6[ebp], xmm0

; 1044 : 		TFloat32 cosAngle = (diagX + diagY + diagZ - 1.0f) * 0.5f;

	movss	xmm0, DWORD PTR _diagX$8[ebp]
	addss	xmm0, DWORD PTR _diagY$7[ebp]
	addss	xmm0, DWORD PTR _diagZ$6[ebp]
	subss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR _cosAngle$5[ebp], xmm0

; 1045 : 		TFloat32 angle = ACos( cosAngle );

	push	ecx
	movss	xmm0, DWORD PTR _cosAngle$5[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?ACos@gen@@YAMM@Z			; gen::ACos
	add	esp, 4
	fstp	DWORD PTR _angle$4[ebp]

; 1046 : 
; 1047 : 		// Return angle if required
; 1048 : 		if (pfAngle)

	cmp	DWORD PTR _pfAngle$[ebp], 0
	je	SHORT $LN13@DecomposeT

; 1049 : 		{
; 1050 : 			*pfAngle = angle;

	mov	eax, DWORD PTR _pfAngle$[ebp]
	movss	xmm0, DWORD PTR _angle$4[ebp]
	movss	DWORD PTR [eax], xmm0
$LN13@DecomposeT:

; 1051 : 		}
; 1052 : 
; 1053 : 		// Get axis if required
; 1054 : 		if (pAxis)

	cmp	DWORD PTR _pAxis$[ebp], 0
	je	$LN2@DecomposeT

; 1055 : 		{
; 1056 : 			// Rotation of 0 gives free choice of axis
; 1057 : 			if (IsZero( angle ))

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _angle$4[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@DecomposeT

; 1058 : 			{
; 1059 : 				*pAxis = CVector3::kZAxis;

	push	OFFSET ?kZAxis@CVector3@gen@@2V12@B	; gen::CVector3::kZAxis
	mov	ecx, DWORD PTR _pAxis$[ebp]
	call	??4CVector3@gen@@QAEAAV01@ABV01@@Z	; gen::CVector3::operator=
	jmp	$LN2@DecomposeT
$LN11@DecomposeT:

; 1060 : 			}
; 1061 : 
; 1062 : 			// Otherwise if rotation is not 180 degrees...
; 1063 : 			else if (!IsZero( angle - kfPi ))

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _angle$4[ebp]
	subss	xmm0, DWORD PTR _kfPi
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	$LN9@DecomposeT

; 1064 : 			{
; 1065 : 				pAxis->Set( e12 *invScaleY - e21 * invScaleZ, 
; 1066 : 				            e20 *invScaleZ - e02 * invScaleX,
; 1067 : 							e01 *invScaleX - e10 * invScaleY );

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _invScaleX$11[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+12]
	mulss	xmm1, DWORD PTR _invScaleY$10[ebp]
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+24]
	mulss	xmm0, DWORD PTR _invScaleZ$9[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [eax+8]
	mulss	xmm1, DWORD PTR _invScaleX$11[ebp]
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+20]
	mulss	xmm0, DWORD PTR _invScaleY$10[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+28]
	mulss	xmm1, DWORD PTR _invScaleZ$9[ebp]
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _pAxis$[ebp]
	call	?Set@CVector3@gen@@QAEXMMM@Z		; gen::CVector3::Set

; 1068 : 				pAxis->Normalise();

	mov	ecx, DWORD PTR _pAxis$[ebp]
	call	?Normalise@CVector3@gen@@QAEXXZ		; gen::CVector3::Normalise

; 1069 : 			}
; 1070 : 
; 1071 : 			// Or if rotation is 180 degrees
; 1072 : 			else

	jmp	$LN2@DecomposeT
$LN9@DecomposeT:

; 1073 : 			{
; 1074 : 				// Find largest x,y or z axis component by manipulating diagonal elts
; 1075 : 				TFloat32 maxAxis, invMaxAxis;
; 1076 : 				if (diagX > diagY)

	movss	xmm0, DWORD PTR _diagX$8[ebp]
	comiss	xmm0, DWORD PTR _diagY$7[ebp]
	jbe	$LN7@DecomposeT

; 1077 : 				{
; 1078 : 					if (diagX > diagZ)

	movss	xmm0, DWORD PTR _diagX$8[ebp]
	comiss	xmm0, DWORD PTR _diagZ$6[ebp]
	jbe	$LN6@DecomposeT

; 1079 : 					{
; 1080 : 						maxAxis = Sqrt(diagX - diagY - diagZ + 1.0f);

	movss	xmm0, DWORD PTR _diagX$8[ebp]
	subss	xmm0, DWORD PTR _diagY$7[ebp]
	subss	xmm0, DWORD PTR _diagZ$6[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _maxAxis$3[ebp]

; 1081 : 						pAxis->x = 0.5f * maxAxis;

	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _maxAxis$3[ebp]
	mov	eax, DWORD PTR _pAxis$[ebp]
	movss	DWORD PTR [eax], xmm0

; 1082 : 						// Use this component to calculate others using other matrix elts
; 1083 : 						invMaxAxis = 1.0f / maxAxis;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _maxAxis$3[ebp]
	movss	DWORD PTR _invMaxAxis$2[ebp], xmm0

; 1084 : 						pAxis->y = e01 * invMaxAxis;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _invMaxAxis$2[ebp]
	mov	ecx, DWORD PTR _pAxis$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 1085 : 						pAxis->z = e02 * invMaxAxis;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _invMaxAxis$2[ebp]
	mov	ecx, DWORD PTR _pAxis$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 1086 : 					}
; 1087 : 					else

	jmp	$LN5@DecomposeT
$LN6@DecomposeT:

; 1088 : 					{
; 1089 : 						maxAxis = Sqrt(diagZ - diagX - diagY + 1.0f);

	movss	xmm0, DWORD PTR _diagZ$6[ebp]
	subss	xmm0, DWORD PTR _diagX$8[ebp]
	subss	xmm0, DWORD PTR _diagY$7[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _maxAxis$3[ebp]

; 1090 : 						pAxis->z = 0.5f * maxAxis;

	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _maxAxis$3[ebp]
	mov	eax, DWORD PTR _pAxis$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 1091 : 						invMaxAxis = 1.0f / maxAxis;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _maxAxis$3[ebp]
	movss	DWORD PTR _invMaxAxis$2[ebp], xmm0

; 1092 : 						pAxis->x = e02 * invMaxAxis;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _invMaxAxis$2[ebp]
	mov	ecx, DWORD PTR _pAxis$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1093 : 						pAxis->y = e12 * invMaxAxis;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR _invMaxAxis$2[ebp]
	mov	ecx, DWORD PTR _pAxis$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
$LN5@DecomposeT:

; 1094 : 					}

	jmp	$LN2@DecomposeT
$LN7@DecomposeT:

; 1095 : 				}
; 1096 : 				else if (diagY > diagZ)

	movss	xmm0, DWORD PTR _diagY$7[ebp]
	comiss	xmm0, DWORD PTR _diagZ$6[ebp]
	jbe	$LN3@DecomposeT

; 1097 : 				{
; 1098 : 					maxAxis = Sqrt(diagY - diagZ - diagX + 1.0f);

	movss	xmm0, DWORD PTR _diagY$7[ebp]
	subss	xmm0, DWORD PTR _diagZ$6[ebp]
	subss	xmm0, DWORD PTR _diagX$8[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _maxAxis$3[ebp]

; 1099 : 					pAxis->y = 0.5f * maxAxis;

	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _maxAxis$3[ebp]
	mov	eax, DWORD PTR _pAxis$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 1100 : 					invMaxAxis = 1.0f / maxAxis;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _maxAxis$3[ebp]
	movss	DWORD PTR _invMaxAxis$2[ebp], xmm0

; 1101 : 					pAxis->x = e01 * invMaxAxis;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _invMaxAxis$2[ebp]
	mov	ecx, DWORD PTR _pAxis$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1102 : 					pAxis->z = e12 * invMaxAxis;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR _invMaxAxis$2[ebp]
	mov	ecx, DWORD PTR _pAxis$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 1103 : 				}
; 1104 : 				else

	jmp	$LN2@DecomposeT
$LN3@DecomposeT:

; 1105 : 				{
; 1106 : 					maxAxis = Sqrt(diagZ - diagX - diagY + 1.0f);

	movss	xmm0, DWORD PTR _diagZ$6[ebp]
	subss	xmm0, DWORD PTR _diagX$8[ebp]
	subss	xmm0, DWORD PTR _diagY$7[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _maxAxis$3[ebp]

; 1107 : 					pAxis->z = 0.5f * maxAxis;

	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _maxAxis$3[ebp]
	mov	eax, DWORD PTR _pAxis$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 1108 : 					invMaxAxis = 1.0f / maxAxis;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _maxAxis$3[ebp]
	movss	DWORD PTR _invMaxAxis$2[ebp], xmm0

; 1109 : 					pAxis->x = e02 * invMaxAxis;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _invMaxAxis$2[ebp]
	mov	ecx, DWORD PTR _pAxis$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 1110 : 					pAxis->y = e12 * invMaxAxis;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR _invMaxAxis$2[ebp]
	mov	ecx, DWORD PTR _pAxis$[ebp]
	movss	DWORD PTR [ecx+4], xmm0
$LN2@DecomposeT:

; 1111 : 				}
; 1112 : 			}
; 1113 : 		}
; 1114 : 	}
; 1115 : 
; 1116 : 	// Get scale if required
; 1117 : 	if (pScale)

	cmp	DWORD PTR _pScale$[ebp], 0
	je	SHORT $LN1@DecomposeT

; 1118 : 	{
; 1119 : 		pScale->x = scaleX;

	mov	eax, DWORD PTR _pScale$[ebp]
	movss	xmm0, DWORD PTR _scaleX$[ebp]
	movss	DWORD PTR [eax], xmm0

; 1120 : 		pScale->y = scaleY;

	mov	eax, DWORD PTR _pScale$[ebp]
	movss	xmm0, DWORD PTR _scaleY$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 1121 : 		pScale->z = scaleZ;

	mov	eax, DWORD PTR _pScale$[ebp]
	movss	xmm0, DWORD PTR _scaleZ$[ebp]
	movss	DWORD PTR [eax+8], xmm0
$LN1@DecomposeT:
$LN18@DecomposeT:

; 1122 : 	}
; 1123 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 456				; 000001c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?DecomposeTransformAxisAngle@CMatrix3x3@gen@@QBEXPAVCVector3@2@PAM0@Z ENDP ; gen::CMatrix3x3::DecomposeTransformAxisAngle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?DecomposeTransformQuaternion@CMatrix3x3@gen@@QBEXPAVCQuaternion@2@PAVCVector3@2@@Z
_TEXT	SEGMENT
$T1 = -464						; size = 88
_invMaxAxis$2 = -176					; size = 4
_maxAxis$3 = -164					; size = 4
_invCosAng$4 = -152					; size = 4
_cosAng$5 = -140					; size = 4
_trace$6 = -128						; size = 4
_diagZ$7 = -116						; size = 4
_diagY$8 = -104						; size = 4
_diagX$9 = -92						; size = 4
_invScaleZ$10 = -80					; size = 4
_invScaleY$11 = -68					; size = 4
_invScaleX$12 = -56					; size = 4
_scaleZ$ = -44						; size = 4
_scaleY$ = -32						; size = 4
_scaleX$ = -20						; size = 4
_this$ = -8						; size = 4
_pQuat$ = 8						; size = 4
_pScale$ = 12						; size = 4
?DecomposeTransformQuaternion@CMatrix3x3@gen@@QBEXPAVCQuaternion@2@PAVCVector3@2@@Z PROC ; gen::CMatrix3x3::DecomposeTransformQuaternion, COMDAT
; _this$ = ecx

; 929  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 468				; 000001d4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-468]
	mov	ecx, 117				; 00000075H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 930  : 	// Calculate matrix scaling
; 931  : 	TFloat32 scaleX = Sqrt( e00*e00 + e01*e01 + e02*e02 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scaleX$[ebp]

; 932  : 	TFloat32 scaleY = Sqrt( e10*e10 + e11*e11 + e12*e12 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [eax+16]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+20]
	mulss	xmm1, DWORD PTR [edx+20]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scaleY$[ebp]

; 933  : 	TFloat32 scaleZ = Sqrt( e20*e20 + e21*e21 + e22*e22 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+28]
	mulss	xmm1, DWORD PTR [eax+28]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+32]
	mulss	xmm1, DWORD PTR [edx+32]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _scaleZ$[ebp]

; 934  : 
; 935  : 	// Return quaternion if required - similar to angle-axis process below
; 936  : 	if (pQuat)

	cmp	DWORD PTR _pQuat$[ebp], 0
	je	$LN2@DecomposeT

; 937  : 	{
; 938  : 		// Calculate inverse scaling to extract rotational values only
; 939  : 		GEN_ASSERT( !IsZero(scaleX) && !IsZero(scaleY) && !IsZero(scaleZ), "Singular matrix" );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleX$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN10@DecomposeT
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleY$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN10@DecomposeT
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleZ$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@DecomposeT
$LN10@DecomposeT:
	mov	eax, DWORD PTR ?__LINE__Var@?1??DecomposeTransformQuaternion@CMatrix3x3@gen@@QBEXPAVCQuaternion@3@PAVCVector3@3@@Z@4JA
	add	eax, 10					; 0000000aH
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BA@EJDDFENM@Singular?5matrix?$AA@
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN11@DecomposeT:

; 940  : 		TFloat32 invScaleX = 1.0f / scaleX;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _scaleX$[ebp]
	movss	DWORD PTR _invScaleX$12[ebp], xmm0

; 941  : 		TFloat32 invScaleY = 1.0f / scaleY;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _scaleY$[ebp]
	movss	DWORD PTR _invScaleY$11[ebp], xmm0

; 942  : 		TFloat32 invScaleZ = 1.0f / scaleZ;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _scaleZ$[ebp]
	movss	DWORD PTR _invScaleZ$10[ebp], xmm0

; 943  : 
; 944  : 		// Calculate trace of matrix (the sum of diagonal elements)
; 945  : 		TFloat32 diagX = e00 * invScaleX; // Remove scaling

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _invScaleX$12[ebp]
	movss	DWORD PTR _diagX$9[ebp], xmm0

; 946  : 		TFloat32 diagY = e11 * invScaleY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR _invScaleY$11[ebp]
	movss	DWORD PTR _diagY$8[ebp], xmm0

; 947  : 		TFloat32 diagZ = e22 * invScaleZ;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR _invScaleZ$10[ebp]
	movss	DWORD PTR _diagZ$7[ebp], xmm0

; 948  : 		TFloat32 trace = diagX + diagY + diagZ;

	movss	xmm0, DWORD PTR _diagX$9[ebp]
	addss	xmm0, DWORD PTR _diagY$8[ebp]
	addss	xmm0, DWORD PTR _diagZ$7[ebp]
	movss	DWORD PTR _trace$6[ebp], xmm0

; 949  : 
; 950  : 		// Simple method if trace is positive
; 951  : 		if (trace > 0.0f)

	movss	xmm0, DWORD PTR _trace$6[ebp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN9@DecomposeT

; 952  : 		{
; 953  : 			// Derive quaternion from remaining elements
; 954  : 			TFloat32 cosAng = Sqrt( trace + 1.0f );

	movss	xmm0, DWORD PTR _trace$6[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _cosAng$5[ebp]

; 955  : 			pQuat->w = cosAng * 0.5f;

	movss	xmm0, DWORD PTR _cosAng$5[ebp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	eax, DWORD PTR _pQuat$[ebp]
	movss	DWORD PTR [eax], xmm0

; 956  : 			TFloat32 invCosAng = 0.5f / cosAng;

	movss	xmm0, DWORD PTR __real@3f000000
	divss	xmm0, DWORD PTR _cosAng$5[ebp]
	movss	DWORD PTR _invCosAng$4[ebp], xmm0

; 957  : 			pQuat->x = (e12*invScaleY - e21*invScaleZ) * invCosAng;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR _invScaleY$11[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+28]
	mulss	xmm1, DWORD PTR _invScaleZ$10[ebp]
	subss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _invCosAng$4[ebp]
	mov	edx, DWORD PTR _pQuat$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 958  : 			pQuat->y = (e20*invScaleZ - e02*invScaleX) * invCosAng;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR _invScaleZ$10[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR _invScaleX$12[ebp]
	subss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _invCosAng$4[ebp]
	mov	edx, DWORD PTR _pQuat$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 959  : 			pQuat->z = (e01*invScaleX - e10*invScaleY) * invCosAng;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _invScaleX$12[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+12]
	mulss	xmm1, DWORD PTR _invScaleY$11[ebp]
	subss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _invCosAng$4[ebp]
	mov	edx, DWORD PTR _pQuat$[ebp]
	movss	DWORD PTR [edx+12], xmm0

; 960  : 		}
; 961  : 		else

	jmp	$LN2@DecomposeT
$LN9@DecomposeT:

; 962  : 		{
; 963  : 			// Find largest x,y or z axis component by manipulating diagonal elts
; 964  : 			TFloat32 maxAxis, invMaxAxis;
; 965  : 			if (diagX > diagY)

	movss	xmm0, DWORD PTR _diagX$9[ebp]
	comiss	xmm0, DWORD PTR _diagY$8[ebp]
	jbe	$LN7@DecomposeT

; 966  : 			{
; 967  : 				if (diagX > diagZ)

	movss	xmm0, DWORD PTR _diagX$9[ebp]
	comiss	xmm0, DWORD PTR _diagZ$7[ebp]
	jbe	$LN6@DecomposeT

; 968  : 				{
; 969  : 					maxAxis = Sqrt( diagX - diagY - diagZ + 1.0f );

	movss	xmm0, DWORD PTR _diagX$9[ebp]
	subss	xmm0, DWORD PTR _diagY$8[ebp]
	subss	xmm0, DWORD PTR _diagZ$7[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _maxAxis$3[ebp]

; 970  : 					pQuat->x = 0.5f * maxAxis;

	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _maxAxis$3[ebp]
	mov	eax, DWORD PTR _pQuat$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 971  : 					invMaxAxis = 0.5f / maxAxis;

	movss	xmm0, DWORD PTR __real@3f000000
	divss	xmm0, DWORD PTR _maxAxis$3[ebp]
	movss	DWORD PTR _invMaxAxis$2[ebp], xmm0

; 972  : 					pQuat->y = (e01*invScaleX + e10*invScaleY) * invMaxAxis;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _invScaleX$12[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+12]
	mulss	xmm1, DWORD PTR _invScaleY$11[ebp]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _invMaxAxis$2[ebp]
	mov	edx, DWORD PTR _pQuat$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 973  : 					pQuat->z = (e20*invScaleZ + e02*invScaleX) * invMaxAxis;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR _invScaleZ$10[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR _invScaleX$12[ebp]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _invMaxAxis$2[ebp]
	mov	edx, DWORD PTR _pQuat$[ebp]
	movss	DWORD PTR [edx+12], xmm0

; 974  : 					pQuat->w = (e12*invScaleY - e21*invScaleZ) * invMaxAxis;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR _invScaleY$11[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+28]
	mulss	xmm1, DWORD PTR _invScaleZ$10[ebp]
	subss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _invMaxAxis$2[ebp]
	mov	edx, DWORD PTR _pQuat$[ebp]
	movss	DWORD PTR [edx], xmm0

; 975  : 				}
; 976  : 				else

	jmp	$LN5@DecomposeT
$LN6@DecomposeT:

; 977  : 				{
; 978  : 					maxAxis = Sqrt( diagZ - diagX - diagY + 1.0f );

	movss	xmm0, DWORD PTR _diagZ$7[ebp]
	subss	xmm0, DWORD PTR _diagX$9[ebp]
	subss	xmm0, DWORD PTR _diagY$8[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _maxAxis$3[ebp]

; 979  : 					pQuat->z = 0.5f * maxAxis;

	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _maxAxis$3[ebp]
	mov	eax, DWORD PTR _pQuat$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 980  : 					invMaxAxis = 0.5f / maxAxis;

	movss	xmm0, DWORD PTR __real@3f000000
	divss	xmm0, DWORD PTR _maxAxis$3[ebp]
	movss	DWORD PTR _invMaxAxis$2[ebp], xmm0

; 981  : 					pQuat->x = (e20*invScaleZ + e02*invScaleX) * invMaxAxis;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR _invScaleZ$10[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR _invScaleX$12[ebp]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _invMaxAxis$2[ebp]
	mov	edx, DWORD PTR _pQuat$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 982  : 					pQuat->y = (e12*invScaleY + e21*invScaleZ) * invMaxAxis;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR _invScaleY$11[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+28]
	mulss	xmm1, DWORD PTR _invScaleZ$10[ebp]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _invMaxAxis$2[ebp]
	mov	edx, DWORD PTR _pQuat$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 983  : 					pQuat->w = (e01*invScaleX - e10*invScaleY) * invMaxAxis;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _invScaleX$12[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+12]
	mulss	xmm1, DWORD PTR _invScaleY$11[ebp]
	subss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _invMaxAxis$2[ebp]
	mov	edx, DWORD PTR _pQuat$[ebp]
	movss	DWORD PTR [edx], xmm0
$LN5@DecomposeT:

; 984  : 				}

	jmp	$LN2@DecomposeT
$LN7@DecomposeT:

; 985  : 			}
; 986  : 			else if (diagY > diagZ)

	movss	xmm0, DWORD PTR _diagY$8[ebp]
	comiss	xmm0, DWORD PTR _diagZ$7[ebp]
	jbe	$LN3@DecomposeT

; 987  : 			{
; 988  : 				maxAxis = Sqrt( diagY - diagZ - diagX + 1.0f );

	movss	xmm0, DWORD PTR _diagY$8[ebp]
	subss	xmm0, DWORD PTR _diagZ$7[ebp]
	subss	xmm0, DWORD PTR _diagX$9[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _maxAxis$3[ebp]

; 989  : 				pQuat->y = 0.5f * maxAxis;

	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _maxAxis$3[ebp]
	mov	eax, DWORD PTR _pQuat$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 990  : 				invMaxAxis = 0.5f / maxAxis;

	movss	xmm0, DWORD PTR __real@3f000000
	divss	xmm0, DWORD PTR _maxAxis$3[ebp]
	movss	DWORD PTR _invMaxAxis$2[ebp], xmm0

; 991  : 				pQuat->z = (e12*invScaleY + e21*invScaleZ) * invMaxAxis;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR _invScaleY$11[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+28]
	mulss	xmm1, DWORD PTR _invScaleZ$10[ebp]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _invMaxAxis$2[ebp]
	mov	edx, DWORD PTR _pQuat$[ebp]
	movss	DWORD PTR [edx+12], xmm0

; 992  : 				pQuat->x = (e01*invScaleX + e10*invScaleY) * invMaxAxis;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _invScaleX$12[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+12]
	mulss	xmm1, DWORD PTR _invScaleY$11[ebp]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _invMaxAxis$2[ebp]
	mov	edx, DWORD PTR _pQuat$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 993  : 				pQuat->w = (e20*invScaleZ - e02*invScaleX) * invMaxAxis;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR _invScaleZ$10[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR _invScaleX$12[ebp]
	subss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _invMaxAxis$2[ebp]
	mov	edx, DWORD PTR _pQuat$[ebp]
	movss	DWORD PTR [edx], xmm0

; 994  : 			}
; 995  : 			else

	jmp	$LN2@DecomposeT
$LN3@DecomposeT:

; 996  : 			{
; 997  : 				maxAxis = Sqrt( diagZ - diagX - diagY + 1.0f );

	movss	xmm0, DWORD PTR _diagZ$7[ebp]
	subss	xmm0, DWORD PTR _diagX$9[ebp]
	subss	xmm0, DWORD PTR _diagY$8[ebp]
	addss	xmm0, DWORD PTR __real@3f800000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR _maxAxis$3[ebp]

; 998  : 				pQuat->z = 0.5f * maxAxis;

	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR _maxAxis$3[ebp]
	mov	eax, DWORD PTR _pQuat$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 999  : 				invMaxAxis = 0.5f / maxAxis;

	movss	xmm0, DWORD PTR __real@3f000000
	divss	xmm0, DWORD PTR _maxAxis$3[ebp]
	movss	DWORD PTR _invMaxAxis$2[ebp], xmm0

; 1000 : 				pQuat->x = (e20*invScaleZ + e02*invScaleX) * invMaxAxis;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR _invScaleZ$10[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR _invScaleX$12[ebp]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _invMaxAxis$2[ebp]
	mov	edx, DWORD PTR _pQuat$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 1001 : 				pQuat->y = (e12*invScaleY + e21*invScaleZ) * invMaxAxis;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR _invScaleY$11[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+28]
	mulss	xmm1, DWORD PTR _invScaleZ$10[ebp]
	addss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _invMaxAxis$2[ebp]
	mov	edx, DWORD PTR _pQuat$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 1002 : 				pQuat->w = (e01*invScaleX - e10*invScaleY) * invMaxAxis;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _invScaleX$12[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+12]
	mulss	xmm1, DWORD PTR _invScaleY$11[ebp]
	subss	xmm0, xmm1
	mulss	xmm0, DWORD PTR _invMaxAxis$2[ebp]
	mov	edx, DWORD PTR _pQuat$[ebp]
	movss	DWORD PTR [edx], xmm0
$LN2@DecomposeT:

; 1003 : 			}
; 1004 : 		}
; 1005 : 	}
; 1006 : 
; 1007 : 	// Return scale if required
; 1008 : 	if (pScale)

	cmp	DWORD PTR _pScale$[ebp], 0
	je	SHORT $LN1@DecomposeT

; 1009 : 	{
; 1010 : 		pScale->x = scaleX;

	mov	eax, DWORD PTR _pScale$[ebp]
	movss	xmm0, DWORD PTR _scaleX$[ebp]
	movss	DWORD PTR [eax], xmm0

; 1011 : 		pScale->y = scaleY;

	mov	eax, DWORD PTR _pScale$[ebp]
	movss	xmm0, DWORD PTR _scaleY$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 1012 : 		pScale->z = scaleZ;

	mov	eax, DWORD PTR _pScale$[ebp]
	movss	xmm0, DWORD PTR _scaleZ$[ebp]
	movss	DWORD PTR [eax+8], xmm0
$LN1@DecomposeT:
$LN13@DecomposeT:

; 1013 : 	}
; 1014 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 468				; 000001d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?DecomposeTransformQuaternion@CMatrix3x3@gen@@QBEXPAVCQuaternion@2@PAVCVector3@2@@Z ENDP ; gen::CMatrix3x3::DecomposeTransformQuaternion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?DecomposeTransformEuler@CMatrix3x3@gen@@QBEXPAVCVector3@2@0W4ERotationOrder@2@@Z
_TEXT	SEGMENT
tv404 = -836						; size = 4
tv403 = -836						; size = 4
tv402 = -836						; size = 4
tv400 = -836						; size = 4
tv398 = -836						; size = 4
tv396 = -836						; size = 4
tv394 = -836						; size = 4
tv392 = -836						; size = 4
tv390 = -836						; size = 4
tv386 = -836						; size = 4
tv385 = -836						; size = 4
tv384 = -836						; size = 4
tv161 = -836						; size = 4
tv401 = -833						; size = 1
tv399 = -833						; size = 1
tv397 = -833						; size = 1
tv395 = -833						; size = 1
tv393 = -833						; size = 1
tv391 = -833						; size = 1
tv389 = -833						; size = 1
tv388 = -833						; size = 1
tv387 = -833						; size = 1
$T2 = -828						; size = 88
$T3 = -732						; size = 88
$T4 = -636						; size = 88
$T5 = -540						; size = 88
_e$6 = -252						; size = 4
_invCY$7 = -240						; size = 4
_invCX$8 = -228						; size = 4
_invCX$9 = -216						; size = 4
_invCZ$10 = -204					; size = 4
_invCZ$11 = -192					; size = 4
_invCY$12 = -180					; size = 4
_cZ$13 = -168						; size = 4
_sZ$14 = -156						; size = 4
_cY$15 = -144						; size = 4
_sY$16 = -132						; size = 4
_cX$17 = -120						; size = 4
_sX$18 = -108						; size = 4
_invScaleZ$19 = -96					; size = 4
_invScaleY$20 = -84					; size = 4
_invScaleX$21 = -72					; size = 4
_scaleZ$22 = -60					; size = 4
_scaleY$23 = -48					; size = 4
_scaleX$24 = -36					; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
_pAngles$ = 8						; size = 4
_pScale$ = 12						; size = 4
_eRotOrder$ = 16					; size = 4
?DecomposeTransformEuler@CMatrix3x3@gen@@QBEXPAVCVector3@2@0W4ERotationOrder@2@@Z PROC ; gen::CMatrix3x3::DecomposeTransformEuler, COMDAT
; _this$ = ecx

; 732  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?DecomposeTransformEuler@CMatrix3x3@gen@@QBEXPAVCVector3@2@0W4ERotationOrder@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 820				; 00000334H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-836]
	mov	ecx, 205				; 000000cdH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 733  : 	GEN_GUARD;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 734  : 
; 735  : 	// Calculate matrix scaling
; 736  : 	TFloat32 scaleX = Sqrt( e00*e00 + e01*e01 + e02*e02 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [ecx]
	mulss	xmm2, DWORD PTR [edx]
	addss	xmm2, xmm1
	addss	xmm2, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm2
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR tv384[ebp]
	movss	xmm0, DWORD PTR tv384[ebp]
	movss	DWORD PTR _scaleX$24[ebp], xmm0

; 737  : 	TFloat32 scaleY = Sqrt( e10*e10 + e11*e11 + e12*e12 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+16]
	mulss	xmm1, DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [ecx+12]
	mulss	xmm2, DWORD PTR [edx+12]
	addss	xmm2, xmm1
	addss	xmm2, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm2
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR tv385[ebp]
	movss	xmm0, DWORD PTR tv385[ebp]
	movss	DWORD PTR _scaleY$23[ebp], xmm0

; 738  : 	TFloat32 scaleZ = Sqrt( e20*e20 + e21*e21 + e22*e22 );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+28]
	mulss	xmm1, DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm2, DWORD PTR [ecx+24]
	mulss	xmm2, DWORD PTR [edx+24]
	addss	xmm2, xmm1
	addss	xmm2, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm2
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR tv386[ebp]
	movss	xmm0, DWORD PTR tv386[ebp]
	movss	DWORD PTR _scaleZ$22[ebp], xmm0

; 739  : 
; 740  : 	// Get rotations if required
; 741  : 	if (pAngles)

	cmp	DWORD PTR _pAngles$[ebp], 0
	je	$LN25@DecomposeT

; 742  : 	{
; 743  : 		// Calculate inverse scaling to extract rotational values only
; 744  : 		GEN_ASSERT( !IsZero(scaleX) && !IsZero(scaleY) && !IsZero(scaleZ), "Singular matrix" );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleX$24[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv387[ebp], al
	movzx	eax, BYTE PTR tv387[ebp]
	test	eax, eax
	jne	SHORT $LN23@DecomposeT
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleY$23[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv388[ebp], al
	movzx	eax, BYTE PTR tv388[ebp]
	test	eax, eax
	jne	SHORT $LN23@DecomposeT
	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _scaleZ$22[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv389[ebp], al
	movzx	eax, BYTE PTR tv389[ebp]
	test	eax, eax
	je	SHORT $LN24@DecomposeT
$LN23@DecomposeT:
	mov	eax, DWORD PTR ?__LINE__Var@?1??DecomposeTransformEuler@CMatrix3x3@gen@@QBEXPAVCVector3@3@0W4ERotationOrder@3@@Z@4JA
	add	eax, 12					; 0000000cH
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BA@EJDDFENM@Singular?5matrix?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN24@DecomposeT:

; 745  : 		TFloat32 invScaleX = 1.0f / scaleX;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _scaleX$24[ebp]
	movss	DWORD PTR _invScaleX$21[ebp], xmm0

; 746  : 		TFloat32 invScaleY = 1.0f / scaleY;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _scaleY$23[ebp]
	movss	DWORD PTR _invScaleY$20[ebp], xmm0

; 747  : 		TFloat32 invScaleZ = 1.0f / scaleZ;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _scaleZ$22[ebp]
	movss	DWORD PTR _invScaleZ$19[ebp], xmm0

; 748  : 
; 749  : 		TFloat32 sX, cX, sY, cY, sZ, cZ;
; 750  : 		switch (eRotOrder)

	mov	eax, DWORD PTR _eRotOrder$[ebp]
	mov	DWORD PTR tv161[ebp], eax
	cmp	DWORD PTR tv161[ebp], 5
	ja	$LN2@DecomposeT
	mov	ecx, DWORD PTR tv161[ebp]
	jmp	DWORD PTR $LN40@DecomposeT[ecx*4]
$LN20@DecomposeT:

; 751  : 		{
; 752  : 			case kZYX:
; 753  : 			{
; 754  : 				sY = e20 * invScaleX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR _invScaleX$21[ebp]
	movss	DWORD PTR _sY$16[ebp], xmm0

; 755  : 				cY = Sqrt( 1.0f - sY*sY );

	movss	xmm0, DWORD PTR _sY$16[ebp]
	mulss	xmm0, DWORD PTR _sY$16[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR tv390[ebp]
	movss	xmm0, DWORD PTR tv390[ebp]
	movss	DWORD PTR _cY$15[ebp], xmm0

; 756  : 
; 757  : 				// If no gimbal lock...
; 758  : 				if (!IsZero( cY ))

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _cY$15[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv391[ebp], al
	movzx	eax, BYTE PTR tv391[ebp]
	test	eax, eax
	jne	$LN19@DecomposeT

; 759  : 				{
; 760  : 					TFloat32 invCY = 1.0f / cY;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _cY$15[ebp]
	movss	DWORD PTR _invCY$12[ebp], xmm0

; 761  : 					sZ = -e10 * invCY * invScaleY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _invCY$12[ebp]
	mulss	xmm0, DWORD PTR _invScaleY$20[ebp]
	movss	DWORD PTR _sZ$14[ebp], xmm0

; 762  : 					cZ =  e00 * invCY * invScaleX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _invCY$12[ebp]
	mulss	xmm0, DWORD PTR _invScaleX$21[ebp]
	movss	DWORD PTR _cZ$13[ebp], xmm0

; 763  : 					sX = -e21 * invCY * invScaleZ;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _invCY$12[ebp]
	mulss	xmm0, DWORD PTR _invScaleZ$19[ebp]
	movss	DWORD PTR _sX$18[ebp], xmm0

; 764  : 					cX =  e22 * invCY * invScaleZ;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR _invCY$12[ebp]
	mulss	xmm0, DWORD PTR _invScaleZ$19[ebp]
	movss	DWORD PTR _cX$17[ebp], xmm0

; 765  : 				}
; 766  : 				else

	jmp	SHORT $LN18@DecomposeT
$LN19@DecomposeT:

; 767  : 				{
; 768  : 					// Gimbal lock - force Z angle to 0
; 769  : 					sZ = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _sZ$14[ebp], xmm0

; 770  : 					cZ = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _cZ$13[ebp], xmm0

; 771  : 					sX = e12 * invScaleY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR _invScaleY$20[ebp]
	movss	DWORD PTR _sX$18[ebp], xmm0

; 772  : 					cX = e11 * invScaleY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR _invScaleY$20[ebp]
	movss	DWORD PTR _cX$17[ebp], xmm0
$LN18@DecomposeT:

; 773  : 				}
; 774  : 				break;

	jmp	$LN21@DecomposeT
$LN17@DecomposeT:

; 775  : 			}
; 776  : 
; 777  : 			case kYZX:
; 778  : 			{
; 779  : 				sZ = -e10 * invScaleY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _invScaleY$20[ebp]
	movss	DWORD PTR _sZ$14[ebp], xmm0

; 780  : 				cZ = Sqrt( 1.0f - sZ*sZ );

	movss	xmm0, DWORD PTR _sZ$14[ebp]
	mulss	xmm0, DWORD PTR _sZ$14[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR tv392[ebp]
	movss	xmm0, DWORD PTR tv392[ebp]
	movss	DWORD PTR _cZ$13[ebp], xmm0

; 781  : 
; 782  : 				// If no gimbal lock...
; 783  : 				if (!IsZero( cZ ))

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _cZ$13[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv393[ebp], al
	movzx	eax, BYTE PTR tv393[ebp]
	test	eax, eax
	jne	$LN16@DecomposeT

; 784  : 				{
; 785  : 					TFloat32 invCZ = 1.0f / cZ;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _cZ$13[ebp]
	movss	DWORD PTR _invCZ$11[ebp], xmm0

; 786  : 					sY = e20 * invCZ * invScaleZ;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR _invCZ$11[ebp]
	mulss	xmm0, DWORD PTR _invScaleZ$19[ebp]
	movss	DWORD PTR _sY$16[ebp], xmm0

; 787  : 					cY = e00 * invCZ * invScaleX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _invCZ$11[ebp]
	mulss	xmm0, DWORD PTR _invScaleX$21[ebp]
	movss	DWORD PTR _cY$15[ebp], xmm0

; 788  : 					sX = e12 * invCZ * invScaleY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR _invCZ$11[ebp]
	mulss	xmm0, DWORD PTR _invScaleY$20[ebp]
	movss	DWORD PTR _sX$18[ebp], xmm0

; 789  : 					cX = e11 * invCZ * invScaleY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR _invCZ$11[ebp]
	mulss	xmm0, DWORD PTR _invScaleY$20[ebp]
	movss	DWORD PTR _cX$17[ebp], xmm0

; 790  : 				}
; 791  : 				else

	jmp	SHORT $LN15@DecomposeT
$LN16@DecomposeT:

; 792  : 				{
; 793  : 					// Gimbal lock - force Y angle to 0
; 794  : 					sY = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _sY$16[ebp], xmm0

; 795  : 					cY = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _cY$15[ebp], xmm0

; 796  : 					sX = -e21 * invScaleZ;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _invScaleZ$19[ebp]
	movss	DWORD PTR _sX$18[ebp], xmm0

; 797  : 					cX =  e22 * invScaleZ;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR _invScaleZ$19[ebp]
	movss	DWORD PTR _cX$17[ebp], xmm0
$LN15@DecomposeT:

; 798  : 				}
; 799  : 				break;

	jmp	$LN21@DecomposeT
$LN14@DecomposeT:

; 800  : 			}
; 801  : 
; 802  : 			case kXZY:
; 803  : 			{
; 804  : 				sZ = e01 * invScaleX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _invScaleX$21[ebp]
	movss	DWORD PTR _sZ$14[ebp], xmm0

; 805  : 				cZ = Sqrt( 1.0f - sZ*sZ );

	movss	xmm0, DWORD PTR _sZ$14[ebp]
	mulss	xmm0, DWORD PTR _sZ$14[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR tv394[ebp]
	movss	xmm0, DWORD PTR tv394[ebp]
	movss	DWORD PTR _cZ$13[ebp], xmm0

; 806  : 
; 807  : 				// If no gimbal lock...
; 808  : 				if (!IsZero( cZ ))

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _cZ$13[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv395[ebp], al
	movzx	eax, BYTE PTR tv395[ebp]
	test	eax, eax
	jne	$LN13@DecomposeT

; 809  : 				{
; 810  : 					TFloat32 invCZ = 1.0f / cZ;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _cZ$13[ebp]
	movss	DWORD PTR _invCZ$10[ebp], xmm0

; 811  : 					sX = -e21 * invCZ * invScaleZ;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _invCZ$10[ebp]
	mulss	xmm0, DWORD PTR _invScaleZ$19[ebp]
	movss	DWORD PTR _sX$18[ebp], xmm0

; 812  : 					cX =  e11 * invCZ * invScaleY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR _invCZ$10[ebp]
	mulss	xmm0, DWORD PTR _invScaleY$20[ebp]
	movss	DWORD PTR _cX$17[ebp], xmm0

; 813  : 					sY = -e02 * invCZ * invScaleX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _invCZ$10[ebp]
	mulss	xmm0, DWORD PTR _invScaleX$21[ebp]
	movss	DWORD PTR _sY$16[ebp], xmm0

; 814  : 					cY =  e00 * invCZ * invScaleX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _invCZ$10[ebp]
	mulss	xmm0, DWORD PTR _invScaleX$21[ebp]
	movss	DWORD PTR _cY$15[ebp], xmm0

; 815  : 				}
; 816  : 				else

	jmp	SHORT $LN12@DecomposeT
$LN13@DecomposeT:

; 817  : 				{
; 818  : 					// Gimbal lock - force X angle to 0
; 819  : 					sX = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _sX$18[ebp], xmm0

; 820  : 					cX = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _cX$17[ebp], xmm0

; 821  : 					sY = e20 * invScaleZ;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR _invScaleZ$19[ebp]
	movss	DWORD PTR _sY$16[ebp], xmm0

; 822  : 					cY = e22 * invScaleZ;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR _invScaleZ$19[ebp]
	movss	DWORD PTR _cY$15[ebp], xmm0
$LN12@DecomposeT:

; 823  : 				}
; 824  : 				break;

	jmp	$LN21@DecomposeT
$LN11@DecomposeT:

; 825  : 			}
; 826  : 
; 827  : 			case kZXY:
; 828  : 			{
; 829  : 				sX = -e21 * invScaleZ;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _invScaleZ$19[ebp]
	movss	DWORD PTR _sX$18[ebp], xmm0

; 830  : 				cX = Sqrt( 1.0f - sX*sX );

	movss	xmm0, DWORD PTR _sX$18[ebp]
	mulss	xmm0, DWORD PTR _sX$18[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR tv396[ebp]
	movss	xmm0, DWORD PTR tv396[ebp]
	movss	DWORD PTR _cX$17[ebp], xmm0

; 831  : 
; 832  : 				// If no gimbal lock...
; 833  : 				if (!IsZero( cX ))

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _cX$17[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv397[ebp], al
	movzx	eax, BYTE PTR tv397[ebp]
	test	eax, eax
	jne	$LN10@DecomposeT

; 834  : 				{
; 835  : 					TFloat32 invCX = 1.0f / cX;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _cX$17[ebp]
	movss	DWORD PTR _invCX$9[ebp], xmm0

; 836  : 					sZ = e01 * invCX * invScaleX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _invCX$9[ebp]
	mulss	xmm0, DWORD PTR _invScaleX$21[ebp]
	movss	DWORD PTR _sZ$14[ebp], xmm0

; 837  : 					cZ = e11 * invCX * invScaleY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR _invCX$9[ebp]
	mulss	xmm0, DWORD PTR _invScaleY$20[ebp]
	movss	DWORD PTR _cZ$13[ebp], xmm0

; 838  : 					sY = e20 * invCX * invScaleZ;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR _invCX$9[ebp]
	mulss	xmm0, DWORD PTR _invScaleZ$19[ebp]
	movss	DWORD PTR _sY$16[ebp], xmm0

; 839  : 					cY = e22 * invCX * invScaleZ;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR _invCX$9[ebp]
	mulss	xmm0, DWORD PTR _invScaleZ$19[ebp]
	movss	DWORD PTR _cY$15[ebp], xmm0

; 840  : 				}
; 841  : 				else

	jmp	SHORT $LN9@DecomposeT
$LN10@DecomposeT:

; 842  : 				{
; 843  : 					// Gimbal lock - force Z angle to 0
; 844  : 					sZ = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _sZ$14[ebp], xmm0

; 845  : 					cZ = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _cZ$13[ebp], xmm0

; 846  : 					sY = -e02 * invScaleX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _invScaleX$21[ebp]
	movss	DWORD PTR _sY$16[ebp], xmm0

; 847  : 					cY =  e00 * invScaleX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _invScaleX$21[ebp]
	movss	DWORD PTR _cY$15[ebp], xmm0
$LN9@DecomposeT:

; 848  : 				}
; 849  : 				break;

	jmp	$LN21@DecomposeT
$LN8@DecomposeT:

; 850  : 			}
; 851  : 
; 852  : 			case kYXZ:
; 853  : 			{
; 854  : 				sX = e12 * invScaleY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR _invScaleY$20[ebp]
	movss	DWORD PTR _sX$18[ebp], xmm0

; 855  : 				cX = Sqrt( 1.0f - sX*sX );

	movss	xmm0, DWORD PTR _sX$18[ebp]
	mulss	xmm0, DWORD PTR _sX$18[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR tv398[ebp]
	movss	xmm0, DWORD PTR tv398[ebp]
	movss	DWORD PTR _cX$17[ebp], xmm0

; 856  : 
; 857  : 				// If no gimbal lock...
; 858  : 				if (!IsZero( cX ))

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _cX$17[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv399[ebp], al
	movzx	eax, BYTE PTR tv399[ebp]
	test	eax, eax
	jne	$LN7@DecomposeT

; 859  : 				{
; 860  : 					TFloat32 invCX = 1.0f / cX;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _cX$17[ebp]
	movss	DWORD PTR _invCX$8[ebp], xmm0

; 861  : 					sY = -e02 * invCX * invScaleX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _invCX$8[ebp]
	mulss	xmm0, DWORD PTR _invScaleX$21[ebp]
	movss	DWORD PTR _sY$16[ebp], xmm0

; 862  : 					cY =  e22 * invCX * invScaleZ;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR _invCX$8[ebp]
	mulss	xmm0, DWORD PTR _invScaleZ$19[ebp]
	movss	DWORD PTR _cY$15[ebp], xmm0

; 863  : 					sZ = -e10 * invCX * invScaleY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _invCX$8[ebp]
	mulss	xmm0, DWORD PTR _invScaleY$20[ebp]
	movss	DWORD PTR _sZ$14[ebp], xmm0

; 864  : 					cZ =  e11 * invCX * invScaleY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR _invCX$8[ebp]
	mulss	xmm0, DWORD PTR _invScaleY$20[ebp]
	movss	DWORD PTR _cZ$13[ebp], xmm0

; 865  : 				}
; 866  : 				else

	jmp	SHORT $LN6@DecomposeT
$LN7@DecomposeT:

; 867  : 				{
; 868  : 					// Gimbal lock - force Y angle to 0
; 869  : 					sY = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _sY$16[ebp], xmm0

; 870  : 					cY = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _cY$15[ebp], xmm0

; 871  : 					sZ = e01 * invScaleX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _invScaleX$21[ebp]
	movss	DWORD PTR _sZ$14[ebp], xmm0

; 872  : 					cZ = e00 * invScaleX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _invScaleX$21[ebp]
	movss	DWORD PTR _cZ$13[ebp], xmm0
$LN6@DecomposeT:

; 873  : 				}
; 874  : 				break;

	jmp	$LN21@DecomposeT
$LN5@DecomposeT:

; 875  : 			}
; 876  : 
; 877  : 			case kXYZ:
; 878  : 			{
; 879  : 				sY = -e02 * invScaleX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _invScaleX$21[ebp]
	movss	DWORD PTR _sY$16[ebp], xmm0

; 880  : 				cY = Sqrt( 1.0f - sY*sY );

	movss	xmm0, DWORD PTR _sY$16[ebp]
	mulss	xmm0, DWORD PTR _sY$16[ebp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	push	ecx
	movss	DWORD PTR [esp], xmm1
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR tv400[ebp]
	movss	xmm0, DWORD PTR tv400[ebp]
	movss	DWORD PTR _cY$15[ebp], xmm0

; 881  : 
; 882  : 				// If no gimbal lock...
; 883  : 				if (!IsZero( cY ))

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _cY$15[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8
	mov	BYTE PTR tv401[ebp], al
	movzx	eax, BYTE PTR tv401[ebp]
	test	eax, eax
	jne	$LN4@DecomposeT

; 884  : 				{
; 885  : 					TFloat32 invCY = 1.0f / cY;

	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR _cY$15[ebp]
	movss	DWORD PTR _invCY$7[ebp], xmm0

; 886  : 					sX = e12 * invCY * invScaleY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR _invCY$7[ebp]
	mulss	xmm0, DWORD PTR _invScaleY$20[ebp]
	movss	DWORD PTR _sX$18[ebp], xmm0

; 887  : 					cX = e22 * invCY * invScaleZ;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR _invCY$7[ebp]
	mulss	xmm0, DWORD PTR _invScaleZ$19[ebp]
	movss	DWORD PTR _cX$17[ebp], xmm0

; 888  : 					sZ = e01 * invCY * invScaleX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR _invCY$7[ebp]
	mulss	xmm0, DWORD PTR _invScaleX$21[ebp]
	movss	DWORD PTR _sZ$14[ebp], xmm0

; 889  : 					cZ = e00 * invCY * invScaleX;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _invCY$7[ebp]
	mulss	xmm0, DWORD PTR _invScaleX$21[ebp]
	movss	DWORD PTR _cZ$13[ebp], xmm0

; 890  : 				}
; 891  : 				else

	jmp	SHORT $LN3@DecomposeT
$LN4@DecomposeT:

; 892  : 				{
; 893  : 					// Gimbal lock - force X angle to 0
; 894  : 					sX = 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _sX$18[ebp], xmm0

; 895  : 					cX = 1.0f;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _cX$17[ebp], xmm0

; 896  : 					sZ = -e10 * invScaleY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _invScaleY$20[ebp]
	movss	DWORD PTR _sZ$14[ebp], xmm0

; 897  : 					cZ =  e11 * invScaleY;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR _invScaleY$20[ebp]
	movss	DWORD PTR _cZ$13[ebp], xmm0
$LN3@DecomposeT:

; 898  : 				}
; 899  : 				break;

	jmp	SHORT $LN21@DecomposeT
$LN2@DecomposeT:

; 900  : 			}
; 901  : 
; 902  : 			default:
; 903  : 				GEN_ERROR( "Invalid parameter" );

	mov	eax, DWORD PTR ?__LINE__Var@?1??DecomposeTransformEuler@CMatrix3x3@gen@@QBEXPAVCVector3@3@0W4ERotationOrder@3@@Z@4JA
	add	eax, 171				; 000000abH
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN21@DecomposeT:

; 904  : 		}
; 905  : 
; 906  : 		pAngles->x = ATan( sX, cX );

	push	ecx
	movss	xmm0, DWORD PTR _cX$17[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _sX$18[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?ATan@gen@@YAMMM@Z			; gen::ATan
	add	esp, 8
	fstp	DWORD PTR tv402[ebp]
	mov	eax, DWORD PTR _pAngles$[ebp]
	movss	xmm0, DWORD PTR tv402[ebp]
	movss	DWORD PTR [eax], xmm0

; 907  : 		pAngles->y = ATan( sY, cY );

	push	ecx
	movss	xmm0, DWORD PTR _cY$15[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _sY$16[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?ATan@gen@@YAMMM@Z			; gen::ATan
	add	esp, 8
	fstp	DWORD PTR tv403[ebp]
	mov	eax, DWORD PTR _pAngles$[ebp]
	movss	xmm0, DWORD PTR tv403[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 908  : 		pAngles->z = ATan( sZ, cZ );

	push	ecx
	movss	xmm0, DWORD PTR _cZ$13[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _sZ$14[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?ATan@gen@@YAMMM@Z			; gen::ATan
	add	esp, 8
	fstp	DWORD PTR tv404[ebp]
	mov	eax, DWORD PTR _pAngles$[ebp]
	movss	xmm0, DWORD PTR tv404[ebp]
	movss	DWORD PTR [eax+8], xmm0
$LN25@DecomposeT:

; 909  : 	}
; 910  : 
; 911  : 	// Return scale if required
; 912  : 	if (pScale)

	cmp	DWORD PTR _pScale$[ebp], 0
	je	SHORT $LN1@DecomposeT

; 913  : 	{
; 914  : 		pScale->x = scaleX;

	mov	eax, DWORD PTR _pScale$[ebp]
	movss	xmm0, DWORD PTR _scaleX$24[ebp]
	movss	DWORD PTR [eax], xmm0

; 915  : 		pScale->y = scaleY;

	mov	eax, DWORD PTR _pScale$[ebp]
	movss	xmm0, DWORD PTR _scaleY$23[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 916  : 		pScale->z = scaleZ;

	mov	eax, DWORD PTR _pScale$[ebp]
	movss	xmm0, DWORD PTR _scaleZ$22[ebp]
	movss	DWORD PTR [eax+8], xmm0
$LN1@DecomposeT:
	jmp	SHORT $LN29@DecomposeT
__catch$?DecomposeTransformEuler@CMatrix3x3@gen@@QBEXPAVCVector3@2@0W4ERotationOrder@2@@Z$0:

; 917  : 	}
; 918  : 
; 919  : 	GEN_ENDGUARD;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0CJ@DHMHJNHL@gen?3?3CMatrix3x3?3?3DecomposeTransf@
	mov	ecx, DWORD PTR _e$6[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$6[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN33@DecomposeT
	ret	0
__catch$?DecomposeTransformEuler@CMatrix3x3@gen@@QBEXPAVCVector3@2@0W4ERotationOrder@2@@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0CJ@DHMHJNHL@gen?3?3CMatrix3x3?3?3DecomposeTransf@
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T5[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN35@DecomposeT
	ret	0
$LN29@DecomposeT:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN34@DecomposeT
$LN35@DecomposeT:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN32@DecomposeT
$LN34@DecomposeT:
	jmp	SHORT $LN32@DecomposeT
$LN33@DecomposeT:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN32@DecomposeT:
$LN27@DecomposeT:

; 920  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN39@DecomposeT
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 836				; 00000344H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN39@DecomposeT:
	DD	1
	DD	$LN38@DecomposeT
$LN38@DecomposeT:
	DD	-252					; ffffff04H
	DD	4
	DD	$LN36@DecomposeT
$LN36@DecomposeT:
	DB	101					; 00000065H
	DB	0
	npad	2
$LN40@DecomposeT:
	DD	$LN5@DecomposeT
	DD	$LN14@DecomposeT
	DD	$LN17@DecomposeT
	DD	$LN8@DecomposeT
	DD	$LN11@DecomposeT
	DD	$LN20@DecomposeT
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?DecomposeTransformEuler@CMatrix3x3@gen@@QBEXPAVCVector3@2@0W4ERotationOrder@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-840]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?DecomposeTransformEuler@CMatrix3x3@gen@@QBEXPAVCVector3@2@0W4ERotationOrder@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?DecomposeTransformEuler@CMatrix3x3@gen@@QBEXPAVCVector3@2@0W4ERotationOrder@2@@Z ENDP ; gen::CMatrix3x3::DecomposeTransformEuler
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?MakeTransformAxisAngle@CMatrix3x3@gen@@QAEXABVCVector3@2@M0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_axis$ = 8						; size = 4
_fAngle$ = 12						; size = 4
_scale$ = 16						; size = 4
?MakeTransformAxisAngle@CMatrix3x3@gen@@QAEXABVCVector3@2@M0@Z PROC ; gen::CMatrix3x3::MakeTransformAxisAngle, COMDAT
; _this$ = ecx

; 704  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 705  : 	// First build rotation matrix
; 706  : 	MakeRotation( axis, fAngle );

	push	ecx
	movss	xmm0, DWORD PTR _fAngle$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeRotation@CMatrix3x3@gen@@QAEXABVCVector3@2@M@Z ; gen::CMatrix3x3::MakeRotation

; 707  : 
; 708  : 	// Scale matrix
; 709  : 	e00 *= scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0

; 710  : 	e01 *= scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 711  : 	e02 *= scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 712  : 
; 713  : 	e10 *= scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+12], xmm0

; 714  : 	e11 *= scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+16], xmm0

; 715  : 	e12 *= scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+20], xmm0

; 716  : 
; 717  : 	e20 *= scale.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+24], xmm0

; 718  : 	e21 *= scale.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+28], xmm0

; 719  : 	e22 *= scale.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+32], xmm0

; 720  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?MakeTransformAxisAngle@CMatrix3x3@gen@@QAEXABVCVector3@2@M0@Z ENDP ; gen::CMatrix3x3::MakeTransformAxisAngle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?MakeTransformQuaternion@CMatrix3x3@gen@@QAEXABVCQuaternion@2@ABVCVector3@2@@Z
_TEXT	SEGMENT
_wz$ = -116						; size = 4
_wy$ = -104						; size = 4
_wx$ = -92						; size = 4
_zx$ = -80						; size = 4
_yz$ = -68						; size = 4
_xy$ = -56						; size = 4
_zz$ = -44						; size = 4
_yy$ = -32						; size = 4
_xx$ = -20						; size = 4
_this$ = -8						; size = 4
_quat$ = 8						; size = 4
_scale$ = 12						; size = 4
?MakeTransformQuaternion@CMatrix3x3@gen@@QAEXABVCQuaternion@2@ABVCVector3@2@@Z PROC ; gen::CMatrix3x3::MakeTransformQuaternion, COMDAT
; _this$ = ecx

; 666  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 667  : 	// Efficiently precalculate some values from the quaternion
; 668  : 	TFloat32 xx = 2*quat.x;

	mov	eax, DWORD PTR _quat$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _xx$[ebp], xmm0

; 669  : 	TFloat32 yy = 2*quat.y;

	mov	eax, DWORD PTR _quat$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _yy$[ebp], xmm0

; 670  : 	TFloat32 zz = 2*quat.z;

	mov	eax, DWORD PTR _quat$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _zz$[ebp], xmm0

; 671  : 	TFloat32 xy = xx*quat.y;

	mov	eax, DWORD PTR _quat$[ebp]
	movss	xmm0, DWORD PTR _xx$[ebp]
	mulss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _xy$[ebp], xmm0

; 672  : 	TFloat32 yz = yy*quat.z;

	mov	eax, DWORD PTR _quat$[ebp]
	movss	xmm0, DWORD PTR _yy$[ebp]
	mulss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _yz$[ebp], xmm0

; 673  : 	TFloat32 zx = zz*quat.x;

	mov	eax, DWORD PTR _quat$[ebp]
	movss	xmm0, DWORD PTR _zz$[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _zx$[ebp], xmm0

; 674  : 	TFloat32 wx = quat.w*xx;

	mov	eax, DWORD PTR _quat$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _xx$[ebp]
	movss	DWORD PTR _wx$[ebp], xmm0

; 675  : 	TFloat32 wy = quat.w*yy;

	mov	eax, DWORD PTR _quat$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _yy$[ebp]
	movss	DWORD PTR _wy$[ebp], xmm0

; 676  : 	TFloat32 wz = quat.w*zz;

	mov	eax, DWORD PTR _quat$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _zz$[ebp]
	movss	DWORD PTR _wz$[ebp], xmm0

; 677  : 	xx *= quat.x;

	mov	eax, DWORD PTR _quat$[ebp]
	movss	xmm0, DWORD PTR _xx$[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _xx$[ebp], xmm0

; 678  : 	yy *= quat.y;

	mov	eax, DWORD PTR _quat$[ebp]
	movss	xmm0, DWORD PTR _yy$[ebp]
	mulss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _yy$[ebp], xmm0

; 679  : 	zz *= quat.z;

	mov	eax, DWORD PTR _quat$[ebp]
	movss	xmm0, DWORD PTR _zz$[ebp]
	mulss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _zz$[ebp], xmm0

; 680  : 
; 681  : 	// Fill upper 3x3 matrix, combining scaling with rotation values from the quaternion
; 682  : 	e00  = scale.x * (1 - yy - zz);

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _yy$[ebp]
	subss	xmm0, DWORD PTR _zz$[ebp]
	mov	eax, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 683  : 	e01  = scale.x * (xy + wz);

	movss	xmm0, DWORD PTR _xy$[ebp]
	addss	xmm0, DWORD PTR _wz$[ebp]
	mov	eax, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 684  : 	e02  = scale.x * (zx - wy);

	movss	xmm0, DWORD PTR _zx$[ebp]
	subss	xmm0, DWORD PTR _wy$[ebp]
	mov	eax, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 685  : 
; 686  : 	e10  = scale.y * (xy - wz);

	movss	xmm0, DWORD PTR _xy$[ebp]
	subss	xmm0, DWORD PTR _wz$[ebp]
	mov	eax, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 687  : 	e11  = scale.y * (1 - xx - zz);

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _xx$[ebp]
	subss	xmm0, DWORD PTR _zz$[ebp]
	mov	eax, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+16], xmm0

; 688  : 	e12  = scale.y * (yz + wx);

	movss	xmm0, DWORD PTR _yz$[ebp]
	addss	xmm0, DWORD PTR _wx$[ebp]
	mov	eax, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+20], xmm0

; 689  : 
; 690  : 	e20  = scale.z * (zx + wy);

	movss	xmm0, DWORD PTR _zx$[ebp]
	addss	xmm0, DWORD PTR _wy$[ebp]
	mov	eax, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+24], xmm0

; 691  : 	e21  = scale.z * (yz - wx);

	movss	xmm0, DWORD PTR _yz$[ebp]
	subss	xmm0, DWORD PTR _wx$[ebp]
	mov	eax, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+28], xmm0

; 692  : 	e22 = scale.z * (1 - xx - yy);

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _xx$[ebp]
	subss	xmm0, DWORD PTR _yy$[ebp]
	mov	eax, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+32], xmm0

; 693  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?MakeTransformQuaternion@CMatrix3x3@gen@@QAEXABVCQuaternion@2@ABVCVector3@2@@Z ENDP ; gen::CMatrix3x3::MakeTransformQuaternion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?MakeTransformEuler@CMatrix3x3@gen@@QAEXABVCVector3@2@W4ERotationOrder@2@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_angles$ = 8						; size = 4
_eRotOrder$ = 12					; size = 4
_scale$ = 16						; size = 4
?MakeTransformEuler@CMatrix3x3@gen@@QAEXABVCVector3@2@W4ERotationOrder@2@0@Z PROC ; gen::CMatrix3x3::MakeTransformEuler, COMDAT
; _this$ = ecx

; 641  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 	// First build rotation matrix
; 643  : 	MakeRotation( angles, eRotOrder );

	mov	eax, DWORD PTR _eRotOrder$[ebp]
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR _angles$[ebp]
	push	edx
	call	??0CVector3@gen@@QAE@ABV01@@Z		; gen::CVector3::CVector3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeRotation@CMatrix3x3@gen@@QAEXVCVector3@2@W4ERotationOrder@2@@Z ; gen::CMatrix3x3::MakeRotation

; 644  : 
; 645  : 	// Scale matrix
; 646  : 	e00 *= scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0

; 647  : 	e01 *= scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 648  : 	e02 *= scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 649  : 
; 650  : 	e10 *= scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+12], xmm0

; 651  : 	e11 *= scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+16], xmm0

; 652  : 	e12 *= scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+20], xmm0

; 653  : 
; 654  : 	e20 *= scale.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+24], xmm0

; 655  : 	e21 *= scale.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+28], xmm0

; 656  : 	e22 *= scale.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+32], xmm0

; 657  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?MakeTransformEuler@CMatrix3x3@gen@@QAEXABVCVector3@2@W4ERotationOrder@2@0@Z ENDP ; gen::CMatrix3x3::MakeTransformEuler
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?SetColumns@CMatrix3x3@gen@@QAEXABVCVector2@2@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
?SetColumns@CMatrix3x3@gen@@QAEXABVCVector2@2@00@Z PROC	; gen::CMatrix3x3::SetColumns, COMDAT
; _this$ = ecx

; 612  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 613  : 	e00 = v0.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 614  : 	e10 = v0.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+12], edx

; 615  : 
; 616  : 	e01 = v1.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 617  : 	e11 = v1.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+16], edx

; 618  : 
; 619  : 	e02 = v2.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx

; 620  : 	e12 = v2.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+20], edx

; 621  : 
; 622  : 	e20 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+24], xmm0

; 623  : 	e21 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+28], xmm0

; 624  : 	e22 = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+32], xmm0

; 625  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetColumns@CMatrix3x3@gen@@QAEXABVCVector2@2@00@Z ENDP	; gen::CMatrix3x3::SetColumns
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?SetColumns@CMatrix3x3@gen@@QAEXABVCVector3@2@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
?SetColumns@CMatrix3x3@gen@@QAEXABVCVector3@2@00@Z PROC	; gen::CMatrix3x3::SetColumns, COMDAT
; _this$ = ecx

; 590  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 	e00 = v0.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 592  : 	e10 = v0.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+12], edx

; 593  : 	e20 = v0.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+24], edx

; 594  : 
; 595  : 	e01 = v1.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 596  : 	e11 = v1.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+16], edx

; 597  : 	e21 = v1.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+28], edx

; 598  : 
; 599  : 	e02 = v2.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx

; 600  : 	e12 = v2.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+20], edx

; 601  : 	e22 = v2.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+32], edx

; 602  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetColumns@CMatrix3x3@gen@@QAEXABVCVector3@2@00@Z ENDP	; gen::CMatrix3x3::SetColumns
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?SetRows@CMatrix3x3@gen@@QAEXABVCVector2@2@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
?SetRows@CMatrix3x3@gen@@QAEXABVCVector2@2@00@Z PROC	; gen::CMatrix3x3::SetRows, COMDAT
; _this$ = ecx

; 568  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 569  : 	e00 = v0.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 570  : 	e01 = v0.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 571  : 	e02 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0

; 572  : 
; 573  : 	e10 = v1.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+12], edx

; 574  : 	e11 = v1.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+16], edx

; 575  : 	e12 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+20], xmm0

; 576  : 
; 577  : 	e20 = v2.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+24], edx

; 578  : 	e21 = v2.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+28], edx

; 579  : 	e22 = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+32], xmm0

; 580  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetRows@CMatrix3x3@gen@@QAEXABVCVector2@2@00@Z ENDP	; gen::CMatrix3x3::SetRows
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?SetRows@CMatrix3x3@gen@@QAEXABVCVector3@2@00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
?SetRows@CMatrix3x3@gen@@QAEXABVCVector3@2@00@Z PROC	; gen::CMatrix3x3::SetRows, COMDAT
; _this$ = ecx

; 546  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 547  : 	e00 = v0.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 548  : 	e01 = v0.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 549  : 	e02 = v0.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 550  : 
; 551  : 	e10 = v1.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+12], edx

; 552  : 	e11 = v1.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+16], edx

; 553  : 	e12 = v1.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+20], edx

; 554  : 
; 555  : 	e20 = v2.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+24], edx

; 556  : 	e21 = v2.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+28], edx

; 557  : 	e22 = v2.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+32], edx

; 558  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetRows@CMatrix3x3@gen@@QAEXABVCVector3@2@00@Z ENDP	; gen::CMatrix3x3::SetRows
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z
_TEXT	SEGMENT
$T2 = -528						; size = 88
$T3 = -432						; size = 88
$T4 = -336						; size = 88
_e$5 = -48						; size = 4
_pfElts$6 = -36						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
_iCol$ = 8						; size = 4
_v$ = 12						; size = 4
?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z PROC	; gen::CMatrix3x3::SetColumn, COMDAT
; _this$ = ecx

; 527  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 516				; 00000204H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-532]
	mov	ecx, 129				; 00000081H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 528  : 	GEN_GUARD_OPT;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 529  : 	GEN_ASSERT_OPT( iCol < 3, "Invalid parameter" );

	cmp	DWORD PTR _iCol$[ebp], 3
	jb	SHORT $LN1@SetColumn
	mov	eax, DWORD PTR ?__LINE__Var@?1??SetColumn@CMatrix3x3@gen@@QAEXIABVCVector2@3@@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN1@SetColumn:

; 530  : 
; 531  : 	TFloat32* pfElts = &e00 + iCol;

	mov	eax, DWORD PTR _iCol$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pfElts$6[ebp], edx

; 532  : 	pfElts[0] = v.x;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _pfElts$6[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [ecx+eax], edx

; 533  : 	pfElts[3] = v.y;

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _pfElts$6[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax], edx
	jmp	SHORT $LN5@SetColumn
__catch$?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z$0:

; 534  : 
; 535  : 	GEN_ENDGUARD_OPT;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BL@FAHPNAEN@gen?3?3CMatrix3x3?3?3SetColumn?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN9@SetColumn
	ret	0
__catch$?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BL@FAHPNAEN@gen?3?3CMatrix3x3?3?3SetColumn?$AA@
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN11@SetColumn
	ret	0
$LN5@SetColumn:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@SetColumn
$LN11@SetColumn:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN8@SetColumn
$LN10@SetColumn:
	jmp	SHORT $LN8@SetColumn
$LN9@SetColumn:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN8@SetColumn:
$LN3@SetColumn:

; 536  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@SetColumn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 532				; 00000214H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN15@SetColumn:
	DD	1
	DD	$LN14@SetColumn
$LN14@SetColumn:
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN12@SetColumn
$LN12@SetColumn:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-536]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z ENDP	; gen::CMatrix3x3::SetColumn
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z
_TEXT	SEGMENT
$T2 = -528						; size = 88
$T3 = -432						; size = 88
$T4 = -336						; size = 88
_e$5 = -48						; size = 4
_pfElts$6 = -36						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
_iCol$ = 8						; size = 4
_v$ = 12						; size = 4
?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z PROC	; gen::CMatrix3x3::SetColumn, COMDAT
; _this$ = ecx

; 509  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 516				; 00000204H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-532]
	mov	ecx, 129				; 00000081H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 510  : 	GEN_GUARD_OPT;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 511  : 	GEN_ASSERT_OPT( iCol < 3, "Invalid parameter" );

	cmp	DWORD PTR _iCol$[ebp], 3
	jb	SHORT $LN1@SetColumn
	mov	eax, DWORD PTR ?__LINE__Var@?1??SetColumn@CMatrix3x3@gen@@QAEXIABVCVector3@3@@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN1@SetColumn:

; 512  : 
; 513  : 	TFloat32* pfElts = &e00 + iCol;

	mov	eax, DWORD PTR _iCol$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pfElts$6[ebp], edx

; 514  : 	pfElts[0] = v.x;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _pfElts$6[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [ecx+eax], edx

; 515  : 	pfElts[3] = v.y;

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _pfElts$6[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax], edx

; 516  : 	pfElts[6] = v.z;

	mov	eax, 4
	imul	eax, 6
	mov	ecx, DWORD PTR _pfElts$6[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+eax], edx
	jmp	SHORT $LN5@SetColumn
__catch$?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z$0:

; 517  : 
; 518  : 	GEN_ENDGUARD_OPT;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BL@FAHPNAEN@gen?3?3CMatrix3x3?3?3SetColumn?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN9@SetColumn
	ret	0
__catch$?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BL@FAHPNAEN@gen?3?3CMatrix3x3?3?3SetColumn?$AA@
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN11@SetColumn
	ret	0
$LN5@SetColumn:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@SetColumn
$LN11@SetColumn:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN8@SetColumn
$LN10@SetColumn:
	jmp	SHORT $LN8@SetColumn
$LN9@SetColumn:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN8@SetColumn:
$LN3@SetColumn:

; 519  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@SetColumn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 532				; 00000214H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN15@SetColumn:
	DD	1
	DD	$LN14@SetColumn
$LN14@SetColumn:
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN12@SetColumn
$LN12@SetColumn:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-536]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetColumn@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z ENDP	; gen::CMatrix3x3::SetColumn
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?SetRow@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z
_TEXT	SEGMENT
$T2 = -528						; size = 88
$T3 = -432						; size = 88
$T4 = -336						; size = 88
_e$5 = -48						; size = 4
_pfElts$6 = -36						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
_iRow$ = 8						; size = 4
_v$ = 12						; size = 4
?SetRow@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z PROC	; gen::CMatrix3x3::SetRow, COMDAT
; _this$ = ecx

; 491  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetRow@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 516				; 00000204H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-532]
	mov	ecx, 129				; 00000081H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 492  : 	GEN_GUARD_OPT;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 493  : 	GEN_ASSERT_OPT( iRow < 3, "Invalid parameter" );

	cmp	DWORD PTR _iRow$[ebp], 3
	jb	SHORT $LN1@SetRow
	mov	eax, DWORD PTR ?__LINE__Var@?1??SetRow@CMatrix3x3@gen@@QAEXIABVCVector2@3@@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN1@SetRow:

; 494  : 
; 495  : 	TFloat32* pfElts = &e00 + iRow * 3;

	mov	eax, DWORD PTR _iRow$[ebp]
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pfElts$6[ebp], edx

; 496  : 	pfElts[0] = v.x;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _pfElts$6[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [ecx+eax], edx

; 497  : 	pfElts[1] = v.y;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pfElts$6[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax], edx
	jmp	SHORT $LN5@SetRow
__catch$?SetRow@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z$0:

; 498  : 
; 499  : 	GEN_ENDGUARD_OPT;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BI@CLJHBHAO@gen?3?3CMatrix3x3?3?3SetRow?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN9@SetRow
	ret	0
__catch$?SetRow@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BI@CLJHBHAO@gen?3?3CMatrix3x3?3?3SetRow?$AA@
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN11@SetRow
	ret	0
$LN5@SetRow:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@SetRow
$LN11@SetRow:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN8@SetRow
$LN10@SetRow:
	jmp	SHORT $LN8@SetRow
$LN9@SetRow:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN8@SetRow:
$LN3@SetRow:

; 500  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@SetRow
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 532				; 00000214H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN15@SetRow:
	DD	1
	DD	$LN14@SetRow
$LN14@SetRow:
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN12@SetRow
$LN12@SetRow:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?SetRow@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-536]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetRow@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetRow@CMatrix3x3@gen@@QAEXIABVCVector2@2@@Z ENDP	; gen::CMatrix3x3::SetRow
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?SetRow@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z
_TEXT	SEGMENT
$T2 = -528						; size = 88
$T3 = -432						; size = 88
$T4 = -336						; size = 88
_e$5 = -48						; size = 4
_pfElts$6 = -36						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
_iRow$ = 8						; size = 4
_v$ = 12						; size = 4
?SetRow@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z PROC	; gen::CMatrix3x3::SetRow, COMDAT
; _this$ = ecx

; 473  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetRow@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 516				; 00000204H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-532]
	mov	ecx, 129				; 00000081H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 474  : 	GEN_GUARD_OPT;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 475  : 	GEN_ASSERT_OPT( iRow < 3, "Invalid parameter" );

	cmp	DWORD PTR _iRow$[ebp], 3
	jb	SHORT $LN1@SetRow
	mov	eax, DWORD PTR ?__LINE__Var@?1??SetRow@CMatrix3x3@gen@@QAEXIABVCVector3@3@@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN1@SetRow:

; 476  : 
; 477  : 	TFloat32* pfElts = &e00 + iRow * 3;

	mov	eax, DWORD PTR _iRow$[ebp]
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pfElts$6[ebp], edx

; 478  : 	pfElts[0] = v.x;

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _pfElts$6[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [ecx+eax], edx

; 479  : 	pfElts[1] = v.y;

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _pfElts$6[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax], edx

; 480  : 	pfElts[2] = v.z;

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _pfElts$6[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+eax], edx
	jmp	SHORT $LN5@SetRow
__catch$?SetRow@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z$0:

; 481  : 
; 482  : 	GEN_ENDGUARD_OPT;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BI@CLJHBHAO@gen?3?3CMatrix3x3?3?3SetRow?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN9@SetRow
	ret	0
__catch$?SetRow@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BI@CLJHBHAO@gen?3?3CMatrix3x3?3?3SetRow?$AA@
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN11@SetRow
	ret	0
$LN5@SetRow:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@SetRow
$LN11@SetRow:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN8@SetRow
$LN10@SetRow:
	jmp	SHORT $LN8@SetRow
$LN9@SetRow:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN8@SetRow:
$LN3@SetRow:

; 483  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@SetRow
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 532				; 00000214H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN15@SetRow:
	DD	1
	DD	$LN14@SetRow
$LN14@SetRow:
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN12@SetRow
$LN12@SetRow:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?SetRow@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-536]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetRow@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetRow@CMatrix3x3@gen@@QAEXIABVCVector3@2@@Z ENDP	; gen::CMatrix3x3::SetRow
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?GetColumn@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z
_TEXT	SEGMENT
$T2 = -528						; size = 88
$T3 = -432						; size = 88
$T4 = -336						; size = 88
_e$5 = -48						; size = 4
_pfElts$6 = -36						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_iCol$ = 12						; size = 4
?GetColumn@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z PROC	; gen::CMatrix3x3::GetColumn, COMDAT
; _this$ = ecx

; 456  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetColumn@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 516				; 00000204H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-532]
	mov	ecx, 129				; 00000081H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 457  : 	GEN_GUARD_OPT;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 458  : 	GEN_ASSERT_OPT( iCol < 3, "Invalid parameter" );

	cmp	DWORD PTR _iCol$[ebp], 3
	jb	SHORT $LN1@GetColumn
	mov	eax, DWORD PTR ?__LINE__Var@?1??GetColumn@CMatrix3x3@gen@@QBE?AVCVector3@3@I@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN1@GetColumn:

; 459  : 
; 460  : 	const TFloat32* pfElts = &e00 + iCol;

	mov	eax, DWORD PTR _iCol$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _pfElts$6[ebp], edx

; 461  : 	return CVector3( pfElts[0], pfElts[3], pfElts[6] );

	mov	eax, 4
	imul	eax, 6
	mov	ecx, DWORD PTR _pfElts$6[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	edx, 3
	mov	eax, DWORD PTR _pfElts$6[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	ecx, 0
	mov	edx, DWORD PTR _pfElts$6[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CVector3@gen@@QAE@MMM@Z		; gen::CVector3::CVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN8@GetColumn
__catch$?GetColumn@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z$0:

; 462  : 
; 463  : 	GEN_ENDGUARD_OPT;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BL@HODKPBNP@gen?3?3CMatrix3x3?3?3GetColumn?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN9@GetColumn
	ret	0
__catch$?GetColumn@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BL@HODKPBNP@gen?3?3CMatrix3x3?3?3GetColumn?$AA@
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN11@GetColumn
	ret	0
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@GetColumn
$LN11@GetColumn:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN8@GetColumn
$LN10@GetColumn:
	jmp	SHORT $LN8@GetColumn
$LN9@GetColumn:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN8@GetColumn:

; 464  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@GetColumn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 532				; 00000214H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN15@GetColumn:
	DD	1
	DD	$LN14@GetColumn
$LN14@GetColumn:
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN12@GetColumn
$LN12@GetColumn:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?GetColumn@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-536]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetColumn@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetColumn@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z ENDP	; gen::CMatrix3x3::GetColumn
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?GetRow@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z
_TEXT	SEGMENT
$T2 = -516						; size = 88
$T3 = -420						; size = 88
$T4 = -324						; size = 88
_e$5 = -36						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_iRow$ = 12						; size = 4
?GetRow@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z PROC	; gen::CMatrix3x3::GetRow, COMDAT
; _this$ = ecx

; 445  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetRow@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 504				; 000001f8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-520]
	mov	ecx, 126				; 0000007eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 446  : 	GEN_GUARD_OPT;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 447  : 	GEN_ASSERT_OPT( iRow < 3, "Invalid parameter" );

	cmp	DWORD PTR _iRow$[ebp], 3
	jb	SHORT $LN1@GetRow
	mov	eax, DWORD PTR ?__LINE__Var@?1??GetRow@CMatrix3x3@gen@@QBE?AVCVector3@3@I@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN1@GetRow:

; 448  : 
; 449  : 	return CVector3( &e00 + iRow * 3 );

	mov	eax, DWORD PTR _iRow$[ebp]
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CVector3@gen@@QAE@PBM@Z		; gen::CVector3::CVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN4@GetRow
__catch$?GetRow@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z$0:

; 450  : 
; 451  : 	GEN_ENDGUARD_OPT;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BI@LIAGKPND@gen?3?3CMatrix3x3?3?3GetRow?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN9@GetRow
	ret	0
__catch$?GetRow@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BI@LIAGKPND@gen?3?3CMatrix3x3?3?3GetRow?$AA@
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN11@GetRow
	ret	0
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@GetRow
$LN11@GetRow:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN4@GetRow
$LN10@GetRow:
	jmp	SHORT $LN4@GetRow
$LN9@GetRow:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN4@GetRow:

; 452  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@GetRow
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 520				; 00000208H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN15@GetRow:
	DD	1
	DD	$LN14@GetRow
$LN14@GetRow:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN12@GetRow
$LN12@GetRow:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?GetRow@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-524]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetRow@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetRow@CMatrix3x3@gen@@QBE?AVCVector3@2@I@Z ENDP	; gen::CMatrix3x3::GetRow
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?Set@CMatrix3x3@gen@@QAEXPBM_N@Z
_TEXT	SEGMENT
$T2 = -516						; size = 88
$T3 = -420						; size = 88
$T4 = -324						; size = 88
_e$5 = -36						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
_pfElts$ = 8						; size = 4
_bRows$ = 12						; size = 1
?Set@CMatrix3x3@gen@@QAEXPBM_N@Z PROC			; gen::CMatrix3x3::Set, COMDAT
; _this$ = ecx

; 402  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Set@CMatrix3x3@gen@@QAEXPBM_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 504				; 000001f8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-520]
	mov	ecx, 126				; 0000007eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 403  : 	GEN_GUARD_OPT;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 404  : 	GEN_ASSERT_OPT( pfElts, "Invalid parameter" );

	cmp	DWORD PTR _pfElts$[ebp], 0
	jne	SHORT $LN3@Set
	mov	eax, DWORD PTR ?__LINE__Var@?1??Set@CMatrix3x3@gen@@QAEXPBM_N@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN3@Set:

; 405  : 
; 406  : 	if (bRows)

	movzx	eax, BYTE PTR _bRows$[ebp]
	test	eax, eax
	je	$LN2@Set

; 407  : 	{
; 408  : 		e00 = pfElts[0];

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx], eax

; 409  : 		e01 = pfElts[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+4], eax

; 410  : 		e02 = pfElts[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+8], eax

; 411  : 
; 412  : 		e10 = pfElts[3];

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+12], eax

; 413  : 		e11 = pfElts[4];

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+16], eax

; 414  : 		e12 = pfElts[5];

	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+20], eax

; 415  : 
; 416  : 		e20 = pfElts[6];

	mov	eax, 4
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+24], eax

; 417  : 		e21 = pfElts[7];

	mov	eax, 4
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+28], eax

; 418  : 		e22 = pfElts[8];

	mov	eax, 4
	shl	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+32], eax

; 419  : 	}
; 420  : 	else

	jmp	$LN1@Set
$LN2@Set:

; 421  : 	{
; 422  : 		e00 = pfElts[0];

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx], eax

; 423  : 		e10 = pfElts[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+12], eax

; 424  : 		e20 = pfElts[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+24], eax

; 425  : 
; 426  : 		e01 = pfElts[3];

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+4], eax

; 427  : 		e11 = pfElts[4];

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+16], eax

; 428  : 		e21 = pfElts[5];

	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+28], eax

; 429  : 
; 430  : 		e02 = pfElts[6];

	mov	eax, 4
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+8], eax

; 431  : 		e12 = pfElts[7];

	mov	eax, 4
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+20], eax

; 432  : 		e22 = pfElts[8];

	mov	eax, 4
	shl	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+32], eax
$LN1@Set:
	jmp	SHORT $LN7@Set
__catch$?Set@CMatrix3x3@gen@@QAEXPBM_N@Z$0:

; 433  : 	}
; 434  : 
; 435  : 	GEN_ENDGUARD_OPT;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BF@BKFLDEDO@gen?3?3CMatrix3x3?3?3Set?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN11@Set
	ret	0
__catch$?Set@CMatrix3x3@gen@@QAEXPBM_N@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BF@BKFLDEDO@gen?3?3CMatrix3x3?3?3Set?$AA@
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN13@Set
	ret	0
$LN7@Set:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN12@Set
$LN13@Set:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@Set
$LN12@Set:
	jmp	SHORT $LN10@Set
$LN11@Set:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN10@Set:
$LN5@Set:

; 436  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@Set
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 520				; 00000208H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN17@Set:
	DD	1
	DD	$LN16@Set
$LN16@Set:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN14@Set
$LN14@Set:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?Set@CMatrix3x3@gen@@QAEXPBM_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-524]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Set@CMatrix3x3@gen@@QAEXPBM_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Set@CMatrix3x3@gen@@QAEXPBM_N@Z ENDP			; gen::CMatrix3x3::Set
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ?Set@CMatrix3x3@gen@@QAEXMMMMMMMMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_elt00$ = 8						; size = 4
_elt01$ = 12						; size = 4
_elt02$ = 16						; size = 4
_elt10$ = 20						; size = 4
_elt11$ = 24						; size = 4
_elt12$ = 28						; size = 4
_elt20$ = 32						; size = 4
_elt21$ = 36						; size = 4
_elt22$ = 40						; size = 4
?Set@CMatrix3x3@gen@@QAEXMMMMMMMMM@Z PROC		; gen::CMatrix3x3::Set, COMDAT
; _this$ = ecx

; 382  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 383  : 	e00 = elt00;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elt00$[ebp]
	movss	DWORD PTR [eax], xmm0

; 384  : 	e01 = elt01;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elt01$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 385  : 	e02 = elt02;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elt02$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 386  : 
; 387  : 	e10 = elt10;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elt10$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 388  : 	e11 = elt11;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elt11$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 389  : 	e12 = elt12;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elt12$[ebp]
	movss	DWORD PTR [eax+20], xmm0

; 390  : 
; 391  : 	e20 = elt20;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elt20$[ebp]
	movss	DWORD PTR [eax+24], xmm0

; 392  : 	e21 = elt21;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elt21$[ebp]
	movss	DWORD PTR [eax+28], xmm0

; 393  : 	e22 = elt22;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elt22$[ebp]
	movss	DWORD PTR [eax+32], xmm0

; 394  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
?Set@CMatrix3x3@gen@@QAEXMMMMMMMMM@Z ENDP		; gen::CMatrix3x3::Set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ??4CMatrix3x3@gen@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_m$ = 8							; size = 4
??4CMatrix3x3@gen@@QAEAAV01@ABV01@@Z PROC		; gen::CMatrix3x3::operator=, COMDAT
; _this$ = ecx

; 352  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 353  : 	if ( this != &m )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _m$[ebp]
	je	SHORT $LN1@operator

; 354  : 	{
; 355  : 		e00 = m.e00;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 356  : 		e01 = m.e01;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 357  : 		e02 = m.e02;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 358  : 
; 359  : 		e10 = m.e10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx

; 360  : 		e11 = m.e11;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx

; 361  : 		e12 = m.e12;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 362  : 
; 363  : 		e20 = m.e20;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx

; 364  : 		e21 = m.e21;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx

; 365  : 		e22 = m.e22;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx
$LN1@operator:

; 366  : 	}
; 367  : 	return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 368  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4CMatrix3x3@gen@@QAEAAV01@ABV01@@Z ENDP		; gen::CMatrix3x3::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ??0CMatrix3x3@gen@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_m$ = 8							; size = 4
??0CMatrix3x3@gen@@QAE@ABV01@@Z PROC			; gen::CMatrix3x3::CMatrix3x3, COMDAT
; _this$ = ecx

; 336  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 337  : 	e00 = m.e00;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 338  : 	e01 = m.e01;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 339  : 	e02 = m.e02;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 340  : 
; 341  : 	e10 = m.e10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx

; 342  : 	e11 = m.e11;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx

; 343  : 	e12 = m.e12;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 344  : 
; 345  : 	e20 = m.e20;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx

; 346  : 	e21 = m.e21;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+28], edx

; 347  : 	e22 = m.e22;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx

; 348  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0CMatrix3x3@gen@@QAE@ABV01@@Z ENDP			; gen::CMatrix3x3::CMatrix3x3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ??0CMatrix3x3@gen@@QAE@ABVCMatrix2x2@1@ABVCVector2@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_m$ = 8							; size = 4
_position$ = 12						; size = 4
??0CMatrix3x3@gen@@QAE@ABVCMatrix2x2@1@ABVCVector2@1@@Z PROC ; gen::CMatrix3x3::CMatrix3x3, COMDAT
; _this$ = ecx

; 317  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 318  : 	// Copy 2x2 elements, adding extra identity elements
; 319  : 	e00 = m.e00;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 320  : 	e01 = m.e01;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 321  : 	e02 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0

; 322  : 
; 323  : 	e10 = m.e10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+12], edx

; 324  : 	e11 = m.e11;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _m$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+16], edx

; 325  : 	e12 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+20], xmm0

; 326  : 
; 327  : 	// Put position (translation) in bottom row
; 328  : 	e20 = position.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+24], edx

; 329  : 	e21 = position.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+28], edx

; 330  : 	e22 = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+32], xmm0

; 331  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0CMatrix3x3@gen@@QAE@ABVCMatrix2x2@1@ABVCVector2@1@@Z ENDP ; gen::CMatrix3x3::CMatrix3x3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ??0CMatrix3x3@gen@@QAE@ABVCVector2@1@M0@Z
_TEXT	SEGMENT
_c$ = -36						; size = 4
_s$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_position$ = 8						; size = 4
_fAngle$ = 12						; size = 4
_scale$ = 16						; size = 4
??0CMatrix3x3@gen@@QAE@ABVCVector2@1@M0@Z PROC		; gen::CMatrix3x3::CMatrix3x3, COMDAT
; _this$ = ecx

; 292  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 293  : 	TFloat32 s, c;
; 294  : 	SinCos( fAngle, &s, &c );

	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _fAngle$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?SinCos@gen@@YAXMPAM0@Z			; gen::SinCos
	add	esp, 12					; 0000000cH

; 295  : 
; 296  : 	e00 = c * scale.x;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 297  : 	e01 = s * scale.x;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 298  : 	e02 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0

; 299  : 
; 300  : 	e10 = -s * scale.y;

	movss	xmm0, DWORD PTR _s$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 301  : 	e11 = c * scale.y;

	mov	eax, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR _c$[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+16], xmm0

; 302  : 	e12 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+20], xmm0

; 303  : 
; 304  : 	e20 = position.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+24], edx

; 305  : 	e21 = position.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+28], edx

; 306  : 	e22 = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+32], xmm0

; 307  : }

	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@CMatrix3x3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN6@CMatrix3x3:
	DD	2
	DD	$LN5@CMatrix3x3
$LN5@CMatrix3x3:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN3@CMatrix3x3
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN4@CMatrix3x3
$LN4@CMatrix3x3:
	DB	99					; 00000063H
	DB	0
$LN3@CMatrix3x3:
	DB	115					; 00000073H
	DB	0
??0CMatrix3x3@gen@@QAE@ABVCVector2@1@M0@Z ENDP		; gen::CMatrix3x3::CMatrix3x3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ??0CMatrix3x3@gen@@QAE@ABVCVector2@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_position$ = 8						; size = 4
??0CMatrix3x3@gen@@QAE@ABVCVector2@1@@Z PROC		; gen::CMatrix3x3::CMatrix3x3, COMDAT
; _this$ = ecx

; 267  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 268  : 	// Take most elements from identity
; 269  : 	e00 = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax], xmm0

; 270  : 	e01 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+4], xmm0

; 271  : 	e02 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0

; 272  : 
; 273  : 	e10 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+12], xmm0

; 274  : 	e11 = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+16], xmm0

; 275  : 	e12 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+20], xmm0

; 276  : 
; 277  : 	// Put position (translation) in bottom row
; 278  : 	e20 = position.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+24], edx

; 279  : 	e21 = position.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _position$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+28], edx

; 280  : 	e22 = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+32], xmm0

; 281  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0CMatrix3x3@gen@@QAE@ABVCVector2@1@@Z ENDP		; gen::CMatrix3x3::CMatrix3x3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ??0CMatrix3x3@gen@@QAE@ABVCVector3@1@M0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_axis$ = 8						; size = 4
_fAngle$ = 12						; size = 4
_scale$ = 16						; size = 4
??0CMatrix3x3@gen@@QAE@ABVCVector3@1@M0@Z PROC		; gen::CMatrix3x3::CMatrix3x3, COMDAT
; _this$ = ecx

; 246  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 247  : 	// First build rotation matrix
; 248  : 	MakeRotation( axis, fAngle );

	push	ecx
	movss	xmm0, DWORD PTR _fAngle$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _axis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeRotation@CMatrix3x3@gen@@QAEXABVCVector3@2@M@Z ; gen::CMatrix3x3::MakeRotation

; 249  : 
; 250  : 	// Scale matrix
; 251  : 	e00 *= scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0

; 252  : 	e01 *= scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 253  : 	e02 *= scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 254  : 
; 255  : 	e10 *= scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+12], xmm0

; 256  : 	e11 *= scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+16], xmm0

; 257  : 	e12 *= scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+20], xmm0

; 258  : 
; 259  : 	e20 *= scale.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+24], xmm0

; 260  : 	e21 *= scale.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+28], xmm0

; 261  : 	e22 *= scale.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+32], xmm0

; 262  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0CMatrix3x3@gen@@QAE@ABVCVector3@1@M0@Z ENDP		; gen::CMatrix3x3::CMatrix3x3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ??0CMatrix3x3@gen@@QAE@ABVCQuaternion@1@ABVCVector3@1@@Z
_TEXT	SEGMENT
_wz$ = -116						; size = 4
_wy$ = -104						; size = 4
_wx$ = -92						; size = 4
_zx$ = -80						; size = 4
_yz$ = -68						; size = 4
_xy$ = -56						; size = 4
_zz$ = -44						; size = 4
_yy$ = -32						; size = 4
_xx$ = -20						; size = 4
_this$ = -8						; size = 4
_quat$ = 8						; size = 4
_scale$ = 12						; size = 4
??0CMatrix3x3@gen@@QAE@ABVCQuaternion@1@ABVCVector3@1@@Z PROC ; gen::CMatrix3x3::CMatrix3x3, COMDAT
; _this$ = ecx

; 209  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-312]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 210  : 	// Efficiently precalculate some values from the quaternion
; 211  : 	TFloat32 xx = 2*quat.x;

	mov	eax, DWORD PTR _quat$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _xx$[ebp], xmm0

; 212  : 	TFloat32 yy = 2*quat.y;

	mov	eax, DWORD PTR _quat$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _yy$[ebp], xmm0

; 213  : 	TFloat32 zz = 2*quat.z;

	mov	eax, DWORD PTR _quat$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _zz$[ebp], xmm0

; 214  : 	TFloat32 xy = xx*quat.y;

	mov	eax, DWORD PTR _quat$[ebp]
	movss	xmm0, DWORD PTR _xx$[ebp]
	mulss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _xy$[ebp], xmm0

; 215  : 	TFloat32 yz = yy*quat.z;

	mov	eax, DWORD PTR _quat$[ebp]
	movss	xmm0, DWORD PTR _yy$[ebp]
	mulss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _yz$[ebp], xmm0

; 216  : 	TFloat32 zx = zz*quat.x;

	mov	eax, DWORD PTR _quat$[ebp]
	movss	xmm0, DWORD PTR _zz$[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _zx$[ebp], xmm0

; 217  : 	TFloat32 wx = quat.w*xx;

	mov	eax, DWORD PTR _quat$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _xx$[ebp]
	movss	DWORD PTR _wx$[ebp], xmm0

; 218  : 	TFloat32 wy = quat.w*yy;

	mov	eax, DWORD PTR _quat$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _yy$[ebp]
	movss	DWORD PTR _wy$[ebp], xmm0

; 219  : 	TFloat32 wz = quat.w*zz;

	mov	eax, DWORD PTR _quat$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR _zz$[ebp]
	movss	DWORD PTR _wz$[ebp], xmm0

; 220  : 	xx *= quat.x;

	mov	eax, DWORD PTR _quat$[ebp]
	movss	xmm0, DWORD PTR _xx$[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR _xx$[ebp], xmm0

; 221  : 	yy *= quat.y;

	mov	eax, DWORD PTR _quat$[ebp]
	movss	xmm0, DWORD PTR _yy$[ebp]
	mulss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR _yy$[ebp], xmm0

; 222  : 	zz *= quat.z;

	mov	eax, DWORD PTR _quat$[ebp]
	movss	xmm0, DWORD PTR _zz$[ebp]
	mulss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _zz$[ebp], xmm0

; 223  : 
; 224  : 	// Fill upper 3x3 matrix, combining scaling with rotation values from the quaternion
; 225  : 	e00 = scale.x * (1 - yy - zz);

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _yy$[ebp]
	subss	xmm0, DWORD PTR _zz$[ebp]
	mov	eax, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 226  : 	e01 = scale.x * (xy + wz);

	movss	xmm0, DWORD PTR _xy$[ebp]
	addss	xmm0, DWORD PTR _wz$[ebp]
	mov	eax, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 227  : 	e02 = scale.x * (zx - wy);

	movss	xmm0, DWORD PTR _zx$[ebp]
	subss	xmm0, DWORD PTR _wy$[ebp]
	mov	eax, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 228  : 
; 229  : 	e10 = scale.y * (xy - wz);

	movss	xmm0, DWORD PTR _xy$[ebp]
	subss	xmm0, DWORD PTR _wz$[ebp]
	mov	eax, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 230  : 	e11 = scale.y * (1 - xx - zz);

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _xx$[ebp]
	subss	xmm0, DWORD PTR _zz$[ebp]
	mov	eax, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+16], xmm0

; 231  : 	e12 = scale.y * (yz + wx);

	movss	xmm0, DWORD PTR _yz$[ebp]
	addss	xmm0, DWORD PTR _wx$[ebp]
	mov	eax, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+20], xmm0

; 232  : 
; 233  : 	e20 = scale.z * (zx + wy);

	movss	xmm0, DWORD PTR _zx$[ebp]
	addss	xmm0, DWORD PTR _wy$[ebp]
	mov	eax, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+24], xmm0

; 234  : 	e21 = scale.z * (yz - wx);

	movss	xmm0, DWORD PTR _yz$[ebp]
	subss	xmm0, DWORD PTR _wx$[ebp]
	mov	eax, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+28], xmm0

; 235  : 	e22 = scale.z * (1 - xx - yy);

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _xx$[ebp]
	subss	xmm0, DWORD PTR _yy$[ebp]
	mov	eax, DWORD PTR _scale$[ebp]
	mulss	xmm0, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+32], xmm0

; 236  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0CMatrix3x3@gen@@QAE@ABVCQuaternion@1@ABVCVector3@1@@Z ENDP ; gen::CMatrix3x3::CMatrix3x3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ??0CMatrix3x3@gen@@QAE@ABVCVector3@1@W4ERotationOrder@1@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_angles$ = 8						; size = 4
_eRotOrder$ = 12					; size = 4
_scale$ = 16						; size = 4
??0CMatrix3x3@gen@@QAE@ABVCVector3@1@W4ERotationOrder@1@0@Z PROC ; gen::CMatrix3x3::CMatrix3x3, COMDAT
; _this$ = ecx

; 184  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 	// First build rotation matrix
; 186  : 	MakeRotation( angles, eRotOrder );

	mov	eax, DWORD PTR _eRotOrder$[ebp]
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR _angles$[ebp]
	push	edx
	call	??0CVector3@gen@@QAE@ABV01@@Z		; gen::CVector3::CVector3
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MakeRotation@CMatrix3x3@gen@@QAEXVCVector3@2@W4ERotationOrder@2@@Z ; gen::CMatrix3x3::MakeRotation

; 187  : 
; 188  : 	// Scale matrix
; 189  : 	e00 *= scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx], xmm0

; 190  : 	e01 *= scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+4], xmm0

; 191  : 	e02 *= scale.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 192  : 
; 193  : 	e10 *= scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+12], xmm0

; 194  : 	e11 *= scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+16]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+16], xmm0

; 195  : 	e12 *= scale.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+20], xmm0

; 196  : 
; 197  : 	e20 *= scale.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+24], xmm0

; 198  : 	e21 *= scale.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+28]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+28], xmm0

; 199  : 	e22 *= scale.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _scale$[ebp]
	movss	xmm0, DWORD PTR [eax+32]
	mulss	xmm0, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+32], xmm0

; 200  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0CMatrix3x3@gen@@QAE@ABVCVector3@1@W4ERotationOrder@1@0@Z ENDP ; gen::CMatrix3x3::CMatrix3x3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ??0CMatrix3x3@gen@@QAE@ABVCVector2@1@00_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_bRows$ = 20						; size = 1
??0CMatrix3x3@gen@@QAE@ABVCVector2@1@00_N@Z PROC	; gen::CMatrix3x3::CMatrix3x3, COMDAT
; _this$ = ecx

; 143  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 144  : 	if (bRows)

	movzx	eax, BYTE PTR _bRows$[ebp]
	test	eax, eax
	je	SHORT $LN2@CMatrix3x3

; 145  : 	{
; 146  : 		e00 = v0.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 147  : 		e01 = v0.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 148  : 		e02 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+8], xmm0

; 149  : 
; 150  : 		e10 = v1.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+12], edx

; 151  : 		e11 = v1.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+16], edx

; 152  : 		e12 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+20], xmm0

; 153  : 
; 154  : 		e20 = v2.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+24], edx

; 155  : 		e21 = v2.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+28], edx

; 156  : 		e22 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+32], xmm0

; 157  : 	}
; 158  : 	else

	jmp	SHORT $LN1@CMatrix3x3
$LN2@CMatrix3x3:

; 159  : 	{
; 160  : 		e00 = v0.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 161  : 		e10 = v0.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+12], edx

; 162  : 
; 163  : 		e01 = v1.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 164  : 		e11 = v1.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+16], edx

; 165  : 
; 166  : 		e02 = v2.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx

; 167  : 		e12 = v2.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+20], edx

; 168  : 
; 169  : 		e20 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+24], xmm0

; 170  : 		e21 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+28], xmm0

; 171  : 		e22 = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+32], xmm0
$LN1@CMatrix3x3:

; 172  : 	}
; 173  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0CMatrix3x3@gen@@QAE@ABVCVector2@1@00_N@Z ENDP	; gen::CMatrix3x3::CMatrix3x3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ??0CMatrix3x3@gen@@QAE@ABVCVector3@1@00_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v0$ = 8						; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_bRows$ = 20						; size = 1
??0CMatrix3x3@gen@@QAE@ABVCVector3@1@00_N@Z PROC	; gen::CMatrix3x3::CMatrix3x3, COMDAT
; _this$ = ecx

; 103  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 104  : 	if (bRows)

	movzx	eax, BYTE PTR _bRows$[ebp]
	test	eax, eax
	je	SHORT $LN2@CMatrix3x3

; 105  : 	{
; 106  : 		e00 = v0.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 107  : 		e01 = v0.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 108  : 		e02 = v0.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx

; 109  : 
; 110  : 		e10 = v1.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+12], edx

; 111  : 		e11 = v1.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+16], edx

; 112  : 		e12 = v1.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+20], edx

; 113  : 
; 114  : 		e20 = v2.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+24], edx

; 115  : 		e21 = v2.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+28], edx

; 116  : 		e22 = v2.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+32], edx

; 117  : 	}
; 118  : 	else

	jmp	SHORT $LN1@CMatrix3x3
$LN2@CMatrix3x3:

; 119  : 	{
; 120  : 		e00 = v0.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 121  : 		e10 = v0.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+12], edx

; 122  : 		e20 = v0.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v0$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+24], edx

; 123  : 
; 124  : 		e01 = v1.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 125  : 		e11 = v1.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+16], edx

; 126  : 		e21 = v1.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+28], edx

; 127  : 
; 128  : 		e02 = v2.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx

; 129  : 		e12 = v2.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+20], edx

; 130  : 		e22 = v2.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+32], edx
$LN1@CMatrix3x3:

; 131  : 	}
; 132  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0CMatrix3x3@gen@@QAE@ABVCVector3@1@00_N@Z ENDP	; gen::CMatrix3x3::CMatrix3x3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ??0CMatrix3x3@gen@@QAE@PBM_N@Z
_TEXT	SEGMENT
$T2 = -516						; size = 88
$T3 = -420						; size = 88
$T4 = -324						; size = 88
_e$5 = -36						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
_pfElts$ = 8						; size = 4
_bRows$ = 12						; size = 1
??0CMatrix3x3@gen@@QAE@PBM_N@Z PROC			; gen::CMatrix3x3::CMatrix3x3, COMDAT
; _this$ = ecx

; 59   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CMatrix3x3@gen@@QAE@PBM_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 504				; 000001f8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-520]
	mov	ecx, 126				; 0000007eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 	GEN_GUARD_OPT;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 61   : 	GEN_ASSERT_OPT( pfElts, "Invalid parameter" );

	cmp	DWORD PTR _pfElts$[ebp], 0
	jne	SHORT $LN3@CMatrix3x3
	mov	eax, DWORD PTR ?__LINE__Var@?1???0CMatrix3x3@gen@@QAE@PBM_N@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN3@CMatrix3x3:

; 62   : 
; 63   : 	if (bRows)

	movzx	eax, BYTE PTR _bRows$[ebp]
	test	eax, eax
	je	$LN2@CMatrix3x3

; 64   : 	{
; 65   : 		e00 = pfElts[0];

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx], eax

; 66   : 		e01 = pfElts[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+4], eax

; 67   : 		e02 = pfElts[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+8], eax

; 68   : 
; 69   : 		e10 = pfElts[3];

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+12], eax

; 70   : 		e11 = pfElts[4];

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+16], eax

; 71   : 		e12 = pfElts[5];

	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+20], eax

; 72   : 
; 73   : 		e20 = pfElts[6];

	mov	eax, 4
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+24], eax

; 74   : 		e21 = pfElts[7];

	mov	eax, 4
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+28], eax

; 75   : 		e22 = pfElts[8];

	mov	eax, 4
	shl	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+32], eax

; 76   : 	}
; 77   : 	else

	jmp	$LN1@CMatrix3x3
$LN2@CMatrix3x3:

; 78   : 	{
; 79   : 		e00 = pfElts[0];

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx], eax

; 80   : 		e10 = pfElts[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+12], eax

; 81   : 		e20 = pfElts[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+24], eax

; 82   : 
; 83   : 		e01 = pfElts[3];

	mov	eax, 4
	imul	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+4], eax

; 84   : 		e11 = pfElts[4];

	mov	eax, 4
	shl	eax, 2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+16], eax

; 85   : 		e21 = pfElts[5];

	mov	eax, 4
	imul	eax, 5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+28], eax

; 86   : 
; 87   : 		e02 = pfElts[6];

	mov	eax, 4
	imul	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+8], eax

; 88   : 		e12 = pfElts[7];

	mov	eax, 4
	imul	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+20], eax

; 89   : 		e22 = pfElts[8];

	mov	eax, 4
	shl	eax, 3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+32], eax
$LN1@CMatrix3x3:
	jmp	SHORT $LN7@CMatrix3x3
__catch$??0CMatrix3x3@gen@@QAE@PBM_N@Z$0:

; 90   : 	}
; 91   : 
; 92   : 	GEN_ENDGUARD_OPT;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BM@PKFIPCCH@gen?3?3CMatrix3x3?3?3CMatrix3x3?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN11@CMatrix3x3
	ret	0
__catch$??0CMatrix3x3@gen@@QAE@PBM_N@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BM@PKFIPCCH@gen?3?3CMatrix3x3?3?3CMatrix3x3?$AA@
	push	OFFSET ??_C@_0FN@KPNOLJKK@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN13@CMatrix3x3
	ret	0
$LN7@CMatrix3x3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN12@CMatrix3x3
$LN13@CMatrix3x3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@CMatrix3x3
$LN12@CMatrix3x3:
	jmp	SHORT $LN10@CMatrix3x3
$LN11@CMatrix3x3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN10@CMatrix3x3:

; 93   : }

	mov	eax, DWORD PTR _this$[ebp]
$LN6@CMatrix3x3:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@CMatrix3x3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 520				; 00000208H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN17@CMatrix3x3:
	DD	1
	DD	$LN16@CMatrix3x3
$LN16@CMatrix3x3:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN14@CMatrix3x3
$LN14@CMatrix3x3:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0CMatrix3x3@gen@@QAE@PBM_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-524]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CMatrix3x3@gen@@QAE@PBM_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CMatrix3x3@gen@@QAE@PBM_N@Z ENDP			; gen::CMatrix3x3::CMatrix3x3
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.cpp
;	COMDAT ??0CMatrix3x3@gen@@QAE@MMMMMMMMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_elt00$ = 8						; size = 4
_elt01$ = 12						; size = 4
_elt02$ = 16						; size = 4
_elt10$ = 20						; size = 4
_elt11$ = 24						; size = 4
_elt12$ = 28						; size = 4
_elt20$ = 32						; size = 4
_elt21$ = 36						; size = 4
_elt22$ = 40						; size = 4
??0CMatrix3x3@gen@@QAE@MMMMMMMMM@Z PROC			; gen::CMatrix3x3::CMatrix3x3, COMDAT
; _this$ = ecx

; 39   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 40   : 	e00 = elt00;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elt00$[ebp]
	movss	DWORD PTR [eax], xmm0

; 41   : 	e01 = elt01;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elt01$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 42   : 	e02 = elt02;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elt02$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 43   : 
; 44   : 	e10 = elt10;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elt10$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 45   : 	e11 = elt11;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elt11$[ebp]
	movss	DWORD PTR [eax+16], xmm0

; 46   : 	e12 = elt12;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elt12$[ebp]
	movss	DWORD PTR [eax+20], xmm0

; 47   : 
; 48   : 	e20 = elt20;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elt20$[ebp]
	movss	DWORD PTR [eax+24], xmm0

; 49   : 	e21 = elt21;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elt21$[ebp]
	movss	DWORD PTR [eax+28], xmm0

; 50   : 	e22 = elt22;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _elt22$[ebp]
	movss	DWORD PTR [eax+32], xmm0

; 51   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
??0CMatrix3x3@gen@@QAE@MMMMMMMMM@Z ENDP			; gen::CMatrix3x3::CMatrix3x3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cmatrix3x3.h
;	COMDAT ??0CMatrix3x3@gen@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CMatrix3x3@gen@@QAE@XZ PROC				; gen::CMatrix3x3::CMatrix3x3, COMDAT
; _this$ = ecx

; 84   : 	CMatrix3x3() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMatrix3x3@gen@@QAE@XZ ENDP				; gen::CMatrix3x3::CMatrix3x3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cvector3.h
;	COMDAT ?Cross@gen@@YA?AVCVector3@1@ABV21@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
?Cross@gen@@YA?AVCVector3@1@ABV21@0@Z PROC		; gen::Cross, COMDAT

; 463  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 464  : 	return CVector3(v1.y*v2.z - v1.z*v2.y, v1.z*v2.x - v1.x*v2.z, v1.x*v2.y - v1.y*v2.x);

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax]
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	mulss	xmm0, DWORD PTR [edx]
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	movss	xmm1, DWORD PTR [eax]
	mulss	xmm1, DWORD PTR [ecx+8]
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	mulss	xmm0, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR _v2$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+4]
	subss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CVector3@gen@@QAE@MMM@Z		; gen::CVector3::CVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 465  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Cross@gen@@YA?AVCVector3@1@ABV21@0@Z ENDP		; gen::Cross
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cvector3.h
;	COMDAT ??Ggen@@YA?AVCVector3@0@ABV10@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??Ggen@@YA?AVCVector3@0@ABV10@@Z PROC			; gen::operator-, COMDAT

; 400  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 401  : 	return CVector3(-v.x, -v.y, -v.z);

	mov	eax, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _v$[ebp]
	movss	xmm0, DWORD PTR [edx]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CVector3@gen@@QAE@MMM@Z		; gen::CVector3::CVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 402  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??Ggen@@YA?AVCVector3@0@ABV10@@Z ENDP			; gen::operator-
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cvector3.h
;	COMDAT ?IsZero@CVector3@gen@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsZero@CVector3@gen@@QBE_NXZ PROC			; gen::CVector3::IsZero, COMDAT
; _this$ = ecx

; 181  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 182  : 		return gen::IsZero( x*x + y*y + z*z );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [ecx+8]
	mulss	xmm1, DWORD PTR [edx+8]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8

; 183  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsZero@CVector3@gen@@QBE_NXZ ENDP			; gen::CVector3::IsZero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cvector3.h
;	COMDAT ?Set@CVector3@gen@@QAEXMMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_xIn$ = 8						; size = 4
_yIn$ = 12						; size = 4
_zIn$ = 16						; size = 4
?Set@CVector3@gen@@QAEXMMM@Z PROC			; gen::CVector3::Set, COMDAT
; _this$ = ecx

; 121  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 122  : 		x = xIn;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _xIn$[ebp]
	movss	DWORD PTR [eax], xmm0

; 123  : 		y = yIn;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _yIn$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 124  : 		z = zIn;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _zIn$[ebp]
	movss	DWORD PTR [eax+8], xmm0

; 125  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Set@CVector3@gen@@QAEXMMM@Z ENDP			; gen::CVector3::Set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cvector3.h
;	COMDAT ??4CVector3@gen@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
??4CVector3@gen@@QAEAAV01@ABV01@@Z PROC			; gen::CVector3::operator=, COMDAT
; _this$ = ecx

; 99   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 100  : 		if ( this != &v )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _v$[ebp]
	je	SHORT $LN1@operator

; 101  : 		{
; 102  : 			x = v.x;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 103  : 			y = v.y;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 104  : 			z = v.z;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
$LN1@operator:

; 105  : 		}
; 106  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 107  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4CVector3@gen@@QAEAAV01@ABV01@@Z ENDP			; gen::CVector3::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cvector3.h
;	COMDAT ??0CVector3@gen@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
??0CVector3@gen@@QAE@ABV01@@Z PROC			; gen::CVector3::CVector3, COMDAT
; _this$ = ecx

; 95   : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0CVector3@gen@@QAE@ABV01@@Z ENDP			; gen::CVector3::CVector3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cvector3.h
;	COMDAT ??0CVector3@gen@@QAE@PBM@Z
_TEXT	SEGMENT
$T2 = -516						; size = 88
$T3 = -420						; size = 88
$T4 = -324						; size = 88
_e$5 = -36						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
_pfElts$ = 8						; size = 4
??0CVector3@gen@@QAE@PBM@Z PROC				; gen::CVector3::CVector3, COMDAT
; _this$ = ecx

; 54   : 	explicit CVector3( const TFloat32* pfElts )

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CVector3@gen@@QAE@PBM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 504				; 000001f8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-520]
	mov	ecx, 126				; 0000007eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 	{
; 56   : 		GEN_GUARD_OPT;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 57   : 		GEN_ASSERT_OPT( pfElts, "Invalid parameter" );

	cmp	DWORD PTR _pfElts$[ebp], 0
	jne	SHORT $LN1@CVector3
	push	57					; 00000039H
	push	OFFSET ??_C@_0FJ@ELBJOFGC@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	__CxxThrowException@8
$LN1@CVector3:

; 58   : 
; 59   : 		x = pfElts[0];

	mov	eax, 4
	imul	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx], eax

; 60   : 		y = pfElts[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+4], eax

; 61   : 		z = pfElts[2];

	mov	eax, 4
	shl	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pfElts$[ebp]
	mov	eax, DWORD PTR [edx+eax]
	mov	DWORD PTR [ecx+8], eax
	jmp	SHORT $LN5@CVector3
__catch$??0CVector3@gen@@QAE@PBM@Z$0:

; 62   : 
; 63   : 		GEN_ENDGUARD_OPT;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BI@EGGHICIL@gen?3?3CVector3?3?3CVector3?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN9@CVector3
	ret	0
__catch$??0CVector3@gen@@QAE@PBM@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0BI@EGGHICIL@gen?3?3CVector3?3?3CVector3?$AA@
	push	OFFSET ??_C@_0FJ@ELBJOFGC@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN11@CVector3
	ret	0
$LN5@CVector3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@CVector3
$LN11@CVector3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN8@CVector3
$LN10@CVector3:
	jmp	SHORT $LN8@CVector3
$LN9@CVector3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN8@CVector3:

; 64   : 	}

	mov	eax, DWORD PTR _this$[ebp]
$LN4@CVector3:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@CVector3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 520				; 00000208H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN15@CVector3:
	DD	1
	DD	$LN14@CVector3
$LN14@CVector3:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN12@CVector3
$LN12@CVector3:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0CVector3@gen@@QAE@PBM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-524]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CVector3@gen@@QAE@PBM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CVector3@gen@@QAE@PBM@Z ENDP				; gen::CVector3::CVector3
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cvector3.h
;	COMDAT ??0CVector3@gen@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_xIn$ = 8						; size = 4
_yIn$ = 12						; size = 4
_zIn$ = 16						; size = 4
??0CVector3@gen@@QAE@MMM@Z PROC				; gen::CVector3::CVector3, COMDAT
; _this$ = ecx

; 51   : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _xIn$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _yIn$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _zIn$[ebp]
	movss	DWORD PTR [eax+8], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0CVector3@gen@@QAE@MMM@Z ENDP				; gen::CVector3::CVector3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cvector3.h
;	COMDAT ??0CVector3@gen@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CVector3@gen@@QAE@XZ PROC				; gen::CVector3::CVector3, COMDAT
; _this$ = ecx

; 42   : 	CVector3() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0CVector3@gen@@QAE@XZ ENDP				; gen::CVector3::CVector3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cvector2.h
;	COMDAT ??Ggen@@YA?AVCVector2@0@ABV10@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??Ggen@@YA?AVCVector2@0@ABV10@0@Z PROC			; gen::operator-, COMDAT

; 366  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 367  : 	return CVector2(v1.x - v2.x, v1.y - v2.y);

	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [ecx+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	movss	xmm0, DWORD PTR [edx]
	subss	xmm0, DWORD PTR [eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CVector2@gen@@QAE@MM@Z		; gen::CVector2::CVector2
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 368  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??Ggen@@YA?AVCVector2@0@ABV10@0@Z ENDP			; gen::operator-
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cvector2.h
;	COMDAT ?IsZero@CVector2@gen@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsZero@CVector2@gen@@QBE_NXZ PROC			; gen::CVector2::IsZero, COMDAT
; _this$ = ecx

; 168  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 		return gen::IsZero( x*x + y*y );

	push	ecx
	movss	xmm0, DWORD PTR _kfEpsilon
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	mulss	xmm0, DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm1, DWORD PTR [edx+4]
	mulss	xmm1, DWORD PTR [eax+4]
	addss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?IsZero@gen@@YA_NMM@Z			; gen::IsZero
	add	esp, 8

; 170  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsZero@CVector2@gen@@QBE_NXZ ENDP			; gen::CVector2::IsZero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cvector2.h
;	COMDAT ??0CVector2@gen@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
??0CVector2@gen@@QAE@ABV01@@Z PROC			; gen::CVector2::CVector2, COMDAT
; _this$ = ecx

; 89   : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0CVector2@gen@@QAE@ABV01@@Z ENDP			; gen::CVector2::CVector2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cvector2.h
;	COMDAT ??0CVector2@gen@@QAE@MM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_xIn$ = 8						; size = 4
_yIn$ = 12						; size = 4
??0CVector2@gen@@QAE@MM@Z PROC				; gen::CVector2::CVector2, COMDAT
; _this$ = ecx

; 51   : 	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _xIn$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _yIn$[ebp]
	movss	DWORD PTR [eax+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0CVector2@gen@@QAE@MM@Z ENDP				; gen::CVector2::CVector2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\cvector2.h
;	COMDAT ??0CVector2@gen@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CVector2@gen@@QAE@XZ PROC				; gen::CVector2::CVector2, COMDAT
; _this$ = ecx

; 43   : 	CVector2() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0CVector2@gen@@QAE@XZ ENDP				; gen::CVector2::CVector2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\basemath.h
;	COMDAT ?AreEqual@gen@@YA_NMMI@Z
_TEXT	SEGMENT
tv72 = -220						; size = 4
_yInt$ = -20						; size = 4
_xInt$ = -8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_iEpsilonFrac$ = 16					; size = 4
?AreEqual@gen@@YA_NMMI@Z PROC				; gen::AreEqual, COMDAT

; 403  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 404  : 	// Reinterpret 32-bit float as 32-bit unsigned int
; 405  :     TInt32 xInt = *(TInt32*)&x;

	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _xInt$[ebp], eax

; 406  :     if (xInt < 0)

	cmp	DWORD PTR _xInt$[ebp], 0
	jge	SHORT $LN2@AreEqual

; 407  : 	{
; 408  : 		// Reorder negative values so we can use integer comparison
; 409  :         xInt = 0x80000000 - xInt;

	mov	eax, -2147483648			; 80000000H
	sub	eax, DWORD PTR _xInt$[ebp]
	mov	DWORD PTR _xInt$[ebp], eax
$LN2@AreEqual:

; 410  : 	}
; 411  : 
; 412  : 	// Same with second value
; 413  :     TInt32 yInt = *(TInt32*)&y;

	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR _yInt$[ebp], eax

; 414  :     if (yInt < 0)

	cmp	DWORD PTR _yInt$[ebp], 0
	jge	SHORT $LN1@AreEqual

; 415  : 	{
; 416  :         yInt = 0x80000000 - yInt;

	mov	eax, -2147483648			; 80000000H
	sub	eax, DWORD PTR _yInt$[ebp]
	mov	DWORD PTR _yInt$[ebp], eax
$LN1@AreEqual:

; 417  : 	}
; 418  : 
; 419  : 	// Values are equal if integer representations are near enough
; 420  :     return Abs( xInt - yInt ) < iEpsilonFrac;

	mov	eax, DWORD PTR _xInt$[ebp]
	sub	eax, DWORD PTR _yInt$[ebp]
	push	eax
	call	?Abs@gen@@YAIH@Z			; gen::Abs
	add	esp, 4
	cmp	eax, DWORD PTR _iEpsilonFrac$[ebp]
	jae	SHORT $LN5@AreEqual
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN6@AreEqual
$LN5@AreEqual:
	mov	DWORD PTR tv72[ebp], 0
$LN6@AreEqual:
	mov	al, BYTE PTR tv72[ebp]

; 421  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?AreEqual@gen@@YA_NMMI@Z ENDP				; gen::AreEqual
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\basemath.h
;	COMDAT ?IsZero@gen@@YA_NMM@Z
_TEXT	SEGMENT
tv67 = -200						; size = 4
tv74 = -196						; size = 4
_x$ = 8							; size = 4
_fEpsilon$ = 12						; size = 4
?IsZero@gen@@YA_NMM@Z PROC				; gen::IsZero, COMDAT

; 291  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-200]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 292  : 	return Abs( x ) < fEpsilon;

	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Abs@gen@@YAMM@Z			; gen::Abs
	add	esp, 4
	fstp	DWORD PTR tv74[ebp]
	movss	xmm0, DWORD PTR _fEpsilon$[ebp]
	comiss	xmm0, DWORD PTR tv74[ebp]
	jbe	SHORT $LN3@IsZero
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@IsZero
$LN3@IsZero:
	mov	DWORD PTR tv67[ebp], 0
$LN4@IsZero:
	mov	al, BYTE PTR tv67[ebp]

; 293  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 200				; 000000c8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsZero@gen@@YA_NMM@Z ENDP				; gen::IsZero
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\basemath.h
;	COMDAT ?SinCos@gen@@YAXMPAM0@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_pSin$ = 12						; size = 4
_pCos$ = 16						; size = 4
?SinCos@gen@@YAXMPAM0@Z PROC				; gen::SinCos, COMDAT

; 192  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 193  :     *pSin = Sin( x );

	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Sin@gen@@YAMM@Z			; gen::Sin
	add	esp, 4
	mov	eax, DWORD PTR _pSin$[ebp]
	fstp	DWORD PTR [eax]

; 194  :     *pCos = Cos( x );

	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Cos@gen@@YAMM@Z			; gen::Cos
	add	esp, 4
	mov	eax, DWORD PTR _pCos$[ebp]
	fstp	DWORD PTR [eax]

; 195  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SinCos@gen@@YAXMPAM0@Z ENDP				; gen::SinCos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\basemath.h
;	COMDAT ?InvSqrt@gen@@YAMM@Z
_TEXT	SEGMENT
tv139 = -516						; size = 4
tv93 = -512						; size = 4
$T2 = -504						; size = 88
$T3 = -408						; size = 88
$T4 = -312						; size = 88
_e$5 = -24						; size = 4
__$EHRec$ = -16						; size = 16
_x$ = 8							; size = 4
?InvSqrt@gen@@YAMM@Z PROC				; gen::InvSqrt, COMDAT

; 158  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?InvSqrt@gen@@YAMM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 500				; 000001f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-516]
	mov	ecx, 125				; 0000007dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp

; 159  : 	GEN_GUARD_OPT;

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 160  : 	GEN_ASSERT_OPT( x != 0.0f, "Invalid parameter" );

	movss	xmm0, DWORD PTR _x$[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN1@InvSqrt
	mov	eax, DWORD PTR ?__LINE__Var@?1??InvSqrt@gen@@YAMM@Z@4JA
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_0FJ@NFAFHCB@c?3?2users?2simon?2documents?2github?2@
	push	OFFSET ??_C@_0BC@DBAKKFEN@Invalid?5parameter?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0CFatalException@gen@@QAE@PBD0H@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN1@InvSqrt:

; 161  : 
; 162  : 	return 1.0f / Sqrt( x );

	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?Sqrt@gen@@YAMM@Z			; gen::Sqrt
	add	esp, 4
	fstp	DWORD PTR tv93[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR tv93[ebp]
	movss	DWORD PTR tv139[ebp], xmm0
	fld	DWORD PTR tv139[ebp]
	jmp	$LN8@InvSqrt
__catch$?InvSqrt@gen@@YAMM@Z$0:

; 163  : 
; 164  : 	GEN_ENDGUARD_OPT;

	push	0
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0N@HFKAOJGM@gen?3?3InvSqrt?$AA@
	mov	ecx, DWORD PTR _e$5[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack
	mov	eax, DWORD PTR _e$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0CFatalException@gen@@QAE@ABV01@@Z
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	__CxxThrowException@8
	mov	eax, $LN9@InvSqrt
	ret	0
__catch$?InvSqrt@gen@@YAMM@Z$1:
	call	?ObjectName@gen@@YAPBDXZ		; gen::ObjectName
	push	eax
	push	OFFSET ??_C@_0N@HFKAOJGM@gen?3?3InvSqrt?$AA@
	push	OFFSET ??_C@_0FJ@NFAFHCB@c?3?2users?2simon?2documents?2github?2@
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0CFatalException@gen@@QAE@PBD00@Z	; gen::CFatalException::CFatalException
	push	OFFSET __TI1?AVCFatalException@gen@@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	__CxxThrowException@8
	mov	eax, $LN11@InvSqrt
	ret	0
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN10@InvSqrt
$LN11@InvSqrt:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN8@InvSqrt
$LN10@InvSqrt:
	jmp	SHORT $LN8@InvSqrt
$LN9@InvSqrt:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN8@InvSqrt:

; 165  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@InvSqrt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 516				; 00000204H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN15@InvSqrt:
	DD	1
	DD	$LN14@InvSqrt
$LN14@InvSqrt:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN12@InvSqrt
$LN12@InvSqrt:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?InvSqrt@gen@@YAMM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-520]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?InvSqrt@gen@@YAMM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?InvSqrt@gen@@YAMM@Z ENDP				; gen::InvSqrt
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\basemath.h
;	COMDAT ?ATan@gen@@YAMMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?ATan@gen@@YAMMM@Z PROC					; gen::ATan, COMDAT

; 146  : inline TFloat32 ATan( const TFloat32 x, const TFloat32 y ) { return atan2f( x, y ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_atan2f
	add	esp, 8
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ATan@gen@@YAMMM@Z ENDP					; gen::ATan
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\basemath.h
;	COMDAT ?ACos@gen@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?ACos@gen@@YAMM@Z PROC					; gen::ACos, COMDAT

; 142  : inline TFloat32 ACos( const TFloat32 x ) { return acosf( x ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_acosf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ACos@gen@@YAMM@Z ENDP					; gen::ACos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\basemath.h
;	COMDAT ?Cos@gen@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?Cos@gen@@YAMM@Z PROC					; gen::Cos, COMDAT

; 135  : inline TFloat32 Cos( const TFloat32 x ) { return cosf( x ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_cosf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Cos@gen@@YAMM@Z ENDP					; gen::Cos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\basemath.h
;	COMDAT ?Sin@gen@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?Sin@gen@@YAMM@Z PROC					; gen::Sin, COMDAT

; 133  : inline TFloat32 Sin( const TFloat32 x ) { return sinf( x ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Sin@gen@@YAMM@Z ENDP					; gen::Sin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\basemath.h
;	COMDAT ?Sqrt@gen@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?Sqrt@gen@@YAMM@Z PROC					; gen::Sqrt, COMDAT

; 107  : inline TFloat32 Sqrt( const TFloat32 x ) { return sqrtf( x ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Sqrt@gen@@YAMM@Z ENDP					; gen::Sqrt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\basemath.h
;	COMDAT ?Abs@gen@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?Abs@gen@@YAMM@Z PROC					; gen::Abs, COMDAT

; 80   : inline TFloat32 Abs( const TFloat32 x ) { return fabsf( x ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Abs@gen@@YAMM@Z ENDP					; gen::Abs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\math\basemath.h
;	COMDAT ?Abs@gen@@YAIH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?Abs@gen@@YAIH@Z PROC					; gen::Abs, COMDAT

; 78   : inline TUInt32 Abs( const TInt32 x ) { return abs( static_cast<int>(x) ); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	_abs
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Abs@gen@@YAIH@Z ENDP					; gen::Abs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0CFatalException@gen@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CFatalException@gen@@QAE@ABV01@@Z PROC		; gen::CFatalException::CFatalException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CFatalException@gen@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+56], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 60					; 0000003cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CFatalException@gen@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CFatalException@gen@@QAE@ABV01@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0CFatalException@gen@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CFatalException@gen@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CFatalException@gen@@QAE@ABV01@@Z ENDP		; gen::CFatalException::CFatalException
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1CFatalException@gen@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CFatalException@gen@@QAE@XZ PROC			; gen::CFatalException::~CFatalException, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CFatalException@gen@@QAE@XZ ENDP			; gen::CFatalException::~CFatalException
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\common\cfatalexception.h
;	COMDAT ??0CFatalException@gen@@QAE@PBD00@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_sFileName$ = 8						; size = 4
_sFunction$ = 12					; size = 4
_sObject$ = 16						; size = 4
??0CFatalException@gen@@QAE@PBD00@Z PROC		; gen::CFatalException::CFatalException, COMDAT
; _this$ = ecx

; 51   : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CFatalException@gen@@QAE@PBD00@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??_C@_0BE@HBKCGNOA@Unhandled?5Exception?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _sFileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], -1
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 52   : 		AppendToCallStack( sFunction, sObject );

	push	0
	mov	eax, DWORD PTR _sObject$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sFunction$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AppendToCallStack@CFatalException@gen@@QAEXPBD0_N@Z ; gen::CFatalException::AppendToCallStack

; 53   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CFatalException@gen@@QAE@PBD00@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CFatalException@gen@@QAE@PBD00@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CFatalException@gen@@QAE@PBD00@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0CFatalException@gen@@QAE@PBD00@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CFatalException@gen@@QAE@PBD00@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CFatalException@gen@@QAE@PBD00@Z ENDP		; gen::CFatalException::CFatalException
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\common\cfatalexception.h
;	COMDAT ??0CFatalException@gen@@QAE@PBD0H@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_sDescription$ = 8					; size = 4
_sFileName$ = 12					; size = 4
_iLineNum$ = 16						; size = 4
??0CFatalException@gen@@QAE@PBD0H@Z PROC		; gen::CFatalException::CFatalException, COMDAT
; _this$ = ecx

; 40   : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CFatalException@gen@@QAE@PBD0H@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _sDescription$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _sFileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iLineNum$[ebp]
	mov	DWORD PTR [eax+56], ecx
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 41   : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CFatalException@gen@@QAE@PBD0H@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0CFatalException@gen@@QAE@PBD0H@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0CFatalException@gen@@QAE@PBD0H@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CFatalException@gen@@QAE@PBD0H@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CFatalException@gen@@QAE@PBD0H@Z ENDP		; gen::CFatalException::CFatalException
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\common\gendefines.h
;	COMDAT ?ObjectName@gen@@YAPBDXZ
_TEXT	SEGMENT
?ObjectName@gen@@YAPBDXZ PROC				; gen::ObjectName, COMDAT

; 98   : inline const char* ObjectName() { return ""; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, OFFSET ??_C@_00CNPNBAHC@?$AA@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ObjectName@gen@@YAPBDXZ ENDP				; gen::ObjectName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__FksNewline@gen@@YAXXZ
text$yd	SEGMENT
??__FksNewline@gen@@YAXXZ PROC				; gen::`dynamic atexit destructor for 'ksNewline'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET _ksNewline
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__FksNewline@gen@@YAXXZ ENDP				; gen::`dynamic atexit destructor for 'ksNewline''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\common\msdefines.h
;	COMDAT ??__EksNewline@gen@@YAXXZ
text$yc	SEGMENT
??__EksNewline@gen@@YAXXZ PROC				; gen::`dynamic initializer for 'ksNewline'', COMDAT

; 86   : const string ksNewline = "\n";

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	mov	ecx, OFFSET _ksNewline
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	push	OFFSET ??__FksNewline@gen@@YAXXZ	; gen::`dynamic atexit destructor for 'ksNewline''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__EksNewline@gen@@YAXXZ ENDP				; gen::`dynamic initializer for 'ksNewline''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__FksPathSeparator@gen@@YAXXZ
text$yd	SEGMENT
??__FksPathSeparator@gen@@YAXXZ PROC			; gen::`dynamic atexit destructor for 'ksPathSeparator'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET _ksPathSeparator
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__FksPathSeparator@gen@@YAXXZ ENDP			; gen::`dynamic atexit destructor for 'ksPathSeparator''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\common\msdefines.h
;	COMDAT ??__EksPathSeparator@gen@@YAXXZ
text$yc	SEGMENT
??__EksPathSeparator@gen@@YAXXZ PROC			; gen::`dynamic initializer for 'ksPathSeparator'', COMDAT

; 85   : const string ksPathSeparator = "\\";

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	OFFSET ??_C@_01KICIPPFI@?2?$AA@
	mov	ecx, OFFSET _ksPathSeparator
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	push	OFFSET ??__FksPathSeparator@gen@@YAXXZ	; gen::`dynamic atexit destructor for 'ksPathSeparator''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__EksPathSeparator@gen@@YAXXZ ENDP			; gen::`dynamic initializer for 'ksPathSeparator''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__FksCompiler@gen@@YAXXZ
text$yd	SEGMENT
??__FksCompiler@gen@@YAXXZ PROC				; gen::`dynamic atexit destructor for 'ksCompiler'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET _ksCompiler
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__FksCompiler@gen@@YAXXZ ENDP				; gen::`dynamic atexit destructor for 'ksCompiler''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\github\uclan-sparta\dissertation project\import\common\msdefines.h
;	COMDAT ??__EksCompiler@gen@@YAXXZ
text$yc	SEGMENT
??__EksCompiler@gen@@YAXXZ PROC				; gen::`dynamic initializer for 'ksCompiler'', COMDAT

; 80   : 	static const string ksCompiler = "Visual C++ 8.0 (2005) or greater";

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	OFFSET ??_C@_0CB@NBMGHEOM@Visual?5C?$CL?$CL?58?40?5?$CI2005?$CJ?5or?5greater@
	mov	ecx, OFFSET _ksCompiler
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	push	OFFSET ??__FksCompiler@gen@@YAXXZ	; gen::`dynamic atexit destructor for 'ksCompiler''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__EksCompiler@gen@@YAXXZ ENDP				; gen::`dynamic initializer for 'ksCompiler''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G_System_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G_System_error_category@std@@UAEPAXI@Z PROC		; std::_System_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_System_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_System_error_category@std@@UAEPAXI@Z ENDP		; std::_System_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1_System_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_System_error_category@std@@UAE@XZ PROC		; std::_System_error_category::~_System_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_System_error_category@std@@UAE@XZ ENDP		; std::_System_error_category::~_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::_System_error_category::default_error_condition, COMDAT
; _this$ = ecx

; 641  : 		{	// make error_condition for error code (generic if possible)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		if (_Syserror_map(_Errval))

	mov	esi, esp
	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	call	DWORD PTR __imp_?_Syserror_map@std@@YAPBDH@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN2@default_er

; 643  : 			return (error_condition(_Errval, generic_category()));

	call	?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category
	push	eax
	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@default_er

; 644  : 		else

	jmp	SHORT $LN3@default_er
$LN2@default_er:

; 645  : 			return (error_condition(_Errval, system_category()));

	call	?system_category@std@@YAABVerror_category@1@XZ ; std::system_category
	push	eax
	mov	eax, DWORD PTR __Errval$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@default_er:

; 646  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::_System_error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
tv69 = -232						; size = 4
$T1 = -224						; size = 4
__Name$ = -20						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_System_error_category::message, COMDAT
; _this$ = ecx

; 634  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 635  : 		const char *_Name = _Winerror_map(_Errcode);

	mov	esi, esp
	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	DWORD PTR __imp_?_Winerror_map@std@@YAPBDH@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __Name$[ebp], eax

; 636  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	eax, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	ecx, DWORD PTR tv69[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	edx, DWORD PTR $T1[ebp]
	or	edx, 1
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 637  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_System_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_System_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?name@_System_error_category@std@@UBEPBDXZ PROC		; std::_System_error_category::name, COMDAT
; _this$ = ecx

; 629  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 630  : 		return ("system");

	mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@

; 631  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?name@_System_error_category@std@@UBEPBDXZ ENDP		; std::_System_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_System_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_System_error_category@std@@QAE@XZ PROC		; std::_System_error_category::_System_error_category, COMDAT
; _this$ = ecx

; 624  : 	_System_error_category()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@

; 625  : 		{	// default constructor
; 626  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0_System_error_category@std@@QAE@XZ ENDP		; std::_System_error_category::_System_error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G_Iostream_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iostream_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Iostream_error_category@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1_Iostream_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_Iostream_error_category@std@@UAE@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iostream_error_category@std@@UAE@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT
; _this$ = ecx

; 611  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 612  : 		if (_Errcode == (int)io_errc::stream)

	cmp	DWORD PTR __Errcode$[ebp], 1
	jne	SHORT $LN2@message

; 613  : 			return ("iostream stream error");

	push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@message

; 614  : 		else

	jmp	SHORT $LN3@message
$LN2@message:

; 615  : 			return (_Generic_error_category::message(_Errcode));

	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
	mov	edx, DWORD PTR $T1[ebp]
	or	edx, 1
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@message:

; 616  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	; std::_Iostream_error_category::name, COMDAT
; _this$ = ecx

; 606  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 		return ("iostream");

	mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@

; 608  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Iostream_error_category@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Iostream_error_category@std@@QAE@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT
; _this$ = ecx

; 601  : 	_Iostream_error_category()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Generic_error_category@std@@QAE@XZ	; std::_Generic_error_category::_Generic_error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@

; 602  : 		{	// default constructor
; 603  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iostream_error_category@std@@QAE@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G_Generic_error_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		; std::_Generic_error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Generic_error_category@std@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G_Generic_error_category@std@@UAEPAXI@Z ENDP		; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1_Generic_error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_Generic_error_category@std@@UAE@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Generic_error_category@std@@UAE@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
tv69 = -232						; size = 4
$T1 = -224						; size = 4
__Name$ = -20						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT
; _this$ = ecx

; 590  : 		{	// convert to name of error

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 591  : 		const char *_Name = _Syserror_map(_Errcode);

	mov	esi, esp
	mov	eax, DWORD PTR __Errcode$[ebp]
	push	eax
	call	DWORD PTR __imp_?_Syserror_map@std@@YAPBDH@Z
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __Name$[ebp], eax

; 592  : 		return (string(_Name != 0 ? _Name : "unknown error"));

	cmp	DWORD PTR __Name$[ebp], 0
	je	SHORT $LN3@message
	mov	eax, DWORD PTR __Name$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@message
$LN3@message:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
$LN4@message:
	mov	ecx, DWORD PTR tv69[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	edx, DWORD PTR $T1[ebp]
	or	edx, 1
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 593  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?name@_Generic_error_category@std@@UBEPBDXZ PROC	; std::_Generic_error_category::name, COMDAT
; _this$ = ecx

; 585  : 		{	// get name of category

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		return ("generic");

	mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@

; 587  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?name@_Generic_error_category@std@@UBEPBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Generic_error_category@std@@QAE@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT
; _this$ = ecx

; 580  : 	_Generic_error_category()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0error_category@std@@QAE@XZ		; std::error_category::error_category
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@

; 581  : 		{	// default constructor
; 582  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Generic_error_category@std@@QAE@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_condition@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv78 = -208						; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??8error_condition@std@@QBE_NABV01@@Z PROC		; std::error_condition::operator==, COMDAT
; _this$ = ecx

; 376  : 		{	// test if *this == _Right

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 377  : 		return (category() == _Right.category()
; 378  : 			&& value() == _Right.value());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category
	mov	ecx, eax
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@operator
	mov	ecx, DWORD PTR _this$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?value@error_condition@std@@QBEHXZ	; std::error_condition::value
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv78[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv78[ebp]

; 379  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_condition@std@@QBE_NABV01@@Z ENDP		; std::error_condition::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT
; _this$ = ecx

; 354  : 		{	// get category

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 355  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 356  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_condition@std@@QBEABVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?value@error_condition@std@@QBEHXZ PROC			; std::error_condition::value, COMDAT
; _this$ = ecx

; 349  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 351  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_condition@std@@QBEHXZ ENDP			; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QAE@HABVerror_category@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val$ = 8						; size = 4
__Cat$ = 12						; size = 4
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT
; _this$ = ecx

; 316  : 		{	// construct from error code and category

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Cat$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 317  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0error_condition@std@@QAE@HABVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QBEABVerror_category@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?category@error_code@std@@QBEABVerror_category@2@XZ PROC ; std::error_code::category, COMDAT
; _this$ = ecx

; 256  : 		{	// get category

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  : 		return (*_Mycat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 258  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?category@error_code@std@@QBEABVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?value@error_code@std@@QBEHXZ PROC			; std::error_code::value, COMDAT
; _this$ = ecx

; 251  : 		{	// get error code

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 		return (_Myval);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 253  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?value@error_code@std@@QBEHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gerror_category@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gerror_category@std@@UAEPAXI@Z PROC			; std::error_category::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1error_category@std@@UAE@XZ		; std::error_category::~error_category
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gerror_category@std@@UAEPAXI@Z ENDP			; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??8error_category@std@@QBE_NABV01@@Z PROC		; std::error_category::operator==, COMDAT
; _this$ = ecx

; 184  : 		{	// compare categories for equality

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 185  : 		return (this == &_Right);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv65[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv65[ebp]

; 186  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??8error_category@std@@QBE_NABV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
tv74 = -208						; size = 4
_this$ = -8						; size = 4
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 415  : 	{	// test if conditions same for this category

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 416  : 	return (*this == _Code.category() && _Code.value() == _Errval);

	mov	ecx, DWORD PTR __Code$[ebp]
	call	?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8error_category@std@@QBE_NABV01@@Z	; std::error_category::operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@equivalent
	mov	ecx, DWORD PTR __Code$[ebp]
	call	?value@error_code@std@@QBEHXZ		; std::error_code::value
	cmp	eax, DWORD PTR __Errval$[ebp]
	jne	SHORT $LN3@equivalent
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@equivalent
$LN3@equivalent:
	mov	DWORD PTR tv74[ebp], 0
$LN4@equivalent:
	mov	al, BYTE PTR tv74[ebp]

; 417  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -216						; size = 8
_this$ = -8						; size = 4
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 408  : 	{	// test if error code same condition

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 409  : 	return (default_error_condition(_Errval) == _Cond);

	mov	eax, DWORD PTR __Cond$[ebp]
	push	eax
	mov	esi, esp
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, eax
	call	??8error_condition@std@@QBE_NABV01@@Z	; std::error_condition::operator==

; 410  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 401  : 	{	// make error_condition for error code

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 402  : 	return (error_condition(_Errval, *this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Errval$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 403  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 167  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 168  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0error_category@std@@QAE@XZ PROC			; std::error_category::error_category, COMDAT
; _this$ = ecx

; 162  : 	error_category()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@

; 163  : 		{	// default constructor
; 164  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0error_category@std@@QAE@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?system_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?system_category@std@@YAABVerror_category@1@XZ PROC	; std::system_category, COMDAT

; 679  : 	{	// get system_category

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 680  : 	return (_Error_objects<int>::_System_object);

	mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_Error_objects<int>::_System_object

; 681  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?system_category@std@@YAABVerror_category@1@XZ ENDP	; std::system_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\system_error
;	COMDAT ?generic_category@std@@YAABVerror_category@1@XZ
_TEXT	SEGMENT
?generic_category@std@@YAABVerror_category@1@XZ PROC	; std::generic_category, COMDAT

; 669  : 	{	// get generic_category

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 670  : 	return (_Error_objects<int>::_Generic_object);

	mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Error_objects<int>::_Generic_object

; 671  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?generic_category@std@@YAABVerror_category@1@XZ ENDP	; std::generic_category
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__File$ = 12						; size = 4
__Line$ = 16						; size = 4
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z PROC		; std::_Debug_pointer<char>, COMDAT

; 610  : 	{	// test iterator for non-singularity, const pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 611  : 	if (_First == 0)

	cmp	DWORD PTR __First$[ebp], 0
	jne	SHORT $LN2@Debug_poin

; 612  : 		_DEBUG_ERROR2("invalid null pointer", _File, _Line);

	mov	esi, esp
	mov	eax, DWORD PTR __Line$[ebp]
	push	eax
	mov	ecx, DWORD PTR __File$[ebp]
	push	ecx
	push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
	call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Debug_poin:

; 613  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ENDP		; std::_Debug_pointer<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT
; _this$ = ecx

; 2275 : 		{	// report an out_of_range error

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2276 : 		_Xout_of_range("invalid string position");

	mov	esi, esp
	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Xran:

; 2277 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 2270 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2271 : 		_Xlength_error("string too long");

	mov	esi, esp
	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Xlen:

; 2272 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
_TEXT	SEGMENT
$T1 = -233						; size = 1
$T2 = -221						; size = 1
__Ptr$3 = -20						; size = 4
_this$ = -8						; size = 4
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2253 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2254 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Ptr$3[ebp], ecx

; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>

; 2260 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$3[ebp]
	push	ecx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Tidy:

; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$3[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN3@Tidy:

; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 15			; 0000000fH

; 2266 : 		_Eos(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2267 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 2237 : 		{	// test if _Ptr points inside string

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)

	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	cmp	DWORD PTR __Ptr$[ebp], eax
	jb	SHORT $LN2@Inside
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+20]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
$LN2@Inside:

; 2240 : 			return (false);	// don't ask

	xor	al, al
	jmp	SHORT $LN4@Inside

; 2241 : 		else

	jmp	SHORT $LN4@Inside
$LN3@Inside:

; 2242 : 			return (true);

	mov	al, 1
$LN4@Inside:

; 2243 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
_TEXT	SEGMENT
tv136 = -208						; size = 4
tv129 = -208						; size = 4
_this$ = -8						; size = 4
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2224 : 		if (max_size() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN6@Grow

; 2225 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN6@Grow:

; 2226 : 		if (this->_Myres < _Newsize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	ecx, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN5@Grow

; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	jmp	SHORT $LN4@Grow
$LN5@Grow:

; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

	movzx	eax, BYTE PTR __Trim$[ebp]
	test	eax, eax
	je	SHORT $LN3@Grow
	cmp	DWORD PTR __Newsize$[ebp], 16		; 00000010H
	jae	SHORT $LN3@Grow

; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jae	SHORT $LN9@Grow
	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR tv129[ebp], edx
	jmp	SHORT $LN10@Grow
$LN9@Grow:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR tv129[ebp], ecx
$LN10@Grow:
	mov	edx, DWORD PTR tv129[ebp]
	push	edx
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
	jmp	SHORT $LN4@Grow
$LN3@Grow:

; 2231 : 		else if (_Newsize == 0)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jne	SHORT $LN4@Grow

; 2232 : 			_Eos(0);	// new size is zero, just null terminate

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@Grow:

; 2233 : 		return (0 < _Newsize);	// return true only if more work to do

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN11@Grow
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN12@Grow
$LN11@Grow:
	mov	DWORD PTR tv136[ebp], 0
$LN12@Grow:
	mov	al, BYTE PTR tv136[ebp]
$LN8@Grow:

; 2234 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2217 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+20], ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2219 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
_TEXT	SEGMENT
tv205 = -292						; size = 4
tv203 = -292						; size = 4
tv204 = -288						; size = 4
tv202 = -288						; size = 4
$T2 = -277						; size = 1
$T3 = -265						; size = 1
$T4 = -253						; size = 1
__Ptr$ = -52						; size = 4
__Newres$ = -40						; size = 4
_this$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-292]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	eax, DWORD PTR __Newsize$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Newres$[ebp], eax

; 2184 : 		if (max_size() < _Newres)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Newres$[ebp]
	jae	SHORT $LN9@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	eax, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], eax
	jmp	SHORT $LN8@Copy
$LN9@Copy:

; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)

	mov	eax, DWORD PTR __Newres$[ebp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	shr	ecx, 1
	cmp	ecx, eax
	ja	SHORT $LN7@Copy
	jmp	SHORT $LN8@Copy
$LN7@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+24]
	shr	esi, 1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, esi
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], eax
	ja	SHORT $LN5@Copy

; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	shr	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR __Newres$[ebp], ecx

; 2191 : 		else

	jmp	SHORT $LN8@Copy
$LN5@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	mov	DWORD PTR __Newres$[ebp], eax
$LN8@Copy:

; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv202[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv202[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv203[ebp], eax
	mov	edx, DWORD PTR tv203[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN12@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:

; 2197 : 		_CATCH_ALL

	mov	DWORD PTR __$EHRec$[ebp], esp

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	eax, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR __Newres$[ebp], eax

; 2199 : 			_TRY_BEGIN

	mov	BYTE PTR __$EHRec$[ebp+12], 2

; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	DWORD PTR tv204[ebp], eax
	mov	ecx, DWORD PTR __Newres$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR tv204[ebp]
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR tv205[ebp], eax
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR __Ptr$[ebp], edx
	jmp	SHORT $LN14@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8

; 2204 : 			_CATCH_END

	mov	eax, $LN17@Copy
	ret	0
$LN14@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
$LN17@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], 1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2:

; 2205 : 		_CATCH_END

	mov	eax, $LN19@Copy
	ret	0
$LN12@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
$LN19@Copy:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3:

; 2206 : 
; 2207 : 		if (0 < _Oldlen)

	cmp	DWORD PTR __Oldlen$[ebp], 0
	jbe	SHORT $LN1@Copy

; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH
$LN1@Copy:

; 2210 : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);

	lea	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>

; 2212 : 		this->_Myres = _Newres;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newres$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 2213 : 		_Eos(_Oldlen);

	mov	eax, DWORD PTR __Oldlen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN11@Copy:

; 2214 : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@Copy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 292				; 00000124H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN23@Copy:
	DD	1
	DD	$LN22@Copy
$LN22@Copy:
	DD	-52					; ffffffccH
	DD	4
	DD	$LN20@Copy
$LN20@Copy:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-296]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
tv75 = -232						; size = 4
$T1 = -221						; size = 1
__Num$ = -20						; size = 4
_this$ = -8						; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1737 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1738 : 		size_type _Num = this->_Getal().max_size();

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size
	mov	DWORD PTR __Num$[ebp], eax

; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);

	cmp	DWORD PTR __Num$[ebp], 1
	ja	SHORT $LN3@max_size
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@max_size
$LN3@max_size:
	mov	eax, DWORD PTR __Num$[ebp]
	sub	eax, 1
	mov	DWORD PTR tv75[ebp], eax
$LN4@max_size:
	mov	eax, DWORD PTR tv75[ebp]

; 1740 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1732 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1733 : 		return (this->_Mysize);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]

; 1734 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Newsize$1 = -32					; size = 4
__Ptr$2 = -20						; size = 4
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1317 : 		{	// erase elements [_Off, _Off + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1318 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN4@erase

; 1319 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN4@erase:

; 1320 : 		if (this->_Mysize - _Off <= _Count)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR __Off$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	ja	SHORT $LN3@erase

; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
	jmp	SHORT $LN2@erase
$LN3@erase:

; 1322 : 		else if (0 < _Count)

	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN2@erase

; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR __Ptr$2[ebp], eax

; 1325 : 			size_type _Newsize = this->_Mysize - _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Newsize$1[ebp], ecx

; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	eax, DWORD PTR __Newsize$1[ebp]
	sub	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$2[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$2[ebp]
	push	edx
	call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move
	add	esp, 12					; 0000000cH

; 1327 : 			_Eos(_Newsize);

	mov	eax, DWORD PTR __Newsize$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@erase:

; 1328 : 			}
; 1329 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN6@erase:

; 1330 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 1309 : 		{	// erase elements [_Off, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1310 : 		if (this->_Mysize < _Off)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR __Off$[ebp]
	jae	SHORT $LN1@erase

; 1311 : 			_Xran();	// _Off off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN1@erase:

; 1312 : 		_Eos(_Off);

	mov	eax, DWORD PTR __Off$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN3@erase:

; 1314 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1142 : 		{	// assign [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1143 : 		_DEBUG_POINTER(_Ptr);

	push	1143					; 00000477H
	push	OFFSET ??_C@_1IO@BLKJFPEG@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z	; std::_Debug_pointer<char>
	add	esp, 12					; 0000000cH

; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$char_traits@D@std@@SAIPBD@Z	; std::char_traits<char>::length
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)

	cmp	DWORD PTR __Count$[ebp], 0
	je	SHORT $LN3@assign

; 1126 : 			_DEBUG_POINTER(_Ptr);

	push	1126					; 00000466H
	push	OFFSET ??_C@_1IO@BLKJFPEG@?$AAc?$AA?3?$AA?2?$AAp?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAf?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAm?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z	; std::_Debug_pointer<char>
	add	esp, 12					; 0000000cH
$LN3@assign:

; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	ecx, DWORD PTR __Ptr$[ebp]
	sub	ecx, eax
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	jmp	SHORT $LN4@assign
$LN2@assign:

; 1132 : 
; 1133 : 		if (_Grow(_Count))

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@assign

; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1136 : 			_Eos(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN1@assign:

; 1137 : 			}
; 1138 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN4@assign:

; 1139 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Num$ = -20						; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1105 : 		if (_Right.size() < _Roff)

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	cmp	eax, DWORD PTR __Roff$[ebp]
	jae	SHORT $LN5@assign

; 1106 : 			_Xran();	// _Roff off end

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN5@assign:

; 1107 : 		size_type _Num = _Right.size() - _Roff;

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
	sub	eax, DWORD PTR __Roff$[ebp]
	mov	DWORD PTR __Num$[ebp], eax

; 1108 : 		if (_Count < _Num)

	mov	eax, DWORD PTR __Count$[ebp]
	cmp	eax, DWORD PTR __Num$[ebp]
	jae	SHORT $LN4@assign

; 1109 : 			_Num = _Count;	// trim _Num to size

	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Num$[ebp], eax
$LN4@assign:

; 1110 : 
; 1111 : 		if (this == &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	jne	SHORT $LN3@assign

; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

	mov	eax, DWORD PTR __Roff$[ebp]
	add	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	mov	ecx, DWORD PTR __Roff$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	jmp	SHORT $LN2@assign
$LN3@assign:

; 1113 : 		else if (_Grow(_Num))

	push	0
	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@assign

; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	add	eax, DWORD PTR __Roff$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy
	add	esp, 12					; 0000000cH

; 1117 : 			_Eos(_Num);

	mov	eax, DWORD PTR __Num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN2@assign:

; 1118 : 			}
; 1119 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
$LN7@assign:

; 1120 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 963  : 		{	// destroy the string

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 964  : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 965  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
$T2 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 792  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 793  : 		assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 794  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T2 = -233						; size = 1
$T3 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 733  : 		{	// construct by copying _Right

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<char> >::select_on_container_copy_construction
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 734  : 		_Tidy();

	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 735  : 		assign(_Right, 0, npos);

	mov	eax, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
	push	eax
	push	0
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 736  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-244]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 688  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 689  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 690  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Alproxy$ = -21					; size = 1
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Free_proxy, COMDAT
; _this$ = ecx

; 677  : 		{	// destroy proxy

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-220]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 678  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 679  : 			_Alproxy;

	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>

; 680  : 		this->_Orphan_all();

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 681  : 		_Alproxy.destroy(this->_Myproxy);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>

; 682  : 		_Alproxy.deallocate(this->_Myproxy, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate

; 683  : 		this->_Myproxy = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 684  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Free_proxy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Free_proxy:
	DD	1
	DD	$LN4@Free_proxy
$LN4@Free_proxy:
	DD	-21					; ffffffebH
	DD	1
	DD	$LN3@Free_proxy
$LN3@Free_proxy:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T1 = -232						; size = 8
__Alproxy$ = -21					; size = 1
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 668  : 		{	// construct proxy from _Alval

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-236]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 669  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 670  : 			_Alproxy;

	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>

; 671  : 		this->_Myproxy = _Alproxy.allocate(1);

	push	1
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 672  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());

	lea	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@XZ		; std::_Container_proxy::_Container_proxy
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR __Alproxy$[ebp]
	call	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>

; 673  : 		this->_Myproxy->_Mycont = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx

; 674  : 		}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Alloc_prox
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@Alloc_prox:
	DD	1
	DD	$LN4@Alloc_prox
$LN4@Alloc_prox:
	DD	-21					; ffffffebH
	DD	1
	DD	$LN3@Alloc_prox
$LN3@Alloc_prox:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 654  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 655  : 		_Free_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Free_proxy

; 656  : 		}

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___formal$ = 8						; size = 4
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 648  : 	_String_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 649  : 		{	// construct allocator from _Al
; 650  : 		_Alloc_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_Alloc_proxy

; 651  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >::_String_alloc<0,std::_String_base_types<char,std::allocator<char> > >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
tv72 = -208						; size = 4
_this$ = -8						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 521  : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 522  : 		return (this->_BUF_SIZE <= this->_Myres
; 523  : 			? _STD addressof(*this->_Bx._Ptr)
; 524  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 525  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
tv72 = -208						; size = 4
_this$ = -8						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 514  : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 515  : 		return (this->_BUF_SIZE <= this->_Myres
; 516  : 			? _STD addressof(*this->_Bx._Ptr)
; 517  : 			: this->_Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$addressof@D@std@@YAPADAAD@Z		; std::addressof<char>
	add	esp, 4
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR tv72[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv72[ebp]

; 518  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 496  : 	_String_val()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0_Container_base12@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 497  : 		{	// initialize values
; 498  : 		_Mysize = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 499  : 		_Myres = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0

; 500  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 913  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 914  : 		return (_Mytraits::max_size(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
	add	esp, 4

; 915  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 886  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 887  : 		_Mybase::deallocate(_Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate

; 888  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 875  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 876  : 		return (_Mybase::allocate(_Count));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 877  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 835  : 		{	// construct by copying base

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@ABV01@@Z	; std::allocator<char>::allocator<char>

; 836  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 830  : 		{	// construct default allocator (do nothing)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>

; 831  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@XZ
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@XZ PROC ; std::_Wrap_alloc<std::allocator<char> >::select_on_container_copy_construction, COMDAT
; _this$ = ecx

; 806  : 		{	// get allocator to use

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 807  : 		return (_Mytraits::select_on_container_copy_construction(*this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 808  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBE?AU12@XZ ENDP ; std::_Wrap_alloc<std::allocator<char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z PROC ; std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction, COMDAT

; 767  : 		{	// get allocator to use

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 768  : 		return (_Al.select_on_container_copy_construction());

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?select_on_container_copy_construction@?$allocator@D@std@@QBE?AV12@XZ ; std::allocator<char>::select_on_container_copy_construction
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 769  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ENDP ; std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 761  : 		{	// get maximum size

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 762  : 		return (_Al.max_size());

	mov	ecx, DWORD PTR __Al$[ebp]
	call	?max_size@?$allocator@D@std@@QBEIXZ	; std::allocator<char>::max_size

; 763  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 627  : 		{	// estimate maximum array size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 629  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 590  : 		{	// allocate array of _Count elements

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 591  : 		return (_Allocate(_Count, (pointer)0));

	push	0
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Allocate@D@std@@YAPADIPAD@Z		; std::_Allocate<char>
	add	esp, 8

; 592  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 585  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 586  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 587  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 569  : 	allocator(const allocator<_Ty>&) _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 570  : 		{	// construct by copying (do nothing)
; 571  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 565  : 	allocator() _THROW0()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$allocator@D@std@@QBE?AV12@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?select_on_container_copy_construction@?$allocator@D@std@@QBE?AV12@XZ PROC ; std::allocator<char>::select_on_container_copy_construction, COMDAT
; _this$ = ecx

; 544  : 		{	// return this allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 545  : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$allocator@D@std@@QAE@ABV01@@Z	; std::allocator<char>::allocator<char>
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 546  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?select_on_container_copy_construction@?$allocator@D@std@@QBE?AV12@XZ ENDP ; std::allocator<char>::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -197						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 67   : 		{	// construct from pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 68   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -197						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 563  : 		{	// assign an element

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 564  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 565  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -196						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 551  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 552  : 		return (_Count == 0 ? _First1
; 553  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@move
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@move
$LN3@move:
	mov	esi, esp
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv69[ebp], eax
$LN4@move:
	mov	eax, DWORD PTR tv69[ebp]

; 554  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
tv69 = -196						; size = 4
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 528  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 529  : 		return (_Count == 0 ? _First1
; 530  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN3@copy
	mov	eax, DWORD PTR __First1$[ebp]
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN4@copy
$LN3@copy:
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv69[ebp], eax
$LN4@copy:
	mov	eax, DWORD PTR tv69[ebp]

; 531  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
tv68 = -196						; size = 4
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 521  : 		{	// find length of null-terminated string

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 522  : 		return (*_First == 0 ? 0
; 523  : 			: _CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@length
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@length
$LN3@length:
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	mov	DWORD PTR tv68[ebp], eax
$LN4@length:
	mov	eax, DWORD PTR tv68[ebp]

; 524  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC					; operator delete, COMDAT

; 64   : 	{	// delete if placement new fails

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 65   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\new
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 59   : 	{	// construct array with placement at _Where

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 60   : 	return (_Where);

	mov	eax, DWORD PTR __Where$[ebp]

; 61   : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv76 = -204						; size = 4
tv74 = -200						; size = 8
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 434  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sqrt
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv76 = -204						; size = 4
tv74 = -200						; size = 8
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 430  :         {return ((float)sin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv76 = -204						; size = 4
tv74 = -200						; size = 8
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 410  :         {return ((float)cos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_cos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _atan2f
_TEXT	SEGMENT
tv79 = -204						; size = 4
tv77 = -200						; size = 8
__Y$ = 8						; size = 4
__X$ = 12						; size = 4
_atan2f	PROC						; COMDAT

; 406  :         {return ((float)atan2((double)_Y, (double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	cvtss2sd xmm0, DWORD PTR __Y$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_atan2
	add	esp, 16					; 00000010H
	fstp	QWORD PTR tv77[ebp]
	movsd	xmm0, QWORD PTR tv77[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv79[ebp], xmm0
	fld	DWORD PTR tv79[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_atan2f	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _acosf
_TEXT	SEGMENT
tv76 = -204						; size = 4
tv74 = -200						; size = 8
__X$ = 8						; size = 4
_acosf	PROC						; COMDAT

; 400  :         {return ((float)acos((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_acos
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_acosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv76 = -204						; size = 4
tv74 = -200						; size = 8
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 392  :         {return ((float)fabs((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	QWORD PTR tv74[ebp]
	movsd	xmm0, QWORD PTR tv74[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv76[ebp], xmm0
	fld	DWORD PTR tv76[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
END
