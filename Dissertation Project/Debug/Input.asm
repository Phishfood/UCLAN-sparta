; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61030.0 

	TITLE	C:\Users\Simon\Documents\Visual Studio 2012\Projects\Dissertation Project\Dissertation Project\Input.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?g_aiKeyStates@@3PAW4EKeyState@@A		; g_aiKeyStates
_BSS	SEGMENT
?g_aiKeyStates@@3PAW4EKeyState@@A DD 0100H DUP (?)	; g_aiKeyStates
_BSS	ENDS
PUBLIC	?InitInput@@YAXXZ				; InitInput
PUBLIC	?KeyDownEvent@@YAXW4EKeyState@@@Z		; KeyDownEvent
PUBLIC	?KeyUpEvent@@YAXW4EKeyState@@@Z			; KeyUpEvent
PUBLIC	?KeyHit@@YA_NW4EKeyCode@@@Z			; KeyHit
PUBLIC	?KeyHeld@@YA_NW4EKeyCode@@@Z			; KeyHeld
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\visual studio 2012\projects\dissertation project\dissertation project\input.cpp
;	COMDAT ?KeyHeld@@YA_NW4EKeyCode@@@Z
_TEXT	SEGMENT
_eKeyCode$ = 8						; size = 4
?KeyHeld@@YA_NW4EKeyCode@@@Z PROC			; KeyHeld, COMDAT

; 74   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 75   : 	if (g_aiKeyStates[eKeyCode] == kNotPressed)

	mov	eax, DWORD PTR _eKeyCode$[ebp]
	cmp	DWORD PTR ?g_aiKeyStates@@3PAW4EKeyState@@A[eax*4], 0
	jne	SHORT $LN1@KeyHeld

; 76   : 	{
; 77   : 		return false;

	xor	al, al
	jmp	SHORT $LN2@KeyHeld
$LN1@KeyHeld:

; 78   : 	}
; 79   : 	g_aiKeyStates[eKeyCode] = kHeld;

	mov	eax, DWORD PTR _eKeyCode$[ebp]
	mov	DWORD PTR ?g_aiKeyStates@@3PAW4EKeyState@@A[eax*4], 2

; 80   : 	return true;

	mov	al, 1
$LN2@KeyHeld:

; 81   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?KeyHeld@@YA_NW4EKeyCode@@@Z ENDP			; KeyHeld
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\visual studio 2012\projects\dissertation project\dissertation project\input.cpp
;	COMDAT ?KeyHit@@YA_NW4EKeyCode@@@Z
_TEXT	SEGMENT
_eKeyCode$ = 8						; size = 4
?KeyHit@@YA_NW4EKeyCode@@@Z PROC			; KeyHit, COMDAT

; 61   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 62   : 	if (g_aiKeyStates[eKeyCode] == kPressed)

	mov	eax, DWORD PTR _eKeyCode$[ebp]
	cmp	DWORD PTR ?g_aiKeyStates@@3PAW4EKeyState@@A[eax*4], 1
	jne	SHORT $LN1@KeyHit

; 63   : 	{
; 64   : 		g_aiKeyStates[eKeyCode] = kHeld;

	mov	eax, DWORD PTR _eKeyCode$[ebp]
	mov	DWORD PTR ?g_aiKeyStates@@3PAW4EKeyState@@A[eax*4], 2

; 65   : 		return true;

	mov	al, 1
	jmp	SHORT $LN2@KeyHit
$LN1@KeyHit:

; 66   : 	}
; 67   : 	return false;

	xor	al, al
$LN2@KeyHit:

; 68   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?KeyHit@@YA_NW4EKeyCode@@@Z ENDP			; KeyHit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\visual studio 2012\projects\dissertation project\dissertation project\input.cpp
;	COMDAT ?KeyUpEvent@@YAXW4EKeyState@@@Z
_TEXT	SEGMENT
_Key$ = 8						; size = 4
?KeyUpEvent@@YAXW4EKeyState@@@Z PROC			; KeyUpEvent, COMDAT

; 49   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 50   : 	g_aiKeyStates[Key] = kNotPressed;

	mov	eax, DWORD PTR _Key$[ebp]
	mov	DWORD PTR ?g_aiKeyStates@@3PAW4EKeyState@@A[eax*4], 0

; 51   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?KeyUpEvent@@YAXW4EKeyState@@@Z ENDP			; KeyUpEvent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\visual studio 2012\projects\dissertation project\dissertation project\input.cpp
;	COMDAT ?KeyDownEvent@@YAXW4EKeyState@@@Z
_TEXT	SEGMENT
_Key$ = 8						; size = 4
?KeyDownEvent@@YAXW4EKeyState@@@Z PROC			; KeyDownEvent, COMDAT

; 36   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 37   : 	if (g_aiKeyStates[Key] == kNotPressed)

	mov	eax, DWORD PTR _Key$[ebp]
	cmp	DWORD PTR ?g_aiKeyStates@@3PAW4EKeyState@@A[eax*4], 0
	jne	SHORT $LN2@KeyDownEve

; 38   : 	{
; 39   : 		g_aiKeyStates[Key] = kPressed;

	mov	eax, DWORD PTR _Key$[ebp]
	mov	DWORD PTR ?g_aiKeyStates@@3PAW4EKeyState@@A[eax*4], 1

; 40   : 	}
; 41   : 	else

	jmp	SHORT $LN3@KeyDownEve
$LN2@KeyDownEve:

; 42   : 	{
; 43   : 		g_aiKeyStates[Key] = kHeld;

	mov	eax, DWORD PTR _Key$[ebp]
	mov	DWORD PTR ?g_aiKeyStates@@3PAW4EKeyState@@A[eax*4], 2
$LN3@KeyDownEve:

; 44   : 	}
; 45   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?KeyDownEvent@@YAXW4EKeyState@@@Z ENDP			; KeyDownEvent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\simon\documents\visual studio 2012\projects\dissertation project\dissertation project\input.cpp
;	COMDAT ?InitInput@@YAXXZ
_TEXT	SEGMENT
_i$1 = -8						; size = 4
?InitInput@@YAXXZ PROC					; InitInput, COMDAT

; 22   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 23   : 	// Initialise input data
; 24   : 	for (int i = 0; i < kMaxKeyCodes; ++i)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@InitInput
$LN2@InitInput:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@InitInput:
	cmp	DWORD PTR _i$1[ebp], 256		; 00000100H
	jge	SHORT $LN4@InitInput

; 25   : 	{
; 26   : 		g_aiKeyStates[i] = kNotPressed;

	mov	eax, DWORD PTR _i$1[ebp]
	mov	DWORD PTR ?g_aiKeyStates@@3PAW4EKeyState@@A[eax*4], 0

; 27   : 	}

	jmp	SHORT $LN2@InitInput
$LN4@InitInput:

; 28   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?InitInput@@YAXXZ ENDP					; InitInput
_TEXT	ENDS
END
